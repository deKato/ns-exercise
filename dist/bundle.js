/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),o=n(6026),i=n(4372),a=n(5327),u=n(4097),l=n(4109),s=n(7985),c=n(7874),f=n(2648),d=n(644),p=n(205);e.exports=function(e){return new Promise((function(t,n){var h,m=e.data,v=e.headers,y=e.responseType;function g(){e.cancelToken&&e.cancelToken.unsubscribe(h),e.signal&&e.signal.removeEventListener("abort",h)}r.isFormData(m)&&r.isStandardBrowserEnv()&&delete v["Content-Type"];var b=new XMLHttpRequest;if(e.auth){var w=e.auth.username||"",S=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";v.Authorization="Basic "+btoa(w+":"+S)}var k=u(e.baseURL,e.url);function E(){if(b){var r="getAllResponseHeaders"in b?l(b.getAllResponseHeaders()):null,i={data:y&&"text"!==y&&"json"!==y?b.response:b.responseText,status:b.status,statusText:b.statusText,headers:r,config:e,request:b};o((function(e){t(e),g()}),(function(e){n(e),g()}),i),b=null}}if(b.open(e.method.toUpperCase(),a(k,e.params,e.paramsSerializer),!0),b.timeout=e.timeout,"onloadend"in b?b.onloadend=E:b.onreadystatechange=function(){b&&4===b.readyState&&(0!==b.status||b.responseURL&&0===b.responseURL.indexOf("file:"))&&setTimeout(E)},b.onabort=function(){b&&(n(new f("Request aborted",f.ECONNABORTED,e,b)),b=null)},b.onerror=function(){n(new f("Network Error",f.ERR_NETWORK,e,b,b)),b=null},b.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||c;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new f(t,r.clarifyTimeoutError?f.ETIMEDOUT:f.ECONNABORTED,e,b)),b=null},r.isStandardBrowserEnv()){var x=(e.withCredentials||s(k))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;x&&(v[e.xsrfHeaderName]=x)}"setRequestHeader"in b&&r.forEach(v,(function(e,t){void 0===m&&"content-type"===t.toLowerCase()?delete v[t]:b.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(b.withCredentials=!!e.withCredentials),y&&"json"!==y&&(b.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&b.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&b.upload&&b.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(h=function(e){b&&(n(!e||e&&e.type?new d:e),b.abort(),b=null)},e.cancelToken&&e.cancelToken.subscribe(h),e.signal&&(e.signal.aborted?h():e.signal.addEventListener("abort",h))),m||(m=null);var C=p(k);C&&-1===["http","https","file"].indexOf(C)?n(new f("Unsupported protocol "+C+":",f.ERR_BAD_REQUEST,e)):b.send(m)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),o=n(1849),i=n(321),a=n(7185),u=function e(t){var n=new i(t),u=o(i.prototype.request,n);return r.extend(u,i.prototype,n),r.extend(u,n),u.create=function(n){return e(a(t,n))},u}(n(5546));u.Axios=i,u.CanceledError=n(644),u.CancelToken=n(4972),u.isCancel=n(6502),u.VERSION=n(7288).version,u.toFormData=n(7675),u.AxiosError=n(2648),u.Cancel=u.CanceledError,u.all=function(e){return Promise.all(e)},u.spread=n(8713),u.isAxiosError=n(6268),e.exports=u,e.exports.default=u},4972:(e,t,n)=>{"use strict";var r=n(644);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},644:(e,t,n)=>{"use strict";var r=n(2648);function o(e){r.call(this,null==e?"canceled":e,r.ERR_CANCELED),this.name="CanceledError"}n(4867).inherits(o,r,{__CANCEL__:!0}),e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),o=n(5327),i=n(782),a=n(3572),u=n(7185),l=n(4097),s=n(4875),c=s.validators;function f(e){this.defaults=e,this.interceptors={request:new i,response:new i}}f.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=u(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&s.assertOptions(n,{silentJSONParsing:c.transitional(c.boolean),forcedJSONParsing:c.transitional(c.boolean),clarifyTimeoutError:c.transitional(c.boolean)},!1);var r=[],o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var i,l=[];if(this.interceptors.response.forEach((function(e){l.push(e.fulfilled,e.rejected)})),!o){var f=[a,void 0];for(Array.prototype.unshift.apply(f,r),f=f.concat(l),i=Promise.resolve(t);f.length;)i=i.then(f.shift(),f.shift());return i}for(var d=t;r.length;){var p=r.shift(),h=r.shift();try{d=p(d)}catch(e){h(e);break}}try{i=a(d)}catch(e){return Promise.reject(e)}for(;l.length;)i=i.then(l.shift(),l.shift());return i},f.prototype.getUri=function(e){e=u(this.defaults,e);var t=l(e.baseURL,e.url);return o(t,e.params,e.paramsSerializer)},r.forEach(["delete","get","head","options"],(function(e){f.prototype[e]=function(t,n){return this.request(u(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(u(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}f.prototype[e]=t(),f.prototype[e+"Form"]=t(!0)})),e.exports=f},2648:(e,t,n)=>{"use strict";var r=n(4867);function o(e,t,n,r,o){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}r.inherits(o,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var i=o.prototype,a={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){a[e]={value:e}})),Object.defineProperties(o,a),Object.defineProperty(i,"isAxiosError",{value:!0}),o.from=function(e,t,n,a,u,l){var s=Object.create(i);return r.toFlatObject(e,s,(function(e){return e!==Error.prototype})),o.call(s,e.message,t,n,a,u),s.name=e.name,l&&Object.assign(s,l),s},e.exports=o},782:(e,t,n)=>{"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,n)=>{"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},3572:(e,t,n)=>{"use strict";var r=n(4867),o=n(8527),i=n(6502),a=n(5546),u=n(644);function l(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new u}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return l(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={};function o(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function i(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(e[n],t[n])}function a(e){if(!r.isUndefined(t[e]))return o(void 0,t[e])}function u(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(void 0,t[n])}function l(n){return n in t?o(e[n],t[n]):n in e?o(void 0,e[n]):void 0}var s={url:a,method:a,data:a,baseURL:u,transformRequest:u,transformResponse:u,paramsSerializer:u,timeout:u,timeoutMessage:u,withCredentials:u,adapter:u,responseType:u,xsrfCookieName:u,xsrfHeaderName:u,onUploadProgress:u,onDownloadProgress:u,decompress:u,maxContentLength:u,maxBodyLength:u,beforeRedirect:u,transport:u,httpAgent:u,httpsAgent:u,cancelToken:u,socketPath:u,responseEncoding:u,validateStatus:l};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=s[e]||i,o=t(e);r.isUndefined(o)&&t!==l||(n[e]=o)})),n}},6026:(e,t,n)=>{"use strict";var r=n(2648);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(new r("Request failed with status code "+n.status,[r.ERR_BAD_REQUEST,r.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867),o=n(5546);e.exports=function(e,t,n){var i=this||o;return r.forEach(n,(function(n){e=n.call(i,e,t)})),e}},5546:(e,t,n)=>{"use strict";var r=n(4867),o=n(6016),i=n(2648),a=n(7874),u=n(7675),l={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var c,f={transitional:a,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(c=n(5448)),c),transformRequest:[function(e,t){if(o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e))return e;if(r.isArrayBufferView(e))return e.buffer;if(r.isURLSearchParams(e))return s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var n,i=r.isObject(e),a=t&&t["Content-Type"];if((n=r.isFileList(e))||i&&"multipart/form-data"===a){var l=this.env&&this.env.FormData;return u(n?{"files[]":e}:e,l&&new l)}return i||"application/json"===a?(s(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||f.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,a=!n&&"json"===this.responseType;if(a||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw i.from(e,i.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:n(1623)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){f.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){f.headers[e]=r.merge(l)})),e.exports=f},7874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:e=>{e.exports={version:"0.27.2"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},1623:e=>{e.exports=null},4109:(e,t,n)=>{"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},205:e=>{"use strict";e.exports=function(e){var t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},7675:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||new FormData;var n=[];function o(e){return null===e?"":r.isDate(e)?e.toISOString():r.isArrayBuffer(e)||r.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}return function e(i,a){if(r.isPlainObject(i)||r.isArray(i)){if(-1!==n.indexOf(i))throw Error("Circular reference detected in "+a);n.push(i),r.forEach(i,(function(n,i){if(!r.isUndefined(n)){var u,l=a?a+"."+i:i;if(n&&!a&&"object"==typeof n)if(r.endsWith(i,"{}"))n=JSON.stringify(n);else if(r.endsWith(i,"[]")&&(u=r.toArray(n)))return void u.forEach((function(e){!r.isUndefined(e)&&t.append(l,o(e))}));e(n,l)}})),n.pop()}else t.append(a,o(i))}(e),t}},4875:(e,t,n)=>{"use strict";var r=n(7288).version,o=n(2648),i={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){i[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var a={};i.transitional=function(e,t,n){function i(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,u){if(!1===e)throw new o(i(r," has been removed"+(t?" in "+t:"")),o.ERR_DEPRECATED);return t&&!a[r]&&(a[r]=!0,console.warn(i(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,u)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new o("options must be an object",o.ERR_BAD_OPTION_VALUE);for(var r=Object.keys(e),i=r.length;i-- >0;){var a=r[i],u=t[a];if(u){var l=e[a],s=void 0===l||u(l,a,e);if(!0!==s)throw new o("option "+a+" must be "+s,o.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new o("Unknown option "+a,o.ERR_BAD_OPTION)}},validators:i}},4867:(e,t,n)=>{"use strict";var r,o=n(1849),i=Object.prototype.toString,a=(r=Object.create(null),function(e){var t=i.call(e);return r[t]||(r[t]=t.slice(8,-1).toLowerCase())});function u(e){return e=e.toLowerCase(),function(t){return a(t)===e}}function l(e){return Array.isArray(e)}function s(e){return void 0===e}var c=u("ArrayBuffer");function f(e){return null!==e&&"object"==typeof e}function d(e){if("object"!==a(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var p=u("Date"),h=u("File"),m=u("Blob"),v=u("FileList");function y(e){return"[object Function]"===i.call(e)}var g=u("URLSearchParams");function b(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),l(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}var w,S=(w="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return w&&e instanceof w});e.exports={isArray:l,isArrayBuffer:c,isBuffer:function(e){return null!==e&&!s(e)&&null!==e.constructor&&!s(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||i.call(e)===t||y(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&c(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:f,isPlainObject:d,isUndefined:s,isDate:p,isFile:h,isBlob:m,isFunction:y,isStream:function(e){return f(e)&&y(e.pipe)},isURLSearchParams:g,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:b,merge:function e(){var t={};function n(n,r){d(t[r])&&d(n)?t[r]=e(t[r],n):d(n)?t[r]=e({},n):l(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)b(arguments[r],n);return t},extend:function(e,t,n){return b(t,(function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,t,n,r){e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,n&&Object.assign(e.prototype,n)},toFlatObject:function(e,t,n){var r,o,i,a={};t=t||{};do{for(o=(r=Object.getOwnPropertyNames(e)).length;o-- >0;)a[i=r[o]]||(t[i]=e[i],a[i]=!0);e=Object.getPrototypeOf(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:a,kindOfTest:u,endsWith:function(e,t,n){e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;var r=e.indexOf(t,n);return-1!==r&&r===n},toArray:function(e){if(!e)return null;var t=e.length;if(s(t))return null;for(var n=new Array(t);t-- >0;)n[t]=e[t];return n},isTypedArray:S,isFileList:v}},8679:(e,t,n)=>{"use strict";var r=n(1296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||u&&u[y])){var g=d(n,y);try{s(t,y,g)}catch(e){}}}}return t}},6103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case u:case a:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case v:case m:case l:return e;default:return t}}case o:return t}}}function k(e){return S(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=l,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=u,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||S(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return S(e)===s},t.isContextProvider=function(e){return S(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===d},t.isFragment=function(e){return S(e)===i},t.isLazy=function(e){return S(e)===v},t.isMemo=function(e){return S(e)===m},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===u},t.isStrictMode=function(e){return S(e)===a},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===l||e.$$typeof===s||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=S},1296:(e,t,n)=>{"use strict";e.exports=n(6103)},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,u={};function l(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),k=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),P=Symbol.for("react.provider"),O=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),R=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),N=Symbol.for("react.memo"),A=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var D=Symbol.iterator;function L(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=D&&e[D]||e["@@iterator"])?e:null}var F,j=Object.assign;function z(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var M=!1;function U(e,t){if(!e||M)return"";M=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,u=i.length-1;1<=a&&0<=u&&o[a]!==i[u];)u--;for(;1<=a&&0<=u;a--,u--)if(o[a]!==i[u]){if(1!==a||1!==u)do{if(a--,0>--u||o[a]!==i[u]){var l="\n"+o[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=u);break}}}finally{M=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?z(e):""}function $(e){switch(e.tag){case 5:return z(e.type);case 16:return z("Lazy");case 13:return z("Suspense");case 19:return z("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function B(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case k:return"Portal";case C:return"Profiler";case x:return"StrictMode";case R:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case N:return null!==(t=e.displayName||null)?t:B(e.type)||"Memo";case A:t=e._payload,e=e._init;try{return B(e(t))}catch(e){}}return null}function Q(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return B(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function q(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function W(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return j({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function G(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Y(e,t){X(e,t);var n=q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return j({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:q(n)}}function ie(e,t){var n=q(t.value),r=q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=j({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,Ee=null,xe=null;function Ce(e){if(e=wo(e)){if("function"!=typeof ke)throw Error(i(280));var t=e.stateNode;t&&(t=ko(t),ke(e.stateNode,e.type,t))}}function Pe(e){Ee?xe?xe.push(e):xe=[e]:Ee=e}function Oe(){if(Ee){var e=Ee,t=xe;if(xe=Ee=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function _e(e,t){return e(t)}function Re(){}var Te=!1;function Ne(e,t,n){if(Te)return e(t,n);Te=!0;try{return _e(e,t,n)}finally{Te=!1,(null!==Ee||null!==xe)&&(Re(),Oe())}}function Ae(e,t){var n=e.stateNode;if(null===n)return null;var r=ko(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ie=!1;if(c)try{var De={};Object.defineProperty(De,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",De,De),window.removeEventListener("test",De,De)}catch(ce){Ie=!1}function Le(e,t,n,r,o,i,a,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Fe=!1,je=null,ze=!1,Me=null,Ue={onError:function(e){Fe=!0,je=e}};function $e(e,t,n,r,o,i,a,u,l){Fe=!1,je=null,Le.apply(Ue,arguments)}function Be(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function qe(e){if(Be(e)!==e)throw Error(i(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Be(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return qe(o),e;if(a===r)return qe(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=a;break}if(l===r){u=!0,r=o,n=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===n){u=!0,n=a,r=o;break}if(l===r){u=!0,r=a,n=o;break}l=l.sibling}if(!u)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var We=o.unstable_scheduleCallback,Ke=o.unstable_cancelCallback,Ze=o.unstable_shouldYield,Ge=o.unstable_requestPaint,Xe=o.unstable_now,Ye=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,it=null,at=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(ut(e)/lt|0)|0},ut=Math.log,lt=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var u=a&~o;0!==u?r=ft(u):0!=(i&=a)&&(r=ft(i))}else 0!=(a=n&~o)?r=ft(a):0!==i&&(r=ft(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-at(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var St,kt,Et,xt,Ct,Pt=!1,Ot=[],_t=null,Rt=null,Tt=null,Nt=new Map,At=new Map,It=[],Dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":_t=null;break;case"dragenter":case"dragleave":Rt=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":Nt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":At.delete(t.pointerId)}}function Ft(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function jt(e){var t=bo(e.target);if(null!==t){var n=Be(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void Ct(e.priority,(function(){Et(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function zt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Mt(e,t,n){zt(e)&&n.delete(t)}function Ut(){Pt=!1,null!==_t&&zt(_t)&&(_t=null),null!==Rt&&zt(Rt)&&(Rt=null),null!==Tt&&zt(Tt)&&(Tt=null),Nt.forEach(Mt),At.forEach(Mt)}function $t(e,t){e.blockedOn===t&&(e.blockedOn=null,Pt||(Pt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ut)))}function Bt(e){function t(t){return $t(t,e)}if(0<Ot.length){$t(Ot[0],e);for(var n=1;n<Ot.length;n++){var r=Ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&$t(_t,e),null!==Rt&&$t(Rt,e),null!==Tt&&$t(Tt,e),Nt.forEach(t),At.forEach(t),n=0;n<It.length;n++)(r=It[n]).blockedOn===e&&(r.blockedOn=null);for(;0<It.length&&null===(n=It[0]).blockedOn;)jt(n),null===n.blockedOn&&It.shift()}var Qt=w.ReactCurrentBatchConfig,qt=!0;function Vt(e,t,n,r){var o=bt,i=Qt.transition;Qt.transition=null;try{bt=1,Wt(e,t,n,r)}finally{bt=o,Qt.transition=i}}function Ht(e,t,n,r){var o=bt,i=Qt.transition;Qt.transition=null;try{bt=4,Wt(e,t,n,r)}finally{bt=o,Qt.transition=i}}function Wt(e,t,n,r){if(qt){var o=Zt(e,t,n,r);if(null===o)qr(e,t,r,Kt,n),Lt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return _t=Ft(_t,e,t,n,r,o),!0;case"dragenter":return Rt=Ft(Rt,e,t,n,r,o),!0;case"mouseover":return Tt=Ft(Tt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Nt.set(i,Ft(Nt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,At.set(i,Ft(At.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<Dt.indexOf(e)){for(;null!==o;){var i=wo(o);if(null!==i&&St(i),null===(i=Zt(e,t,n,r))&&qr(e,t,r,Kt,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else qr(e,t,r,null,n)}}var Kt=null;function Zt(e,t,n,r){if(Kt=null,null!==(e=bo(e=Se(r))))if(null===(t=Be(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Qe(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Gt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ye()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Yt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Yt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return j(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,un,ln,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(sn),fn=j({},sn,{view:0,detail:0}),dn=on(fn),pn=j({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,un=e.screenY-ln.screenY):un=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:un}}),hn=on(pn),mn=on(j({},pn,{dataTransfer:0})),vn=on(j({},fn,{relatedTarget:0})),yn=on(j({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=j({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),wn=on(j({},sn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function Cn(){return xn}var Pn=j({},fn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),On=on(Pn),_n=on(j({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Rn=on(j({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Tn=on(j({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=j({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),An=on(Nn),In=[9,13,27,32],Dn=c&&"CompositionEvent"in window,Ln=null;c&&"documentMode"in document&&(Ln=document.documentMode);var Fn=c&&"TextEvent"in window&&!Ln,jn=c&&(!Dn||Ln&&8<Ln&&11>=Ln),zn=String.fromCharCode(32),Mn=!1;function Un(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,Qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Qn[e.type]:"textarea"===t}function Vn(e,t,n,r){Pe(r),0<(t=Hr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Wn=null;function Kn(e){zr(e,0)}function Zn(e){if(W(So(e)))return e}function Gn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Yn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Yn=Jn}else Yn=!1;Xn=Yn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),Wn=Hn=null)}function nr(e){if("value"===e.propertyName&&Zn(Wn)){var t=[];Vn(t,Wn,e,Se(e)),Ne(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Wn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Zn(Wn)}function ir(e,t){if("click"===e)return Zn(t)}function ar(e,t){if("input"===e||"change"===e)return Zn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!ur(e[o],t[o]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=cr(n,i);var a=cr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==K(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&lr(gr,r)||(gr=r,0<(r=Hr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function Sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},Er={},xr={};function Cr(e){if(Er[e])return Er[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in xr)return Er[e]=n[t];return e}c&&(xr=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var Pr=Cr("animationend"),Or=Cr("animationiteration"),_r=Cr("animationstart"),Rr=Cr("transitionend"),Tr=new Map,Nr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ar(e,t){Tr.set(e,t),l(t,[e])}for(var Ir=0;Ir<Nr.length;Ir++){var Dr=Nr[Ir];Ar(Dr.toLowerCase(),"on"+(Dr[0].toUpperCase()+Dr.slice(1)))}Ar(Pr,"onAnimationEnd"),Ar(Or,"onAnimationIteration"),Ar(_r,"onAnimationStart"),Ar("dblclick","onDoubleClick"),Ar("focusin","onFocus"),Ar("focusout","onBlur"),Ar(Rr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function jr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,u,l,s){if($e.apply(this,arguments),Fe){if(!Fe)throw Error(i(198));var c=je;Fe=!1,je=null,ze||(ze=!0,Me=c)}}(r,t,void 0,e),e.currentTarget=null}function zr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var u=r[a],l=u.instance,s=u.currentTarget;if(u=u.listener,l!==i&&o.isPropagationStopped())break e;jr(o,u,s),i=l}else for(a=0;a<r.length;a++){if(l=(u=r[a]).instance,s=u.currentTarget,u=u.listener,l!==i&&o.isPropagationStopped())break e;jr(o,u,s),i=l}}}if(ze)throw e=Me,ze=!1,Me=null,e}function Mr(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||(Qr(t,e,2,!1),n.add(r))}function Ur(e,t,n){var r=0;t&&(r|=4),Qr(n,e,r,t)}var $r="_reactListening"+Math.random().toString(36).slice(2);function Br(e){if(!e[$r]){e[$r]=!0,a.forEach((function(t){"selectionchange"!==t&&(Fr.has(t)||Ur(t,!1,e),Ur(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[$r]||(t[$r]=!0,Ur("selectionchange",!1,t))}}function Qr(e,t,n,r){switch(Gt(t)){case 1:var o=Vt;break;case 4:o=Ht;break;default:o=Wt}n=o.bind(null,t,n,e),o=void 0,!Ie||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function qr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==u;){if(null===(a=bo(u)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}u=u.parentNode}}r=r.return}Ne((function(){var r=i,o=Se(n),a=[];e:{var u=Tr.get(e);if(void 0!==u){var l=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=On;break;case"focusin":s="focus",l=vn;break;case"focusout":s="blur",l=vn;break;case"beforeblur":case"afterblur":l=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Rn;break;case Pr:case Or:case _r:l=yn;break;case Rr:l=Tn;break;case"scroll":l=dn;break;case"wheel":l=An;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=_n}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==u?u+"Capture":null:u;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Ae(h,d))&&c.push(Vr(h,m,p))),f)break;h=h.return}0<c.length&&(u=new l(u,s,null,n,o),a.push({event:u,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!bo(s)&&!s[mo])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(s=(s=n.relatedTarget||n.toElement)?bo(s):null)&&(s!==(f=Be(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(l=null,s=r),l!==s)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=_n,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:So(l),p=null==s?u:So(s),(u=new c(m,h+"leave",l,n,o)).target=f,u.relatedTarget=p,m=null,bo(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,l&&s)e:{for(d=s,h=0,p=c=l;p;p=Wr(p))h++;for(p=0,m=d;m;m=Wr(m))p++;for(;0<h-p;)c=Wr(c),h--;for(;0<p-h;)d=Wr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Wr(c),d=Wr(d)}c=null}else c=null;null!==l&&Kr(a,u,l,c,!1),null!==s&&null!==f&&Kr(a,f,s,c,!0)}if("select"===(l=(u=r?So(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var v=Gn;else if(qn(u))if(Xn)v=ar;else{v=or;var y=rr}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(v=ir);switch(v&&(v=v(e,r))?Vn(a,v,n,o):(y&&y(e,u,r),"focusout"===e&&(y=u._wrapperState)&&y.controlled&&"number"===u.type&&ee(u,"number",u.value)),y=r?So(r):window,e){case"focusin":(qn(y)||"true"===y.contentEditable)&&(vr=y,yr=r,gr=null);break;case"focusout":gr=yr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(a,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(a,n,o)}var g;if(Dn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Bn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(jn&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Bn&&(g=en()):(Yt="value"in(Xt=o)?Xt.value:Xt.textContent,Bn=!0)),0<(y=Hr(r,b)).length&&(b=new wn(b,e,null,n,o),a.push({event:b,listeners:y}),(g||null!==(g=$n(n)))&&(b.data=g))),(g=Fn?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(Mn=!0,zn);case"textInput":return(e=t.data)===zn&&Mn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!Dn&&Un(e,t)?(e=en(),Jt=Yt=Xt=null,Bn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g)}zr(a,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Ae(e,n))&&r.unshift(Vr(e,i,o)),null!=(i=Ae(e,t))&&r.push(Vr(e,i,o))),e=e.return}return r}function Wr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var u=n,l=u.alternate,s=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==s&&(u=s,o?null!=(l=Ae(n,i))&&a.unshift(Vr(n,l,u)):o||null!=(l=Ae(n,i))&&a.push(Vr(n,l,u))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Zr=/\r\n?/g,Gr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Zr,"\n").replace(Gr,"")}function Yr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(i(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(e){return io.resolve(null).then(e).catch(uo)}:ro;function uo(e){setTimeout((function(){throw e}))}function lo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Bt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Bt(t)}function so(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,vo="__reactEvents$"+fo,yo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function So(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function ko(e){return e[ho]||null}var Eo=[],xo=-1;function Co(e){return{current:e}}function Po(e){0>xo||(e.current=Eo[xo],Eo[xo]=null,xo--)}function Oo(e,t){xo++,Eo[xo]=e.current,e.current=t}var _o={},Ro=Co(_o),To=Co(!1),No=_o;function Ao(e,t){var n=e.type.contextTypes;if(!n)return _o;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Io(e){return null!=e.childContextTypes}function Do(){Po(To),Po(Ro)}function Lo(e,t,n){if(Ro.current!==_o)throw Error(i(168));Oo(Ro,t),Oo(To,n)}function Fo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(i(108,Q(e)||"Unknown",o));return j({},n,r)}function jo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_o,No=Ro.current,Oo(Ro,e),Oo(To,To.current),!0}function zo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Fo(e,t,No),r.__reactInternalMemoizedMergedChildContext=e,Po(To),Po(Ro),Oo(Ro,e)):Po(To),Oo(To,n)}var Mo=null,Uo=!1,$o=!1;function Bo(e){null===Mo?Mo=[e]:Mo.push(e)}function Qo(){if(!$o&&null!==Mo){$o=!0;var e=0,t=bt;try{var n=Mo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Mo=null,Uo=!1}catch(t){throw null!==Mo&&(Mo=Mo.slice(e+1)),We(Je,Qo),t}finally{bt=t,$o=!1}}return null}var qo=[],Vo=0,Ho=null,Wo=0,Ko=[],Zo=0,Go=null,Xo=1,Yo="";function Jo(e,t){qo[Vo++]=Wo,qo[Vo++]=Ho,Ho=e,Wo=t}function ei(e,t,n){Ko[Zo++]=Xo,Ko[Zo++]=Yo,Ko[Zo++]=Go,Go=e;var r=Xo;e=Yo;var o=32-at(r)-1;r&=~(1<<o),n+=1;var i=32-at(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Xo=1<<32-at(t)+o|n<<o|r,Yo=i+e}else Xo=1<<i|n<<o|r,Yo=e}function ti(e){null!==e.return&&(Jo(e,1),ei(e,1,0))}function ni(e){for(;e===Ho;)Ho=qo[--Vo],qo[Vo]=null,Wo=qo[--Vo],qo[Vo]=null;for(;e===Go;)Go=Ko[--Zo],Ko[Zo]=null,Yo=Ko[--Zo],Ko[Zo]=null,Xo=Ko[--Zo],Ko[Zo]=null}var ri=null,oi=null,ii=!1,ai=null;function ui(e,t){var n=Ns(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function li(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ri=e,oi=so(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ri=e,oi=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Go?{id:Xo,overflow:Yo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ns(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ri=e,oi=null,!0);default:return!1}}function si(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ci(e){if(ii){var t=oi;if(t){var n=t;if(!li(e,t)){if(si(e))throw Error(i(418));t=so(n.nextSibling);var r=ri;t&&li(e,t)?ui(r,n):(e.flags=-4097&e.flags|2,ii=!1,ri=e)}}else{if(si(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,ri=e}}}function fi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function di(e){if(e!==ri)return!1;if(!ii)return fi(e),ii=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oi)){if(si(e))throw pi(),Error(i(418));for(;t;)ui(e,t),t=so(t.nextSibling)}if(fi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oi=so(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oi=null}}else oi=ri?so(e.stateNode.nextSibling):null;return!0}function pi(){for(var e=oi;e;)e=so(e.nextSibling)}function hi(){oi=ri=null,ii=!1}function mi(e){null===ai?ai=[e]:ai.push(e)}var vi=w.ReactCurrentBatchConfig;function yi(e,t){if(e&&e.defaultProps){for(var n in t=j({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var gi=Co(null),bi=null,wi=null,Si=null;function ki(){Si=wi=bi=null}function Ei(e){var t=gi.current;Po(gi),e._currentValue=t}function xi(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ci(e,t){bi=e,Si=wi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wu=!0),e.firstContext=null)}function Pi(e){var t=e._currentValue;if(Si!==e)if(e={context:e,memoizedValue:t,next:null},null===wi){if(null===bi)throw Error(i(308));wi=e,bi.dependencies={lanes:0,firstContext:e}}else wi=wi.next=e;return t}var Oi=null;function _i(e){null===Oi?Oi=[e]:Oi.push(e)}function Ri(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,_i(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ti(e,r)}function Ti(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ni=!1;function Ai(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ii(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Di(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Li(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&_l)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ti(e,n)}return null===(o=r.interleaved)?(t.next=t,_i(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ti(e,n)}function Fi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function ji(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function zi(e,t,n,r){var o=e.updateQueue;Ni=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var l=u,s=l.next;l.next=null,null===a?i=s:a.next=s,a=l;var c=e.alternate;null!==c&&(u=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===u?c.firstBaseUpdate=s:u.next=s,c.lastBaseUpdate=l)}if(null!==i){var f=o.baseState;for(a=0,c=s=l=null,u=i;;){var d=u.lane,p=u.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var h=e,m=u;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=j({},f,d);break e;case 2:Ni=!0}}null!==u.callback&&0!==u.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[u]:d.push(u))}else p={eventTime:p,lane:d,tag:u.tag,payload:u.payload,callback:u.callback,next:null},null===c?(s=c=p,l=f):c=c.next=p,a|=d;if(null===(u=u.next)){if(null===(u=o.shared.pending))break;u=(d=u).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===c&&(l=f),o.baseState=l,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);Fl|=a,e.lanes=a,e.memoizedState=f}}function Mi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Ui=(new r.Component).refs;function $i(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:j({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Bi={isMounted:function(e){return!!(e=e._reactInternals)&&Be(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),i=Di(r,o);i.payload=t,null!=n&&(i.callback=n),null!==(t=Li(e,i,o))&&(ns(t,e,o,r),Fi(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),i=Di(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Li(e,i,o))&&(ns(t,e,o,r),Fi(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),o=Di(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Li(e,o,r))&&(ns(t,e,r,n),Fi(t,e,r))}};function Qi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,i))}function qi(e,t,n){var r=!1,o=_o,i=t.contextType;return"object"==typeof i&&null!==i?i=Pi(i):(o=Io(t)?No:Ro.current,i=(r=null!=(r=t.contextTypes))?Ao(e,o):_o),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Bi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Vi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Bi.enqueueReplaceState(t,t.state,null)}function Hi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ui,Ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=Pi(i):(i=Io(t)?No:Ro.current,o.context=Ao(e,i)),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&($i(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Bi.enqueueReplaceState(o,o.state,null),zi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Wi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;t===Ui&&(t=o.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Ki(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Zi(e){return(0,e._init)(e._payload)}function Gi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Is(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function u(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=js(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){var i=n.type;return i===E?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===A&&Zi(i)===t.type)?((r=o(t,n.props)).ref=Wi(e,t,n),r.return=e,r):((r=Ds(n.type,n.key,n.props,null,e.mode,r)).ref=Wi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Ls(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=js(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Ds(t.type,t.key,t.props,null,e.mode,n)).ref=Wi(e,null,t),n.return=e,n;case k:return(t=zs(t,e.mode,n)).return=e,t;case A:return d(e,(0,t._init)(t._payload),n)}if(te(t)||L(t))return(t=Ls(t,e.mode,n,null)).return=e,t;Ki(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?s(e,t,n,r):null;case k:return n.key===o?c(e,t,n,r):null;case A:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||L(n))return null!==o?null:f(e,t,n,r,null);Ki(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case A:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||L(r))return f(t,e=e.get(n)||null,r,o,null);Ki(t,r)}return null}function m(o,i,u,l){for(var s=null,c=null,f=i,m=i=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,u[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===u.length)return n(o,f),ii&&Jo(o,m),s;if(null===f){for(;m<u.length;m++)null!==(f=d(o,u[m],l))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return ii&&Jo(o,m),s}for(f=r(o,f);m<u.length;m++)null!==(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),ii&&Jo(o,m),s}function v(o,u,l,s){var c=L(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var f=c=null,m=u,v=u=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),u=a(b,u,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),ii&&Jo(o,v),c;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=d(o,g.value,s))&&(u=a(g,u,v),null===f?c=g:f.sibling=g,f=g);return ii&&Jo(o,v),c}for(m=r(o,m);!g.done;v++,g=l.next())null!==(g=h(m,o,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),u=a(g,u,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),ii&&Jo(o,v),c}return function e(r,i,a,l){if("object"==typeof a&&null!==a&&a.type===E&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case S:e:{for(var s=a.key,c=i;null!==c;){if(c.key===s){if((s=a.type)===E){if(7===c.tag){n(r,c.sibling),(i=o(c,a.props.children)).return=r,r=i;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===A&&Zi(s)===c.type){n(r,c.sibling),(i=o(c,a.props)).ref=Wi(r,c,a),i.return=r,r=i;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===E?((i=Ls(a.props.children,r.mode,l,a.key)).return=r,r=i):((l=Ds(a.type,a.key,a.props,null,r.mode,l)).ref=Wi(r,i,a),l.return=r,r=l)}return u(r);case k:e:{for(c=a.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=zs(a,r.mode,l)).return=r,r=i}return u(r);case A:return e(r,i,(c=a._init)(a._payload),l)}if(te(a))return m(r,i,a,l);if(L(a))return v(r,i,a,l);Ki(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(n(r,i.sibling),(i=o(i,a)).return=r,r=i):(n(r,i),(i=js(a,r.mode,l)).return=r,r=i),u(r)):n(r,i)}}var Xi=Gi(!0),Yi=Gi(!1),Ji={},ea=Co(Ji),ta=Co(Ji),na=Co(Ji);function ra(e){if(e===Ji)throw Error(i(174));return e}function oa(e,t){switch(Oo(na,t),Oo(ta,e),Oo(ea,Ji),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Po(ea),Oo(ea,t)}function ia(){Po(ea),Po(ta),Po(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=le(t,e.type);t!==n&&(Oo(ta,e),Oo(ea,n))}function ua(e){ta.current===e&&(Po(ea),Po(ta))}var la=Co(0);function sa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ca=[];function fa(){for(var e=0;e<ca.length;e++)ca[e]._workInProgressVersionPrimary=null;ca.length=0}var da=w.ReactCurrentDispatcher,pa=w.ReactCurrentBatchConfig,ha=0,ma=null,va=null,ya=null,ga=!1,ba=!1,wa=0,Sa=0;function ka(){throw Error(i(321))}function Ea(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function xa(e,t,n,r,o,a){if(ha=a,ma=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,da.current=null===e||null===e.memoizedState?uu:lu,e=n(r,o),ba){a=0;do{if(ba=!1,wa=0,25<=a)throw Error(i(301));a+=1,ya=va=null,t.updateQueue=null,da.current=su,e=n(r,o)}while(ba)}if(da.current=au,t=null!==va&&null!==va.next,ha=0,ya=va=ma=null,ga=!1,t)throw Error(i(300));return e}function Ca(){var e=0!==wa;return wa=0,e}function Pa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ya?ma.memoizedState=ya=e:ya=ya.next=e,ya}function Oa(){if(null===va){var e=ma.alternate;e=null!==e?e.memoizedState:null}else e=va.next;var t=null===ya?ma.memoizedState:ya.next;if(null!==t)ya=t,va=e;else{if(null===e)throw Error(i(310));e={memoizedState:(va=e).memoizedState,baseState:va.baseState,baseQueue:va.baseQueue,queue:va.queue,next:null},null===ya?ma.memoizedState=ya=e:ya=ya.next=e}return ya}function _a(e,t){return"function"==typeof t?t(e):t}function Ra(e){var t=Oa(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=va,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var u=o.next;o.next=a.next,a.next=u}r.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,r=r.baseState;var l=u=null,s=null,c=a;do{var f=c.lane;if((ha&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(l=s=d,u=r):s=s.next=d,ma.lanes|=f,Fl|=f}c=c.next}while(null!==c&&c!==a);null===s?u=r:s.next=l,ur(r,t.memoizedState)||(wu=!0),t.memoizedState=r,t.baseState=u,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,ma.lanes|=a,Fl|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ta(e){var t=Oa(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{a=e(a,u.action),u=u.next}while(u!==o);ur(a,t.memoizedState)||(wu=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Na(){}function Aa(e,t){var n=ma,r=Oa(),o=t(),a=!ur(r.memoizedState,o);if(a&&(r.memoizedState=o,wu=!0),r=r.queue,qa(La.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==ya&&1&ya.memoizedState.tag){if(n.flags|=2048,Ma(9,Da.bind(null,n,r,o,t),void 0,null),null===Rl)throw Error(i(349));0!=(30&ha)||Ia(n,t,o)}return o}function Ia(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Da(e,t,n,r){t.value=n,t.getSnapshot=r,Fa(t)&&ja(e)}function La(e,t,n){return n((function(){Fa(t)&&ja(e)}))}function Fa(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ur(e,n)}catch(e){return!0}}function ja(e){var t=Ti(e,1);null!==t&&ns(t,e,1,-1)}function za(e){var t=Pa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_a,lastRenderedState:e},t.queue=e,e=e.dispatch=nu.bind(null,ma,e),[t.memoizedState,e]}function Ma(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ua(){return Oa().memoizedState}function $a(e,t,n,r){var o=Pa();ma.flags|=e,o.memoizedState=Ma(1|t,n,void 0,void 0===r?null:r)}function Ba(e,t,n,r){var o=Oa();r=void 0===r?null:r;var i=void 0;if(null!==va){var a=va.memoizedState;if(i=a.destroy,null!==r&&Ea(r,a.deps))return void(o.memoizedState=Ma(t,n,i,r))}ma.flags|=e,o.memoizedState=Ma(1|t,n,i,r)}function Qa(e,t){return $a(8390656,8,e,t)}function qa(e,t){return Ba(2048,8,e,t)}function Va(e,t){return Ba(4,2,e,t)}function Ha(e,t){return Ba(4,4,e,t)}function Wa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ka(e,t,n){return n=null!=n?n.concat([e]):null,Ba(4,4,Wa.bind(null,t,e),n)}function Za(){}function Ga(e,t){var n=Oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ea(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xa(e,t){var n=Oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ea(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ya(e,t,n){return 0==(21&ha)?(e.baseState&&(e.baseState=!1,wu=!0),e.memoizedState=n):(ur(n,t)||(n=mt(),ma.lanes|=n,Fl|=n,e.baseState=!0),t)}function Ja(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pa.transition;pa.transition={};try{e(!1),t()}finally{bt=n,pa.transition=r}}function eu(){return Oa().memoizedState}function tu(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},ru(e)?ou(t,n):null!==(n=Ri(e,t,n,r))&&(ns(n,e,r,es()),iu(n,t,r))}function nu(e,t,n){var r=ts(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(ru(e))ou(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=i(a,n);if(o.hasEagerState=!0,o.eagerState=u,ur(u,a)){var l=t.interleaved;return null===l?(o.next=o,_i(t)):(o.next=l.next,l.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ri(e,t,o,r))&&(ns(n,e,r,o=es()),iu(n,t,r))}}function ru(e){var t=e.alternate;return e===ma||null!==t&&t===ma}function ou(e,t){ba=ga=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function iu(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var au={readContext:Pi,useCallback:ka,useContext:ka,useEffect:ka,useImperativeHandle:ka,useInsertionEffect:ka,useLayoutEffect:ka,useMemo:ka,useReducer:ka,useRef:ka,useState:ka,useDebugValue:ka,useDeferredValue:ka,useTransition:ka,useMutableSource:ka,useSyncExternalStore:ka,useId:ka,unstable_isNewReconciler:!1},uu={readContext:Pi,useCallback:function(e,t){return Pa().memoizedState=[e,void 0===t?null:t],e},useContext:Pi,useEffect:Qa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,$a(4194308,4,Wa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return $a(4194308,4,e,t)},useInsertionEffect:function(e,t){return $a(4,2,e,t)},useMemo:function(e,t){var n=Pa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Pa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tu.bind(null,ma,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Pa().memoizedState=e},useState:za,useDebugValue:Za,useDeferredValue:function(e){return Pa().memoizedState=e},useTransition:function(){var e=za(!1),t=e[0];return e=Ja.bind(null,e[1]),Pa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ma,o=Pa();if(ii){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===Rl)throw Error(i(349));0!=(30&ha)||Ia(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,Qa(La.bind(null,r,a,e),[e]),r.flags|=2048,Ma(9,Da.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=Pa(),t=Rl.identifierPrefix;if(ii){var n=Yo;t=":"+t+"R"+(n=(Xo&~(1<<32-at(Xo)-1)).toString(32)+n),0<(n=wa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Sa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},lu={readContext:Pi,useCallback:Ga,useContext:Pi,useEffect:qa,useImperativeHandle:Ka,useInsertionEffect:Va,useLayoutEffect:Ha,useMemo:Xa,useReducer:Ra,useRef:Ua,useState:function(){return Ra(_a)},useDebugValue:Za,useDeferredValue:function(e){return Ya(Oa(),va.memoizedState,e)},useTransition:function(){return[Ra(_a)[0],Oa().memoizedState]},useMutableSource:Na,useSyncExternalStore:Aa,useId:eu,unstable_isNewReconciler:!1},su={readContext:Pi,useCallback:Ga,useContext:Pi,useEffect:qa,useImperativeHandle:Ka,useInsertionEffect:Va,useLayoutEffect:Ha,useMemo:Xa,useReducer:Ta,useRef:Ua,useState:function(){return Ta(_a)},useDebugValue:Za,useDeferredValue:function(e){var t=Oa();return null===va?t.memoizedState=e:Ya(t,va.memoizedState,e)},useTransition:function(){return[Ta(_a)[0],Oa().memoizedState]},useMutableSource:Na,useSyncExternalStore:Aa,useId:eu,unstable_isNewReconciler:!1};function cu(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fu(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function du(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pu="function"==typeof WeakMap?WeakMap:Map;function hu(e,t,n){(n=Di(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ql||(ql=!0,Vl=r),du(0,t)},n}function mu(e,t,n){(n=Di(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){du(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){du(0,t),"function"!=typeof r&&(null===Hl?Hl=new Set([this]):Hl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vu(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pu;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Cs.bind(null,e,t,n),t.then(e,e))}function yu(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gu(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Di(-1,1)).tag=2,Li(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bu=w.ReactCurrentOwner,wu=!1;function Su(e,t,n,r){t.child=null===e?Yi(t,null,n,r):Xi(t,e.child,n,r)}function ku(e,t,n,r,o){n=n.render;var i=t.ref;return Ci(t,o),r=xa(e,t,n,r,i,o),n=Ca(),null===e||wu?(ii&&n&&ti(t),t.flags|=1,Su(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,qu(e,t,o))}function Eu(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||As(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ds(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,xu(e,t,i,r,o))}if(i=e.child,0==(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(a,r)&&e.ref===t.ref)return qu(e,t,o)}return t.flags|=1,(e=Is(i,r)).ref=t.ref,e.return=t,t.child=e}function xu(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(lr(i,r)&&e.ref===t.ref){if(wu=!1,t.pendingProps=r=i,0==(e.lanes&o))return t.lanes=e.lanes,qu(e,t,o);0!=(131072&e.flags)&&(wu=!0)}}return Ou(e,t,n,r,o)}function Cu(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Oo(Il,Al),Al|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Oo(Il,Al),Al|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,Oo(Il,Al),Al|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,Oo(Il,Al),Al|=r;return Su(e,t,o,n),t.child}function Pu(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ou(e,t,n,r,o){var i=Io(n)?No:Ro.current;return i=Ao(t,i),Ci(t,o),n=xa(e,t,n,r,i,o),r=Ca(),null===e||wu?(ii&&r&&ti(t),t.flags|=1,Su(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,qu(e,t,o))}function _u(e,t,n,r,o){if(Io(n)){var i=!0;jo(t)}else i=!1;if(Ci(t,o),null===t.stateNode)Qu(e,t),qi(t,n,r),Hi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,s=n.contextType;s="object"==typeof s&&null!==s?Pi(s):Ao(t,s=Io(n)?No:Ro.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==s)&&Vi(t,a,r,s),Ni=!1;var d=t.memoizedState;a.state=d,zi(t,r,a,o),l=t.memoizedState,u!==r||d!==l||To.current||Ni?("function"==typeof c&&($i(t,n,c,r),l=t.memoizedState),(u=Ni||Qi(t,n,u,r,d,l,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=s,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Ii(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:yi(t.type,u),a.props=s,f=t.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?Pi(l):Ao(t,l=Io(n)?No:Ro.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==f||d!==l)&&Vi(t,a,r,l),Ni=!1,d=t.memoizedState,a.state=d,zi(t,r,a,o);var h=t.memoizedState;u!==f||d!==h||To.current||Ni?("function"==typeof p&&($i(t,n,p,r),h=t.memoizedState),(s=Ni||Qi(t,n,s,r,d,h,l)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Ru(e,t,n,r,i,o)}function Ru(e,t,n,r,o,i){Pu(e,t);var a=0!=(128&t.flags);if(!r&&!a)return o&&zo(t,n,!1),qu(e,t,i);r=t.stateNode,bu.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Xi(t,e.child,null,i),t.child=Xi(t,null,u,i)):Su(e,t,u,i),t.memoizedState=r.state,o&&zo(t,n,!0),t.child}function Tu(e){var t=e.stateNode;t.pendingContext?Lo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Lo(0,t.context,!1),oa(e,t.containerInfo)}function Nu(e,t,n,r,o){return hi(),mi(o),t.flags|=256,Su(e,t,n,r),t.child}var Au,Iu,Du,Lu={dehydrated:null,treeContext:null,retryLane:0};function Fu(e){return{baseLanes:e,cachePool:null,transitions:null}}function ju(e,t,n){var r,o=t.pendingProps,a=la.current,u=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(u=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Oo(la,1&a),null===e)return ci(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=o.children,e=o.fallback,u?(o=t.mode,u=t.child,l={mode:"hidden",children:l},0==(1&o)&&null!==u?(u.childLanes=0,u.pendingProps=l):u=Fs(l,o,0,null),e=Ls(e,o,n,null),u.return=t,e.return=t,u.sibling=e,t.child=u,t.child.memoizedState=Fu(n),t.memoizedState=Lu,e):zu(t,l));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,o,a,u){if(n)return 256&t.flags?(t.flags&=-257,Mu(e,t,u,r=fu(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,o=t.mode,r=Fs({mode:"visible",children:r.children},o,0,null),(a=Ls(a,o,u,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Xi(t,e.child,null,u),t.child.memoizedState=Fu(u),t.memoizedState=Lu,a);if(0==(1&t.mode))return Mu(e,t,u,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var l=r.dgst;return r=l,Mu(e,t,u,r=fu(a=Error(i(419)),r,void 0))}if(l=0!=(u&e.childLanes),wu||l){if(null!==(r=Rl)){switch(u&-u){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|u))?0:o)&&o!==a.retryLane&&(a.retryLane=o,Ti(e,o),ns(r,e,o,-1))}return ms(),Mu(e,t,u,r=fu(Error(i(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Os.bind(null,e),o._reactRetry=t,null):(e=a.treeContext,oi=so(o.nextSibling),ri=t,ii=!0,ai=null,null!==e&&(Ko[Zo++]=Xo,Ko[Zo++]=Yo,Ko[Zo++]=Go,Xo=e.id,Yo=e.overflow,Go=t),(t=zu(t,r.children)).flags|=4096,t)}(e,t,l,o,r,a,n);if(u){u=o.fallback,l=t.mode,r=(a=e.child).sibling;var s={mode:"hidden",children:o.children};return 0==(1&l)&&t.child!==a?((o=t.child).childLanes=0,o.pendingProps=s,t.deletions=null):(o=Is(a,s)).subtreeFlags=14680064&a.subtreeFlags,null!==r?u=Is(r,u):(u=Ls(u,l,n,null)).flags|=2,u.return=t,o.return=t,o.sibling=u,t.child=o,o=u,u=t.child,l=null===(l=e.child.memoizedState)?Fu(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},u.memoizedState=l,u.childLanes=e.childLanes&~n,t.memoizedState=Lu,o}return e=(u=e.child).sibling,o=Is(u,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function zu(e,t){return(t=Fs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Mu(e,t,n,r){return null!==r&&mi(r),Xi(t,e.child,null,n),(e=zu(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Uu(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),xi(e.return,t,n)}function $u(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function Bu(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Su(e,t,r.children,n),0!=(2&(r=la.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Uu(e,n,t);else if(19===e.tag)Uu(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Oo(la,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===sa(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),$u(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===sa(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}$u(t,!0,n,null,i);break;case"together":$u(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Qu(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function qu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fl|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Is(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Is(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vu(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Hu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Wu(e,t,n){var r=t.pendingProps;switch(ni(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Hu(t),null;case 1:case 17:return Io(t.type)&&Do(),Hu(t),null;case 3:return r=t.stateNode,ia(),Po(To),Po(Ro),fa(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(di(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ai&&(as(ai),ai=null))),Hu(t),null;case 5:ua(t);var o=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Iu(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Hu(t),null}if(e=ra(ea.current),di(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[po]=t,r[ho]=a,e=0!=(1&t.mode),n){case"dialog":Mr("cancel",r),Mr("close",r);break;case"iframe":case"object":case"embed":Mr("load",r);break;case"video":case"audio":for(o=0;o<Lr.length;o++)Mr(Lr[o],r);break;case"source":Mr("error",r);break;case"img":case"image":case"link":Mr("error",r),Mr("load",r);break;case"details":Mr("toggle",r);break;case"input":G(r,a),Mr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Mr("invalid",r);break;case"textarea":oe(r,a),Mr("invalid",r)}for(var l in ge(n,a),o=null,a)if(a.hasOwnProperty(l)){var s=a[l];"children"===l?"string"==typeof s?r.textContent!==s&&(!0!==a.suppressHydrationWarning&&Yr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==a.suppressHydrationWarning&&Yr(r.textContent,s,e),o=["children",""+s]):u.hasOwnProperty(l)&&null!=s&&"onScroll"===l&&Mr("scroll",r)}switch(n){case"input":H(r),J(r,a,!0);break;case"textarea":H(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ue(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[po]=t,e[ho]=r,Au(e,t),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":Mr("cancel",e),Mr("close",e),o=r;break;case"iframe":case"object":case"embed":Mr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Lr.length;o++)Mr(Lr[o],e);o=r;break;case"source":Mr("error",e),o=r;break;case"img":case"image":case"link":Mr("error",e),Mr("load",e),o=r;break;case"details":Mr("toggle",e),o=r;break;case"input":G(e,r),o=Z(e,r),Mr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=j({},r,{value:void 0}),Mr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Mr("invalid",e)}for(a in ge(n,o),s=o)if(s.hasOwnProperty(a)){var c=s[a];"style"===a?ve(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(u.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Mr("scroll",e):null!=c&&b(e,a,c,l))}switch(n){case"input":H(e),J(e,r,!1);break;case"textarea":H(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Hu(t),null;case 6:if(e&&null!=t.stateNode)Du(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=ra(na.current),ra(ea.current),di(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(a=r.nodeValue!==n)&&null!==(e=ri))switch(e.tag){case 3:Yr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Yr(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Hu(t),null;case 13:if(Po(la),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==oi&&0!=(1&t.mode)&&0==(128&t.flags))pi(),hi(),t.flags|=98560,a=!1;else if(a=di(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[po]=t}else hi(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Hu(t),a=!1}else null!==ai&&(as(ai),ai=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&la.current)?0===Dl&&(Dl=3):ms())),null!==t.updateQueue&&(t.flags|=4),Hu(t),null);case 4:return ia(),null===e&&Br(t.stateNode.containerInfo),Hu(t),null;case 10:return Ei(t.type._context),Hu(t),null;case 19:if(Po(la),null===(a=t.memoizedState))return Hu(t),null;if(r=0!=(128&t.flags),null===(l=a.rendering))if(r)Vu(a,!1);else{if(0!==Dl||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=sa(e))){for(t.flags|=128,Vu(a,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Oo(la,1&la.current|2),t.child}e=e.sibling}null!==a.tail&&Xe()>Bl&&(t.flags|=128,r=!0,Vu(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=sa(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vu(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!ii)return Hu(t),null}else 2*Xe()-a.renderingStartTime>Bl&&1073741824!==n&&(t.flags|=128,r=!0,Vu(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=a.last)?n.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Xe(),t.sibling=null,n=la.current,Oo(la,r?1&n|2:1&n),t):(Hu(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Al)&&(Hu(t),6&t.subtreeFlags&&(t.flags|=8192)):Hu(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function Ku(e,t){switch(ni(t),t.tag){case 1:return Io(t.type)&&Do(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ia(),Po(To),Po(Ro),fa(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ua(t),null;case 13:if(Po(la),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));hi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Po(la),null;case 4:return ia(),null;case 10:return Ei(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Au=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Iu=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ra(ea.current);var i,a=null;switch(n){case"input":o=Z(e,o),r=Z(e,r),a=[];break;case"select":o=j({},o,{value:void 0}),r=j({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ge(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var l=o[c];for(i in l)l.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(u.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var s=r[c];if(l=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==l&&(null!=s||null!=l))if("style"===c)if(l){for(i in l)!l.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&l[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(a||(a=[]),a.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,l=l?l.__html:void 0,null!=s&&l!==s&&(a=a||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(a=a||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(u.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Mr("scroll",e),a||l===s||(a=[])):(a=a||[]).push(c,s))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Du=function(e,t,n,r){n!==r&&(t.flags|=4)};var Zu=!1,Gu=!1,Xu="function"==typeof WeakSet?WeakSet:Set,Yu=null;function Ju(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){xs(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){xs(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&el(t,n,i)}o=o.next}while(o!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ol(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function il(e){var t=e.alternate;null!==t&&(e.alternate=null,il(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[vo],delete t[yo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function ul(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function sl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(sl(e,t,n),e=e.sibling;null!==e;)sl(e,t,n),e=e.sibling}var cl=null,fl=!1;function dl(e,t,n){for(n=n.child;null!==n;)pl(e,t,n),n=n.sibling}function pl(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Gu||Ju(n,t);case 6:var r=cl,o=fl;cl=null,dl(e,t,n),fl=o,null!==(cl=r)&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?lo(e.parentNode,n):1===e.nodeType&&lo(e,n),Bt(e)):lo(cl,n.stateNode));break;case 4:r=cl,o=fl,cl=n.stateNode.containerInfo,fl=!0,dl(e,t,n),cl=r,fl=o;break;case 0:case 11:case 14:case 15:if(!Gu&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(0!=(2&i)||0!=(4&i))&&el(n,t,a),o=o.next}while(o!==r)}dl(e,t,n);break;case 1:if(!Gu&&(Ju(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){xs(n,t,e)}dl(e,t,n);break;case 21:dl(e,t,n);break;case 22:1&n.mode?(Gu=(r=Gu)||null!==n.memoizedState,dl(e,t,n),Gu=r):dl(e,t,n);break;default:dl(e,t,n)}}function hl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xu),t.forEach((function(t){var r=_s.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ml(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var a=e,u=t,l=u;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,fl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,fl=!0;break e}l=l.return}if(null===cl)throw Error(i(160));pl(a,u,o),cl=null,fl=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){xs(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vl(t,e),t=t.sibling}function vl(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(t,e),yl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){xs(e,e.return,t)}try{nl(5,e,e.return)}catch(t){xs(e,e.return,t)}}break;case 1:ml(t,e),yl(e),512&r&&null!==n&&Ju(n,n.return);break;case 5:if(ml(t,e),yl(e),512&r&&null!==n&&Ju(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){xs(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,u=null!==n?n.memoizedProps:a,l=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===l&&"radio"===a.type&&null!=a.name&&X(o,a),be(l,u);var c=be(l,a);for(u=0;u<s.length;u+=2){var f=s[u],d=s[u+1];"style"===f?ve(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,c)}switch(l){case"input":Y(o,a);break;case"textarea":ie(o,a);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(o,!!a.multiple,h,!1):p!==!!a.multiple&&(null!=a.defaultValue?ne(o,!!a.multiple,a.defaultValue,!0):ne(o,!!a.multiple,a.multiple?[]:"",!1))}o[ho]=a}catch(t){xs(e,e.return,t)}}break;case 6:if(ml(t,e),yl(e),4&r){if(null===e.stateNode)throw Error(i(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(t){xs(e,e.return,t)}}break;case 3:if(ml(t,e),yl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Bt(t.containerInfo)}catch(t){xs(e,e.return,t)}break;case 4:default:ml(t,e),yl(e);break;case 13:ml(t,e),yl(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||($l=Xe())),4&r&&hl(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Gu=(c=Gu)||f,ml(t,e),Gu=c):ml(t,e),yl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Yu=e,f=e.child;null!==f;){for(d=Yu=f;null!==Yu;){switch(h=(p=Yu).child,p.tag){case 0:case 11:case 14:case 15:nl(4,p,p.return);break;case 1:Ju(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){xs(r,n,e)}}break;case 5:Ju(p,p.return);break;case 22:if(null!==p.memoizedState){Sl(d);continue}}null!==h?(h.return=p,Yu=h):Sl(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,c?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=d.stateNode,u=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,l.style.display=me("display",u))}catch(t){xs(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){xs(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:ml(t,e),yl(e),4&r&&hl(e);case 21:}}function yl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(al(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),sl(e,ul(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;ll(e,ul(e),a);break;default:throw Error(i(161))}}catch(t){xs(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gl(e,t,n){Yu=e,bl(e,t,n)}function bl(e,t,n){for(var r=0!=(1&e.mode);null!==Yu;){var o=Yu,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Zu;if(!a){var u=o.alternate,l=null!==u&&null!==u.memoizedState||Gu;u=Zu;var s=Gu;if(Zu=a,(Gu=l)&&!s)for(Yu=o;null!==Yu;)l=(a=Yu).child,22===a.tag&&null!==a.memoizedState?kl(o):null!==l?(l.return=a,Yu=l):kl(o);for(;null!==i;)Yu=i,bl(i,t,n),i=i.sibling;Yu=o,Zu=u,Gu=s}wl(e)}else 0!=(8772&o.subtreeFlags)&&null!==i?(i.return=o,Yu=i):wl(e)}}function wl(e){for(;null!==Yu;){var t=Yu;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Gu||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Gu)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:yi(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Mi(t,a,r);break;case 3:var u=t.updateQueue;if(null!==u){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Mi(t,u,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Bt(d)}}}break;default:throw Error(i(163))}Gu||512&t.flags&&ol(t)}catch(e){xs(t,t.return,e)}}if(t===e){Yu=null;break}if(null!==(n=t.sibling)){n.return=t.return,Yu=n;break}Yu=t.return}}function Sl(e){for(;null!==Yu;){var t=Yu;if(t===e){Yu=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Yu=n;break}Yu=t.return}}function kl(e){for(;null!==Yu;){var t=Yu;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){xs(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){xs(t,o,e)}}var i=t.return;try{ol(t)}catch(e){xs(t,i,e)}break;case 5:var a=t.return;try{ol(t)}catch(e){xs(t,a,e)}}}catch(e){xs(t,t.return,e)}if(t===e){Yu=null;break}var u=t.sibling;if(null!==u){u.return=t.return,Yu=u;break}Yu=t.return}}var El,xl=Math.ceil,Cl=w.ReactCurrentDispatcher,Pl=w.ReactCurrentOwner,Ol=w.ReactCurrentBatchConfig,_l=0,Rl=null,Tl=null,Nl=0,Al=0,Il=Co(0),Dl=0,Ll=null,Fl=0,jl=0,zl=0,Ml=null,Ul=null,$l=0,Bl=1/0,Ql=null,ql=!1,Vl=null,Hl=null,Wl=!1,Kl=null,Zl=0,Gl=0,Xl=null,Yl=-1,Jl=0;function es(){return 0!=(6&_l)?Xe():-1!==Yl?Yl:Yl=Xe()}function ts(e){return 0==(1&e.mode)?1:0!=(2&_l)&&0!==Nl?Nl&-Nl:null!==vi.transition?(0===Jl&&(Jl=mt()),Jl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Gt(e.type)}function ns(e,t,n,r){if(50<Gl)throw Gl=0,Xl=null,Error(i(185));yt(e,n,r),0!=(2&_l)&&e===Rl||(e===Rl&&(0==(2&_l)&&(jl|=n),4===Dl&&us(e,Nl)),rs(e,r),1===n&&0===_l&&0==(1&t.mode)&&(Bl=Xe()+500,Uo&&Qo()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-at(i),u=1<<a,l=o[a];-1===l?0!=(u&n)&&0==(u&r)||(o[a]=pt(u,t)):l<=t&&(e.expiredLanes|=u),i&=~u}}(e,t);var r=dt(e,e===Rl?Nl:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Uo=!0,Bo(e)}(ls.bind(null,e)):Bo(ls.bind(null,e)),ao((function(){0==(6&_l)&&Qo()})),n=null;else{switch(wt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Rs(n,os.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function os(e,t){if(Yl=-1,Jl=0,0!=(6&_l))throw Error(i(327));var n=e.callbackNode;if(ks()&&e.callbackNode!==n)return null;var r=dt(e,e===Rl?Nl:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vs(e,r);else{t=r;var o=_l;_l|=2;var a=hs();for(Rl===e&&Nl===t||(Ql=null,Bl=Xe()+500,ds(e,t));;)try{gs();break}catch(t){ps(e,t)}ki(),Cl.current=a,_l=o,null!==Tl?t=0:(Rl=null,Nl=0,t=Dl)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=is(e,o)),1===t)throw n=Ll,ds(e,0),us(e,r),rs(e,Xe()),n;if(6===t)us(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!ur(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=vs(e,r))&&0!==(a=ht(e))&&(r=a,t=is(e,a)),1===t))throw n=Ll,ds(e,0),us(e,r),rs(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:Ss(e,Ul,Ql);break;case 3:if(us(e,r),(130023424&r)===r&&10<(t=$l+500-Xe())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Ss.bind(null,e,Ul,Ql),t);break}Ss(e,Ul,Ql);break;case 4:if(us(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var u=31-at(r);a=1<<u,(u=t[u])>o&&(o=u),r&=~a}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*xl(r/1960))-r)){e.timeoutHandle=ro(Ss.bind(null,e,Ul,Ql),r);break}Ss(e,Ul,Ql);break;default:throw Error(i(329))}}}return rs(e,Xe()),e.callbackNode===n?os.bind(null,e):null}function is(e,t){var n=Ml;return e.current.memoizedState.isDehydrated&&(ds(e,t).flags|=256),2!==(e=vs(e,t))&&(t=Ul,Ul=n,null!==t&&as(t)),e}function as(e){null===Ul?Ul=e:Ul.push.apply(Ul,e)}function us(e,t){for(t&=~zl,t&=~jl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function ls(e){if(0!=(6&_l))throw Error(i(327));ks();var t=dt(e,0);if(0==(1&t))return rs(e,Xe()),null;var n=vs(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=is(e,r))}if(1===n)throw n=Ll,ds(e,0),us(e,t),rs(e,Xe()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ss(e,Ul,Ql),rs(e,Xe()),null}function ss(e,t){var n=_l;_l|=1;try{return e(t)}finally{0===(_l=n)&&(Bl=Xe()+500,Uo&&Qo())}}function cs(e){null!==Kl&&0===Kl.tag&&0==(6&_l)&&ks();var t=_l;_l|=1;var n=Ol.transition,r=bt;try{if(Ol.transition=null,bt=1,e)return e()}finally{bt=r,Ol.transition=n,0==(6&(_l=t))&&Qo()}}function fs(){Al=Il.current,Po(Il)}function ds(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Tl)for(n=Tl.return;null!==n;){var r=n;switch(ni(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Do();break;case 3:ia(),Po(To),Po(Ro),fa();break;case 5:ua(r);break;case 4:ia();break;case 13:case 19:Po(la);break;case 10:Ei(r.type._context);break;case 22:case 23:fs()}n=n.return}if(Rl=e,Tl=e=Is(e.current,null),Nl=Al=t,Dl=0,Ll=null,zl=jl=Fl=0,Ul=Ml=null,null!==Oi){for(t=0;t<Oi.length;t++)if(null!==(r=(n=Oi[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}Oi=null}return e}function ps(e,t){for(;;){var n=Tl;try{if(ki(),da.current=au,ga){for(var r=ma.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ga=!1}if(ha=0,ya=va=ma=null,ba=!1,wa=0,Pl.current=null,null===n||null===n.return){Dl=1,Ll=t,Tl=null;break}e:{var a=e,u=n.return,l=n,s=t;if(t=Nl,l.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=l,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=yu(u);if(null!==h){h.flags&=-257,gu(h,u,l,0,t),1&h.mode&&vu(a,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(s),t.updateQueue=v}else m.add(s);break e}if(0==(1&t)){vu(a,c,t),ms();break e}s=Error(i(426))}else if(ii&&1&l.mode){var y=yu(u);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),gu(y,u,l,0,t),mi(cu(s,l));break e}}a=s=cu(s,l),4!==Dl&&(Dl=2),null===Ml?Ml=[a]:Ml.push(a),a=u;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,ji(a,hu(0,s,t));break e;case 1:l=s;var g=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Hl||!Hl.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,ji(a,mu(a,l,t));break e}}a=a.return}while(null!==a)}ws(n)}catch(e){t=e,Tl===n&&null!==n&&(Tl=n=n.return);continue}break}}function hs(){var e=Cl.current;return Cl.current=au,null===e?au:e}function ms(){0!==Dl&&3!==Dl&&2!==Dl||(Dl=4),null===Rl||0==(268435455&Fl)&&0==(268435455&jl)||us(Rl,Nl)}function vs(e,t){var n=_l;_l|=2;var r=hs();for(Rl===e&&Nl===t||(Ql=null,ds(e,t));;)try{ys();break}catch(t){ps(e,t)}if(ki(),_l=n,Cl.current=r,null!==Tl)throw Error(i(261));return Rl=null,Nl=0,Dl}function ys(){for(;null!==Tl;)bs(Tl)}function gs(){for(;null!==Tl&&!Ze();)bs(Tl)}function bs(e){var t=El(e.alternate,e,Al);e.memoizedProps=e.pendingProps,null===t?ws(e):Tl=t,Pl.current=null}function ws(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Wu(n,t,Al)))return void(Tl=n)}else{if(null!==(n=Ku(n,t)))return n.flags&=32767,void(Tl=n);if(null===e)return Dl=6,void(Tl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Tl=t);Tl=t=e}while(null!==t);0===Dl&&(Dl=5)}function Ss(e,t,n){var r=bt,o=Ol.transition;try{Ol.transition=null,bt=1,function(e,t,n,r){do{ks()}while(null!==Kl);if(0!=(6&_l))throw Error(i(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-at(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,a),e===Rl&&(Tl=Rl=null,Nl=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Wl||(Wl=!0,Rs(tt,(function(){return ks(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=Ol.transition,Ol.transition=null;var u=bt;bt=1;var l=_l;_l|=4,Pl.current=null,function(e,t){if(eo=qt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var u=0,l=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(l=u+o),d!==a||0!==r&&3!==d.nodeType||(s=u+r),3===d.nodeType&&(u+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===o&&(l=u),p===a&&++f===r&&(s=u),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===l||-1===s?null:{start:l,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},qt=!1,Yu=t;null!==Yu;)if(e=(t=Yu).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Yu=e;else for(;null!==Yu;){t=Yu;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,y=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:yi(t.type,v),y);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(i(163))}}catch(e){xs(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Yu=e;break}Yu=t.return}m=tl,tl=!1}(e,n),vl(n,e),hr(to),qt=!!eo,to=eo=null,e.current=n,gl(n,e,o),Ge(),_l=l,bt=u,Ol.transition=a}else e.current=n;if(Wl&&(Wl=!1,Kl=e,Zl=o),0===(a=e.pendingLanes)&&(Hl=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),rs(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(ql)throw ql=!1,e=Vl,Vl=null,e;0!=(1&Zl)&&0!==e.tag&&ks(),0!=(1&(a=e.pendingLanes))?e===Xl?Gl++:(Gl=0,Xl=e):Gl=0,Qo()}(e,t,n,r)}finally{Ol.transition=o,bt=r}return null}function ks(){if(null!==Kl){var e=wt(Zl),t=Ol.transition,n=bt;try{if(Ol.transition=null,bt=16>e?16:e,null===Kl)var r=!1;else{if(e=Kl,Kl=null,Zl=0,0!=(6&_l))throw Error(i(331));var o=_l;for(_l|=4,Yu=e.current;null!==Yu;){var a=Yu,u=a.child;if(0!=(16&Yu.flags)){var l=a.deletions;if(null!==l){for(var s=0;s<l.length;s++){var c=l[s];for(Yu=c;null!==Yu;){var f=Yu;switch(f.tag){case 0:case 11:case 15:nl(8,f,a)}var d=f.child;if(null!==d)d.return=f,Yu=d;else for(;null!==Yu;){var p=(f=Yu).sibling,h=f.return;if(il(f),f===c){Yu=null;break}if(null!==p){p.return=h,Yu=p;break}Yu=h}}}var m=a.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var y=v.sibling;v.sibling=null,v=y}while(null!==v)}}Yu=a}}if(0!=(2064&a.subtreeFlags)&&null!==u)u.return=a,Yu=u;else e:for(;null!==Yu;){if(0!=(2048&(a=Yu).flags))switch(a.tag){case 0:case 11:case 15:nl(9,a,a.return)}var g=a.sibling;if(null!==g){g.return=a.return,Yu=g;break e}Yu=a.return}}var b=e.current;for(Yu=b;null!==Yu;){var w=(u=Yu).child;if(0!=(2064&u.subtreeFlags)&&null!==w)w.return=u,Yu=w;else e:for(u=b;null!==Yu;){if(0!=(2048&(l=Yu).flags))try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){xs(l,l.return,e)}if(l===u){Yu=null;break e}var S=l.sibling;if(null!==S){S.return=l.return,Yu=S;break e}Yu=l.return}}if(_l=o,Qo(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Ol.transition=t}}return!1}function Es(e,t,n){e=Li(e,t=hu(0,t=cu(n,t),1),1),t=es(),null!==e&&(yt(e,1,t),rs(e,t))}function xs(e,t,n){if(3===e.tag)Es(e,e,n);else for(;null!==t;){if(3===t.tag){Es(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r))){t=Li(t,e=mu(t,e=cu(n,e),1),1),e=es(),null!==t&&(yt(t,1,e),rs(t,e));break}}t=t.return}}function Cs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,Rl===e&&(Nl&n)===n&&(4===Dl||3===Dl&&(130023424&Nl)===Nl&&500>Xe()-$l?ds(e,0):zl|=n),rs(e,t)}function Ps(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=es();null!==(e=Ti(e,t))&&(yt(e,t,n),rs(e,n))}function Os(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Ps(e,n)}function _s(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),Ps(e,n)}function Rs(e,t){return We(e,t)}function Ts(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ns(e,t,n,r){return new Ts(e,t,n,r)}function As(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Is(e,t){var n=e.alternate;return null===n?((n=Ns(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ds(e,t,n,r,o,a){var u=2;if(r=e,"function"==typeof e)As(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case E:return Ls(n.children,o,a,t);case x:u=8,o|=8;break;case C:return(e=Ns(12,n,t,2|o)).elementType=C,e.lanes=a,e;case R:return(e=Ns(13,n,t,o)).elementType=R,e.lanes=a,e;case T:return(e=Ns(19,n,t,o)).elementType=T,e.lanes=a,e;case I:return Fs(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:u=10;break e;case O:u=9;break e;case _:u=11;break e;case N:u=14;break e;case A:u=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ns(u,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Ls(e,t,n,r){return(e=Ns(7,e,r,t)).lanes=n,e}function Fs(e,t,n,r){return(e=Ns(22,e,r,t)).elementType=I,e.lanes=n,e.stateNode={isHidden:!1},e}function js(e,t,n){return(e=Ns(6,e,null,t)).lanes=n,e}function zs(e,t,n){return(t=Ns(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ms(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Us(e,t,n,r,o,i,a,u,l){return e=new Ms(e,t,n,u,l),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Ns(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ai(i),e}function $s(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Bs(e){if(!e)return _o;e:{if(Be(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Io(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(Io(n))return Fo(e,n,t)}return t}function Qs(e,t,n,r,o,i,a,u,l){return(e=Us(n,r,!0,e,0,i,0,u,l)).context=Bs(null),n=e.current,(i=Di(r=es(),o=ts(n))).callback=null!=t?t:null,Li(n,i,o),e.current.lanes=o,yt(e,o,r),rs(e,r),e}function qs(e,t,n,r){var o=t.current,i=es(),a=ts(o);return n=Bs(n),null===t.context?t.context=n:t.pendingContext=n,(t=Di(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Li(o,t,a))&&(ns(e,o,a,i),Fi(e,o,a)),a}function Vs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ws(e,t){Hs(e,t),(e=e.alternate)&&Hs(e,t)}El=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||To.current)wu=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wu=!1,function(e,t,n){switch(t.tag){case 3:Tu(t),hi();break;case 5:aa(t);break;case 1:Io(t.type)&&jo(t);break;case 4:oa(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Oo(gi,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Oo(la,1&la.current),t.flags|=128,null):0!=(n&t.child.childLanes)?ju(e,t,n):(Oo(la,1&la.current),null!==(e=qu(e,t,n))?e.sibling:null);Oo(la,1&la.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Bu(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Oo(la,la.current),r)break;return null;case 22:case 23:return t.lanes=0,Cu(e,t,n)}return qu(e,t,n)}(e,t,n);wu=0!=(131072&e.flags)}else wu=!1,ii&&0!=(1048576&t.flags)&&ei(t,Wo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Qu(e,t),e=t.pendingProps;var o=Ao(t,Ro.current);Ci(t,n),o=xa(null,t,r,e,o,n);var a=Ca();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Io(r)?(a=!0,jo(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ai(t),o.updater=Bi,t.stateNode=o,o._reactInternals=t,Hi(t,r,e,n),t=Ru(null,t,r,!0,a,n)):(t.tag=0,ii&&a&&ti(t),Su(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Qu(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return As(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===N)return 14}return 2}(r),e=yi(r,e),o){case 0:t=Ou(null,t,r,e,n);break e;case 1:t=_u(null,t,r,e,n);break e;case 11:t=ku(null,t,r,e,n);break e;case 14:t=Eu(null,t,r,yi(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ou(e,t,r,o=t.elementType===r?o:yi(r,o),n);case 1:return r=t.type,o=t.pendingProps,_u(e,t,r,o=t.elementType===r?o:yi(r,o),n);case 3:e:{if(Tu(t),null===e)throw Error(i(387));r=t.pendingProps,o=(a=t.memoizedState).element,Ii(e,t),zi(t,r,null,n);var u=t.memoizedState;if(r=u.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:u.cache,pendingSuspenseBoundaries:u.pendingSuspenseBoundaries,transitions:u.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Nu(e,t,r,n,o=cu(Error(i(423)),t));break e}if(r!==o){t=Nu(e,t,r,n,o=cu(Error(i(424)),t));break e}for(oi=so(t.stateNode.containerInfo.firstChild),ri=t,ii=!0,ai=null,n=Yi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(hi(),r===o){t=qu(e,t,n);break e}Su(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&ci(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,no(r,o)?u=null:null!==a&&no(r,a)&&(t.flags|=32),Pu(e,t),Su(e,t,u,n),t.child;case 6:return null===e&&ci(t),null;case 13:return ju(e,t,n);case 4:return oa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xi(t,null,r,n):Su(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ku(e,t,r,o=t.elementType===r?o:yi(r,o),n);case 7:return Su(e,t,t.pendingProps,n),t.child;case 8:case 12:return Su(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,u=o.value,Oo(gi,r._currentValue),r._currentValue=u,null!==a)if(ur(a.value,u)){if(a.children===o.children&&!To.current){t=qu(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var l=a.dependencies;if(null!==l){u=a.child;for(var s=l.firstContext;null!==s;){if(s.context===r){if(1===a.tag){(s=Di(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}a.lanes|=n,null!==(s=a.alternate)&&(s.lanes|=n),xi(a.return,n,t),l.lanes|=n;break}s=s.next}}else if(10===a.tag)u=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(u=a.return))throw Error(i(341));u.lanes|=n,null!==(l=u.alternate)&&(l.lanes|=n),xi(u,n,t),u=a.sibling}else u=a.child;if(null!==u)u.return=a;else for(u=a;null!==u;){if(u===t){u=null;break}if(null!==(a=u.sibling)){a.return=u.return,u=a;break}u=u.return}a=u}Su(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ci(t,n),r=r(o=Pi(o)),t.flags|=1,Su(e,t,r,n),t.child;case 14:return o=yi(r=t.type,t.pendingProps),Eu(e,t,r,o=yi(r.type,o),n);case 15:return xu(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:yi(r,o),Qu(e,t),t.tag=1,Io(r)?(e=!0,jo(t)):e=!1,Ci(t,n),qi(t,r,o),Hi(t,r,o,n),Ru(null,t,r,!0,e,n);case 19:return Bu(e,t,n);case 22:return Cu(e,t,n)}throw Error(i(156,t.tag))};var Ks="function"==typeof reportError?reportError:function(e){console.error(e)};function Zs(e){this._internalRoot=e}function Gs(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Ys(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Js(){}function ec(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var u=o;o=function(){var e=Vs(a);u.call(e)}}qs(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=Vs(a);i.call(e)}}var a=Qs(t,r,e,0,null,!1,0,"",Js);return e._reactRootContainer=a,e[mo]=a.current,Br(8===e.nodeType?e.parentNode:e),cs(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var u=r;r=function(){var e=Vs(l);u.call(e)}}var l=Us(e,0,!1,null,0,!1,0,"",Js);return e._reactRootContainer=l,e[mo]=l.current,Br(8===e.nodeType?e.parentNode:e),cs((function(){qs(t,l,n,r)})),l}(n,t,e,o,r);return Vs(a)}Gs.prototype.render=Zs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));qs(e,t,null,null)},Gs.prototype.unmount=Zs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){qs(null,e,null,null)})),t[mo]=null}},Gs.prototype.unstable_scheduleHydration=function(e){if(e){var t=xt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<It.length&&0!==t&&t<It[n].priority;n++);It.splice(n,0,e),0===n&&jt(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),rs(t,Xe()),0==(6&_l)&&(Bl=Xe()+500,Qo()))}break;case 13:cs((function(){var t=Ti(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),Ws(e,1)}},kt=function(e){if(13===e.tag){var t=Ti(e,134217728);null!==t&&ns(t,e,134217728,es()),Ws(e,134217728)}},Et=function(e){if(13===e.tag){var t=ts(e),n=Ti(e,t);null!==n&&ns(n,e,t,es()),Ws(e,t)}},xt=function(){return bt},Ct=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},ke=function(e,t,n){switch(t){case"input":if(Y(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=ko(r);if(!o)throw Error(i(90));W(r),Y(r,o)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},_e=ss,Re=cs;var tc={usingClientEntryPoint:!1,Events:[wo,So,ko,Pe,Oe,ss]},nc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{ot=oc.inject(rc),it=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(i(200));return $s(e,t,null,n)},t.createRoot=function(e,t){if(!Xs(e))throw Error(i(299));var n=!1,r="",o=Ks;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Us(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Br(8===e.nodeType?e.parentNode:e),new Zs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Ys(t))throw Error(i(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xs(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,o=!1,a="",u=Ks;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(u=n.onRecoverableError)),t=Qs(t,null,e,1,null!=n?n:null,o,0,a,u),e[mo]=t.current,Br(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Gs(t)},t.render=function(e,t,n){if(!Ys(t))throw Error(i(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ys(e))throw Error(i(40));return!!e._reactRootContainer&&(cs((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ys(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(3935);t.s=r.createRoot,r.hydrateRoot},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n,r=Symbol.for("react.element"),o=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),u=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),h=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),v=Symbol.for("react.offscreen");n=Symbol.for("react.module.reference"),t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===u||e===a||e===d||e===p||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===l||e.$$typeof===s||e.$$typeof===f||e.$$typeof===n||void 0!==e.getModuleId)},t.typeOf=function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case i:case u:case a:case d:case p:return e;default:switch(e=e&&e.$$typeof){case c:case s:case f:case m:case h:case l:return e;default:return t}}case o:return t}}}},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},9852:(e,t,n)=>{"use strict";n.d(t,{j:()=>a});var r=n(1721),o=n(2943),i=n(2288),a=new(function(e){function t(){var t;return(t=e.call(this)||this).setup=function(e){var t;if(!i.sk&&(null==(t=window)?void 0:t.addEventListener)){var n=function(){return e()};return window.addEventListener("visibilitychange",n,!1),window.addEventListener("focus",n,!1),function(){window.removeEventListener("visibilitychange",n),window.removeEventListener("focus",n)}}},t}(0,r.Z)(t,e);var n=t.prototype;return n.onSubscribe=function(){this.cleanup||this.setEventListener(this.setup)},n.onUnsubscribe=function(){var e;this.hasListeners()||(null==(e=this.cleanup)||e.call(this),this.cleanup=void 0)},n.setEventListener=function(e){var t,n=this;this.setup=e,null==(t=this.cleanup)||t.call(this),this.cleanup=e((function(e){"boolean"==typeof e?n.setFocused(e):n.onFocus()}))},n.setFocused=function(e){this.focused=e,e&&this.onFocus()},n.onFocus=function(){this.listeners.forEach((function(e){e()}))},n.isFocused=function(){return"boolean"==typeof this.focused?this.focused:"undefined"==typeof document||[void 0,"visible","prerender"].includes(document.visibilityState)},t}(o.l))},6747:(e,t,n)=>{"use strict";n.d(t,{QueryClient:()=>r.S});var r=n(8061),o=n(6755);n.o(o,"QueryClientProvider")&&n.d(t,{QueryClientProvider:function(){return o.QueryClientProvider}}),n.o(o,"useQuery")&&n.d(t,{useQuery:function(){return o.useQuery}})},1909:(e,t,n)=>{"use strict";n.d(t,{E:()=>i,j:()=>o});var r=console;function o(){return r}function i(e){r=e}},101:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(2288),o=new(function(){function e(){this.queue=[],this.transactions=0,this.notifyFn=function(e){e()},this.batchNotifyFn=function(e){e()}}var t=e.prototype;return t.batch=function(e){var t;this.transactions++;try{t=e()}finally{this.transactions--,this.transactions||this.flush()}return t},t.schedule=function(e){var t=this;this.transactions?this.queue.push(e):(0,r.A4)((function(){t.notifyFn(e)}))},t.batchCalls=function(e){var t=this;return function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];t.schedule((function(){e.apply(void 0,r)}))}},t.flush=function(){var e=this,t=this.queue;this.queue=[],t.length&&(0,r.A4)((function(){e.batchNotifyFn((function(){t.forEach((function(t){e.notifyFn(t)}))}))}))},t.setNotifyFunction=function(e){this.notifyFn=e},t.setBatchNotifyFunction=function(e){this.batchNotifyFn=e},e}())},68:(e,t,n)=>{"use strict";n.d(t,{N:()=>a});var r=n(1721),o=n(2943),i=n(2288),a=new(function(e){function t(){var t;return(t=e.call(this)||this).setup=function(e){var t;if(!i.sk&&(null==(t=window)?void 0:t.addEventListener)){var n=function(){return e()};return window.addEventListener("online",n,!1),window.addEventListener("offline",n,!1),function(){window.removeEventListener("online",n),window.removeEventListener("offline",n)}}},t}(0,r.Z)(t,e);var n=t.prototype;return n.onSubscribe=function(){this.cleanup||this.setEventListener(this.setup)},n.onUnsubscribe=function(){var e;this.hasListeners()||(null==(e=this.cleanup)||e.call(this),this.cleanup=void 0)},n.setEventListener=function(e){var t,n=this;this.setup=e,null==(t=this.cleanup)||t.call(this),this.cleanup=e((function(e){"boolean"==typeof e?n.setOnline(e):n.onOnline()}))},n.setOnline=function(e){this.online=e,e&&this.onOnline()},n.onOnline=function(){this.listeners.forEach((function(e){e()}))},n.isOnline=function(){return"boolean"==typeof this.online?this.online:"undefined"==typeof navigator||void 0===navigator.onLine||navigator.onLine},t}(o.l))},8061:(e,t,n)=>{"use strict";n.d(t,{S:()=>y});var r=n(7462),o=n(2288),i=n(1721),a=n(101),u=n(1909),l=n(1216),s=function(){function e(e){this.abortSignalConsumed=!1,this.hadObservers=!1,this.defaultOptions=e.defaultOptions,this.setOptions(e.options),this.observers=[],this.cache=e.cache,this.queryKey=e.queryKey,this.queryHash=e.queryHash,this.initialState=e.state||this.getDefaultState(this.options),this.state=this.initialState,this.meta=e.meta,this.scheduleGc()}var t=e.prototype;return t.setOptions=function(e){var t;this.options=(0,r.Z)({},this.defaultOptions,e),this.meta=null==e?void 0:e.meta,this.cacheTime=Math.max(this.cacheTime||0,null!=(t=this.options.cacheTime)?t:3e5)},t.setDefaultOptions=function(e){this.defaultOptions=e},t.scheduleGc=function(){var e=this;this.clearGcTimeout(),(0,o.PN)(this.cacheTime)&&(this.gcTimeout=setTimeout((function(){e.optionalRemove()}),this.cacheTime))},t.clearGcTimeout=function(){this.gcTimeout&&(clearTimeout(this.gcTimeout),this.gcTimeout=void 0)},t.optionalRemove=function(){this.observers.length||(this.state.isFetching?this.hadObservers&&this.scheduleGc():this.cache.remove(this))},t.setData=function(e,t){var n,r,i=this.state.data,a=(0,o.SE)(e,i);return(null==(n=(r=this.options).isDataEqual)?void 0:n.call(r,i,a))?a=i:!1!==this.options.structuralSharing&&(a=(0,o.Q$)(i,a)),this.dispatch({data:a,type:"success",dataUpdatedAt:null==t?void 0:t.updatedAt}),a},t.setState=function(e,t){this.dispatch({type:"setState",state:e,setStateOptions:t})},t.cancel=function(e){var t,n=this.promise;return null==(t=this.retryer)||t.cancel(e),n?n.then(o.ZT).catch(o.ZT):Promise.resolve()},t.destroy=function(){this.clearGcTimeout(),this.cancel({silent:!0})},t.reset=function(){this.destroy(),this.setState(this.initialState)},t.isActive=function(){return this.observers.some((function(e){return!1!==e.options.enabled}))},t.isFetching=function(){return this.state.isFetching},t.isStale=function(){return this.state.isInvalidated||!this.state.dataUpdatedAt||this.observers.some((function(e){return e.getCurrentResult().isStale}))},t.isStaleByTime=function(e){return void 0===e&&(e=0),this.state.isInvalidated||!this.state.dataUpdatedAt||!(0,o.Kp)(this.state.dataUpdatedAt,e)},t.onFocus=function(){var e,t=this.observers.find((function(e){return e.shouldFetchOnWindowFocus()}));t&&t.refetch(),null==(e=this.retryer)||e.continue()},t.onOnline=function(){var e,t=this.observers.find((function(e){return e.shouldFetchOnReconnect()}));t&&t.refetch(),null==(e=this.retryer)||e.continue()},t.addObserver=function(e){-1===this.observers.indexOf(e)&&(this.observers.push(e),this.hadObservers=!0,this.clearGcTimeout(),this.cache.notify({type:"observerAdded",query:this,observer:e}))},t.removeObserver=function(e){-1!==this.observers.indexOf(e)&&(this.observers=this.observers.filter((function(t){return t!==e})),this.observers.length||(this.retryer&&(this.retryer.isTransportCancelable||this.abortSignalConsumed?this.retryer.cancel({revert:!0}):this.retryer.cancelRetry()),this.cacheTime?this.scheduleGc():this.cache.remove(this)),this.cache.notify({type:"observerRemoved",query:this,observer:e}))},t.getObserversCount=function(){return this.observers.length},t.invalidate=function(){this.state.isInvalidated||this.dispatch({type:"invalidate"})},t.fetch=function(e,t){var n,r,i,a=this;if(this.state.isFetching)if(this.state.dataUpdatedAt&&(null==t?void 0:t.cancelRefetch))this.cancel({silent:!0});else if(this.promise){var s;return null==(s=this.retryer)||s.continueRetry(),this.promise}if(e&&this.setOptions(e),!this.options.queryFn){var c=this.observers.find((function(e){return e.options.queryFn}));c&&this.setOptions(c.options)}var f=(0,o.mc)(this.queryKey),d=(0,o.G9)(),p={queryKey:f,pageParam:void 0,meta:this.meta};Object.defineProperty(p,"signal",{enumerable:!0,get:function(){if(d)return a.abortSignalConsumed=!0,d.signal}});var h,m,v={fetchOptions:t,options:this.options,queryKey:f,state:this.state,fetchFn:function(){return a.options.queryFn?(a.abortSignalConsumed=!1,a.options.queryFn(p)):Promise.reject("Missing queryFn")},meta:this.meta};return(null==(n=this.options.behavior)?void 0:n.onFetch)&&(null==(h=this.options.behavior)||h.onFetch(v)),this.revertState=this.state,this.state.isFetching&&this.state.fetchMeta===(null==(r=v.fetchOptions)?void 0:r.meta)||this.dispatch({type:"fetch",meta:null==(m=v.fetchOptions)?void 0:m.meta}),this.retryer=new l.m4({fn:v.fetchFn,abort:null==d||null==(i=d.abort)?void 0:i.bind(d),onSuccess:function(e){a.setData(e),null==a.cache.config.onSuccess||a.cache.config.onSuccess(e,a),0===a.cacheTime&&a.optionalRemove()},onError:function(e){(0,l.DV)(e)&&e.silent||a.dispatch({type:"error",error:e}),(0,l.DV)(e)||(null==a.cache.config.onError||a.cache.config.onError(e,a),(0,u.j)().error(e)),0===a.cacheTime&&a.optionalRemove()},onFail:function(){a.dispatch({type:"failed"})},onPause:function(){a.dispatch({type:"pause"})},onContinue:function(){a.dispatch({type:"continue"})},retry:v.options.retry,retryDelay:v.options.retryDelay}),this.promise=this.retryer.promise,this.promise},t.dispatch=function(e){var t=this;this.state=this.reducer(this.state,e),a.V.batch((function(){t.observers.forEach((function(t){t.onQueryUpdate(e)})),t.cache.notify({query:t,type:"queryUpdated",action:e})}))},t.getDefaultState=function(e){var t="function"==typeof e.initialData?e.initialData():e.initialData,n=void 0!==e.initialData?"function"==typeof e.initialDataUpdatedAt?e.initialDataUpdatedAt():e.initialDataUpdatedAt:0,r=void 0!==t;return{data:t,dataUpdateCount:0,dataUpdatedAt:r?null!=n?n:Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchMeta:null,isFetching:!1,isInvalidated:!1,isPaused:!1,status:r?"success":"idle"}},t.reducer=function(e,t){var n,o;switch(t.type){case"failed":return(0,r.Z)({},e,{fetchFailureCount:e.fetchFailureCount+1});case"pause":return(0,r.Z)({},e,{isPaused:!0});case"continue":return(0,r.Z)({},e,{isPaused:!1});case"fetch":return(0,r.Z)({},e,{fetchFailureCount:0,fetchMeta:null!=(n=t.meta)?n:null,isFetching:!0,isPaused:!1},!e.dataUpdatedAt&&{error:null,status:"loading"});case"success":return(0,r.Z)({},e,{data:t.data,dataUpdateCount:e.dataUpdateCount+1,dataUpdatedAt:null!=(o=t.dataUpdatedAt)?o:Date.now(),error:null,fetchFailureCount:0,isFetching:!1,isInvalidated:!1,isPaused:!1,status:"success"});case"error":var i=t.error;return(0,l.DV)(i)&&i.revert&&this.revertState?(0,r.Z)({},this.revertState):(0,r.Z)({},e,{error:i,errorUpdateCount:e.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:e.fetchFailureCount+1,isFetching:!1,isPaused:!1,status:"error"});case"invalidate":return(0,r.Z)({},e,{isInvalidated:!0});case"setState":return(0,r.Z)({},e,t.state);default:return e}},e}(),c=n(2943),f=function(e){function t(t){var n;return(n=e.call(this)||this).config=t||{},n.queries=[],n.queriesMap={},n}(0,i.Z)(t,e);var n=t.prototype;return n.build=function(e,t,n){var r,i=t.queryKey,a=null!=(r=t.queryHash)?r:(0,o.Rm)(i,t),u=this.get(a);return u||(u=new s({cache:this,queryKey:i,queryHash:a,options:e.defaultQueryOptions(t),state:n,defaultOptions:e.getQueryDefaults(i),meta:t.meta}),this.add(u)),u},n.add=function(e){this.queriesMap[e.queryHash]||(this.queriesMap[e.queryHash]=e,this.queries.push(e),this.notify({type:"queryAdded",query:e}))},n.remove=function(e){var t=this.queriesMap[e.queryHash];t&&(e.destroy(),this.queries=this.queries.filter((function(t){return t!==e})),t===e&&delete this.queriesMap[e.queryHash],this.notify({type:"queryRemoved",query:e}))},n.clear=function(){var e=this;a.V.batch((function(){e.queries.forEach((function(t){e.remove(t)}))}))},n.get=function(e){return this.queriesMap[e]},n.getAll=function(){return this.queries},n.find=function(e,t){var n=(0,o.I6)(e,t)[0];return void 0===n.exact&&(n.exact=!0),this.queries.find((function(e){return(0,o._x)(n,e)}))},n.findAll=function(e,t){var n=(0,o.I6)(e,t)[0];return Object.keys(n).length>0?this.queries.filter((function(e){return(0,o._x)(n,e)})):this.queries},n.notify=function(e){var t=this;a.V.batch((function(){t.listeners.forEach((function(t){t(e)}))}))},n.onFocus=function(){var e=this;a.V.batch((function(){e.queries.forEach((function(e){e.onFocus()}))}))},n.onOnline=function(){var e=this;a.V.batch((function(){e.queries.forEach((function(e){e.onOnline()}))}))},t}(c.l),d=function(){function e(e){this.options=(0,r.Z)({},e.defaultOptions,e.options),this.mutationId=e.mutationId,this.mutationCache=e.mutationCache,this.observers=[],this.state=e.state||{context:void 0,data:void 0,error:null,failureCount:0,isPaused:!1,status:"idle",variables:void 0},this.meta=e.meta}var t=e.prototype;return t.setState=function(e){this.dispatch({type:"setState",state:e})},t.addObserver=function(e){-1===this.observers.indexOf(e)&&this.observers.push(e)},t.removeObserver=function(e){this.observers=this.observers.filter((function(t){return t!==e}))},t.cancel=function(){return this.retryer?(this.retryer.cancel(),this.retryer.promise.then(o.ZT).catch(o.ZT)):Promise.resolve()},t.continue=function(){return this.retryer?(this.retryer.continue(),this.retryer.promise):this.execute()},t.execute=function(){var e,t=this,n="loading"===this.state.status,r=Promise.resolve();return n||(this.dispatch({type:"loading",variables:this.options.variables}),r=r.then((function(){null==t.mutationCache.config.onMutate||t.mutationCache.config.onMutate(t.state.variables,t)})).then((function(){return null==t.options.onMutate?void 0:t.options.onMutate(t.state.variables)})).then((function(e){e!==t.state.context&&t.dispatch({type:"loading",context:e,variables:t.state.variables})}))),r.then((function(){return t.executeMutation()})).then((function(n){e=n,null==t.mutationCache.config.onSuccess||t.mutationCache.config.onSuccess(e,t.state.variables,t.state.context,t)})).then((function(){return null==t.options.onSuccess?void 0:t.options.onSuccess(e,t.state.variables,t.state.context)})).then((function(){return null==t.options.onSettled?void 0:t.options.onSettled(e,null,t.state.variables,t.state.context)})).then((function(){return t.dispatch({type:"success",data:e}),e})).catch((function(e){return null==t.mutationCache.config.onError||t.mutationCache.config.onError(e,t.state.variables,t.state.context,t),(0,u.j)().error(e),Promise.resolve().then((function(){return null==t.options.onError?void 0:t.options.onError(e,t.state.variables,t.state.context)})).then((function(){return null==t.options.onSettled?void 0:t.options.onSettled(void 0,e,t.state.variables,t.state.context)})).then((function(){throw t.dispatch({type:"error",error:e}),e}))}))},t.executeMutation=function(){var e,t=this;return this.retryer=new l.m4({fn:function(){return t.options.mutationFn?t.options.mutationFn(t.state.variables):Promise.reject("No mutationFn found")},onFail:function(){t.dispatch({type:"failed"})},onPause:function(){t.dispatch({type:"pause"})},onContinue:function(){t.dispatch({type:"continue"})},retry:null!=(e=this.options.retry)?e:0,retryDelay:this.options.retryDelay}),this.retryer.promise},t.dispatch=function(e){var t=this;this.state=function(e,t){switch(t.type){case"failed":return(0,r.Z)({},e,{failureCount:e.failureCount+1});case"pause":return(0,r.Z)({},e,{isPaused:!0});case"continue":return(0,r.Z)({},e,{isPaused:!1});case"loading":return(0,r.Z)({},e,{context:t.context,data:void 0,error:null,isPaused:!1,status:"loading",variables:t.variables});case"success":return(0,r.Z)({},e,{data:t.data,error:null,status:"success",isPaused:!1});case"error":return(0,r.Z)({},e,{data:void 0,error:t.error,failureCount:e.failureCount+1,isPaused:!1,status:"error"});case"setState":return(0,r.Z)({},e,t.state);default:return e}}(this.state,e),a.V.batch((function(){t.observers.forEach((function(t){t.onMutationUpdate(e)})),t.mutationCache.notify(t)}))},e}(),p=function(e){function t(t){var n;return(n=e.call(this)||this).config=t||{},n.mutations=[],n.mutationId=0,n}(0,i.Z)(t,e);var n=t.prototype;return n.build=function(e,t,n){var r=new d({mutationCache:this,mutationId:++this.mutationId,options:e.defaultMutationOptions(t),state:n,defaultOptions:t.mutationKey?e.getMutationDefaults(t.mutationKey):void 0,meta:t.meta});return this.add(r),r},n.add=function(e){this.mutations.push(e),this.notify(e)},n.remove=function(e){this.mutations=this.mutations.filter((function(t){return t!==e})),e.cancel(),this.notify(e)},n.clear=function(){var e=this;a.V.batch((function(){e.mutations.forEach((function(t){e.remove(t)}))}))},n.getAll=function(){return this.mutations},n.find=function(e){return void 0===e.exact&&(e.exact=!0),this.mutations.find((function(t){return(0,o.X7)(e,t)}))},n.findAll=function(e){return this.mutations.filter((function(t){return(0,o.X7)(e,t)}))},n.notify=function(e){var t=this;a.V.batch((function(){t.listeners.forEach((function(t){t(e)}))}))},n.onFocus=function(){this.resumePausedMutations()},n.onOnline=function(){this.resumePausedMutations()},n.resumePausedMutations=function(){var e=this.mutations.filter((function(e){return e.state.isPaused}));return a.V.batch((function(){return e.reduce((function(e,t){return e.then((function(){return t.continue().catch(o.ZT)}))}),Promise.resolve())}))},t}(c.l),h=n(9852),m=n(68);function v(e,t){return null==e.getNextPageParam?void 0:e.getNextPageParam(t[t.length-1],t)}var y=function(){function e(e){void 0===e&&(e={}),this.queryCache=e.queryCache||new f,this.mutationCache=e.mutationCache||new p,this.defaultOptions=e.defaultOptions||{},this.queryDefaults=[],this.mutationDefaults=[]}var t=e.prototype;return t.mount=function(){var e=this;this.unsubscribeFocus=h.j.subscribe((function(){h.j.isFocused()&&m.N.isOnline()&&(e.mutationCache.onFocus(),e.queryCache.onFocus())})),this.unsubscribeOnline=m.N.subscribe((function(){h.j.isFocused()&&m.N.isOnline()&&(e.mutationCache.onOnline(),e.queryCache.onOnline())}))},t.unmount=function(){var e,t;null==(e=this.unsubscribeFocus)||e.call(this),null==(t=this.unsubscribeOnline)||t.call(this)},t.isFetching=function(e,t){var n=(0,o.I6)(e,t)[0];return n.fetching=!0,this.queryCache.findAll(n).length},t.isMutating=function(e){return this.mutationCache.findAll((0,r.Z)({},e,{fetching:!0})).length},t.getQueryData=function(e,t){var n;return null==(n=this.queryCache.find(e,t))?void 0:n.state.data},t.getQueriesData=function(e){return this.getQueryCache().findAll(e).map((function(e){return[e.queryKey,e.state.data]}))},t.setQueryData=function(e,t,n){var r=(0,o._v)(e),i=this.defaultQueryOptions(r);return this.queryCache.build(this,i).setData(t,n)},t.setQueriesData=function(e,t,n){var r=this;return a.V.batch((function(){return r.getQueryCache().findAll(e).map((function(e){var o=e.queryKey;return[o,r.setQueryData(o,t,n)]}))}))},t.getQueryState=function(e,t){var n;return null==(n=this.queryCache.find(e,t))?void 0:n.state},t.removeQueries=function(e,t){var n=(0,o.I6)(e,t)[0],r=this.queryCache;a.V.batch((function(){r.findAll(n).forEach((function(e){r.remove(e)}))}))},t.resetQueries=function(e,t,n){var i=this,u=(0,o.I6)(e,t,n),l=u[0],s=u[1],c=this.queryCache,f=(0,r.Z)({},l,{active:!0});return a.V.batch((function(){return c.findAll(l).forEach((function(e){e.reset()})),i.refetchQueries(f,s)}))},t.cancelQueries=function(e,t,n){var r=this,i=(0,o.I6)(e,t,n),u=i[0],l=i[1],s=void 0===l?{}:l;void 0===s.revert&&(s.revert=!0);var c=a.V.batch((function(){return r.queryCache.findAll(u).map((function(e){return e.cancel(s)}))}));return Promise.all(c).then(o.ZT).catch(o.ZT)},t.invalidateQueries=function(e,t,n){var i,u,l,s=this,c=(0,o.I6)(e,t,n),f=c[0],d=c[1],p=(0,r.Z)({},f,{active:null==(i=null!=(u=f.refetchActive)?u:f.active)||i,inactive:null!=(l=f.refetchInactive)&&l});return a.V.batch((function(){return s.queryCache.findAll(f).forEach((function(e){e.invalidate()})),s.refetchQueries(p,d)}))},t.refetchQueries=function(e,t,n){var i=this,u=(0,o.I6)(e,t,n),l=u[0],s=u[1],c=a.V.batch((function(){return i.queryCache.findAll(l).map((function(e){return e.fetch(void 0,(0,r.Z)({},s,{meta:{refetchPage:null==l?void 0:l.refetchPage}}))}))})),f=Promise.all(c).then(o.ZT);return(null==s?void 0:s.throwOnError)||(f=f.catch(o.ZT)),f},t.fetchQuery=function(e,t,n){var r=(0,o._v)(e,t,n),i=this.defaultQueryOptions(r);void 0===i.retry&&(i.retry=!1);var a=this.queryCache.build(this,i);return a.isStaleByTime(i.staleTime)?a.fetch(i):Promise.resolve(a.state.data)},t.prefetchQuery=function(e,t,n){return this.fetchQuery(e,t,n).then(o.ZT).catch(o.ZT)},t.fetchInfiniteQuery=function(e,t,n){var r=(0,o._v)(e,t,n);return r.behavior={onFetch:function(e){e.fetchFn=function(){var t,n,r,i,a,u,s,c,f,d=null==(t=e.fetchOptions)||null==(n=t.meta)?void 0:n.refetchPage,p=null==(r=e.fetchOptions)||null==(i=r.meta)?void 0:i.fetchMore,h=null==p?void 0:p.pageParam,m="forward"===(null==p?void 0:p.direction),y="backward"===(null==p?void 0:p.direction),g=(null==(a=e.state.data)?void 0:a.pages)||[],b=(null==(u=e.state.data)?void 0:u.pageParams)||[],w=(0,o.G9)(),S=null==w?void 0:w.signal,k=b,E=!1,x=e.options.queryFn||function(){return Promise.reject("Missing queryFn")},C=function(e,t,n,r){return k=r?[t].concat(k):[].concat(k,[t]),r?[n].concat(e):[].concat(e,[n])},P=function(t,n,r,o){if(E)return Promise.reject("Cancelled");if(void 0===r&&!n&&t.length)return Promise.resolve(t);var i={queryKey:e.queryKey,signal:S,pageParam:r,meta:e.meta},a=x(i),u=Promise.resolve(a).then((function(e){return C(t,r,e,o)}));return(0,l.LE)(a)&&(u.cancel=a.cancel),u};if(g.length)if(m){var O=void 0!==h,_=O?h:v(e.options,g);s=P(g,O,_)}else if(y){var R=void 0!==h,T=R?h:(c=e.options,f=g,null==c.getPreviousPageParam?void 0:c.getPreviousPageParam(f[0],f));s=P(g,R,T,!0)}else!function(){k=[];var t=void 0===e.options.getNextPageParam,n=!d||!g[0]||d(g[0],0,g);s=n?P([],t,b[0]):Promise.resolve(C([],b[0],g[0]));for(var r=function(n){s=s.then((function(r){if(!d||!g[n]||d(g[n],n,g)){var o=t?b[n]:v(e.options,r);return P(r,t,o)}return Promise.resolve(C(r,b[n],g[n]))}))},o=1;o<g.length;o++)r(o)}();else s=P([]);var N=s.then((function(e){return{pages:e,pageParams:k}}));return N.cancel=function(){E=!0,null==w||w.abort(),(0,l.LE)(s)&&s.cancel()},N}}},this.fetchQuery(r)},t.prefetchInfiniteQuery=function(e,t,n){return this.fetchInfiniteQuery(e,t,n).then(o.ZT).catch(o.ZT)},t.cancelMutations=function(){var e=this,t=a.V.batch((function(){return e.mutationCache.getAll().map((function(e){return e.cancel()}))}));return Promise.all(t).then(o.ZT).catch(o.ZT)},t.resumePausedMutations=function(){return this.getMutationCache().resumePausedMutations()},t.executeMutation=function(e){return this.mutationCache.build(this,e).execute()},t.getQueryCache=function(){return this.queryCache},t.getMutationCache=function(){return this.mutationCache},t.getDefaultOptions=function(){return this.defaultOptions},t.setDefaultOptions=function(e){this.defaultOptions=e},t.setQueryDefaults=function(e,t){var n=this.queryDefaults.find((function(t){return(0,o.yF)(e)===(0,o.yF)(t.queryKey)}));n?n.defaultOptions=t:this.queryDefaults.push({queryKey:e,defaultOptions:t})},t.getQueryDefaults=function(e){var t;return e?null==(t=this.queryDefaults.find((function(t){return(0,o.to)(e,t.queryKey)})))?void 0:t.defaultOptions:void 0},t.setMutationDefaults=function(e,t){var n=this.mutationDefaults.find((function(t){return(0,o.yF)(e)===(0,o.yF)(t.mutationKey)}));n?n.defaultOptions=t:this.mutationDefaults.push({mutationKey:e,defaultOptions:t})},t.getMutationDefaults=function(e){var t;return e?null==(t=this.mutationDefaults.find((function(t){return(0,o.to)(e,t.mutationKey)})))?void 0:t.defaultOptions:void 0},t.defaultQueryOptions=function(e){if(null==e?void 0:e._defaulted)return e;var t=(0,r.Z)({},this.defaultOptions.queries,this.getQueryDefaults(null==e?void 0:e.queryKey),e,{_defaulted:!0});return!t.queryHash&&t.queryKey&&(t.queryHash=(0,o.Rm)(t.queryKey,t)),t},t.defaultQueryObserverOptions=function(e){return this.defaultQueryOptions(e)},t.defaultMutationOptions=function(e){return(null==e?void 0:e._defaulted)?e:(0,r.Z)({},this.defaultOptions.mutations,this.getMutationDefaults(null==e?void 0:e.mutationKey),e,{_defaulted:!0})},t.clear=function(){this.queryCache.clear(),this.mutationCache.clear()},e}()},1216:(e,t,n)=>{"use strict";n.d(t,{DV:()=>s,LE:()=>u,m4:()=>c});var r=n(9852),o=n(68),i=n(2288);function a(e){return Math.min(1e3*Math.pow(2,e),3e4)}function u(e){return"function"==typeof(null==e?void 0:e.cancel)}var l=function(e){this.revert=null==e?void 0:e.revert,this.silent=null==e?void 0:e.silent};function s(e){return e instanceof l}var c=function(e){var t,n,s,c,f=this,d=!1;this.abort=e.abort,this.cancel=function(e){return null==t?void 0:t(e)},this.cancelRetry=function(){d=!0},this.continueRetry=function(){d=!1},this.continue=function(){return null==n?void 0:n()},this.failureCount=0,this.isPaused=!1,this.isResolved=!1,this.isTransportCancelable=!1,this.promise=new Promise((function(e,t){s=e,c=t}));var p=function(t){f.isResolved||(f.isResolved=!0,null==e.onSuccess||e.onSuccess(t),null==n||n(),s(t))},h=function(t){f.isResolved||(f.isResolved=!0,null==e.onError||e.onError(t),null==n||n(),c(t))};!function s(){if(!f.isResolved){var c;try{c=e.fn()}catch(e){c=Promise.reject(e)}t=function(e){if(!f.isResolved&&(h(new l(e)),null==f.abort||f.abort(),u(c)))try{c.cancel()}catch(e){}},f.isTransportCancelable=u(c),Promise.resolve(c).then(p).catch((function(t){var u,l;if(!f.isResolved){var c=null!=(u=e.retry)?u:3,p=null!=(l=e.retryDelay)?l:a,m="function"==typeof p?p(f.failureCount,t):p,v=!0===c||"number"==typeof c&&f.failureCount<c||"function"==typeof c&&c(f.failureCount,t);!d&&v?(f.failureCount++,null==e.onFail||e.onFail(f.failureCount,t),(0,i.Gh)(m).then((function(){if(!r.j.isFocused()||!o.N.isOnline())return new Promise((function(t){n=t,f.isPaused=!0,null==e.onPause||e.onPause()})).then((function(){n=void 0,f.isPaused=!1,null==e.onContinue||e.onContinue()}))})).then((function(){d?h(t):s()}))):h(t)}}))}}()}},2943:(e,t,n)=>{"use strict";n.d(t,{l:()=>r});var r=function(){function e(){this.listeners=[]}var t=e.prototype;return t.subscribe=function(e){var t=this,n=e||function(){};return this.listeners.push(n),this.onSubscribe(),function(){t.listeners=t.listeners.filter((function(e){return e!==n})),t.onUnsubscribe()}},t.hasListeners=function(){return this.listeners.length>0},t.onSubscribe=function(){},t.onUnsubscribe=function(){},e}()},6755:()=>{},2288:(e,t,n)=>{"use strict";n.d(t,{A4:()=>x,G9:()=>C,Gh:()=>E,I6:()=>f,Kp:()=>s,PN:()=>u,Q$:()=>g,Rm:()=>h,SE:()=>a,VS:()=>b,X7:()=>p,ZT:()=>i,_v:()=>c,_x:()=>d,mc:()=>l,sk:()=>o,to:()=>v,yF:()=>m});var r=n(7462),o="undefined"==typeof window;function i(){}function a(e,t){return"function"==typeof e?e(t):e}function u(e){return"number"==typeof e&&e>=0&&e!==1/0}function l(e){return Array.isArray(e)?e:[e]}function s(e,t){return Math.max(e+(t||0)-Date.now(),0)}function c(e,t,n){return k(e)?"function"==typeof t?(0,r.Z)({},n,{queryKey:e,queryFn:t}):(0,r.Z)({},t,{queryKey:e}):e}function f(e,t,n){return k(e)?[(0,r.Z)({},t,{queryKey:e}),n]:[e||{},t]}function d(e,t){var n=e.active,r=e.exact,o=e.fetching,i=e.inactive,a=e.predicate,u=e.queryKey,l=e.stale;if(k(u))if(r){if(t.queryHash!==h(u,t.options))return!1}else if(!v(t.queryKey,u))return!1;var s=function(e,t){return!0===e&&!0===t||null==e&&null==t?"all":!1===e&&!1===t?"none":(null!=e?e:!t)?"active":"inactive"}(n,i);if("none"===s)return!1;if("all"!==s){var c=t.isActive();if("active"===s&&!c)return!1;if("inactive"===s&&c)return!1}return!("boolean"==typeof l&&t.isStale()!==l||"boolean"==typeof o&&t.isFetching()!==o||a&&!a(t))}function p(e,t){var n=e.exact,r=e.fetching,o=e.predicate,i=e.mutationKey;if(k(i)){if(!t.options.mutationKey)return!1;if(n){if(m(t.options.mutationKey)!==m(i))return!1}else if(!v(t.options.mutationKey,i))return!1}return!("boolean"==typeof r&&"loading"===t.state.status!==r||o&&!o(t))}function h(e,t){return((null==t?void 0:t.queryKeyHashFn)||m)(e)}function m(e){var t;return t=l(e),JSON.stringify(t,(function(e,t){return w(t)?Object.keys(t).sort().reduce((function(e,n){return e[n]=t[n],e}),{}):t}))}function v(e,t){return y(l(e),l(t))}function y(e,t){return e===t||typeof e==typeof t&&!(!e||!t||"object"!=typeof e||"object"!=typeof t)&&!Object.keys(t).some((function(n){return!y(e[n],t[n])}))}function g(e,t){if(e===t)return e;var n=Array.isArray(e)&&Array.isArray(t);if(n||w(e)&&w(t)){for(var r=n?e.length:Object.keys(e).length,o=n?t:Object.keys(t),i=o.length,a=n?[]:{},u=0,l=0;l<i;l++){var s=n?l:o[l];a[s]=g(e[s],t[s]),a[s]===e[s]&&u++}return r===i&&u===r?e:a}return t}function b(e,t){if(e&&!t||t&&!e)return!1;for(var n in e)if(e[n]!==t[n])return!1;return!0}function w(e){if(!S(e))return!1;var t=e.constructor;if(void 0===t)return!0;var n=t.prototype;return!!S(n)&&!!n.hasOwnProperty("isPrototypeOf")}function S(e){return"[object Object]"===Object.prototype.toString.call(e)}function k(e){return"string"==typeof e||Array.isArray(e)}function E(e){return new Promise((function(t){setTimeout(t,e)}))}function x(e){Promise.resolve().then(e).catch((function(e){return setTimeout((function(){throw e}))}))}function C(){if("function"==typeof AbortController)return new AbortController}},8767:(e,t,n)=>{"use strict";n.d(t,{QueryClient:()=>r.QueryClient,QueryClientProvider:()=>o.QueryClientProvider,useQuery:()=>o.useQuery});var r=n(6747);n.o(r,"QueryClientProvider")&&n.d(t,{QueryClientProvider:function(){return r.QueryClientProvider}}),n.o(r,"useQuery")&&n.d(t,{useQuery:function(){return r.useQuery}});var o=n(7066)},7066:(e,t,n)=>{"use strict";n.d(t,{QueryClientProvider:()=>f,useQuery:()=>C});var r=n(101),o=n(3935).unstable_batchedUpdates;r.V.setBatchNotifyFunction(o);var i=n(1909),a=console;(0,i.E)(a);var u=n(7294),l=u.createContext(void 0),s=u.createContext(!1);function c(e){return e&&"undefined"!=typeof window?(window.ReactQueryClientContext||(window.ReactQueryClientContext=l),window.ReactQueryClientContext):l}var f=function(e){var t=e.client,n=e.contextSharing,r=void 0!==n&&n,o=e.children;u.useEffect((function(){return t.mount(),function(){t.unmount()}}),[t]);var i=c(r);return u.createElement(s.Provider,{value:r},u.createElement(i.Provider,{value:t},o))},d=n(7462),p=n(1721),h=n(2288),m=n(9852),v=n(2943),y=n(1216),g=function(e){function t(t,n){var r;return(r=e.call(this)||this).client=t,r.options=n,r.trackedProps=[],r.selectError=null,r.bindMethods(),r.setOptions(n),r}(0,p.Z)(t,e);var n=t.prototype;return n.bindMethods=function(){this.remove=this.remove.bind(this),this.refetch=this.refetch.bind(this)},n.onSubscribe=function(){1===this.listeners.length&&(this.currentQuery.addObserver(this),b(this.currentQuery,this.options)&&this.executeFetch(),this.updateTimers())},n.onUnsubscribe=function(){this.listeners.length||this.destroy()},n.shouldFetchOnReconnect=function(){return w(this.currentQuery,this.options,this.options.refetchOnReconnect)},n.shouldFetchOnWindowFocus=function(){return w(this.currentQuery,this.options,this.options.refetchOnWindowFocus)},n.destroy=function(){this.listeners=[],this.clearTimers(),this.currentQuery.removeObserver(this)},n.setOptions=function(e,t){var n=this.options,r=this.currentQuery;if(this.options=this.client.defaultQueryObserverOptions(e),void 0!==this.options.enabled&&"boolean"!=typeof this.options.enabled)throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=n.queryKey),this.updateQuery();var o=this.hasListeners();o&&S(this.currentQuery,r,this.options,n)&&this.executeFetch(),this.updateResult(t),!o||this.currentQuery===r&&this.options.enabled===n.enabled&&this.options.staleTime===n.staleTime||this.updateStaleTimeout();var i=this.computeRefetchInterval();!o||this.currentQuery===r&&this.options.enabled===n.enabled&&i===this.currentRefetchInterval||this.updateRefetchInterval(i)},n.getOptimisticResult=function(e){var t=this.client.defaultQueryObserverOptions(e),n=this.client.getQueryCache().build(this.client,t);return this.createResult(n,t)},n.getCurrentResult=function(){return this.currentResult},n.trackResult=function(e,t){var n=this,r={},o=function(e){n.trackedProps.includes(e)||n.trackedProps.push(e)};return Object.keys(e).forEach((function(t){Object.defineProperty(r,t,{configurable:!1,enumerable:!0,get:function(){return o(t),e[t]}})})),(t.useErrorBoundary||t.suspense)&&o("error"),r},n.getNextResult=function(e){var t=this;return new Promise((function(n,r){var o=t.subscribe((function(t){t.isFetching||(o(),t.isError&&(null==e?void 0:e.throwOnError)?r(t.error):n(t))}))}))},n.getCurrentQuery=function(){return this.currentQuery},n.remove=function(){this.client.getQueryCache().remove(this.currentQuery)},n.refetch=function(e){return this.fetch((0,d.Z)({},e,{meta:{refetchPage:null==e?void 0:e.refetchPage}}))},n.fetchOptimistic=function(e){var t=this,n=this.client.defaultQueryObserverOptions(e),r=this.client.getQueryCache().build(this.client,n);return r.fetch().then((function(){return t.createResult(r,n)}))},n.fetch=function(e){var t=this;return this.executeFetch(e).then((function(){return t.updateResult(),t.currentResult}))},n.executeFetch=function(e){this.updateQuery();var t=this.currentQuery.fetch(this.options,e);return(null==e?void 0:e.throwOnError)||(t=t.catch(h.ZT)),t},n.updateStaleTimeout=function(){var e=this;if(this.clearStaleTimeout(),!h.sk&&!this.currentResult.isStale&&(0,h.PN)(this.options.staleTime)){var t=(0,h.Kp)(this.currentResult.dataUpdatedAt,this.options.staleTime)+1;this.staleTimeoutId=setTimeout((function(){e.currentResult.isStale||e.updateResult()}),t)}},n.computeRefetchInterval=function(){var e;return"function"==typeof this.options.refetchInterval?this.options.refetchInterval(this.currentResult.data,this.currentQuery):null!=(e=this.options.refetchInterval)&&e},n.updateRefetchInterval=function(e){var t=this;this.clearRefetchInterval(),this.currentRefetchInterval=e,!h.sk&&!1!==this.options.enabled&&(0,h.PN)(this.currentRefetchInterval)&&0!==this.currentRefetchInterval&&(this.refetchIntervalId=setInterval((function(){(t.options.refetchIntervalInBackground||m.j.isFocused())&&t.executeFetch()}),this.currentRefetchInterval))},n.updateTimers=function(){this.updateStaleTimeout(),this.updateRefetchInterval(this.computeRefetchInterval())},n.clearTimers=function(){this.clearStaleTimeout(),this.clearRefetchInterval()},n.clearStaleTimeout=function(){this.staleTimeoutId&&(clearTimeout(this.staleTimeoutId),this.staleTimeoutId=void 0)},n.clearRefetchInterval=function(){this.refetchIntervalId&&(clearInterval(this.refetchIntervalId),this.refetchIntervalId=void 0)},n.createResult=function(e,t){var n,r=this.currentQuery,o=this.options,a=this.currentResult,u=this.currentResultState,l=this.currentResultOptions,s=e!==r,c=s?e.state:this.currentQueryInitialState,f=s?this.currentResult:this.previousQueryResult,d=e.state,p=d.dataUpdatedAt,m=d.error,v=d.errorUpdatedAt,y=d.isFetching,g=d.status,w=!1,E=!1;if(t.optimisticResults){var x=this.hasListeners(),C=!x&&b(e,t),P=x&&S(e,r,t,o);(C||P)&&(y=!0,p||(g="loading"))}if(t.keepPreviousData&&!d.dataUpdateCount&&(null==f?void 0:f.isSuccess)&&"error"!==g)n=f.data,p=f.dataUpdatedAt,g=f.status,w=!0;else if(t.select&&void 0!==d.data)if(a&&d.data===(null==u?void 0:u.data)&&t.select===this.selectFn)n=this.selectResult;else try{this.selectFn=t.select,n=t.select(d.data),!1!==t.structuralSharing&&(n=(0,h.Q$)(null==a?void 0:a.data,n)),this.selectResult=n,this.selectError=null}catch(e){(0,i.j)().error(e),this.selectError=e}else n=d.data;if(void 0!==t.placeholderData&&void 0===n&&("loading"===g||"idle"===g)){var O;if((null==a?void 0:a.isPlaceholderData)&&t.placeholderData===(null==l?void 0:l.placeholderData))O=a.data;else if(O="function"==typeof t.placeholderData?t.placeholderData():t.placeholderData,t.select&&void 0!==O)try{O=t.select(O),!1!==t.structuralSharing&&(O=(0,h.Q$)(null==a?void 0:a.data,O)),this.selectError=null}catch(e){(0,i.j)().error(e),this.selectError=e}void 0!==O&&(g="success",n=O,E=!0)}return this.selectError&&(m=this.selectError,n=this.selectResult,v=Date.now(),g="error"),{status:g,isLoading:"loading"===g,isSuccess:"success"===g,isError:"error"===g,isIdle:"idle"===g,data:n,dataUpdatedAt:p,error:m,errorUpdatedAt:v,failureCount:d.fetchFailureCount,errorUpdateCount:d.errorUpdateCount,isFetched:d.dataUpdateCount>0||d.errorUpdateCount>0,isFetchedAfterMount:d.dataUpdateCount>c.dataUpdateCount||d.errorUpdateCount>c.errorUpdateCount,isFetching:y,isRefetching:y&&"loading"!==g,isLoadingError:"error"===g&&0===d.dataUpdatedAt,isPlaceholderData:E,isPreviousData:w,isRefetchError:"error"===g&&0!==d.dataUpdatedAt,isStale:k(e,t),refetch:this.refetch,remove:this.remove}},n.shouldNotifyListeners=function(e,t){if(!t)return!0;var n=this.options,r=n.notifyOnChangeProps,o=n.notifyOnChangePropsExclusions;if(!r&&!o)return!0;if("tracked"===r&&!this.trackedProps.length)return!0;var i="tracked"===r?this.trackedProps:r;return Object.keys(e).some((function(n){var r=n,a=e[r]!==t[r],u=null==i?void 0:i.some((function(e){return e===n})),l=null==o?void 0:o.some((function(e){return e===n}));return a&&!l&&(!i||u)}))},n.updateResult=function(e){var t=this.currentResult;if(this.currentResult=this.createResult(this.currentQuery,this.options),this.currentResultState=this.currentQuery.state,this.currentResultOptions=this.options,!(0,h.VS)(this.currentResult,t)){var n={cache:!0};!1!==(null==e?void 0:e.listeners)&&this.shouldNotifyListeners(this.currentResult,t)&&(n.listeners=!0),this.notify((0,d.Z)({},n,e))}},n.updateQuery=function(){var e=this.client.getQueryCache().build(this.client,this.options);if(e!==this.currentQuery){var t=this.currentQuery;this.currentQuery=e,this.currentQueryInitialState=e.state,this.previousQueryResult=this.currentResult,this.hasListeners()&&(null==t||t.removeObserver(this),e.addObserver(this))}},n.onQueryUpdate=function(e){var t={};"success"===e.type?t.onSuccess=!0:"error"!==e.type||(0,y.DV)(e.error)||(t.onError=!0),this.updateResult(t),this.hasListeners()&&this.updateTimers()},n.notify=function(e){var t=this;r.V.batch((function(){e.onSuccess?(null==t.options.onSuccess||t.options.onSuccess(t.currentResult.data),null==t.options.onSettled||t.options.onSettled(t.currentResult.data,null)):e.onError&&(null==t.options.onError||t.options.onError(t.currentResult.error),null==t.options.onSettled||t.options.onSettled(void 0,t.currentResult.error)),e.listeners&&t.listeners.forEach((function(e){e(t.currentResult)})),e.cache&&t.client.getQueryCache().notify({query:t.currentQuery,type:"observerResultsUpdated"})}))},t}(v.l);function b(e,t){return function(e,t){return!(!1===t.enabled||e.state.dataUpdatedAt||"error"===e.state.status&&!1===t.retryOnMount)}(e,t)||e.state.dataUpdatedAt>0&&w(e,t,t.refetchOnMount)}function w(e,t,n){if(!1!==t.enabled){var r="function"==typeof n?n(e):n;return"always"===r||!1!==r&&k(e,t)}return!1}function S(e,t,n,r){return!1!==n.enabled&&(e!==t||!1===r.enabled)&&(!n.suspense||"error"!==e.state.status)&&k(e,n)}function k(e,t){return e.isStaleByTime(t.staleTime)}var E,x=u.createContext((E=!1,{clearReset:function(){E=!1},reset:function(){E=!0},isReset:function(){return E}}));function C(e,t,n){return function(e,t){var n=u.useRef(!1),o=u.useState(0)[1],i=function(){var e=u.useContext(c(u.useContext(s)));if(!e)throw new Error("No QueryClient set, use QueryClientProvider to set one");return e}(),a=u.useContext(x),l=i.defaultQueryObserverOptions(e);l.optimisticResults=!0,l.onError&&(l.onError=r.V.batchCalls(l.onError)),l.onSuccess&&(l.onSuccess=r.V.batchCalls(l.onSuccess)),l.onSettled&&(l.onSettled=r.V.batchCalls(l.onSettled)),l.suspense&&("number"!=typeof l.staleTime&&(l.staleTime=1e3),0===l.cacheTime&&(l.cacheTime=1)),(l.suspense||l.useErrorBoundary)&&(a.isReset()||(l.retryOnMount=!1));var f,d,p,h=u.useState((function(){return new t(i,l)}))[0],m=h.getOptimisticResult(l);if(u.useEffect((function(){n.current=!0,a.clearReset();var e=h.subscribe(r.V.batchCalls((function(){n.current&&o((function(e){return e+1}))})));return h.updateResult(),function(){n.current=!1,e()}}),[a,h]),u.useEffect((function(){h.setOptions(l,{listeners:!1})}),[l,h]),l.suspense&&m.isLoading)throw h.fetchOptimistic(l).then((function(e){var t=e.data;null==l.onSuccess||l.onSuccess(t),null==l.onSettled||l.onSettled(t,null)})).catch((function(e){a.clearReset(),null==l.onError||l.onError(e),null==l.onSettled||l.onSettled(void 0,e)}));if(m.isError&&!a.isReset()&&!m.isFetching&&(f=l.suspense,d=l.useErrorBoundary,p=[m.error,h.getCurrentQuery()],"function"==typeof d?d.apply(void 0,p):"boolean"==typeof d?d:f))throw m.error;return"tracked"===l.notifyOnChangeProps&&(m=h.trackResult(m,l)),m}((0,h._v)(e,t,n),g)}},2408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),l=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=y.prototype;var w=b.prototype=new g;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var S=Array.isArray,k=Object.prototype.hasOwnProperty,E={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var o,i={},a=null,u=null;if(null!=t)for(o in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,o)&&!x.hasOwnProperty(o)&&(i[o]=t[o]);var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===i[o]&&(i[o]=l[o]);return{$$typeof:n,type:e,key:a,ref:u,props:i,_owner:E.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var O=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function R(e,t,o,i,a){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return a=a(l=e),e=""===i?"."+_(l,0):i,S(a)?(o="",null!=e&&(o=e.replace(O,"$&/")+"/"),R(a,t,o,"",(function(e){return e}))):null!=a&&(P(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(O,"$&/")+"/")+e)),t.push(a)),1;if(l=0,i=""===i?".":i+":",S(e))for(var s=0;s<e.length;s++){var c=i+_(u=e[s],s);l+=R(u,t,o,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(u=e.next()).done;)l+=R(u=u.value,t,o,c=i+_(u,s++),a);else if("object"===u)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function T(e,t,n){if(null==e)return e;var r=[],o=0;return R(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function N(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var A={current:null},I={transition:null},D={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:I,ReactCurrentOwner:E};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!P(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=a,t.PureComponent=b,t.StrictMode=i,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=D,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),i=e.key,a=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,u=E.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(s in t)k.call(t,s)&&!x.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==l?l[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){l=Array(s);for(var c=0;c<s;c++)l[c]=arguments[c+2];o.children=l}return{$$typeof:n,type:e.type,key:i,ref:a,props:o,_owner:u}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=I.transition;I.transition={};try{e()}finally{I.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return A.current.useCallback(e,t)},t.useContext=function(e){return A.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return A.current.useDeferredValue(e)},t.useEffect=function(e,t){return A.current.useEffect(e,t)},t.useId=function(){return A.current.useId()},t.useImperativeHandle=function(e,t,n){return A.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return A.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return A.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return A.current.useMemo(e,t)},t.useReducer=function(e,t,n){return A.current.useReducer(e,t,n)},t.useRef=function(e){return A.current.useRef(e)},t.useState=function(e){return A.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return A.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return A.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<i(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var u=2*(r+1)-1,l=e[u],s=u+1,c=e[s];if(0>i(l,n))s<o&&0>i(c,l)?(e[r]=c,e[s]=n,r=s):(e[r]=l,e[u]=n,r=u);else{if(!(s<o&&0>i(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var u=Date,l=u.now();t.unstable_now=function(){return u.now()-l}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function S(e){if(v=!1,w(e),!m)if(null!==r(s))m=!0,I(k);else{var t=r(c);null!==t&&D(S,t.startTime-e)}}function k(e,n){m=!1,v&&(v=!1,g(P),P=-1),h=!0;var i=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!R());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var u=a(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?d.callback=u:d===r(s)&&o(s),w(n)}else o(s);d=r(s)}if(null!==d)var l=!0;else{var f=r(c);null!==f&&D(S,f.startTime-n),l=!1}return l}finally{d=null,p=i,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,x=!1,C=null,P=-1,O=5,_=-1;function R(){return!(t.unstable_now()-_<O)}function T(){if(null!==C){var e=t.unstable_now();_=e;var n=!0;try{n=C(!0,e)}finally{n?E():(x=!1,C=null)}}else x=!1}if("function"==typeof b)E=function(){b(T)};else if("undefined"!=typeof MessageChannel){var N=new MessageChannel,A=N.port2;N.port1.onmessage=T,E=function(){A.postMessage(null)}}else E=function(){y(T,0)};function I(e){C=e,x||(x=!0,E())}function D(e,n){P=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,I(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):O=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,i){var a=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>a?(e.sortIndex=i,n(c,e),null===r(s)&&e===r(c)&&(v?(g(P),P=-1):v=!0,D(S,i-a))):(e.sortIndex=u,n(s,e),m||h||(m=!0,I(k))),e},t.unstable_shouldYield=R,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},6774:e=>{e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var i=Object.keys(e),a=Object.keys(t);if(i.length!==a.length)return!1;for(var u=Object.prototype.hasOwnProperty.bind(t),l=0;l<i.length;l++){var s=i[l];if(!u(s))return!1;var c=e[s],f=t[s];if(!1===(o=n?n.call(r,c,f,s):void 0)||void 0===o&&c!==f)return!1}return!0}},3250:(e,t,n)=>{"use strict";var r=n(7294),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=r.useState,a=r.useEffect,u=r.useLayoutEffect,l=r.useDebugValue;function s(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var c="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=i({inst:{value:n,getSnapshot:t}}),o=r[0].inst,c=r[1];return u((function(){o.value=n,o.getSnapshot=t,s(o)&&c({inst:o})}),[e,n,t]),a((function(){return s(o)&&c({inst:o}),e((function(){s(o)&&c({inst:o})}))}),[e]),l(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:c},139:(e,t,n)=>{"use strict";var r=n(7294),o=n(1688),i="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=o.useSyncExternalStore,u=r.useRef,l=r.useEffect,s=r.useMemo,c=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var f=u(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=s((function(){function e(e){if(!l){if(l=!0,a=e,e=r(e),void 0!==o&&d.hasValue){var t=d.value;if(o(t,e))return u=t}return u=e}if(t=u,i(a,e))return t;var n=r(e);return void 0!==o&&o(t,n)?t:(a=e,u=n)}var a,u,l=!1,s=void 0===n?null:n;return[function(){return e(t())},null===s?void 0:function(){return e(s())}]}),[t,n,r,o]);var p=a(e,f[0],f[1]);return l((function(){d.hasValue=!0,d.value=p}),[p]),c(p),p}},1688:(e,t,n)=>{"use strict";e.exports=n(3250)},2798:(e,t,n)=>{"use strict";e.exports=n(139)},7462:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},1721:(e,t,n)=>{"use strict";function r(e,t){return r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},r(e,t)}function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}n.d(t,{Z:()=>o})}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(7294),t=n(745),r=n(1688),o=n(2798),i=n(3935);let a=function(e){e()};const u=()=>a,l=e.createContext(null);function s(){return(0,e.useContext)(l)}let c=()=>{throw new Error("uSES not initialized!")};const f=(e,t)=>e===t;function d(t=l){const n=t===l?s:()=>(0,e.useContext)(t);return function(t,r=f){const{store:o,subscription:i,getServerState:a}=n(),u=c(i.addNestedSub,o.getState,a||o.getState,t,r);return(0,e.useDebugValue)(u),u}}const p=d();var h=n(8679),m=n.n(h),v=n(9864);const y={notify(){},get:()=>[]};const g="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?e.useLayoutEffect:e.useEffect;let b=null;function w(t=l){const n=t===l?s:()=>(0,e.useContext)(t);return function(){const{store:e}=n();return e}}const S=w();function k(e=l){const t=e===l?S:w(e);return function(){return t().dispatch}}const E=k();var x;(e=>{c=e})(o.useSyncExternalStoreWithSelector),(e=>{b=e})(r.useSyncExternalStore),x=i.unstable_batchedUpdates,a=x;var C=n(8767),P=n(6774),O=n.n(P);const _=function(e){function t(e,r,l,s,d){for(var p,h,m,v,w,k=0,E=0,x=0,C=0,P=0,A=0,D=m=p=0,F=0,j=0,z=0,M=0,U=l.length,$=U-1,B="",Q="",q="",V="";F<U;){if(h=l.charCodeAt(F),F===$&&0!==E+C+x+k&&(0!==E&&(h=47===E?10:47),C=x=k=0,U++,$++),0===E+C+x+k){if(F===$&&(0<j&&(B=B.replace(f,"")),0<B.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:B+=l.charAt(F)}h=59}switch(h){case 123:for(p=(B=B.trim()).charCodeAt(0),m=1,M=++F;F<U;){switch(h=l.charCodeAt(F)){case 123:m++;break;case 125:m--;break;case 47:switch(h=l.charCodeAt(F+1)){case 42:case 47:e:{for(D=F+1;D<$;++D)switch(l.charCodeAt(D)){case 47:if(42===h&&42===l.charCodeAt(D-1)&&F+2!==D){F=D+1;break e}break;case 10:if(47===h){F=D+1;break e}}F=D}}break;case 91:h++;case 40:h++;case 34:case 39:for(;F++<$&&l.charCodeAt(F)!==h;);}if(0===m)break;F++}if(m=l.substring(M,F),0===p&&(p=(B=B.replace(c,"").trim()).charCodeAt(0)),64===p){switch(0<j&&(B=B.replace(f,"")),h=B.charCodeAt(1)){case 100:case 109:case 115:case 45:j=r;break;default:j=N}if(M=(m=t(r,j,m,h,d+1)).length,0<I&&(w=u(3,m,j=n(N,B,z),r,_,O,M,h,d,s),B=j.join(""),void 0!==w&&0===(M=(m=w.trim()).length)&&(h=0,m="")),0<M)switch(h){case 115:B=B.replace(S,a);case 100:case 109:case 45:m=B+"{"+m+"}";break;case 107:m=(B=B.replace(y,"$1 $2"))+"{"+m+"}",m=1===T||2===T&&i("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=B+m,112===s&&(Q+=m,m="")}else m=""}else m=t(r,n(r,B,z),m,s,d+1);q+=m,m=z=j=D=p=0,B="",h=l.charCodeAt(++F);break;case 125:case 59:if(1<(M=(B=(0<j?B.replace(f,""):B).trim()).length))switch(0===D&&(p=B.charCodeAt(0),45===p||96<p&&123>p)&&(M=(B=B.replace(" ",":")).length),0<I&&void 0!==(w=u(1,B,r,e,_,O,Q.length,s,d,s))&&0===(M=(B=w.trim()).length)&&(B="\0\0"),p=B.charCodeAt(0),h=B.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){V+=B+l.charAt(F);break}default:58!==B.charCodeAt(M-1)&&(Q+=o(B,p,h,B.charCodeAt(2)))}z=j=D=p=0,B="",h=l.charCodeAt(++F)}}switch(h){case 13:case 10:47===E?E=0:0===1+p&&107!==s&&0<B.length&&(j=1,B+="\0"),0<I*L&&u(0,B,r,e,_,O,Q.length,s,d,s),O=1,_++;break;case 59:case 125:if(0===E+C+x+k){O++;break}default:switch(O++,v=l.charAt(F),h){case 9:case 32:if(0===C+k+E)switch(P){case 44:case 58:case 9:case 32:v="";break;default:32!==h&&(v=" ")}break;case 0:v="\\0";break;case 12:v="\\f";break;case 11:v="\\v";break;case 38:0===C+E+k&&(j=z=1,v="\f"+v);break;case 108:if(0===C+E+k+R&&0<D)switch(F-D){case 2:112===P&&58===l.charCodeAt(F-3)&&(R=P);case 8:111===A&&(R=A)}break;case 58:0===C+E+k&&(D=F);break;case 44:0===E+x+C+k&&(j=1,v+="\r");break;case 34:case 39:0===E&&(C=C===h?0:0===C?h:C);break;case 91:0===C+E+x&&k++;break;case 93:0===C+E+x&&k--;break;case 41:0===C+E+k&&x--;break;case 40:0===C+E+k&&(0===p&&(2*P+3*A==533||(p=1)),x++);break;case 64:0===E+x+C+k+D+m&&(m=1);break;case 42:case 47:if(!(0<C+k+x))switch(E){case 0:switch(2*h+3*l.charCodeAt(F+1)){case 235:E=47;break;case 220:M=F,E=42}break;case 42:47===h&&42===P&&M+2!==F&&(33===l.charCodeAt(M+2)&&(Q+=l.substring(M,F+1)),v="",E=0)}}0===E&&(B+=v)}A=P,P=h,F++}if(0<(M=Q.length)){if(j=r,0<I&&void 0!==(w=u(2,Q,j,e,_,O,M,s,d,s))&&0===(Q=w).length)return V+Q+q;if(Q=j.join(",")+"{"+Q+"}",0!=T*R){switch(2!==T||i(Q,2)||(R=0),R){case 111:Q=Q.replace(b,":-moz-$1")+Q;break;case 112:Q=Q.replace(g,"::-webkit-input-$1")+Q.replace(g,"::-moz-$1")+Q.replace(g,":-ms-input-$1")+Q}R=0}}return V+Q+q}function n(e,t,n){var o=t.trim().split(m);t=o;var i=o.length,a=e.length;switch(a){case 0:case 1:var u=0;for(e=0===a?"":e[0]+" ";u<i;++u)t[u]=r(e,t[u],n).trim();break;default:var l=u=0;for(t=[];u<i;++u)for(var s=0;s<a;++s)t[l++]=r(e[s]+" ",o[u],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(v,"$1"+e.trim());case 58:return e.trim()+t.replace(v,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(v,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var a=e+";",u=2*t+3*n+4*r;if(944===u){e=a.indexOf(":",9)+1;var l=a.substring(e,a.length-1).trim();return l=a.substring(0,e).trim()+l+";",1===T||2===T&&i(l,1)?"-webkit-"+l+l:l}if(0===T||2===T&&!i(a,1))return a;switch(u){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(P,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(l=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+l+a;case 1005:return p.test(a)?a.replace(d,":-webkit-")+a.replace(d,":-moz-")+a:a;case 1e3:switch(t=(l=a.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(t)){case 226:l=a.replace(w,"tb");break;case 232:l=a.replace(w,"tb-rl");break;case 220:l=a.replace(w,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+l+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(t=(a=e).length-10,u=(l=(33===a.charCodeAt(t)?a.substring(0,t):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:a=a.replace(l,"-webkit-"+l)+";"+a;break;case 207:case 102:a=a.replace(l,"-webkit-"+(102<u?"inline-":"")+"box")+";"+a.replace(l,"-webkit-"+l)+";"+a.replace(l,"-ms-"+l+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return l=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+l+"-ms-flex-"+l+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(E,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(E,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===C.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):a.replace(l,"-webkit-"+l)+a.replace(l,"-moz-"+l.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+r&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+a}return a}function i(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),D(2!==t?r:r.replace(x,"$1"),n,t)}function a(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(k," or ($1)").substring(4):"("+t+")"}function u(e,t,n,r,o,i,a,u,l,c){for(var f,d=0,p=t;d<I;++d)switch(f=A[d].call(s,e,p,n,r,o,i,a,u,l,c)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function l(e){return void 0!==(e=e.prefix)&&(D=null,e?"function"!=typeof e?T=1:(T=2,D=e):T=0),l}function s(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<I){var o=u(-1,n,r,r,_,O,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var i=t(N,r,n,0,0);return 0<I&&void 0!==(o=u(-2,i,r,r,_,O,i.length,0,0,0))&&(i=o),R=0,O=_=1,i}var c=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,v=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,S=/\(\s*(.*)\s*\)/g,k=/([\s\S]*?);/g,E=/-self|flex-/g,x=/[^]*?(:[rp][el]a[\w-]+)[^]*/,C=/stretch|:\s*\w+\-(?:conte|avail)/,P=/([^-])(image-set\()/,O=1,_=1,R=0,T=1,N=[],A=[],I=0,D=null,L=0;return s.use=function e(t){switch(t){case void 0:case null:I=A.length=0;break;default:if("function"==typeof t)A[I++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else L=0|!!t}return e},s.set=l,void 0!==e&&l(e),s},R={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},T=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var N=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const A=T((function(e){return N.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));function I(){return(I=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var D=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},L=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,v.typeOf)(e)},F=Object.freeze([]),j=Object.freeze({});function z(e){return"function"==typeof e}function M(e){return e.displayName||e.name||"Component"}function U(e){return e&&"string"==typeof e.styledComponentId}var $="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",B="undefined"!=typeof window&&"HTMLElement"in window,Q=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),q={};function V(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var H=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&V(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var i=r;i<o;i++)this.groupSizes[i]=0}for(var a=this.indexOfGroup(e+1),u=0,l=t.length;u<l;u++)this.tag.insertRule(a,t[u])&&(this.groupSizes[e]++,a++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,i=r;i<o;i++)t+=this.tag.getRule(i)+"/*!sc*/\n";return t},e}(),W=new Map,K=new Map,Z=1,G=function(e){if(W.has(e))return W.get(e);for(;K.has(Z);)Z++;var t=Z++;return W.set(e,t),K.set(t,e),t},X=function(e){return K.get(e)},Y=function(e,t){t>=Z&&(Z=t+1),W.set(e,t),K.set(t,e)},J="style["+$+'][data-styled-version="5.3.5"]',ee=new RegExp("^"+$+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),te=function(e,t,n){for(var r,o=n.split(","),i=0,a=o.length;i<a;i++)(r=o[i])&&e.registerName(t,r)},ne=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,i=n.length;o<i;o++){var a=n[o].trim();if(a){var u=a.match(ee);if(u){var l=0|parseInt(u[1],10),s=u[2];0!==l&&(Y(s,l),te(e,s,u[3]),e.getTag().insertRules(l,r)),r.length=0}else r.push(a)}}},re=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},oe=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute($))return r}}(n),i=void 0!==o?o.nextSibling:null;r.setAttribute($,"active"),r.setAttribute("data-styled-version","5.3.5");var a=re();return a&&r.setAttribute("nonce",a),n.insertBefore(r,i),r},ie=function(){function e(e){var t=this.element=oe(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}V(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),ae=function(){function e(e){var t=this.element=oe(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),ue=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),le=B,se={isServer:!B,useCSSOMInjection:!Q},ce=function(){function e(e,t,n){void 0===e&&(e=j),void 0===t&&(t={}),this.options=I({},se,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&B&&le&&(le=!1,function(e){for(var t=document.querySelectorAll(J),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute($)&&(ne(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return G(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(I({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new ue(o):r?new ie(o):new ae(o),new H(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(G(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(G(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(G(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var i=X(o);if(void 0!==i){var a=e.names.get(i),u=t.getGroup(o);if(a&&u&&a.size){var l=$+".g"+o+'[id="'+i+'"]',s="";void 0!==a&&a.forEach((function(e){e.length>0&&(s+=e+",")})),r+=""+u+l+'{content:"'+s+'"}/*!sc*/\n'}}}return r}(this)},e}(),fe=/(a)(d)/gi,de=function(e){return String.fromCharCode(e+(e>25?39:97))};function pe(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=de(t%52)+n;return(de(t%52)+n).replace(fe,"$1-$2")}var he=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},me=function(e){return he(5381,e)};function ve(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(z(n)&&!U(n))return!1}return!0}var ye=me("5.3.5"),ge=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&ve(e),this.componentId=t,this.baseHash=he(ye,t),this.baseStyle=n,ce.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var i=Fe(this.rules,e,t,n).join(""),a=pe(he(this.baseHash,i)>>>0);if(!t.hasNameForId(r,a)){var u=n(i,"."+a,void 0,r);t.insertRules(r,a,u)}o.push(a),this.staticRulesId=a}else{for(var l=this.rules.length,s=he(this.baseHash,n.hash),c="",f=0;f<l;f++){var d=this.rules[f];if("string"==typeof d)c+=d;else if(d){var p=Fe(d,e,t,n),h=Array.isArray(p)?p.join(""):p;s=he(s,h+f),c+=h}}if(c){var m=pe(s>>>0);if(!t.hasNameForId(r,m)){var v=n(c,"."+m,void 0,r);t.insertRules(r,m,v)}o.push(m)}}return o.join(" ")},e}(),be=/^\s*\/\/.*$/gm,we=[":","[",".","#"];function Se(e){var t,n,r,o,i=void 0===e?j:e,a=i.options,u=void 0===a?j:a,l=i.plugins,s=void 0===l?F:l,c=new _(u),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,i,a,u,l,s,c,f){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===s)return r+"/*|*/";break;case 3:switch(s){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,i){return 0===r&&-1!==we.indexOf(i[n.length])||i.match(o)?e:"."+t};function h(e,i,a,u){void 0===u&&(u="&");var l=e.replace(be,""),s=i&&a?a+" "+i+" { "+l+" }":l;return t=u,n=i,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),c(a||!i?"":i,s)}return c.use([].concat(s,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),h.hash=s.length?s.reduce((function(e,t){return t.name||V(15),he(e,t.name)}),5381).toString():"",h}var ke=e.createContext(),Ee=(ke.Consumer,e.createContext()),xe=(Ee.Consumer,new ce),Ce=Se();function Pe(){return(0,e.useContext)(ke)||xe}function Oe(){return(0,e.useContext)(Ee)||Ce}function _e(t){var n=(0,e.useState)(t.stylisPlugins),r=n[0],o=n[1],i=Pe(),a=(0,e.useMemo)((function(){var e=i;return t.sheet?e=t.sheet:t.target&&(e=e.reconstructWithOptions({target:t.target},!1)),t.disableCSSOMInjection&&(e=e.reconstructWithOptions({useCSSOMInjection:!1})),e}),[t.disableCSSOMInjection,t.sheet,t.target]),u=(0,e.useMemo)((function(){return Se({options:{prefix:!t.disableVendorPrefixes},plugins:r})}),[t.disableVendorPrefixes,r]);return(0,e.useEffect)((function(){O()(r,t.stylisPlugins)||o(t.stylisPlugins)}),[t.stylisPlugins]),e.createElement(ke.Provider,{value:a},e.createElement(Ee.Provider,{value:u},t.children))}var Re=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Ce);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return V(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=Ce),this.name+e.hash},e}(),Te=/([A-Z])/,Ne=/([A-Z])/g,Ae=/^ms-/,Ie=function(e){return"-"+e.toLowerCase()};function De(e){return Te.test(e)?e.replace(Ne,Ie).replace(Ae,"-ms-"):e}var Le=function(e){return null==e||!1===e||""===e};function Fe(e,t,n,r){if(Array.isArray(e)){for(var o,i=[],a=0,u=e.length;a<u;a+=1)""!==(o=Fe(e[a],t,n,r))&&(Array.isArray(o)?i.push.apply(i,o):i.push(o));return i}return Le(e)?"":U(e)?"."+e.styledComponentId:z(e)?"function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!t?e:Fe(e(t),t,n,r):e instanceof Re?n?(e.inject(n,r),e.getName(r)):e:L(e)?function e(t,n){var r,o,i=[];for(var a in t)t.hasOwnProperty(a)&&!Le(t[a])&&(Array.isArray(t[a])&&t[a].isCss||z(t[a])?i.push(De(a)+":",t[a],";"):L(t[a])?i.push.apply(i,e(t[a],a)):i.push(De(a)+": "+(r=a,(null==(o=t[a])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in R?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(i,["}"]):i}(e):e.toString();var l}var je=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function ze(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return z(e)||L(e)?je(Fe(D(F,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:je(Fe(D(e,n)))}new Set;var Me=function(e,t,n){return void 0===n&&(n=j),e.theme!==n.theme&&e.theme||t||n.theme},Ue=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,$e=/(^-|-$)/g;function Be(e){return e.replace(Ue,"-").replace($e,"")}var Qe=function(e){return pe(me(e)>>>0)};function qe(e){return"string"==typeof e&&!0}var Ve=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},He=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function We(e,t,n){var r=e[n];Ve(t)&&Ve(r)?Ke(r,t):e[n]=t}function Ke(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,i=n;o<i.length;o++){var a=i[o];if(Ve(a))for(var u in a)He(u)&&We(e,a[u],u)}return e}var Ze=e.createContext();Ze.Consumer;var Ge={};function Xe(t,n,r){var o=U(t),i=!qe(t),a=n.attrs,u=void 0===a?F:a,l=n.componentId,s=void 0===l?function(e,t){var n="string"!=typeof e?"sc":Be(e);Ge[n]=(Ge[n]||0)+1;var r=n+"-"+Qe("5.3.5"+n+Ge[n]);return t?t+"-"+r:r}(n.displayName,n.parentComponentId):l,c=n.displayName,f=void 0===c?function(e){return qe(e)?"styled."+e:"Styled("+M(e)+")"}(t):c,d=n.displayName&&n.componentId?Be(n.displayName)+"-"+n.componentId:n.componentId||s,p=o&&t.attrs?Array.prototype.concat(t.attrs,u).filter(Boolean):u,h=n.shouldForwardProp;o&&t.shouldForwardProp&&(h=n.shouldForwardProp?function(e,r,o){return t.shouldForwardProp(e,r,o)&&n.shouldForwardProp(e,r,o)}:t.shouldForwardProp);var v,y=new ge(r,d,o?t.componentStyle:void 0),g=y.isStatic&&0===u.length,b=function(t,n){return function(t,n,r,o){var i=t.attrs,a=t.componentStyle,u=t.defaultProps,l=t.foldedComponentIds,s=t.shouldForwardProp,c=t.styledComponentId,f=t.target,d=function(e,t,n){void 0===e&&(e=j);var r=I({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,i,a=e;for(t in z(a)&&(a=a(r)),a)r[t]=o[t]="className"===t?(n=o[t],i=a[t],n&&i?n+" "+i:n||i):a[t]})),[r,o]}(Me(n,(0,e.useContext)(Ze),u)||j,n,i),p=d[0],h=d[1],m=function(e,t,n,r){var o=Pe(),i=Oe();return t?e.generateAndInjectStyles(j,o,i):e.generateAndInjectStyles(n,o,i)}(a,o,p),v=r,y=h.$as||n.$as||h.as||n.as||f,g=qe(y),b=h!==n?I({},n,{},h):n,w={};for(var S in b)"$"!==S[0]&&"as"!==S&&("forwardedAs"===S?w.as=b[S]:(s?s(S,A,y):!g||A(S))&&(w[S]=b[S]));return n.style&&h.style!==n.style&&(w.style=I({},n.style,{},h.style)),w.className=Array.prototype.concat(l,c,m!==c?m:null,n.className,h.className).filter(Boolean).join(" "),w.ref=v,(0,e.createElement)(y,w)}(v,t,n,g)};return b.displayName=f,(v=e.forwardRef(b)).attrs=p,v.componentStyle=y,v.displayName=f,v.shouldForwardProp=h,v.foldedComponentIds=o?Array.prototype.concat(t.foldedComponentIds,t.styledComponentId):F,v.styledComponentId=d,v.target=o?t.target:t,v.withComponent=function(e){var t=n.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,["componentId"]),i=t&&t+"-"+(qe(e)?e:Be(M(e)));return Xe(e,I({},o,{attrs:p,componentId:i}),r)},Object.defineProperty(v,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=o?Ke({},t.defaultProps,e):e}}),v.toString=function(){return"."+v.styledComponentId},i&&m()(v,t,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),v}var Ye=function(e){return function e(t,n,r){if(void 0===r&&(r=j),!(0,v.isValidElementType)(n))return V(1,String(n));var o=function(){return t(n,r,ze.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,I({},r,{},o))},o.attrs=function(o){return e(t,n,I({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(Xe,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){Ye[e]=Ye(e)}));var Je=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=ve(e),ce.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Fe(this.rules,t,n,r).join(""),""),i=this.componentId+e;n.insertRules(i,i,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&ce.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();!function(){var t=function(){var t=this;this._emitSheetCSS=function(){var e=t.instance.toString();if(!e)return"";var n=re();return"<style "+[n&&'nonce="'+n+'"',$+'="true"','data-styled-version="5.3.5"'].filter(Boolean).join(" ")+">"+e+"</style>"},this.getStyleTags=function(){return t.sealed?V(2):t._emitSheetCSS()},this.getStyleElement=function(){var n;if(t.sealed)return V(2);var r=((n={})[$]="",n["data-styled-version"]="5.3.5",n.dangerouslySetInnerHTML={__html:t.instance.toString()},n),o=re();return o&&(r.nonce=o),[e.createElement("style",I({},r,{key:"sc-0-0"}))]},this.seal=function(){t.sealed=!0},this.instance=new ce({isServer:!0}),this.sealed=!1}.prototype;t.collectStyles=function(t){return this.sealed?V(2):e.createElement(_e,{sheet:this.instance},t)},t.interleaveWithNodeStream=function(e){return V(3)}}();const et=Ye,tt=(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var i=ze.apply(void 0,[t].concat(r)),a="sc-global-"+Qe(JSON.stringify(i)),u=new Je(i,a);function l(t){var n=Pe(),r=Oe(),o=(0,e.useContext)(Ze),i=(0,e.useRef)(n.allocateGSInstance(a)).current;return n.server&&s(i,t,n,o,r),(0,e.useLayoutEffect)((function(){if(!n.server)return s(i,t,n,o,r),function(){return u.removeStyles(i,n)}}),[i,t,n,o,r]),null}function s(e,t,n,r,o){if(u.isStatic)u.renderStyles(e,q,n,o);else{var i=I({},t,{theme:Me(t,r,l.defaultProps)});u.renderStyles(e,i,n,o)}}return e.memo(l)})`
input, label {
    display:block;
}

body {
    margin: 0;
    height: 100vh;
    font-family: Roboto, Helvetica, sans-serif;
}
@keyframes gradient {
    0% {
        background-position: 0% 50%;
    }
 
    50% {
        background-position: 100% 50%;
    }
 
    100% {
        background-position: 0% 50%;
    }
}`;var nt,rt=n(7462);!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(nt||(nt={}));var ot="beforeunload";function it(e){e.preventDefault(),e.returnValue=""}function at(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function ut(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}const lt=(0,e.createContext)(null),st=(0,e.createContext)(null),ct=(0,e.createContext)({outlet:null,matches:[]});function ft(e,t){if(!e)throw new Error(t)}function dt(e,t,n){void 0===n&&(n="/");let r=bt(("string"==typeof t?ut(t):t).pathname||"/",n);if(null==r)return null;let o=pt(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e)i=yt(o[e],r);return i}function pt(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,o)=>{let i={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(i.relativePath.startsWith(r)||ft(!1),i.relativePath=i.relativePath.slice(r.length));let a=wt([r,i.relativePath]),u=n.concat(i);e.children&&e.children.length>0&&(!0===e.index&&ft(!1),pt(e.children,t,u,a)),(null!=e.path||e.index)&&t.push({path:a,score:vt(a,e.index),routesMeta:u})})),t}const ht=/^:\w+$/,mt=e=>"*"===e;function vt(e,t){let n=e.split("/"),r=n.length;return n.some(mt)&&(r+=-2),t&&(r+=2),n.filter((e=>!mt(e))).reduce(((e,t)=>e+(ht.test(t)?3:""===t?1:10)),r)}function yt(e,t){let{routesMeta:n}=e,r={},o="/",i=[];for(let e=0;e<n.length;++e){let a=n[e],u=e===n.length-1,l="/"===o?t:t.slice(o.length)||"/",s=gt({path:a.relativePath,caseSensitive:a.caseSensitive,end:u},l);if(!s)return null;Object.assign(r,s.params);let c=a.route;i.push({params:r,pathname:wt([o,s.pathname]),pathnameBase:St(wt([o,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(o=wt([o,s.pathnameBase]))}return i}function gt(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):o+=n?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let i=o[0],a=i.replace(/(.)\/+$/,"$1"),u=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=u[n]||"";a=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(u[n]||""),e}),{}),pathname:i,pathnameBase:a,pattern:e}}function bt(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const wt=e=>e.join("/").replace(/\/\/+/g,"/"),St=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),kt=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",Et=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function xt(){return null!=(0,e.useContext)(st)}function Ct(){return xt()||ft(!1),(0,e.useContext)(st).location}function Pt(){xt()||ft(!1);let{basename:t,navigator:n}=(0,e.useContext)(lt),{matches:r}=(0,e.useContext)(ct),{pathname:o}=Ct(),i=JSON.stringify(r.map((e=>e.pathnameBase))),a=(0,e.useRef)(!1);return(0,e.useEffect)((()=>{a.current=!0})),(0,e.useCallback)((function(e,r){if(void 0===r&&(r={}),!a.current)return;if("number"==typeof e)return void n.go(e);let u=function(e,t,n){let r,o="string"==typeof e?ut(e):e,i=""===e||""===o.pathname?"/":o.pathname;if(null==i)r=n;else{let e=t.length-1;if(i.startsWith("..")){let t=i.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}r=e>=0?t[e]:"/"}let a=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?ut(e):e,i=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:i,search:kt(r),hash:Et(o)}}(o,r);return i&&"/"!==i&&i.endsWith("/")&&!a.pathname.endsWith("/")&&(a.pathname+="/"),a}(e,JSON.parse(i),o);"/"!==t&&(u.pathname=wt([t,u.pathname])),(r.replace?n.replace:n.push)(u,r.state)}),[t,n,i,o])}const Ot=(0,e.createContext)(null);function _t(t){let{to:n,replace:r,state:o}=t;xt()||ft(!1);let i=Pt();return(0,e.useEffect)((()=>{i(n,{replace:r,state:o})})),null}function Rt(t){return function(t){let n=(0,e.useContext)(ct).outlet;return n?(0,e.createElement)(Ot.Provider,{value:t},n):n}(t.context)}function Tt(e){ft(!1)}function Nt(t){let{basename:n="/",children:r=null,location:o,navigationType:i=nt.Pop,navigator:a,static:u=!1}=t;xt()&&ft(!1);let l=St(n),s=(0,e.useMemo)((()=>({basename:l,navigator:a,static:u})),[l,a,u]);"string"==typeof o&&(o=ut(o));let{pathname:c="/",search:f="",hash:d="",state:p=null,key:h="default"}=o,m=(0,e.useMemo)((()=>{let e=bt(c,l);return null==e?null:{pathname:e,search:f,hash:d,state:p,key:h}}),[l,c,f,d,p,h]);return null==m?null:(0,e.createElement)(lt.Provider,{value:s},(0,e.createElement)(st.Provider,{children:r,value:{location:m,navigationType:i}}))}function At(t){let{children:n,location:r}=t;return function(t,n){xt()||ft(!1);let{matches:r}=(0,e.useContext)(ct),o=r[r.length-1],i=o?o.params:{},a=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;let u,l=Ct();if(n){var s;let e="string"==typeof n?ut(n):n;"/"===a||(null==(s=e.pathname)?void 0:s.startsWith(a))||ft(!1),u=e}else u=l;let c=u.pathname||"/",f=dt(t,{pathname:"/"===a?c:c.slice(a.length)||"/"});return function(t,n){return void 0===n&&(n=[]),null==t?null:t.reduceRight(((r,o,i)=>(0,e.createElement)(ct.Provider,{children:void 0!==o.route.element?o.route.element:r,value:{outlet:r,matches:n.concat(t.slice(0,i+1))}})),null)}(f&&f.map((e=>Object.assign({},e,{params:Object.assign({},i,e.params),pathname:wt([a,e.pathname]),pathnameBase:"/"===e.pathnameBase?a:wt([a,e.pathnameBase])}))),r)}(It(n),r)}function It(t){let n=[];return e.Children.forEach(t,(t=>{if(!(0,e.isValidElement)(t))return;if(t.type===e.Fragment)return void n.push.apply(n,It(t.props.children));t.type!==Tt&&ft(!1);let r={caseSensitive:t.props.caseSensitive,element:t.props.element,index:t.props.index,path:t.props.path};t.props.children&&(r.children=It(t.props.children)),n.push(r)})),n}function Dt(t){let{basename:n,children:r,window:o}=t,i=(0,e.useRef)();null==i.current&&(i.current=function(e){void 0===e&&(e={});var t=e.window,n=void 0===t?document.defaultView:t,r=n.history;function o(){var e=n.location,t=e.pathname,o=e.search,i=e.hash,a=r.state||{};return[a.idx,{pathname:t,search:o,hash:i,state:a.usr||null,key:a.key||"default"}]}var i=null;n.addEventListener("popstate",(function(){if(i)f.call(i),i=null;else{var e=nt.Pop,t=o(),n=t[0],r=t[1];if(f.length){if(null!=n){var a=l-n;a&&(i={action:e,location:r,retry:function(){y(-1*a)}},y(a))}}else v(e)}}));var a=nt.Pop,u=o(),l=u[0],s=u[1],c=at(),f=at();function d(e){return"string"==typeof e?e:function(e){var t=e.pathname,n=void 0===t?"/":t,r=e.search,o=void 0===r?"":r,i=e.hash,a=void 0===i?"":i;return o&&"?"!==o&&(n+="?"===o.charAt(0)?o:"?"+o),a&&"#"!==a&&(n+="#"===a.charAt(0)?a:"#"+a),n}(e)}function p(e,t){return void 0===t&&(t=null),(0,rt.Z)({pathname:s.pathname,hash:"",search:""},"string"==typeof e?ut(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function h(e,t){return[{usr:e.state,key:e.key,idx:t},d(e)]}function m(e,t,n){return!f.length||(f.call({action:e,location:t,retry:n}),!1)}function v(e){a=e;var t=o();l=t[0],s=t[1],c.call({action:a,location:s})}function y(e){r.go(e)}null==l&&(l=0,r.replaceState((0,rt.Z)({},r.state,{idx:l}),""));var g={get action(){return a},get location(){return s},createHref:d,push:function e(t,o){var i=nt.Push,a=p(t,o);if(m(i,a,(function(){e(t,o)}))){var u=h(a,l+1),s=u[0],c=u[1];try{r.pushState(s,"",c)}catch(e){n.location.assign(c)}v(i)}},replace:function e(t,n){var o=nt.Replace,i=p(t,n);if(m(o,i,(function(){e(t,n)}))){var a=h(i,l),u=a[0],s=a[1];r.replaceState(u,"",s),v(o)}},go:y,back:function(){y(-1)},forward:function(){y(1)},listen:function(e){return c.push(e)},block:function(e){var t=f.push(e);return 1===f.length&&n.addEventListener(ot,it),function(){t(),f.length||n.removeEventListener(ot,it)}}};return g}({window:o}));let a=i.current,[u,l]=(0,e.useState)({action:a.action,location:a.location});return(0,e.useLayoutEffect)((()=>a.listen(l)),[a]),(0,e.createElement)(Nt,{basename:n,children:r,location:u.location,navigationType:u.action,navigator:a})}const Lt=et((({children:t,...n})=>e.createElement("div",{...n},t)))`
  border-radius: 8px;
  background-color: white;
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  min-width: fit-content;
  padding: 24px;
  height: fit-content;
  max-height: 70vh;
  display: flex;
  flex-direction: column;
  overflow: auto;
  margin-bottom: 24px;

  @media only screen and (max-width: 768px) {
    width: 80%;
  }

  @media only screen and (min-width: 769px) {
    width: 40vw;
    max-width: 500px;
  }
`,Ft=t=>e.createElement(Lt,null,t.children),jt=et.button`
  width: 100%;
  display: inline-block;
  outline: 0;
  border: 0;
  cursor: pointer;
  color: #fff;
  font-weight: 500;
  font-size: 14px;
  height: 30px;
  padding: 0px 15px;
  text-shadow: rgb(0 0 0 / 25%) 0px 3px 8px;
  transition: all 0.5s ease 0s;
  :hover {
    box-shadow: rgba(0, 0, 0, 0.4) 0px 3px 8px;
    transition: all 0.3s ease 0s;
  }
  background: #7a579f;
  border-radius: 12px;
  letter-spacing: 1px;
  :disabled {
    opacity: 0.5;
  }
`,zt=({children:t,...n})=>e.createElement(jt,{...n},t),Mt=et.div`
  color: #a41533;
  font-size: 0.75em;
  padding-top: 0.25em;
`,Ut=t=>{const{text:n}=t;return e.createElement(Mt,null,n)},$t=et.input`
  color: rgba(0, 0, 0, 0.87);
  border-bottom-color: ${({$hasError:e})=>e?"#cc0000 !important":"rgba(0, 0, 0, 0.42)"};
  font-size: 1rem;
  font-weight: 400;
  letter-spacing: 0.01em;
  text-decoration: inherit;
  text-transform: inherit;
  align-self: flex-end;
  box-sizing: border-box;
  width: 100%;
  padding: 6px 16px 6px;
  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);
  border: none;
  border-bottom: 1px solid;
  border-radius: 4px 4px 0 0;
  :hover {
    border-bottom-color: rgba(0, 0, 0, 0.87);
    background: #ececec;
  }
  :focus {
    border-color: #7a579f;
    outline: none;
  }
`,Bt=t=>e.createElement($t,{...t}),Qt=et.div`
  margin: 18px 0px;
  height: 45px;
`,qt=t=>{const{errorMessage:n,...r}=t;return e.createElement(Qt,null,e.createElement(Bt,{...r,$hasError:!!n}),n&&e.createElement(Ut,{text:n}))},Vt=(0,e.createContext)(void 0),Ht=et.div`
  color: #cc0000;
  font-weight: 500;
  font-size: 14px;
`,Wt=e=>!e||0===e.trim().length,Kt=()=>{const t=(0,e.useContext)(Vt),[n,r]=(0,e.useState)(""),[o,i]=(0,e.useState)(""),[a,u]=(0,e.useState)(""),[l,s]=(0,e.useState)(""),[c,f]=(0,e.useState)(!1),d=e=>{({username:()=>{u(""),r(e.target.value)},password:()=>{s(""),i(e.target.value)}})[e.target.name](),(()=>{const e=Wt(n),t=Wt(o);f(!e&&!t)})()};return e.createElement(e.Fragment,null,t.loginError&&e.createElement(Ht,null,"Invalid username or password"),e.createElement("form",{onSubmit:e=>{e.preventDefault(),c?t.login(n.trim(),o.trim()):(Wt(n)&&u("Username is required"),Wt(o)&&s("Password is required"))},style:{width:"90%"}},e.createElement(qt,{type:"text",errorMessage:a,value:n,name:"username",placeholder:"Username",onChange:d}),e.createElement(qt,{type:"password",errorMessage:l,value:o,name:"password",placeholder:"Password",onChange:d}),e.createElement(zt,{title:"Login",type:"submit",disabled:t.loginInProgress},t.loginInProgress?"Logging in....":"Login")))},Zt=et.div`
  display: flex;
  justify-content: center;
  flex-direction: column;
  align-items: center;
`,Gt=et.div`
  display: flex;
  justify-content: center;
  height: 100%;
  align-items: center;
`,Xt=et.div`
  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
  background-size: 400% 400%;
  animation: gradient 15s ease infinite;
  height: 100%;
  overflow: auto;
`,Yt=et.h1`
  white-space: nowrap;
  font-family: "Courier";
  letter-spacing: 3px;
  font-size: 3rem;
  font-weight: 600;
  color: #000;
`,Jt=et(Yt)`
  border-right: 4px solid #000; /*This will be the blinking cursor*/
  animation: cursor 1s infinite step-end;
  width: fit-content;

  @keyframes cursor {
    0%,
    100% {
      border-color: transparent;
    }
    50% {
      border-color: #000;
    }
  }
`,en=()=>(0,e.useContext)(Vt).isLoggedIn?e.createElement(_t,{to:"/server-list"}):e.createElement(Xt,null,e.createElement(Gt,null,e.createElement(Ft,null,e.createElement(Zt,null,e.createElement(Jt,null,"Login"),e.createElement(Kt,null))))),tn=()=>{const t=Pt();return e.createElement(Xt,null,e.createElement(Gt,null,e.createElement(Ft,null,e.createElement(Zt,null,e.createElement(Yt,null,"You've been logged out"),e.createElement(zt,{onClick:()=>t("/login")},"Go to login")))))},nn=()=>{const t=Ct();return(0,e.useContext)(Vt).isLoggedIn?e.createElement(Rt,null):e.createElement(_t,{to:"/login",state:{from:t},replace:!0})},rn=()=>e.createElement("svg",{"data-testid":"menu-icon",xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24"},e.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),e.createElement("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"})),on=et.div`
  .popover__wrapper {
    position: relative;
    display: inline-block;
    padding: 1.5rem;
  }

  .popover__title:hover {
    cursor: pointer;
    .popover__title--text {
      font-weight: 900;
    }
  }

  @media only screen and (max-width: 768px) {
    .popover__title {
      &--text {
        display: none;
      }
    }
  }

  @media only screen and (min-width: 769px) {
    .popover__title {
      &--icon {
        display: none;
      }
    }
  }

  .popover__content {
    z-index: 1;
    position: absolute;
    right: 12px;
    border-radius: 8px;
    background-color: white;
    padding: 1.5rem;
    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);
    @media only screen and (max-width: 768px) {
      width: 40vw;
    }

    @media only screen and (min-width: 769px) {
      width: auto;
    }
  }
`,an=t=>{const{menuButtonText:n,menuButtonIcon:r,popoverBody:o}=t,[i,a]=(0,e.useState)(!1),u=(t=>{const n=(0,e.useRef)();return(0,e.useEffect)((()=>{const e=e=>{n.current&&!n.current.contains(e.target)&&t()};return document.addEventListener("click",e,!0),()=>{document.removeEventListener("click",e,!0)}}),[n]),n})((()=>{a(!1)}));return e.createElement(on,null,e.createElement("div",{ref:u,className:"popover__wrapper"},e.createElement("div",{className:"popover__title",onClick:()=>{a(!0)}},e.createElement("span",{className:"popover__title--text"},n),e.createElement("span",{className:"popover__title--icon"},r)),i&&e.createElement("div",{className:"popover__content"},o)))},un=et.div`
  background: rgba(255, 255, 255, 0.7);
  display: flex;
  justify-content: flex-end;
  align-items: center;
  font-family: "Courier";
  > *:first-child {
    font-weight: 600;
    font-size: 24px;
    flex: 1;
    padding-left: 24px;
  }
`,ln=()=>{const{logout:t}=(0,e.useContext)(Vt),n=Pt();return e.createElement(un,null,e.createElement("div",null,"Server List"),e.createElement(an,{menuButtonText:"Menu",menuButtonIcon:e.createElement(rn,null),popoverBody:e.createElement(zt,{onClick:()=>(t(),n("/logout"))},"Logout")}))},sn=et.div`
  margin-top: 48px;
  .spinner {
    display: inline-block;
    width: 80px;
    height: 80px;
  }
  .spinner:after {
    content: " ";
    display: block;
    width: 64px;
    height: 64px;
    margin: 8px;
    border-radius: 50%;
    border: 6px solid #fff;
    border-color: #fff transparent #fff transparent;
    animation: spinner 1.2s linear infinite;
  }
  @keyframes spinner {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
`,cn=()=>e.createElement(sn,null,e.createElement("div",{className:"spinner"}));function fn(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function dn(e){return!!e&&!!e[Yn]}function pn(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===Jn}(e)||Array.isArray(e)||!!e[Xn]||!!e.constructor[Xn]||bn(e)||wn(e))}function hn(e,t,n){void 0===n&&(n=!1),0===mn(e)?(n?Object.keys:er)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function mn(e){var t=e[Yn];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:bn(e)?2:wn(e)?3:0}function vn(e,t){return 2===mn(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function yn(e,t,n){var r=mn(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function gn(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function bn(e){return Wn&&e instanceof Map}function wn(e){return Kn&&e instanceof Set}function Sn(e){return e.o||e.t}function kn(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=tr(e);delete t[Yn];for(var n=er(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function En(e,t){return void 0===t&&(t=!1),Cn(e)||dn(e)||!pn(e)||(mn(e)>1&&(e.set=e.add=e.clear=e.delete=xn),Object.freeze(e),t&&hn(e,(function(e,t){return En(t,!0)}),!0)),e}function xn(){fn(2)}function Cn(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function Pn(e){var t=nr[e];return t||fn(18,e),t}function On(){return Vn}function _n(e,t){t&&(Pn("Patches"),e.u=[],e.s=[],e.v=t)}function Rn(e){Tn(e),e.p.forEach(An),e.p=null}function Tn(e){e===Vn&&(Vn=e.l)}function Nn(e){return Vn={p:[],l:Vn,h:e,m:!0,_:0}}function An(e){var t=e[Yn];0===t.i||1===t.i?t.j():t.O=!0}function In(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.g||Pn("ES5").S(t,e,r),r?(n[Yn].P&&(Rn(t),fn(4)),pn(e)&&(e=Dn(t,e),t.l||Fn(t,e)),t.u&&Pn("Patches").M(n[Yn].t,e,t.u,t.s)):e=Dn(t,n,[]),Rn(t),t.u&&t.v(t.u,t.s),e!==Gn?e:void 0}function Dn(e,t,n){if(Cn(t))return t;var r=t[Yn];if(!r)return hn(t,(function(o,i){return Ln(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return Fn(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=kn(r.k):r.o;hn(3===r.i?new Set(o):o,(function(t,i){return Ln(e,r,o,t,i,n)})),Fn(e,o,!1),n&&e.u&&Pn("Patches").R(r,n,e.u,e.s)}return r.o}function Ln(e,t,n,r,o,i){if(dn(o)){var a=Dn(e,o,i&&t&&3!==t.i&&!vn(t.D,r)?i.concat(r):void 0);if(yn(n,r,a),!dn(a))return;e.m=!1}if(pn(o)&&!Cn(o)){if(!e.h.F&&e._<1)return;Dn(e,o),t&&t.A.l||Fn(e,o)}}function Fn(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&En(t,n)}function jn(e,t){var n=e[Yn];return(n?Sn(n):e)[t]}function zn(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function Mn(e){e.P||(e.P=!0,e.l&&Mn(e.l))}function Un(e){e.o||(e.o=kn(e.t))}function $n(e,t,n){var r=bn(t)?Pn("MapSet").N(t,n):wn(t)?Pn("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:On(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=rr;n&&(o=[r],i=or);var a=Proxy.revocable(o,i),u=a.revoke,l=a.proxy;return r.k=l,r.j=u,l}(t,n):Pn("ES5").J(t,n);return(n?n.A:On()).p.push(r),r}function Bn(e){return dn(e)||fn(22,e),function e(t){if(!pn(t))return t;var n,r=t[Yn],o=mn(t);if(r){if(!r.P&&(r.i<4||!Pn("ES5").K(r)))return r.t;r.I=!0,n=Qn(t,o),r.I=!1}else n=Qn(t,o);return hn(n,(function(t,o){r&&function(e,t){return 2===mn(e)?e.get(t):e[t]}(r.t,t)===o||yn(n,t,e(o))})),3===o?new Set(n):n}(e)}function Qn(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return kn(e)}var qn,Vn,Hn="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),Wn="undefined"!=typeof Map,Kn="undefined"!=typeof Set,Zn="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,Gn=Hn?Symbol.for("immer-nothing"):((qn={})["immer-nothing"]=!0,qn),Xn=Hn?Symbol.for("immer-draftable"):"__$immer_draftable",Yn=Hn?Symbol.for("immer-state"):"__$immer_state",Jn=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),er="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,tr=Object.getOwnPropertyDescriptors||function(e){var t={};return er(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},nr={},rr={get:function(e,t){if(t===Yn)return e;var n=Sn(e);if(!vn(n,t))return function(e,t,n){var r,o=zn(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!pn(r)?r:r===jn(e.t,t)?(Un(e),e.o[t]=$n(e.A.h,r,e)):r},has:function(e,t){return t in Sn(e)},ownKeys:function(e){return Reflect.ownKeys(Sn(e))},set:function(e,t,n){var r=zn(Sn(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=jn(Sn(e),t),i=null==o?void 0:o[Yn];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(gn(n,o)&&(void 0!==n||vn(e.t,t)))return!0;Un(e),Mn(e)}return e.o[t]===n&&"number"!=typeof n&&(void 0!==n||t in e.o)||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==jn(e.t,t)||t in e.t?(e.D[t]=!1,Un(e),Mn(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=Sn(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){fn(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){fn(12)}},or={};hn(rr,(function(e,t){or[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),or.deleteProperty=function(e,t){return or.set.call(this,e,t,void 0)},or.set=function(e,t,n){return rr.set.call(this,e[0],t,n,e[0])};var ir=function(){function e(e){var t=this;this.g=Zn,this.F=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var i=t;return function(e){var t=this;void 0===e&&(e=o);for(var r=arguments.length,a=Array(r>1?r-1:0),u=1;u<r;u++)a[u-1]=arguments[u];return i.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(a))}))}}var a;if("function"!=typeof n&&fn(6),void 0!==r&&"function"!=typeof r&&fn(7),pn(e)){var u=Nn(t),l=$n(t,e,void 0),s=!0;try{a=n(l),s=!1}finally{s?Rn(u):Tn(u)}return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return _n(u,r),In(e,u)}),(function(e){throw Rn(u),e})):(_n(u,r),In(a,u))}if(!e||"object"!=typeof e){if(void 0===(a=n(e))&&(a=e),a===Gn&&(a=void 0),t.F&&En(a,!0),r){var c=[],f=[];Pn("Patches").M(e,a,c,f),r(c,f)}return a}fn(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))};var r,o,i=t.produce(e,n,(function(e,t){r=e,o=t}));return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return[e,r,o]})):[i,r,o]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){pn(e)||fn(8),dn(e)&&(e=Bn(e));var t=Nn(this),n=$n(this,e,void 0);return n[Yn].C=!0,Tn(t),n},t.finishDraft=function(e,t){var n=(e&&e[Yn]).A;return _n(n,t),In(void 0,n)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!Zn&&fn(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var o=Pn("Patches").$;return dn(e)?o(e,t):this.produce(e,(function(e){return o(e,t)}))},e}(),ar=new ir,ur=ar.produce;ar.produceWithPatches.bind(ar),ar.setAutoFreeze.bind(ar),ar.setUseProxies.bind(ar),ar.applyPatches.bind(ar),ar.createDraft.bind(ar),ar.finishDraft.bind(ar);const lr=ur;function sr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function cr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function fr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?cr(Object(n),!0).forEach((function(t){sr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):cr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function dr(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var pr="function"==typeof Symbol&&Symbol.observable||"@@observable",hr=function(){return Math.random().toString(36).substring(7).split("").join(".")},mr={INIT:"@@redux/INIT"+hr(),REPLACE:"@@redux/REPLACE"+hr(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+hr()}};function vr(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function yr(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(dr(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(dr(1));return n(yr)(e,t)}if("function"!=typeof e)throw new Error(dr(2));var o=e,i=t,a=[],u=a,l=!1;function s(){u===a&&(u=a.slice())}function c(){if(l)throw new Error(dr(3));return i}function f(e){if("function"!=typeof e)throw new Error(dr(4));if(l)throw new Error(dr(5));var t=!0;return s(),u.push(e),function(){if(t){if(l)throw new Error(dr(6));t=!1,s();var n=u.indexOf(e);u.splice(n,1),a=null}}}function d(e){if(!vr(e))throw new Error(dr(7));if(void 0===e.type)throw new Error(dr(8));if(l)throw new Error(dr(9));try{l=!0,i=o(i,e)}finally{l=!1}for(var t=a=u,n=0;n<t.length;n++)(0,t[n])();return e}function p(e){if("function"!=typeof e)throw new Error(dr(10));o=e,d({type:mr.REPLACE})}function h(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(dr(11));function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[pr]=function(){return this},e}return d({type:mr.INIT}),(r={dispatch:d,subscribe:f,getState:c,replaceReducer:p})[pr]=h,r}function gr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function br(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(dr(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return r=gr.apply(void 0,i)(n.dispatch),fr(fr({},n),{},{dispatch:r})}}}function wr(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var Sr=wr();Sr.withExtraArgument=wr;const kr=Sr;var Er,xr=(Er=function(e,t){return Er=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},Er(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Er(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),Cr=function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},Pr=Object.defineProperty,Or=(Object.defineProperties,Object.getOwnPropertyDescriptors,Object.getOwnPropertySymbols),_r=Object.prototype.hasOwnProperty,Rr=Object.prototype.propertyIsEnumerable,Tr=function(e,t,n){return t in e?Pr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},Nr=function(e,t){for(var n in t||(t={}))_r.call(t,n)&&Tr(e,n,t[n]);if(Or)for(var r=0,o=Or(t);r<o.length;r++)n=o[r],Rr.call(t,n)&&Tr(e,n,t[n]);return e},Ar="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?gr:gr.apply(null,arguments)};"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var Ir=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return xr(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,Cr([void 0],e[0].concat(this)))):new(t.bind.apply(t,Cr([void 0],e.concat(this))))},t}(Array);function Dr(e){return pn(e)?lr(e,(function(){})):e}function Lr(e,t){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(t){var o=t.apply(void 0,n);if(!o)throw new Error("prepareAction did not return an object");return Nr(Nr({type:e,payload:o.payload},"meta"in o&&{meta:o.meta}),"error"in o&&{error:o.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Fr(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}Object.assign;var jr="listenerMiddleware";Lr(jr+"/add"),Lr(jr+"/removeAll"),Lr(jr+"/remove"),function(){function e(e,t){var n=o[e];return n?n.enumerable=t:o[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[Yn];return rr.get(t,e)},set:function(t){var n=this[Yn];rr.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][Yn];if(!o.P)switch(o.i){case 5:r(o)&&Mn(o);break;case 4:n(o)&&Mn(o)}}}function n(e){for(var t=e.t,n=e.k,r=er(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==Yn){var a=t[i];if(void 0===a&&!vn(t,i))return!0;var u=n[i],l=u&&u[Yn];if(l?l.t!==a:!gn(u,a))return!0}}var s=!!t[Yn];return r.length!==er(t).length+(s?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var r=0;r<t.length;r++)if(!t.hasOwnProperty(r))return!0;return!1}var o={};!function(e,t){nr[e]||(nr[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=tr(n);delete i[Yn];for(var a=er(i),u=0;u<a.length;u++){var l=a[u];i[l]=e(l,t||!!i[l].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:On(),P:!1,I:!1,D:{},l:n,t,k:o,o:null,O:!1,C:!1};return Object.defineProperty(o,Yn,{value:i,writable:!0}),o},S:function(e,n,o){o?dn(n)&&n[Yn].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[Yn];if(n){var o=n.t,i=n.k,a=n.D,u=n.i;if(4===u)hn(i,(function(t){t!==Yn&&(void 0!==o[t]||vn(o,t)?a[t]||e(i[t]):(a[t]=!0,Mn(n)))})),hn(o,(function(e){void 0!==i[e]||vn(i,e)||(a[e]=!1,Mn(n))}));else if(5===u){if(r(n)&&(Mn(n),a.length=!0),i.length<o.length)for(var l=i.length;l<o.length;l++)a[l]=!1;else for(var s=o.length;s<i.length;s++)a[s]=!0;for(var c=Math.min(i.length,o.length),f=0;f<c;f++)i.hasOwnProperty(f)||(a[f]=!0),void 0===a[f]&&e(i[f])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}();const zr=function(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");var n,r="function"==typeof e.initialState?e.initialState:Dr(e.initialState),o=e.reducers||{},i=Object.keys(o),a={},u={},l={};function s(){var t="function"==typeof e.extraReducers?Fr(e.extraReducers):[e.extraReducers],n=t[0],o=void 0===n?{}:n,i=t[1],a=void 0===i?[]:i,l=t[2],s=void 0===l?void 0:l,c=Nr(Nr({},o),u);return function(e,t,n,r){void 0===n&&(n=[]);var o,i="function"==typeof t?Fr(t):[t,n,r],a=i[0],u=i[1],l=i[2];if(function(e){return"function"==typeof e}(e))o=function(){return Dr(e())};else{var s=Dr(e);o=function(){return s}}function c(e,t){void 0===e&&(e=o());var n=Cr([a[t.type]],u.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[l]),n.reduce((function(e,n){if(n){var r;if(dn(e))return void 0===(r=n(e,t))?e:r;if(pn(e))return lr(e,(function(e){return n(e,t)}));if(void 0===(r=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}return e}),e)}return c.getInitialState=o,c}(r,c,a,s)}return i.forEach((function(e){var n,r,i=o[e],s=t+"/"+e;"reducer"in i?(n=i.reducer,r=i.prepare):n=i,a[e]=n,u[s]=n,l[e]=r?Lr(s,r):Lr(s)})),{name:t,reducer:function(e,t){return n||(n=s()),n(e,t)},actions:l,caseReducers:a,getInitialState:function(){return n||(n=s()),n.getInitialState()}}}({name:"sort",initialState:{sortParams:{order:"",orderBy:""}},reducers:{sort(e,t){const{column:n}=t.payload,{sortParams:r}=e;""===r.orderBy&&""===r.order||n!==r.orderBy?e.sortParams={orderBy:n,order:"asc"}:r.orderBy===n&&"asc"===r.order?e.sortParams={orderBy:n,order:"desc"}:r.orderBy===n&&"desc"===r.order&&(e.sortParams={orderBy:"",order:""})}}}),Mr=zr.actions,Ur=zr.reducer,$r=et.th``,Br=et.div`
  transition: transform 0.2s ease-in;
  transform: ${({$isAscending:e})=>e?"":"rotate(180deg)"};
  display: flex;
  justify-content: center;
  align-items: center;
  visibility: ${({$isVisible:e})=>e?"visible":"hidden"}; ;
`,Qr=et((()=>e.createElement("svg",{"data-testid":"arrow-icon",xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24",style:{fontSize:"1em",width:"1em",height:"1em"}},e.createElement("path",{d:"M0 0h24v24H0V0z",fill:"none"}),e.createElement("path",{d:"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"}))))`
  font-size: 1em;
  height: 1em;
  width: 1em;
`,qr=et.table`
  margin-top: 24px;
  display: block;
  overflow-y: auto;
  border-radius: 8px;
  border-spacing: 0;
  border-collapse: collapse;
  min-height: 200px;
  opacity: 0.7;
  height: 80vh;

  @media only screen and (max-width: 768px) {
    width: 80%;
  }

  @media only screen and (min-width: 769px) {
    width: 40vw;
    max-width: 500px;
  }

  tbody {
    width: 100%;
    display: table;
  }

  tr:last-child td:first-child {
    border-bottom-left-radius: 8px;
  }
  tr:last-child td:last-child {
    border-bottom-right-radius: 8px;
  }

  tr:first-child th:first-child {
    border-top-left-radius: 8px;
  }
  tr:first-child th:last-child {
    border-top-right-radius: 8px;
  }
  th {
    position: sticky;
    top: 0;
    padding: 0.5em;
    background: #aaaaaa;
    line-height: 1.5em;
    div {
      display: flex;
    }
  }
  tr {
    background: #dbdbdb;
    &:hover {
      user-select: none;
      background-color: #d7f0fd;
      cursor: pointer;
    }
    &:not(:first-child):not(:last-child) {
      border-bottom: 1px solid #cccccc;
    }
  }

  td {
    padding: 0.25em;
  }
`;var Vr=n(9669),Hr=n.n(Vr);const Wr=Hr().create({baseURL:"https://playground.tesonet.lt/v1"}),Kr=()=>(0,C.useQuery)(["server-list"],(()=>(async()=>(await(async({...e})=>(Wr.defaults.headers.common.Authorization=`Bearer ${sessionStorage.getItem("token")}`,await Wr(e).then((e=>e))))({method:"GET",url:"/servers"})).data)()));var Zr;!function(e){e.Name="name",e.Distance="distance"}(Zr||(Zr={}));const Gr=()=>{const{isLoading:t,data:n,isError:r}=Kr(),o=p((e=>e.sort.sortParams)),i=E();if(t)return e.createElement(cn,null);if(r)return e.createElement("div",null,"Error occurred");const a=e=>{i(Mr.sort({column:e}))},u=((e,t)=>e.orderBy===Zr.Name?[...t].sort(((t,n)=>"asc"===e.order?t.name>n.name?1:-1:t.name>n.name?-1:1)):e.orderBy===Zr.Distance?[...t].sort(((t,n)=>"asc"===e.order?t.distance-n.distance:n.distance-t.distance)):t)(o,n);return e.createElement(qr,null,e.createElement("tbody",null,e.createElement("tr",null,e.createElement($r,{onClick:()=>a(Zr.Name)},e.createElement("div",{"data-testid":"name-header"},e.createElement("span",null,"Name"),e.createElement(Br,{$isAscending:"asc"===o.order,$isVisible:o.orderBy===Zr.Name},e.createElement(Qr,null)))),e.createElement($r,{onClick:()=>a(Zr.Distance)},e.createElement("div",{"data-testid":"distance-header"},e.createElement("span",null,"Distance"),e.createElement(Br,{$isAscending:"asc"===o.order,$isVisible:o.orderBy===Zr.Distance},e.createElement(Qr,null))))),u.map((t=>e.createElement("tr",{"data-testid":"data-row",key:t.name+t.distance},e.createElement("td",null,t.name),e.createElement("td",null,t.distance))))))},Xr=et.div`
  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
  height: 100%;
  overflow: auto;
`,Yr=(et.h1`
  white-space: nowrap;
  font-family: "Courier";
  font-size: 2rem;
  font-weight: 600;
  color: #5e87b8;
  width: fit-content;
`,et.div`
  display: flex;
  flex-direction: column;
  //justify-content: center;
  align-items: center;
  height: 100%;
`),Jr=()=>e.createElement(Xr,null,e.createElement(ln,null),e.createElement(Yr,null,e.createElement(Gr,null))),eo=()=>e.createElement(Dt,{basename:"/"},e.createElement(At,null,e.createElement(Tt,{path:"/",element:e.createElement(_t,{to:"/server-list",replace:!0})}),e.createElement(Tt,{path:"/login",element:e.createElement(en,null)}),e.createElement(Tt,{element:e.createElement(nn,null)},e.createElement(Tt,{path:"/server-list",element:e.createElement(Jr,null)})),e.createElement(Tt,{path:"/logout",element:e.createElement(tn,null)}),e.createElement(Tt,{path:"*",element:e.createElement(_t,{to:"/",replace:!0})}))),to=t=>{const[n,r]=(0,e.useState)(sessionStorage.getItem("token")),[o,i]=(0,e.useState)(),[a,u]=(0,e.useState)(),l=!!n;return e.createElement(Vt.Provider,{value:{isLoggedIn:l,login:async(e,t)=>{i(!0),u(void 0);const n={username:e,password:t};await Hr().post("https://playground.tesonet.lt/v1/tokens",n,{headers:{"Content-Type":"application/json;charset=utf-8"}}).then((e=>{sessionStorage.setItem("token",e.data.token),r(e.data.token),i(!1)})).catch((e=>{u(e),i(!1)}))},logout:()=>{sessionStorage.removeItem("token"),r(void 0)},loginError:a,loginInProgress:o}},t.children)},no=new C.QueryClient({defaultOptions:{queries:{refetchOnWindowFocus:!0,refetchOnMount:!1,refetchOnReconnect:!0,retry:1,staleTime:3e4}}}),ro=function(e){var t,n=function(e){return function(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,r=(e.immutableCheck,e.serializableCheck,new Ir);return n&&(function(e){return"boolean"==typeof e}(n)?r.push(kr):r.push(kr.withExtraArgument(n.extraArgument))),r}(e)},r=e||{},o=r.reducer,i=void 0===o?void 0:o,a=r.middleware,u=void 0===a?n():a,l=r.devTools,s=void 0===l||l,c=r.preloadedState,f=void 0===c?void 0:c,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof i)t=i;else{if(!function(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:mr.INIT}))throw new Error(dr(12));if(void 0===n(void 0,{type:mr.PROBE_UNKNOWN_ACTION()}))throw new Error(dr(13))}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},u=0;u<a.length;u++){var l=a[u],s=n[l],c=e[l],f=s(c,t);if(void 0===f)throw t&&t.type,new Error(dr(14));o[l]=f,r=r||f!==c}return(r=r||a.length!==Object.keys(e).length)?o:e}}(i)}var h=u;"function"==typeof h&&(h=h(n));var m=br.apply(void 0,h),v=gr;s&&(v=Ar(Nr({trace:!1},"object"==typeof s&&s)));var y=[m];return Array.isArray(p)?y=Cr([m],p):"function"==typeof p&&(y=p(y)),yr(t,f,v.apply(void 0,y))}({reducer:{sort:Ur}}),oo=ro;(0,t.s)(document.getElementById("root")).render(e.createElement(e.StrictMode,null,e.createElement((function({store:t,context:n,children:r,serverState:o}){const i=(0,e.useMemo)((()=>{const e=function(e,t){let n,r=y;function o(){a.onStateChange&&a.onStateChange()}function i(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){const e=u();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}const a={addNestedSub:function(e){return i(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:i,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=y)},getListeners:()=>r};return a}(t);return{store:t,subscription:e,getServerState:o?()=>o:void 0}}),[t,o]),a=(0,e.useMemo)((()=>t.getState()),[t]);g((()=>{const{subscription:e}=i;return e.onStateChange=e.notifyNestedSubs,e.trySubscribe(),a!==t.getState()&&e.notifyNestedSubs(),()=>{e.tryUnsubscribe(),e.onStateChange=void 0}}),[i,a]);const s=n||l;return e.createElement(s.Provider,{value:i},r)}),{store:oo},e.createElement((()=>e.createElement(to,null,e.createElement(C.QueryClientProvider,{client:no},e.createElement(tt,null),e.createElement(eo,null)))),null))))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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b3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvcy5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0Vycm9yLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL251bGwuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvRm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9mb2N1c01hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9ub3RpZnlNYW5hZ2VyLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvb25saW5lTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL3F1ZXJ5LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvcXVlcnlDYWNoZS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL211dGF0aW9uLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvbXV0YXRpb25DYWNoZS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL2luZmluaXRlUXVlcnlCZWhhdmlvci5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL3F1ZXJ5Q2xpZW50LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvcmV0cnllci5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL3N1YnNjcmliYWJsZS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL3V0aWxzLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL3JlYWN0L3JlYWN0QmF0Y2hlZFVwZGF0ZXMuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvcmVhY3Qvc2V0QmF0Y2hVcGRhdGVzRm4uanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvcmVhY3QvbG9nZ2VyLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL3JlYWN0L3NldExvZ2dlci5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC9RdWVyeUNsaWVudFByb3ZpZGVyLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvcXVlcnlPYnNlcnZlci5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC9RdWVyeUVycm9yUmVzZXRCb3VuZGFyeS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC91c2VRdWVyeS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC91c2VCYXNlUXVlcnkuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvcmVhY3QvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9zaGFsbG93ZXF1YWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL2luZGV4LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vd2l0aC1zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2Uvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2Uvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2Uvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL25zLWV4ZXJjaXNlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Db250ZXh0LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVJlZHV4Q29udGV4dC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VTeW5jRXh0ZXJuYWxTdG9yZS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlRGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vc3R5bGlzL2Rpc3Qvc3R5bGlzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL0BlbW90aW9uL3VuaXRsZXNzL2Rpc3QvdW5pdGxlc3MuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vbWVtb2l6ZS9kaXN0L2Vtb3Rpb24tbWVtb2l6ZS5lc20uanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vaXMtcHJvcC12YWxpZC9kaXN0L2Vtb3Rpb24taXMtcHJvcC12YWxpZC5lc20uanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvc3R5bGVkLWNvbXBvbmVudHMvZGlzdC9zdHlsZWQtY29tcG9uZW50cy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9BcHAuc3R5bGVkLnRzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2luZGV4LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tcG9uZW50cy9Db21tb24vQ2FyZC9DYXJkLnN0eWxlZC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tcG9uZW50cy9Db21tb24vQ2FyZC9DYXJkLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21wb25lbnRzL0NvbW1vbi9CdXR0b24vQnV0dG9uLnN0eWxlZC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tcG9uZW50cy9Db21tb24vQnV0dG9uL0J1dHRvbi50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tcG9uZW50cy9Db21tb24vRXJyb3IvVmFsaWRhdGlvbkVycm9yLnN0eWxlZC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tcG9uZW50cy9Db21tb24vRXJyb3IvVmFsaWRhdGlvbkVycm9yLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21wb25lbnRzL0NvbW1vbi9JbnB1dC9JbnB1dC5zdHlsZWQudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL0NvbXBvbmVudHMvQ29tbW9uL0lucHV0L0lucHV0LnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21wb25lbnRzL0NvbW1vbi9Gb3JtL0Zvcm1JbnB1dC5zdHlsZWQudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL0NvbXBvbmVudHMvQ29tbW9uL0Zvcm0vRm9ybUlucHV0LnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9zdG9yZS9hdXRoL0F1dGhDb250ZXh0LnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21wb25lbnRzL0xvZ2luRm9ybS9Mb2dpbkZvcm0uc3R5bGVkLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21wb25lbnRzL0xvZ2luRm9ybS9Mb2dpbkZvcm0udHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL1BhZ2VzL0NvbW1vblBhZ2Uuc3R5bGVzLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9QYWdlcy9Mb2dpbi9Mb2dpblBhZ2Uuc3R5bGVkLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9QYWdlcy9Mb2dpbi9Mb2dpblBhZ2UudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL1BhZ2VzL0xvZ291dC9Mb2dvdXQudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL1JvdXRpbmcvUHJpdmF0ZVJvdXRlLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21wb25lbnRzL0NvbW1vbi9JY29ucy9NZW51SWNvbi50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tcG9uZW50cy9Db21tb24vUG9wb3Zlck1lbnUvUG9wb3Zlck1lbnUuc3R5bGVkLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21wb25lbnRzL0NvbW1vbi9Qb3BvdmVyTWVudS9Qb3BvdmVyTWVudS50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvaG9va3MvdXNlT3V0c2lkZUNsaWNrLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21wb25lbnRzL0NvbW1vbi9QYWdlSGVhZGVyL1BhZ2VIZWFkZXIuc3R5bGVkLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21wb25lbnRzL0NvbW1vbi9QYWdlSGVhZGVyL1BhZ2VIZWFkZXIudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL0NvbXBvbmVudHMvQ29tbW9uL1NwaW5uZXIvU3Bpbm5lci5zdHlsZWQudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL0NvbXBvbmVudHMvQ29tbW9uL1NwaW5uZXIvU3Bpbm5lci50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbW1lci5lc20ubWpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3JlZHV4LXRvb2xraXQuZXNtLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL3N0b3JlL3JlZHV4L3NvcnQudHMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tcG9uZW50cy9TZXJ2ZXJMaXN0L1NlcnZlckxpc3Quc3R5bGVkLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21wb25lbnRzL0NvbW1vbi9JY29ucy9BcnJvd1VwSWNvbi50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvdXRpbHMvYXhpb3MudXRpbHMudHMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tcG9uZW50cy9TZXJ2ZXJMaXN0L1NlcnZlckxpc3RTZXJ2aWNlLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21wb25lbnRzL1NlcnZlckxpc3QvU2VydmVyTGlzdC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvUGFnZXMvU2VydmVyTGlzdC9TZXJ2ZXJMaXN0UGFnZS5zdHlsZWQudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL1BhZ2VzL1NlcnZlckxpc3QvU2VydmVyTGlzdFBhZ2UudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL1JvdXRpbmcvQXBwUm91dGVyLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9zdG9yZS9hdXRoL0F1dGhDb250ZXh0UHJvdmlkZXIudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL0FwcC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvc3RvcmUvcmVkdXgvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvaW5kZXgudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMvdHJhbnNpdGlvbmFsJyk7XG52YXIgQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvQXhpb3NFcnJvcicpO1xudmFyIENhbmNlbGVkRXJyb3IgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvcicpO1xudmFyIHBhcnNlUHJvdG9jb2wgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuICAgIHZhciByZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIHZhciBvbkNhbmNlbGVkO1xuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSAmJiB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgPyB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoY29uZmlnLmF1dGgucGFzc3dvcmQpKSA6ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgdmFyIHJlc3BvbnNlSGVhZGVycyA9ICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgPyBwYXJzZUhlYWRlcnMocmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkgOiBudWxsO1xuICAgICAgdmFyIHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgIHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCwgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0LCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWwgfHwgdHJhbnNpdGlvbmFsRGVmYXVsdHM7XG4gICAgICBpZiAoY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlO1xuICAgICAgfVxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlLFxuICAgICAgICB0cmFuc2l0aW9uYWwuY2xhcmlmeVRpbWVvdXRFcnJvciA/IEF4aW9zRXJyb3IuRVRJTUVET1VUIDogQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuIHx8IGNvbmZpZy5zaWduYWwpIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBvbkNhbmNlbGVkID0gZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZWplY3QoIWNhbmNlbCB8fCAoY2FuY2VsICYmIGNhbmNlbC50eXBlKSA/IG5ldyBDYW5jZWxlZEVycm9yKCkgOiBjYW5jZWwpO1xuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuICYmIGNvbmZpZy5jYW5jZWxUb2tlbi5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLmFib3J0ZWQgPyBvbkNhbmNlbGVkKCkgOiBjb25maWcuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFyZXF1ZXN0RGF0YSkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIHZhciBwcm90b2NvbCA9IHBhcnNlUHJvdG9jb2woZnVsbFBhdGgpO1xuXG4gICAgaWYgKHByb3RvY29sICYmIFsgJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScgXS5pbmRleE9mKHByb3RvY29sKSA9PT0gLTEpIHtcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignVW5zdXBwb3J0ZWQgcHJvdG9jb2wgJyArIHByb3RvY29sICsgJzonLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgY29uZmlnKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIC8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbiAgaW5zdGFuY2UuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKG1lcmdlQ29uZmlnKGRlZmF1bHRDb25maWcsIGluc3RhbmNlQ29uZmlnKSk7XG4gIH07XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxlZEVycm9yJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5heGlvcy5WRVJTSU9OID0gcmVxdWlyZSgnLi9lbnYvZGF0YScpLnZlcnNpb247XG5heGlvcy50b0Zvcm1EYXRhID0gcmVxdWlyZSgnLi9oZWxwZXJzL3RvRm9ybURhdGEnKTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9saWIvY29yZS9BeGlvc0Vycm9yJyk7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsZWRFcnJvciA9IHJlcXVpcmUoJy4vQ2FuY2VsZWRFcnJvcicpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG5cbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4oZnVuY3Rpb24oY2FuY2VsKSB7XG4gICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbCA9IHRva2VuLl9saXN0ZW5lcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgIH1cbiAgICB0b2tlbi5fbGlzdGVuZXJzID0gbnVsbDtcbiAgfSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgdGhpcy5wcm9taXNlLnRoZW4gPSBmdW5jdGlvbihvbmZ1bGZpbGxlZCkge1xuICAgIHZhciBfcmVzb2x2ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgIH0pLnRoZW4ob25mdWxmaWxsZWQpO1xuXG4gICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbGVkRXJyb3IobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICB9XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvQXhpb3NFcnJvcicpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgQXhpb3NFcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UgPT0gbnVsbCA/ICdjYW5jZWxlZCcgOiBtZXNzYWdlLCBBeGlvc0Vycm9yLkVSUl9DQU5DRUxFRCk7XG4gIHRoaXMubmFtZSA9ICdDYW5jZWxlZEVycm9yJztcbn1cblxudXRpbHMuaW5oZXJpdHMoQ2FuY2VsZWRFcnJvciwgQXhpb3NFcnJvciwge1xuICBfX0NBTkNFTF9fOiB0cnVlXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxlZEVycm9yO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG52YXIgYnVpbGRGdWxsUGF0aCA9IHJlcXVpcmUoJy4vYnVpbGRGdWxsUGF0aCcpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICByZXR1cm4gYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cblxuICBmdW5jdGlvbiBnZW5lcmF0ZUhUVFBNZXRob2QoaXNGb3JtKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGh0dHBNZXRob2QodXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgICBoZWFkZXJzOiBpc0Zvcm0gPyB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICB9IDoge30sXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtjb25maWddIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xuZnVuY3Rpb24gQXhpb3NFcnJvcihtZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIEVycm9yLmNhbGwodGhpcyk7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgcmVzcG9uc2UgJiYgKHRoaXMucmVzcG9uc2UgPSByZXNwb25zZSk7XG59XG5cbnV0aWxzLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlLFxuICAgICAgc3RhdHVzOiB0aGlzLnJlc3BvbnNlICYmIHRoaXMucmVzcG9uc2Uuc3RhdHVzID8gdGhpcy5yZXNwb25zZS5zdGF0dXMgOiBudWxsXG4gICAgfTtcbiAgfVxufSk7XG5cbnZhciBwcm90b3R5cGUgPSBBeGlvc0Vycm9yLnByb3RvdHlwZTtcbnZhciBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJ1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbl0uZm9yRWFjaChmdW5jdGlvbihjb2RlKSB7XG4gIGRlc2NyaXB0b3JzW2NvZGVdID0ge3ZhbHVlOiBjb2RlfTtcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBeGlvc0Vycm9yLCBkZXNjcmlwdG9ycyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAnaXNBeGlvc0Vycm9yJywge3ZhbHVlOiB0cnVlfSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5BeGlvc0Vycm9yLmZyb20gPSBmdW5jdGlvbihlcnJvciwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSwgY3VzdG9tUHJvcHMpIHtcbiAgdmFyIGF4aW9zRXJyb3IgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7XG5cbiAgdXRpbHMudG9GbGF0T2JqZWN0KGVycm9yLCBheGlvc0Vycm9yLCBmdW5jdGlvbiBmaWx0ZXIob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gRXJyb3IucHJvdG90eXBlO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5uYW1lID0gZXJyb3IubmFtZTtcblxuICBjdXN0b21Qcm9wcyAmJiBPYmplY3QuYXNzaWduKGF4aW9zRXJyb3IsIGN1c3RvbVByb3BzKTtcblxuICByZXR1cm4gYXhpb3NFcnJvcjtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3NFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWQsXG4gICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xudmFyIENhbmNlbGVkRXJyb3IgPSByZXF1aXJlKCcuLi9jYW5jZWwvQ2FuY2VsZWRFcnJvcicpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxuXG4gIGlmIChjb25maWcuc2lnbmFsICYmIGNvbmZpZy5zaWduYWwuYWJvcnRlZCkge1xuICAgIHRocm93IG5ldyBDYW5jZWxlZEVycm9yKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgIGNvbmZpZyxcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1lcmdlTWFwID0ge1xuICAgICd1cmwnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdtZXRob2QnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdkYXRhJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnYmFzZVVSTCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlcXVlc3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXNwb25zZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3BhcmFtc1NlcmlhbGl6ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dE1lc3NhZ2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd3aXRoQ3JlZGVudGlhbHMnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdhZGFwdGVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VUeXBlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkNvb2tpZU5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmSGVhZGVyTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uVXBsb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvbkRvd25sb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdkZWNvbXByZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Q29udGVudExlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heEJvZHlMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdiZWZvcmVSZWRpcmVjdCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zcG9ydCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBBZ2VudCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ2h0dHBzQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdjYW5jZWxUb2tlbic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3NvY2tldFBhdGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdyZXNwb25zZUVuY29kaW5nJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndmFsaWRhdGVTdGF0dXMnOiBtZXJnZURpcmVjdEtleXNcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKGNvbmZpZzEpLmNvbmNhdChPYmplY3Qua2V5cyhjb25maWcyKSksIGZ1bmN0aW9uIGNvbXB1dGVDb25maWdWYWx1ZShwcm9wKSB7XG4gICAgdmFyIG1lcmdlID0gbWVyZ2VNYXBbcHJvcF0gfHwgbWVyZ2VEZWVwUHJvcGVydGllcztcbiAgICB2YXIgY29uZmlnVmFsdWUgPSBtZXJnZShwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vQXhpb3NFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG52YXIgQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvQXhpb3NFcnJvcicpO1xudmFyIHRyYW5zaXRpb25hbERlZmF1bHRzID0gcmVxdWlyZSgnLi90cmFuc2l0aW9uYWwnKTtcbnZhciB0b0Zvcm1EYXRhID0gcmVxdWlyZSgnLi4vaGVscGVycy90b0Zvcm1EYXRhJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4uL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuXG4gIHRyYW5zaXRpb25hbDogdHJhbnNpdGlvbmFsRGVmYXVsdHMsXG5cbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQWNjZXB0Jyk7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgdmFyIGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzLmlzT2JqZWN0KGRhdGEpO1xuICAgIHZhciBjb250ZW50VHlwZSA9IGhlYWRlcnMgJiYgaGVhZGVyc1snQ29udGVudC1UeXBlJ107XG5cbiAgICB2YXIgaXNGaWxlTGlzdDtcblxuICAgIGlmICgoaXNGaWxlTGlzdCA9IHV0aWxzLmlzRmlsZUxpc3QoZGF0YSkpIHx8IChpc09iamVjdFBheWxvYWQgJiYgY29udGVudFR5cGUgPT09ICdtdWx0aXBhcnQvZm9ybS1kYXRhJykpIHtcbiAgICAgIHZhciBfRm9ybURhdGEgPSB0aGlzLmVudiAmJiB0aGlzLmVudi5Gb3JtRGF0YTtcbiAgICAgIHJldHVybiB0b0Zvcm1EYXRhKGlzRmlsZUxpc3QgPyB7J2ZpbGVzW10nOiBkYXRhfSA6IGRhdGEsIF9Gb3JtRGF0YSAmJiBuZXcgX0Zvcm1EYXRhKCkpO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3RQYXlsb2FkIHx8IGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vanNvbicpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeVNhZmVseShkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgdmFyIHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICB2YXIgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgIHZhciBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgdmFyIHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcgfHwgKGZvcmNlZEpTT05QYXJzaW5nICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmIGRhdGEubGVuZ3RoKSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0UsIHRoaXMsIG51bGwsIHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICBlbnY6IHtcbiAgICBGb3JtRGF0YTogcmVxdWlyZSgnLi9lbnYvRm9ybURhdGEnKVxuICB9LFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH0sXG5cbiAgaGVhZGVyczoge1xuICAgIGNvbW1vbjoge1xuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2lsZW50SlNPTlBhcnNpbmc6IHRydWUsXG4gIGZvcmNlZEpTT05QYXJzaW5nOiB0cnVlLFxuICBjbGFyaWZ5VGltZW91dEVycm9yOiBmYWxzZVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcInZlcnNpb25cIjogXCIwLjI3LjJcIlxufTsiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvc1xuICpcbiAqIEBwYXJhbSB7Kn0gcGF5bG9hZCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxubW9kdWxlLmV4cG9ydHMgPSBudWxsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8vIEhlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG52YXIgaWdub3JlRHVwbGljYXRlT2YgPSBbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2YuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gKHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gOiBbXSkuY29uY2F0KFt2YWxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICB2YXIgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbnZlcnQgYSBkYXRhIG9iamVjdCB0byBGb3JtRGF0YVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHs/T2JqZWN0fSBbZm9ybURhdGFdXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICoqL1xuXG5mdW5jdGlvbiB0b0Zvcm1EYXRhKG9iaiwgZm9ybURhdGEpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGZvcm1EYXRhID0gZm9ybURhdGEgfHwgbmV3IEZvcm1EYXRhKCk7XG5cbiAgdmFyIHN0YWNrID0gW107XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIodmFsdWUpIHx8IHV0aWxzLmlzVHlwZWRBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkKGRhdGEsIHBhcmVudEtleSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KGRhdGEpIHx8IHV0aWxzLmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIGlmIChzdGFjay5pbmRleE9mKGRhdGEpICE9PSAtMSkge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGRldGVjdGVkIGluICcgKyBwYXJlbnRLZXkpO1xuICAgICAgfVxuXG4gICAgICBzdGFjay5wdXNoKGRhdGEpO1xuXG4gICAgICB1dGlscy5mb3JFYWNoKGRhdGEsIGZ1bmN0aW9uIGVhY2godmFsdWUsIGtleSkge1xuICAgICAgICBpZiAodXRpbHMuaXNVbmRlZmluZWQodmFsdWUpKSByZXR1cm47XG4gICAgICAgIHZhciBmdWxsS2V5ID0gcGFyZW50S2V5ID8gcGFyZW50S2V5ICsgJy4nICsga2V5IDoga2V5O1xuICAgICAgICB2YXIgYXJyO1xuXG4gICAgICAgIGlmICh2YWx1ZSAmJiAhcGFyZW50S2V5ICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKSkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICAgICF1dGlscy5pc1VuZGVmaW5lZChlbCkgJiYgZm9ybURhdGEuYXBwZW5kKGZ1bGxLZXksIGNvbnZlcnRWYWx1ZShlbCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnVpbGQodmFsdWUsIGZ1bGxLZXkpO1xuICAgICAgfSk7XG5cbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQocGFyZW50S2V5LCBjb252ZXJ0VmFsdWUoZGF0YSkpO1xuICAgIH1cbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRvRm9ybURhdGE7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBWRVJTSU9OID0gcmVxdWlyZSgnLi4vZW52L2RhdGEnKS52ZXJzaW9uO1xudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcblxudmFyIHZhbGlkYXRvcnMgPSB7fTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblsnb2JqZWN0JywgJ2Jvb2xlYW4nLCAnbnVtYmVyJywgJ2Z1bmN0aW9uJywgJ3N0cmluZycsICdzeW1ib2wnXS5mb3JFYWNoKGZ1bmN0aW9uKHR5cGUsIGkpIHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbnZhciBkZXByZWNhdGVkV2FybmluZ3MgPSB7fTtcblxuLyoqXG4gKiBUcmFuc2l0aW9uYWwgb3B0aW9uIHZhbGlkYXRvclxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259XG4gKi9cbnZhbGlkYXRvcnMudHJhbnNpdGlvbmFsID0gZnVuY3Rpb24gdHJhbnNpdGlvbmFsKHZhbGlkYXRvciwgdmVyc2lvbiwgbWVzc2FnZSkge1xuICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG9wdCwgZGVzYykge1xuICAgIHJldHVybiAnW0F4aW9zIHYnICsgVkVSU0lPTiArICddIFRyYW5zaXRpb25hbCBvcHRpb24gXFwnJyArIG9wdCArICdcXCcnICsgZGVzYyArIChtZXNzYWdlID8gJy4gJyArIG1lc3NhZ2UgOiAnJyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG9wdCwgb3B0cykge1xuICAgIGlmICh2YWxpZGF0b3IgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShvcHQsICcgaGFzIGJlZW4gcmVtb3ZlZCcgKyAodmVyc2lvbiA/ICcgaW4gJyArIHZlcnNpb24gOiAnJykpLFxuICAgICAgICBBeGlvc0Vycm9yLkVSUl9ERVBSRUNBVEVEXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh2ZXJzaW9uICYmICFkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSkge1xuICAgICAgZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0gPSB0cnVlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgZm9ybWF0TWVzc2FnZShcbiAgICAgICAgICBvcHQsXG4gICAgICAgICAgJyBoYXMgYmVlbiBkZXByZWNhdGVkIHNpbmNlIHYnICsgdmVyc2lvbiArICcgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRvciA/IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRzKSA6IHRydWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEFzc2VydCBvYmplY3QncyBwcm9wZXJ0aWVzIHR5cGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRPcHRpb25zKG9wdGlvbnMsIHNjaGVtYSwgYWxsb3dVbmtub3duKSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICB9XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0aW9ucyk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgdmFyIG9wdCA9IGtleXNbaV07XG4gICAgdmFyIHZhbGlkYXRvciA9IHNjaGVtYVtvcHRdO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG9wdGlvbnNbb3B0XTtcbiAgICAgIHZhciByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2VydE9wdGlvbnM6IGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnM6IHZhbGlkYXRvcnNcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbnZhciBraW5kT2YgPSAoZnVuY3Rpb24oY2FjaGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoaW5nKSB7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpbmcpO1xuICAgIHJldHVybiBjYWNoZVtzdHJdIHx8IChjYWNoZVtzdHJdID0gc3RyLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpKTtcbiAgfTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5mdW5jdGlvbiBraW5kT2ZUZXN0KHR5cGUpIHtcbiAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzS2luZE9mKHRoaW5nKSB7XG4gICAgcmV0dXJuIGtpbmRPZih0aGluZykgPT09IHR5cGU7XG4gIH07XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIHR5cGVvZiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzQXJyYXlCdWZmZXIgPSBraW5kT2ZUZXN0KCdBcnJheUJ1ZmZlcicpO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsKTtcbiAgcmV0dXJuIHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGU7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0Jsb2IgPSBraW5kT2ZUZXN0KCdCbG9iJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlTGlzdFxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh0aGluZykge1xuICB2YXIgcGF0dGVybiA9ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fFxuICAgIHRvU3RyaW5nLmNhbGwodGhpbmcpID09PSBwYXR0ZXJuIHx8XG4gICAgKGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09IHBhdHRlcm4pXG4gICk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIudHJpbSA/IHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1cGVyQ29uc3RydWN0b3JcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcHJvcHNdXG4gKiBAcGFyYW0ge29iamVjdH0gW2Rlc2NyaXB0b3JzXVxuICovXG5cbmZ1bmN0aW9uIGluaGVyaXRzKGNvbnN0cnVjdG9yLCBzdXBlckNvbnN0cnVjdG9yLCBwcm9wcywgZGVzY3JpcHRvcnMpIHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZSwgZGVzY3JpcHRvcnMpO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgcHJvcHMgJiYgT2JqZWN0LmFzc2lnbihjb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3BzKTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlIG9iamVjdCB3aXRoIGRlZXAgcHJvdG90eXBlIGNoYWluIHRvIGEgZmxhdCBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmogc291cmNlIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IFtkZXN0T2JqXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2ZpbHRlcl1cbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gdG9GbGF0T2JqZWN0KHNvdXJjZU9iaiwgZGVzdE9iaiwgZmlsdGVyKSB7XG4gIHZhciBwcm9wcztcbiAgdmFyIGk7XG4gIHZhciBwcm9wO1xuICB2YXIgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG5cbiAgZG8ge1xuICAgIHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoc291cmNlT2JqKTtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICBwcm9wID0gcHJvcHNbaV07XG4gICAgICBpZiAoIW1lcmdlZFtwcm9wXSkge1xuICAgICAgICBkZXN0T2JqW3Byb3BdID0gc291cmNlT2JqW3Byb3BdO1xuICAgICAgICBtZXJnZWRbcHJvcF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3VyY2VPYmogPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlT2JqKTtcbiAgfSB3aGlsZSAoc291cmNlT2JqICYmICghZmlsdGVyIHx8IGZpbHRlcihzb3VyY2VPYmosIGRlc3RPYmopKSAmJiBzb3VyY2VPYmogIT09IE9iamVjdC5wcm90b3R5cGUpO1xuXG4gIHJldHVybiBkZXN0T2JqO1xufVxuXG4vKlxuICogZGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBzZWFyY2hTdHJpbmdcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb249IDBdXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZW5kc1dpdGgoc3RyLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbiA+IHN0ci5sZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgdmFyIGxhc3RJbmRleCA9IHN0ci5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICByZXR1cm4gbGFzdEluZGV4ICE9PSAtMSAmJiBsYXN0SW5kZXggPT09IHBvc2l0aW9uO1xufVxuXG5cbi8qKlxuICogUmV0dXJucyBuZXcgYXJyYXkgZnJvbSBhcnJheSBsaWtlIG9iamVjdFxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkodGhpbmcpIHtcbiAgaWYgKCF0aGluZykgcmV0dXJuIG51bGw7XG4gIHZhciBpID0gdGhpbmcubGVuZ3RoO1xuICBpZiAoaXNVbmRlZmluZWQoaSkpIHJldHVybiBudWxsO1xuICB2YXIgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG52YXIgaXNUeXBlZEFycmF5ID0gKGZ1bmN0aW9uKFR5cGVkQXJyYXkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIFR5cGVkQXJyYXkgJiYgdGhpbmcgaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICB9O1xufSkodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihVaW50OEFycmF5KSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNQbGFpbk9iamVjdDogaXNQbGFpbk9iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltLFxuICBzdHJpcEJPTTogc3RyaXBCT00sXG4gIGluaGVyaXRzOiBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0OiB0b0ZsYXRPYmplY3QsXG4gIGtpbmRPZjoga2luZE9mLFxuICBraW5kT2ZUZXN0OiBraW5kT2ZUZXN0LFxuICBlbmRzV2l0aDogZW5kc1dpdGgsXG4gIHRvQXJyYXk6IHRvQXJyYXksXG4gIGlzVHlwZWRBcnJheTogaXNUeXBlZEFycmF5LFxuICBpc0ZpbGVMaXN0OiBpc0ZpbGVMaXN0XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxjYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gb2EoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHJhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2EoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsXG5zYSk7eltiXT1uZXcgdihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiB0YShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlxYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2EoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksR2E9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksSGE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIElhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSmE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEthKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1KYSYmYVtKYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpe2lmKHZvaWQgMD09PUxhKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0xhPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitMYSthfXZhciBOYT0hMTtcbmZ1bmN0aW9uIE9hKGEsYil7aWYoIWF8fE5hKXJldHVyblwiXCI7TmE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TmE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9NYShhKTpcIlwifVxuZnVuY3Rpb24gUGEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTWEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU9hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU9hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU9hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB3YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgQWE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgemE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBGYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBDYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBCYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBEYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UWEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBIYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUWEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFFhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXphP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBhYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBiYihhLGIpe2FiKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/Y2IoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmY2IoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBkYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGViPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGViKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGtiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBsYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2IoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWIsbmI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWI9bWJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bWIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2IoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cWIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwYltiXT1wYlthXX0pfSk7ZnVuY3Rpb24gcmIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBiLmhhc093blByb3BlcnR5KGEpJiZwYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0Yj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihiKXtpZih0YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdmIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB3Yj1udWxsO2Z1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoKXt9dmFyIEliPSExO2Z1bmN0aW9uIEpiKGEsYixjKXtpZihJYilyZXR1cm4gYShiLGMpO0liPSEwO3RyeXtyZXR1cm4gR2IoYSxiLGMpfWZpbmFsbHl7aWYoSWI9ITEsbnVsbCE9PXpifHxudWxsIT09QWIpSGIoKSxGYigpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBMYj0hMTtpZihpYSl0cnl7dmFyIE1iPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7TGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKX1jYXRjaChhKXtMYj0hMX1mdW5jdGlvbiBOYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgT2I9ITEsUGI9bnVsbCxRYj0hMSxSYj1udWxsLFNiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe09iPSEwO1BiPWF9fTtmdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7T2I9ITE7UGI9bnVsbDtOYi5hcHBseShTYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVWIoYSxiLGMsZCxlLGYsZyxoLGspe1RiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihPYil7aWYoT2Ipe3ZhciBsPVBiO09iPSExO1BiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FifHwoUWI9ITAsUmI9bCl9fWZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYihhKXtpZihWYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1WYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBYYihlKSxhO2lmKGY9PT1kKXJldHVybiBYYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFpiKGEpe2E9WWIoYSk7cmV0dXJuIG51bGwhPT1hPyRiKGEpOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPSRiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIGFjPWNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYmM9Y2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2M9Y2EudW5zdGFibGVfc2hvdWxkWWllbGQsZGM9Y2EudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9Y2EudW5zdGFibGVfbm93LGVjPWNhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZjPWNhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGdjPWNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjPWNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGljPWNhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGpjPWNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Db21taXRGaWJlclJvb3Qoa2MsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG9jPU1hdGguY2x6MzI/TWF0aC5jbHozMjpuYyxwYz1NYXRoLmxvZyxxYz1NYXRoLkxOMjtmdW5jdGlvbiBuYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShwYyhhKS9xY3wwKXwwfXZhciByYz02NCxzYz00MTk0MzA0O1xuZnVuY3Rpb24gdGMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXRjKGgpOihmJj1nLDAhPT1mJiYoZD10YyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9dGMoZyk6MCE9PWYmJihkPXRjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtb2MoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB2YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHdjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1vYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT12YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24geGMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHljKCl7dmFyIGE9cmM7cmM8PD0xOzA9PT0ocmMmNDE5NDI0MCkmJihyYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24gemMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtb2MoYik7YVtiXT1jfWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1vYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1vYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIERjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIEVjLEZjLEdjLEhjLEljLEpjPSExLEtjPVtdLExjPW51bGwsTWM9bnVsbCxOYz1udWxsLE9jPW5ldyBNYXAsUGM9bmV3IE1hcCxRYz1bXSxSYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpOYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6UGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZGYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBMYz1UYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTWM9VGMoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE5jPVRjKE5jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7T2Muc2V0KGYsVGMoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLFBjLnNldChmLFRjKFBjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPVdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9V2IoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0djKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1ZYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt3Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2I9bnVsbH1lbHNlIHJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZGYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBaYyhhLGIsYyl7WGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uICRjKCl7SmM9ITE7bnVsbCE9PUxjJiZYYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJlhjKE1jKSYmKE1jPW51bGwpO251bGwhPT1OYyYmWGMoTmMpJiYoTmM9bnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyl9XG5mdW5jdGlvbiBhZChhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSmN8fChKYz0hMCxjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCRjKSkpfVxuZnVuY3Rpb24gYmQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gYWQoYixhKX1pZigwPEtjLmxlbmd0aCl7YWQoS2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxLYy5sZW5ndGg7YysrKXt2YXIgZD1LY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUxjJiZhZChMYyxhKTtudWxsIT09TWMmJmFkKE1jLGEpO251bGwhPT1OYyYmYWQoTmMsYSk7T2MuZm9yRWFjaChiKTtQYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxRYy5sZW5ndGg7YysrKWQ9UWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFFjLmxlbmd0aCYmKGM9UWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZRYy5zaGlmdCgpfXZhciBjZD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxkZD0hMDtcbmZ1bmN0aW9uIGVkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGZkKGEsYixjLGQpe2lmKGRkKXt2YXIgZT1ZYyhhLGIsYyxkKTtpZihudWxsPT09ZSloZChhLGIsZCxpZCxjKSxTYyhhLGQpO2Vsc2UgaWYoVWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoU2MoYSxkKSxiJjQmJi0xPFJjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1DYihlKTtudWxsIT09ZiYmRWMoZik7Zj1ZYyhhLGIsYyxkKTtudWxsPT09ZiYmaGQoYSxiLGQsaWQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgaGQoYSxiLGQsbnVsbCxjKX19dmFyIGlkPW51bGw7XG5mdW5jdGlvbiBZYyhhLGIsYyxkKXtpZD1udWxsO2E9eGIoZCk7YT1XYyhhKTtpZihudWxsIT09YSlpZihiPVZiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVdiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtpZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gamQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZWMoKSl7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7ZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1BKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9QSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9QSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9QSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPUEoe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1BKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPUEoe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1BKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPUEoe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPUEoe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1BKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1BKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1pYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihpYSl7dmFyIHhlO2lmKGlhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7SmIocmUsYil9fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2U7XG5mdW5jdGlvbiBJZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhSGUoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBKZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBLZShhLGIpe3ZhciBjPUplKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUplKGMpfX1mdW5jdGlvbiBMZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0xlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBPZShhKXt2YXIgYj1NZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUtlKGMsZik7dmFyIGc9S2UoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBQZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTmUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSWUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuZnVuY3Rpb24gVmUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgV2U9e2FuaW1hdGlvbmVuZDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlZlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWGU9e30sWWU9e307XG5pYSYmKFllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFdlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSl7aWYoWGVbYV0pcmV0dXJuIFhlW2FdO2lmKCFXZVthXSlyZXR1cm4gYTt2YXIgYj1XZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBZZSlyZXR1cm4gWGVbYV09YltjXTtyZXR1cm4gYX12YXIgJGU9WmUoXCJhbmltYXRpb25lbmRcIiksYWY9WmUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYmY9WmUoXCJhbmltYXRpb25zdGFydFwiKSxjZj1aZShcInRyYW5zaXRpb25lbmRcIiksZGY9bmV3IE1hcCxlZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSxiKXtkZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBnZj0wO2dmPGVmLmxlbmd0aDtnZisrKXt2YXIgaGY9ZWZbZ2ZdLGpmPWhmLnRvTG93ZXJDYXNlKCksa2Y9aGZbMF0udG9VcHBlckNhc2UoKStoZi5zbGljZSgxKTtmZihqZixcIm9uXCIra2YpfWZmKCRlLFwib25BbmltYXRpb25FbmRcIik7ZmYoYWYsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtmZihiZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZmYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtmZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZmYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2ZmKGNmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBsZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1mPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztVYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9fX1pZihRYil0aHJvdyBhPVJiLFFiPSExLFJiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltvZl07dm9pZCAwPT09YyYmKGM9YltvZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChwZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtwZihjLGEsZCxiKX12YXIgcmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKXtpZighYVtyZl0pe2FbcmZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihtZi5oYXMoYil8fHFmKGIsITEsYSkscWYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltyZl18fChiW3JmXT0hMCxxZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBwZihhLGIsYyxkKXtzd2l0Y2goamQoYikpe2Nhc2UgMTp2YXIgZT1lZDticmVhaztjYXNlIDQ6ZT1nZDticmVhaztkZWZhdWx0OmU9ZmR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUxifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9V2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUpiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1kZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprPUhkO2JyZWFrO2Nhc2UgY2Y6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdD0wIT09KGImNCksSj0hdCYmXCJzY3JvbGxcIj09PWEseD10P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Q9W107Zm9yKHZhciB3PWQsdTtudWxsIT09XG53Oyl7dT13O3ZhciBGPXUuc3RhdGVOb2RlOzU9PT11LnRhZyYmbnVsbCE9PUYmJih1PUYsbnVsbCE9PXgmJihGPUtiKHcseCksbnVsbCE9RiYmdC5wdXNoKHRmKHcsRix1KSkpKTtpZihKKWJyZWFrO3c9dy5yZXR1cm59MDx0Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnR9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09d2ImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihXYyhuKXx8blt1Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9XYyhuKTpudWxsLG51bGwhPT1cbm4mJihKPVZiKG4pLG4hPT1KfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dD1CZDtGPVwib25Nb3VzZUxlYXZlXCI7eD1cIm9uTW91c2VFbnRlclwiO3c9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl0PVRkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHg9XCJvblBvaW50ZXJFbnRlclwiLHc9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dWUoayk7dT1udWxsPT1uP2g6dWUobik7aD1uZXcgdChGLHcrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD11O0Y9bnVsbDtXYyhlKT09PWQmJih0PW5ldyB0KHgsdytcImVudGVyXCIsbixjLGUpLHQudGFyZ2V0PXUsdC5yZWxhdGVkVGFyZ2V0PUosRj10KTtKPUY7aWYoayYmbiliOnt0PWs7eD1uO3c9MDtmb3IodT10O3U7dT12Zih1KSl3Kys7dT0wO2ZvcihGPXg7RjtGPXZmKEYpKXUrKztmb3IoOzA8dy11Oyl0PXZmKHQpLHctLTtmb3IoOzA8dS13Oyl4PVxudmYoeCksdS0tO2Zvcig7dy0tOyl7aWYodD09PXh8fG51bGwhPT14JiZ0PT09eC5hbHRlcm5hdGUpYnJlYWsgYjt0PXZmKHQpO3g9dmYoeCl9dD1udWxsfWVsc2UgdD1udWxsO251bGwhPT1rJiZ3ZihnLGgsayx0LCExKTtudWxsIT09biYmbnVsbCE9PUomJndmKGcsSixuLHQsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIG5hPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpbmE9RmU7ZWxzZXtuYT1EZTt2YXIgeGE9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihuYT1FZSk7aWYobmEmJihuYT1uYShhLGQpKSl7bmUoZyxuYSxjLGUpO2JyZWFrIGF9eGEmJnhhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeGE9aC5fd3JhcHBlclN0YXRlKSYmXG54YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZjYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eGE9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoeGEpfHxcInRydWVcIj09PXhhLmNvbnRlbnRFZGl0YWJsZSlRZT14YSxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyICRhO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6YmE9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmJhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9YmE9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKGJhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2JhJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1iYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWJhJiZpZSYmKCRhPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSkseGE9b2UoZCxiYSksMDx4YS5sZW5ndGgmJihiYT1uZXcgTGQoYmEsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpiYSxsaXN0ZW5lcnM6eGF9KSwkYT9iYS5kYXRhPSRhOigkYT1oZShjKSxudWxsIT09JGEmJihiYS5kYXRhPSRhKSkpKTtpZigkYT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT0kYSl9c2UoZyxiKX0pfWZ1bmN0aW9uIHRmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1LYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdCh0ZihhLGYsZSkpLGY9S2IoYSxiKSxudWxsIT1mJiZkLnB1c2godGYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB2ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1LYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdCh0ZihjLGssaCkpKTplfHwoaz1LYihjLGYpLG51bGwhPWsmJmcucHVzaCh0ZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB4Zj0vXFxyXFxuPy9nLHlmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB6ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHhmLFwiXFxuXCIpLnJlcGxhY2UoeWYsXCJcIil9ZnVuY3Rpb24gQWYoYSxiLGMpe2I9emYoYik7aWYoemYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEJmKCl7fVxudmFyIENmPW51bGwsRGY9bnVsbDtmdW5jdGlvbiBFZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsSGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGY/ZnVuY3Rpb24oYSl7cmV0dXJuIEhmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChJZil9OkZmO2Z1bmN0aW9uIElmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YmQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2JkKGIpfWZ1bmN0aW9uIExmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBNZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksT2Y9XCJfX3JlYWN0RmliZXIkXCIrTmYsUGY9XCJfX3JlYWN0UHJvcHMkXCIrTmYsdWY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK05mLG9mPVwiX19yZWFjdEV2ZW50cyRcIitOZixRZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTmYsUmY9XCJfX3JlYWN0SGFuZGxlcyRcIitOZjtcbmZ1bmN0aW9uIFdjKGEpe3ZhciBiPWFbT2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3VmXXx8Y1tPZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1NZihhKTtudWxsIT09YTspe2lmKGM9YVtPZl0pcmV0dXJuIGM7YT1NZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW09mXXx8YVt1Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW1BmXXx8bnVsbH12YXIgU2Y9W10sVGY9LTE7ZnVuY3Rpb24gVWYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+VGZ8fChhLmN1cnJlbnQ9U2ZbVGZdLFNmW1RmXT1udWxsLFRmLS0pfWZ1bmN0aW9uIEcoYSxiKXtUZisrO1NmW1RmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFZmPXt9LEg9VWYoVmYpLFdmPVVmKCExKSxYZj1WZjtmdW5jdGlvbiBZZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFZmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiAkZigpe0UoV2YpO0UoSCl9ZnVuY3Rpb24gYWcoYSxiLGMpe2lmKEguY3VycmVudCE9PVZmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coV2YsYyl9ZnVuY3Rpb24gYmcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxSYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBjZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VmY7WGY9SC5jdXJyZW50O0coSCxhKTtHKFdmLFdmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGRnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YmcoYSxiLFhmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShXZiksRShIKSxHKEgsYSkpOkUoV2YpO0coV2YsYyl9dmFyIGVnPW51bGwsZmc9ITEsZ2c9ITE7ZnVuY3Rpb24gaGcoYSl7bnVsbD09PWVnP2VnPVthXTplZy5wdXNoKGEpfWZ1bmN0aW9uIGlnKGEpe2ZnPSEwO2hnKGEpfVxuZnVuY3Rpb24gamcoKXtpZighZ2cmJm51bGwhPT1lZyl7Z2c9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWVnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZWc9bnVsbDtmZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZWcmJihlZz1lZy5zbGljZShhKzEpKSxhYyhmYyxqZyksZTt9ZmluYWxseXtDPWIsZ2c9ITF9fXJldHVybiBudWxsfXZhciBrZz1bXSxsZz0wLG1nPW51bGwsbmc9MCxvZz1bXSxwZz0wLHFnPW51bGwscmc9MSxzZz1cIlwiO2Z1bmN0aW9uIHRnKGEsYil7a2dbbGcrK109bmc7a2dbbGcrK109bWc7bWc9YTtuZz1ifVxuZnVuY3Rpb24gdWcoYSxiLGMpe29nW3BnKytdPXJnO29nW3BnKytdPXNnO29nW3BnKytdPXFnO3FnPWE7dmFyIGQ9cmc7YT1zZzt2YXIgZT0zMi1vYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1vYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO3JnPTE8PDMyLW9jKGIpK2V8Yzw8ZXxkO3NnPWYrYX1lbHNlIHJnPTE8PGZ8Yzw8ZXxkLHNnPWF9ZnVuY3Rpb24gdmcoYSl7bnVsbCE9PWEucmV0dXJuJiYodGcoYSwxKSx1ZyhhLDEsMCkpfWZ1bmN0aW9uIHdnKGEpe2Zvcig7YT09PW1nOyltZz1rZ1stLWxnXSxrZ1tsZ109bnVsbCxuZz1rZ1stLWxnXSxrZ1tsZ109bnVsbDtmb3IoO2E9PT1xZzspcWc9b2dbLS1wZ10sb2dbcGddPW51bGwsc2c9b2dbLS1wZ10sb2dbcGddPW51bGwscmc9b2dbLS1wZ10sb2dbcGddPW51bGx9dmFyIHhnPW51bGwseWc9bnVsbCxJPSExLHpnPW51bGw7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUJnKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gQ2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1MZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09cWc/e2lkOnJnLG92ZXJmbG93OnNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9QmcoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMseGc9YSx5Zz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIERnKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gRWcoYSl7aWYoSSl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQ2coYSxiKSl7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUxmKGMubmV4dFNpYmxpbmcpO3ZhciBkPXhnO2ImJkNnKGEsYik/QWcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSx4Zz1hKX19ZWxzZXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7eGc9YX19fWZ1bmN0aW9uIEZnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfVxuZnVuY3Rpb24gR2coYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCFJKXJldHVybiBGZyhhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUVmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj15Zykpe2lmKERnKGEpKXRocm93IEhnKCksRXJyb3IocCg0MTgpKTtmb3IoO2I7KUFnKGEsYiksYj1MZihiLm5leHRTaWJsaW5nKX1GZyhhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe3lnPUxmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9eWc9XG5udWxsfX1lbHNlIHlnPXhnP0xmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEhnKCl7Zm9yKHZhciBhPXlnO2E7KWE9TGYoYS5uZXh0U2libGluZyl9ZnVuY3Rpb24gSWcoKXt5Zz14Zz1udWxsO0k9ITF9ZnVuY3Rpb24gSmcoYSl7bnVsbD09PXpnP3pnPVthXTp6Zy5wdXNoKGEpfXZhciBLZz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBMZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgTWc9VWYobnVsbCksTmc9bnVsbCxPZz1udWxsLFBnPW51bGw7ZnVuY3Rpb24gUWcoKXtQZz1PZz1OZz1udWxsfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPU1nLmN1cnJlbnQ7RShNZyk7YS5fY3VycmVudFZhbHVlPWJ9XG5mdW5jdGlvbiBTZyhhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIFRnKGEsYil7Tmc9YTtQZz1PZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKFVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIFZnKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihQZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1PZyl7aWYobnVsbD09PU5nKXRocm93IEVycm9yKHAoMzA4KSk7T2c9YTtOZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgT2c9T2cubmV4dD1hO3JldHVybiBifXZhciBXZz1udWxsO2Z1bmN0aW9uIFhnKGEpe251bGw9PT1XZz9XZz1bYV06V2cucHVzaChhKX1mdW5jdGlvbiBZZyhhLGIsYyxkKXt2YXIgZT1iLmludGVybGVhdmVkO251bGw9PT1lPyhjLm5leHQ9YyxYZyhiKSk6KGMubmV4dD1lLm5leHQsZS5uZXh0PWMpO2IuaW50ZXJsZWF2ZWQ9YztyZXR1cm4gWmcoYSxkKX1cbmZ1bmN0aW9uIFpnKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH12YXIgJGc9ITE7ZnVuY3Rpb24gYWgoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIGJoKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIGNoKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gZGgoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZD1kLnNoYXJlZDtpZigwIT09KEsmMikpe3ZhciBlPWQucGVuZGluZztudWxsPT09ZT9iLm5leHQ9YjooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5wZW5kaW5nPWI7cmV0dXJuIFpnKGEsYyl9ZT1kLmludGVybGVhdmVkO251bGw9PT1lPyhiLm5leHQ9YixYZyhkKSk6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QuaW50ZXJsZWF2ZWQ9YjtyZXR1cm4gWmcoYSxjKX1mdW5jdGlvbiBlaChhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxuZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIGdoKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7JGc9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbT1hLmFsdGVybmF0ZTtudWxsIT09bSYmKG09bS51cGRhdGVRdWV1ZSxoPW0ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9tLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG0ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgcT1lLmJhc2VTdGF0ZTtnPTA7bT1sPWs9bnVsbDtoPWY7ZG97dmFyIHI9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmcik9PT1yKXtudWxsIT09bSYmKG09bS5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbj1hLHQ9aDtyPWI7eT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOm49dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuKXtxPW4uY2FsbCh5LHEscik7YnJlYWsgYX1xPW47YnJlYWsgYTtjYXNlIDM6bi5mbGFncz1uLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm49dC5wYXlsb2FkO3I9XCJmdW5jdGlvblwiPT09dHlwZW9mIG4/bi5jYWxsKHkscSxyKTpuO2lmKG51bGw9PT1yfHx2b2lkIDA9PT1yKWJyZWFrIGE7cT1BKHt9LHEscik7YnJlYWsgYTtjYXNlIDI6JGc9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQscj1lLmVmZmVjdHMsbnVsbD09PXI/ZS5lZmZlY3RzPVtoXTpyLnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTpyLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW0/KGw9bT15LGs9cSk6bT1tLm5leHQ9eSxnfD1yO1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2Ugcj1oLGg9ci5uZXh0LHIubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9cixlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW0mJihrPXEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW07Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO2hofD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9cX19XG5mdW5jdGlvbiBpaChhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBqaD0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBraChhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgbmg9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/VmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1MKCksZD1cbmxoKGEpLGU9Y2goYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtiPWRoKGEsZSxkKTtudWxsIT09YiYmKG1oKGIsYSxkLGMpLGVoKGIsYSxkKSl9fTtmdW5jdGlvbiBvaChhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFJZShjLGQpfHwhSWUoZSxmKTohMH1cbmZ1bmN0aW9uIHBoKGEsYixjKXt2YXIgZD0hMSxlPVZmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPVZnKGYpOihlPVpmKGIpP1hmOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1lmKGEsZSk6VmYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1uaDthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHFoKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHJoKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9amg7YWgoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1WZyhmKTooZj1aZihiKT9YZjpILmN1cnJlbnQsZS5jb250ZXh0PVlmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihraChhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxnaChhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX1cbmZ1bmN0aW9uIHNoKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztiPT09amgmJihiPWUucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIHVoKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiB2aChhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT13aChhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXhoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT15YSlyZXR1cm4gbShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09SGEmJnVoKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9c2goYSxiLGMpLGQucmV0dXJuPWEsZDtkPXloKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPXNoKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9emgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPUFoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPXhoKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjPXloKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9c2goYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHdhOnJldHVybiBiPXpoKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEhhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHEoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGViKGIpfHxLYShiKSlyZXR1cm4gYj1BaChiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjt0aChhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2Ugd2E6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gZT1jLl9pbml0LHIoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihlYihjKXx8S2EoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO3RoKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB3YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEhhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihlYihkKXx8S2EoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO3RoKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCx1PWcsdz1nPTAseD1udWxsO251bGwhPT11JiZ3PGgubGVuZ3RoO3crKyl7dS5pbmRleD53Pyh4PXUsdT1udWxsKTp4PXUuc2libGluZzt2YXIgbj1yKGUsdSxoW3ddLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9eCk7YnJlYWt9YSYmdSYmbnVsbD09PW4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx3KTtudWxsPT09bT9sPW46bS5zaWJsaW5nPW47bT1uO3U9eH1pZih3PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PXUpe2Zvcig7dzxoLmxlbmd0aDt3KyspdT1xKGUsaFt3XSxrKSxudWxsIT09dSYmKGc9Zih1LGcsdyksbnVsbD09PW0/bD11Om0uc2libGluZz11LG09dSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7dzxoLmxlbmd0aDt3KyspeD15KHUsZSx3LGhbd10sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1cbngua2V5P3c6eC5rZXkpLGc9Zih4LGcsdyksbnVsbD09PW0/bD14Om0uc2libGluZz14LG09eCk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIHQoZSxnLGgsayl7dmFyIGw9S2EoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciB1PWw9bnVsbCxtPWcsdz1nPTAseD1udWxsLG49aC5uZXh0KCk7bnVsbCE9PW0mJiFuLmRvbmU7dysrLG49aC5uZXh0KCkpe20uaW5kZXg+dz8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9cihlLG0sbi52YWx1ZSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcsdyk7bnVsbD09PXU/bD10OnUuc2libGluZz10O3U9dDttPXh9aWYobi5kb25lKXJldHVybiBjKGUsXG5tKSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PW0pe2Zvcig7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcihtPWQoZSxtKTshbi5kb25lO3crKyxuPWgubmV4dCgpKW49eShtLGUsdyxuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09bi5rZXk/dzpuLmtleSksZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gSihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT15YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB2YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT15YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09SGEmJnVoKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1zaChhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09eWE/KGQ9QWgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPXloKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPXNoKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB3YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXpoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgSGE6cmV0dXJuIGw9Zi5faW5pdCxKKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGViKGYpKXJldHVybiBuKGEsZCxmLGgpO2lmKEthKGYpKXJldHVybiB0KGEsZCxmLGgpO3RoKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9eGgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gSn12YXIgQmg9dmgoITApLENoPXZoKCExKSxEaD17fSxFaD1VZihEaCksRmg9VWYoRGgpLEdoPVVmKERoKTtmdW5jdGlvbiBIaChhKXtpZihhPT09RGgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBJaChhLGIpe0coR2gsYik7RyhGaCxhKTtHKEVoLERoKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxiKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1sYihiLGEpfUUoRWgpO0coRWgsYil9ZnVuY3Rpb24gSmgoKXtFKEVoKTtFKEZoKTtFKEdoKX1cbmZ1bmN0aW9uIEtoKGEpe0hoKEdoLmN1cnJlbnQpO3ZhciBiPUhoKEVoLmN1cnJlbnQpO3ZhciBjPWxiKGIsYS50eXBlKTtiIT09YyYmKEcoRmgsYSksRyhFaCxjKSl9ZnVuY3Rpb24gTGgoYSl7RmguY3VycmVudD09PWEmJihFKEVoKSxFKEZoKSl9dmFyIE09VWYoMCk7XG5mdW5jdGlvbiBNaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgTmg9W107XG5mdW5jdGlvbiBPaCgpe2Zvcih2YXIgYT0wO2E8TmgubGVuZ3RoO2ErKylOaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO05oLmxlbmd0aD0wfXZhciBQaD11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFFoPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLFJoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsU2g9ITEsVGg9ITEsVWg9MCxWaD0wO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBXaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoYSxiLGMsZCxlLGYpe1JoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7UGguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9ZaDpaaDthPWMoZCxlKTtpZihUaCl7Zj0wO2Rve1RoPSExO1VoPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtQaC5jdXJyZW50PSRoO2E9YyhkLGUpfXdoaWxlKFRoKX1QaC5jdXJyZW50PWFpO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7Umg9MDtQPU89Tj1udWxsO1NoPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBiaSgpe3ZhciBhPTAhPT1VaDtVaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gY2koKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gZGkoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIGVpKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gZmkoYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG09bC5sYW5lO2lmKChSaCZtKT09PW0pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciBxPXtsYW5lOm0sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXEsZz1kKTprPWsubmV4dD1xO04ubGFuZXN8PW07aGh8PW19bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsTi5sYW5lc3w9ZixoaHw9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIGdpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIGhpKCl7fVxuZnVuY3Rpb24gaWkoYSxiKXt2YXIgYz1OLGQ9ZGkoKSxlPWIoKSxmPSFIZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLFVnPSEwKTtkPWQucXVldWU7amkoa2kuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09UCYmUC5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gbmkoYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gbWkoYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtvaShiKSYmcGkoYSl9ZnVuY3Rpb24ga2koYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7b2koYikmJnBpKGEpfSl9ZnVuY3Rpb24gb2koYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hSGUoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gcGkoYSl7dmFyIGI9WmcoYSwxKTtudWxsIT09YiYmbWgoYixhLDEsLTEpfVxuZnVuY3Rpb24gcWkoYSl7dmFyIGI9Y2koKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjplaSxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXJpLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBsaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2koKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIHRpKGEsYixjLGQpe3ZhciBlPWNpKCk7Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWRpKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmV2goZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9bGkoYixjLGYsZCk7cmV0dXJufX1OLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyxmLGQpfWZ1bmN0aW9uIHZpKGEsYil7cmV0dXJuIHRpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uIGppKGEsYil7cmV0dXJuIHVpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIHdpKGEsYil7cmV0dXJuIHVpKDQsMixhLGIpfWZ1bmN0aW9uIHhpKGEsYil7cmV0dXJuIHVpKDQsNCxhLGIpfVxuZnVuY3Rpb24geWkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB6aShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHVpKDQsNCx5aS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBBaSgpe31mdW5jdGlvbiBCaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIENpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIERpKGEsYixjKXtpZigwPT09KFJoJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSxVZz0hMCksYS5tZW1vaXplZFN0YXRlPWM7SGUoYyxiKXx8KGM9eWMoKSxOLmxhbmVzfD1jLGhofD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiBFaShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1RaC50cmFuc2l0aW9uO1FoLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxRaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIEZpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1saChhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGMpO2Vsc2UgaWYoYz1ZZyhhLGIsYyxkKSxudWxsIT09Yyl7dmFyIGU9TCgpO21oKGMsYSxkLGUpO0ppKGMsYixkKX19XG5mdW5jdGlvbiByaShhLGIsYyl7dmFyIGQ9bGgoYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixlKTtlbHNle3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoSGUoaCxnKSl7dmFyIGs9Yi5pbnRlcmxlYXZlZDtudWxsPT09az8oZS5uZXh0PWUsWGcoYikpOihlLm5leHQ9ay5uZXh0LGsubmV4dD1lKTtiLmludGVybGVhdmVkPWU7cmV0dXJufX1jYXRjaChsKXt9ZmluYWxseXt9Yz1ZZyhhLGIsZSxkKTtudWxsIT09YyYmKGU9TCgpLG1oKGMsYSxkLGUpLEppKGMsYixkKSl9fVxuZnVuY3Rpb24gSGkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1OfHxudWxsIT09YiYmYj09PU59ZnVuY3Rpb24gSWkoYSxiKXtUaD1TaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEppKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG52YXIgYWk9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VJbnNlcnRpb25FZmZlY3Q6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlEsdXNlTXV0YWJsZVNvdXJjZTpRLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlEsdXNlSWQ6USx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFloPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe2NpKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OnZpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0aSg0MTk0MzA4LFxuNCx5aS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1jaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1jaSgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPUdpLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cbmNpKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnFpLHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gY2koKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1xaSghMSksYj1hWzBdO2E9RWkuYmluZChudWxsLGFbMV0pO2NpKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TixlPWNpKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9Zjt2aShraS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT1jaSgpLGI9Ui5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPXNnO3ZhciBkPXJnO2M9KGQmfigxPDwzMi1vYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1VaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9VmgrKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFpoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmZpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBmaShlaSl9LFxudXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIERpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9ZmkoZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sJGg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6Z2ksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGdpKGVpKX0sdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIG51bGw9PT1cbk8/Yi5tZW1vaXplZFN0YXRlPWE6RGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1naShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBLaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1QYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZSxkaWdlc3Q6bnVsbH19ZnVuY3Rpb24gTGkoYSxiLGMpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpudWxsLHN0YWNrOm51bGwhPWM/YzpudWxsLGRpZ2VzdDpudWxsIT1iP2I6bnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgTmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gT2koYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UGl8fChQaT0hMCxRaT1kKTtNaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFJpKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVNpP1NpPW5ldyBTZXQoW3RoaXNdKTpTaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gVGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBOaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVVpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFZpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFdpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9Y2goLTEsMSksYi50YWc9MixkaChjLGIsMSkpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgWGk9dWEuUmVhY3RDdXJyZW50T3duZXIsVWc9ITE7ZnVuY3Rpb24gWWkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9DaChiLG51bGwsYyxkKTpCaChiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIFppKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtUZyhiLGUpO2Q9WGgoYSxiLGMsZCxmLGUpO2M9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmMmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaihhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFiaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixjaihhLGIsZixkLGUpO2E9eWgoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpJZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuICRpKGEsYixlKX1iLmZsYWdzfD0xO2E9d2goZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSWUoZixkKSYmYS5yZWY9PT1iLnJlZilpZihVZz0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYoVWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcywkaShhLGIsZSl9cmV0dXJuIGRqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBlaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcoZmosZ2opLGdqfD1jO2Vsc2V7aWYoMD09PShjJjEwNzM3NDE4MjQpKXJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEcoZmosZ2opLGdqfD1hLG51bGw7Yi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmM7Ryhmaixnaik7Z2p8PWR9ZWxzZSBudWxsIT09XG5mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxHKGZqLGdqKSxnanw9ZDtZaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBkaihhLGIsYyxkLGUpe3ZhciBmPVpmKGMpP1hmOkguY3VycmVudDtmPVlmKGIsZik7VGcoYixlKTtjPVhoKGEsYixjLGQsZixlKTtkPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZkJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWooYSxiLGMsZCxlKXtpZihaZihjKSl7dmFyIGY9ITA7Y2coYil9ZWxzZSBmPSExO1RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKWpqKGEsYikscGgoYixjLGQpLHJoKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPVZnKGwpOihsPVpmKGMpP1hmOkguY3VycmVudCxsPVlmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09ZHx8ayE9PWwpJiZxaChiLGcsZCxsKTskZz0hMTt2YXIgcj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxyIT09a3x8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2goYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPSRnfHxvaChiLGMsaCxkLHIsayxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTtiaChhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkxnKGIudHlwZSxoKTtnLnByb3BzPWw7cT1iLnBlbmRpbmdQcm9wcztyPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPVZnKGspOihrPVpmKGMpP1hmOkguY3VycmVudCxrPVlmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhtPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cXx8ciE9PWspJiZxaChiLGcsZCxrKTskZz0hMTtyPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7dmFyIG49Yi5tZW1vaXplZFN0YXRlO2ghPT1xfHxyIT09bnx8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoa2goYixjLHksZCksbj1iLm1lbW9pemVkU3RhdGUpLChsPSRnfHxvaChiLGMsbCxkLHIsbixrKXx8ITEpPyhtfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG4sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG4saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1uKSxnLnByb3BzPWQsZy5zdGF0ZT1uLGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PVxuYS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4ga2ooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24ga2ooYSxiLGMsZCxlLGYpe2hqKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZkZyhiLGMsITEpLCRpKGEsYixmKTtkPWIuc3RhdGVOb2RlO1hpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9QmgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1CaChiLG51bGwsaCxmKSk6WWkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmZGcoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBsaihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P2FnKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmFnKGEsYi5jb250ZXh0LCExKTtJaChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBtaihhLGIsYyxkLGUpe0lnKCk7SmcoZSk7Yi5mbGFnc3w9MjU2O1lpKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBuaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIG9qKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1cbmZ1bmN0aW9uIHBqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPU0uY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhNLGUmMSk7aWYobnVsbD09PWEpe0VnKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtnPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmd9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZyk6Zj1xaihnLGQsMCxudWxsKSxhPUFoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGMpLGIubWVtb2l6ZWRTdGF0ZT1uaixhKTpyaihiLGcpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lJiYoaD1lLmRlaHlkcmF0ZWQsbnVsbCE9PWgpKXJldHVybiBzaihhLGIsZyxkLGgsZSxjKTtpZihmKXtmPWQuZmFsbGJhY2s7Zz1iLm1vZGU7ZT1hLmNoaWxkO2g9ZS5zaWJsaW5nO3ZhciBrPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn07MD09PShnJjEpJiZiLmNoaWxkIT09ZT8oZD1iLmNoaWxkLGQuY2hpbGRMYW5lcz0wLGQucGVuZGluZ1Byb3BzPWssYi5kZWxldGlvbnM9bnVsbCk6KGQ9d2goZSxrKSxkLnN1YnRyZWVGbGFncz1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWg/Zj13aChoLGYpOihmPUFoKGYsZyxjLG51bGwpLGYuZmxhZ3N8PTIpO2YucmV0dXJuPVxuYjtkLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDtkPWY7Zj1iLmNoaWxkO2c9YS5jaGlsZC5tZW1vaXplZFN0YXRlO2c9bnVsbD09PWc/b2ooYyk6e2Jhc2VMYW5lczpnLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9O2YubWVtb2l6ZWRTdGF0ZT1nO2YuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmM7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBkfWY9YS5jaGlsZDthPWYuc2libGluZztkPXdoKGYse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0pOzA9PT0oYi5tb2RlJjEpJiYoZC5sYW5lcz1jKTtkLnJldHVybj1iO2Quc2libGluZz1udWxsO251bGwhPT1hJiYoYz1iLmRlbGV0aW9ucyxudWxsPT09Yz8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpjLnB1c2goYSkpO2IuY2hpbGQ9ZDtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gZH1cbmZ1bmN0aW9uIHJqKGEsYil7Yj1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9ZnVuY3Rpb24gdGooYSxiLGMsZCl7bnVsbCE9PWQmJkpnKGQpO0JoKGIsYS5jaGlsZCxudWxsLGMpO2E9cmooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHNqKGEsYixjLGQsZSxmLGcpe2lmKGMpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LGQ9TGkoRXJyb3IocCg0MjIpKSksdGooYSxiLGcsZCk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPUFoKGYsZSxnLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmQmgoYixhLmNoaWxkLG51bGwsZyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGcpO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSlyZXR1cm4gdGooYSxiLGcsbnVsbCk7aWYoXCIkIVwiPT09ZS5kYXRhKXtkPWUubmV4dFNpYmxpbmcmJmUubmV4dFNpYmxpbmcuZGF0YXNldDtcbmlmKGQpdmFyIGg9ZC5kZ3N0O2Q9aDtmPUVycm9yKHAoNDE5KSk7ZD1MaShmLGQsdm9pZCAwKTtyZXR1cm4gdGooYSxiLGcsZCl9aD0wIT09KGcmYS5jaGlsZExhbmVzKTtpZihVZ3x8aCl7ZD1SO2lmKG51bGwhPT1kKXtzd2l0Y2goZyYtZyl7Y2FzZSA0OmU9MjticmVhaztjYXNlIDE2OmU9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6ZT0zMjticmVhaztjYXNlIDUzNjg3MDkxMjplPTI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmU9MH1lPTAhPT0oZSYoZC5zdXNwZW5kZWRMYW5lc3xnKSk/MDplO1xuMCE9PWUmJmUhPT1mLnJldHJ5TGFuZSYmKGYucmV0cnlMYW5lPWUsWmcoYSxlKSxtaChkLGEsZSwtMSkpfXVqKCk7ZD1MaShFcnJvcihwKDQyMSkpKTtyZXR1cm4gdGooYSxiLGcsZCl9aWYoXCIkP1wiPT09ZS5kYXRhKXJldHVybiBiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9dmouYmluZChudWxsLGEpLGUuX3JlYWN0UmV0cnk9YixudWxsO2E9Zi50cmVlQ29udGV4dDt5Zz1MZihlLm5leHRTaWJsaW5nKTt4Zz1iO0k9ITA7emc9bnVsbDtudWxsIT09YSYmKG9nW3BnKytdPXJnLG9nW3BnKytdPXNnLG9nW3BnKytdPXFnLHJnPWEuaWQsc2c9YS5vdmVyZmxvdyxxZz1iKTtiPXJqKGIsZC5jaGlsZHJlbik7Yi5mbGFnc3w9NDA5NjtyZXR1cm4gYn1mdW5jdGlvbiB3aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO1NnKGEucmV0dXJuLGIsYyl9XG5mdW5jdGlvbiB4aihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24geWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtZaShhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ3aihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKXdqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9RyhNLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1NaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3hqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09TWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXhqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnhqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGpqKGEsYil7MD09PShiLm1vZGUmMSkmJm51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpfWZ1bmN0aW9uICRpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtoaHw9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9d2goYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXdoKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB6aihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6bGooYik7SWcoKTticmVhaztjYXNlIDU6S2goYik7YnJlYWs7Y2FzZSAxOlpmKGIudHlwZSkmJmNnKGIpO2JyZWFrO2Nhc2UgNDpJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBHKE0sTS5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiBwaihhLGIsYyk7RyhNLE0uY3VycmVudCYxKTthPSRpKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9RyhNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4geWooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0coTSxNLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxlaihhLGIsYyl9cmV0dXJuICRpKGEsYixjKX12YXIgQWosQmosQ2osRGo7XG5Baj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Qmo9ZnVuY3Rpb24oKXt9O1xuQ2o9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO0hoKEVoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXViKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZEKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtEaj1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIEVqKGEsYil7aWYoIUkpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFMoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBGaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gUyhiKSxudWxsO2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7SmgoKTtFKFdmKTtFKEgpO09oKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUdnKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09emcmJihHaih6Zyksemc9bnVsbCkpO0JqKGEsYik7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6TGgoYik7dmFyIGU9SGgoR2guY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQ2ooYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1MoYik7cmV0dXJuIG51bGx9YT1IaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtkW1BmXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsZCk7RChcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuZCk7RChcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRChcImludmFsaWRcIixkKX11YihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxcbmgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmVhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1nJiZEKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2RiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9QmYpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1rYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcblwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW09mXT1iO2FbUGZdPWQ7QWooYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9dmIoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixhKTtEKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuYSk7RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1nYihhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dWIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/c2IoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm5iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1cbmN8fFwiXCIhPT1rKSYmb2IoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJm9iKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZWEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRChcInNjcm9sbFwiLGEpOm51bGwhPWsmJnRhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7ZGIoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsXG4hMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1TKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlEaihhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPUhoKEdoLmN1cnJlbnQpO0hoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1cbnhnLG51bGwhPT1hKXN3aXRjaChhLnRhZyl7Y2FzZSAzOkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW09mXT1iLGIuc3RhdGVOb2RlPWR9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkUoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7aWYoSSYmbnVsbCE9PXlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpSGcoKSxJZygpLGIuZmxhZ3N8PTk4NTYwLGY9ITE7ZWxzZSBpZihmPUdnKGIpLG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtpZihudWxsPT09XG5hKXtpZighZil0aHJvdyBFcnJvcihwKDMxOCkpO2Y9Yi5tZW1vaXplZFN0YXRlO2Y9bnVsbCE9PWY/Zi5kZWh5ZHJhdGVkOm51bGw7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTcpKTtmW09mXT1ifWVsc2UgSWcoKSwwPT09KGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1MoYik7Zj0hMX1lbHNlIG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSxmPSEwO2lmKCFmKXJldHVybiBiLmZsYWdzJjY1NTM2P2I6bnVsbH1pZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtkIT09KG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlKSYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShNLmN1cnJlbnQmMSk/MD09PVQmJihUPTMpOnVqKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLFxuQmooYSxiKSxudWxsPT09YSYmc2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksUyhiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksUyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMTk6RShNKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUyhiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKUVqKGYsITEpO2Vsc2V7aWYoMCE9PVR8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1NaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O0VqKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LFxuZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9XG5hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmQigpPkhqJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9TWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxFaihmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUyhiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+SGomJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPVxuYixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUIoKSxiLnNpYmxpbmc9bnVsbCxjPU0uY3VycmVudCxHKE0sZD9jJjF8MjpjJjEpLGI7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oZ2omMTA3Mzc0MTgyNCkmJihTKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UyhiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIEpqKGEsYil7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiBKaCgpLEUoV2YpLEUoSCksT2goKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBMaChiKSxudWxsO2Nhc2UgMTM6RShNKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7SWcoKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRShNKSxudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIEtqPSExLFU9ITEsTGo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsVj1udWxsO2Z1bmN0aW9uIE1qKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7VyhhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBOaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtXKGEsYixkKX19dmFyIE9qPSExO1xuZnVuY3Rpb24gUGooYSxiKXtDZj1kZDthPU1lKCk7aWYoTmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goRil7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG09MCxxPWEscj1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7cSE9PWN8fDAhPT1lJiYzIT09cS5ub2RlVHlwZXx8KGg9ZytlKTtxIT09Znx8MCE9PWQmJjMhPT1xLm5vZGVUeXBlfHwoaz1nK2QpOzM9PT1xLm5vZGVUeXBlJiYoZys9XG5xLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeT1xLmZpcnN0Q2hpbGQpKWJyZWFrO3I9cTtxPXl9Zm9yKDs7KXtpZihxPT09YSlicmVhayBiO3I9PT1jJiYrK2w9PT1lJiYoaD1nKTtyPT09ZiYmKyttPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXEubmV4dFNpYmxpbmcpKWJyZWFrO3E9cjtyPXEucGFyZW50Tm9kZX1xPXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDtEZj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtkZD0hMTtmb3IoVj1iO251bGwhPT1WOylpZihiPVYsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsVj1hO2Vsc2UgZm9yKDtudWxsIT09Vjspe2I9Vjt0cnl7dmFyIG49Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTppZihudWxsIT09bil7dmFyIHQ9bi5tZW1vaXplZFByb3BzLEo9bi5tZW1vaXplZFN0YXRlLHg9Yi5zdGF0ZU5vZGUsdz14LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/dDpMZyhiLnR5cGUsdCksSik7eC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT13fWJyZWFrO2Nhc2UgMzp2YXIgdT1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOzE9PT11Lm5vZGVUeXBlP3UudGV4dENvbnRlbnQ9XCJcIjo5PT09dS5ub2RlVHlwZSYmdS5kb2N1bWVudEVsZW1lbnQmJnUucmVtb3ZlQ2hpbGQodS5kb2N1bWVudEVsZW1lbnQpO2JyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goRil7VyhiLGIucmV0dXJuLEYpfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtWPWE7YnJlYWt9Vj1iLnJldHVybn1uPU9qO09qPSExO3JldHVybiBufVxuZnVuY3Rpb24gUWooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmTmooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gUmooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBUaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsVGooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltPZl0sZGVsZXRlIGJbUGZdLGRlbGV0ZSBiW29mXSxkZWxldGUgYltRZl0sZGVsZXRlIGJbUmZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBVaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFZqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFVqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBXaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QmYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoV2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylXaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBYaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspWGooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBYPW51bGwsWWo9ITE7ZnVuY3Rpb24gWmooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KWFrKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIGFrKGEsYixjKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtsYy5vbkNvbW1pdEZpYmVyVW5tb3VudChrYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6VXx8TWooYyxiKTtjYXNlIDY6dmFyIGQ9WCxlPVlqO1g9bnVsbDtaaihhLGIsYyk7WD1kO1lqPWU7bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0tmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmS2YoYSxjKSxiZChhKSk6S2YoWCxjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVg7ZT1ZajtYPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7XG5aaihhLGIsYyk7WD1kO1lqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFVJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9OaihjLGIsZyk6MCE9PShmJjQpJiZOaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFVJiYoTWooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1coYyxiLGgpfVpqKGEsYixjKTticmVhaztjYXNlIDIxOlpqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhVPShkPVUpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsWmooYSxiLGMpLFU9ZCk6WmooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6WmooYSxiLGMpfX1mdW5jdGlvbiBiayhhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBMaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWNrLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gZGsoYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1Olg9aC5zdGF0ZU5vZGU7WWo9ITE7YnJlYWsgYTtjYXNlIDM6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGE7Y2FzZSA0Olg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVgpdGhyb3cgRXJyb3IocCgxNjApKTthayhmLGcsZSk7WD1udWxsO1lqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtXKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspZWsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGVrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXt0cnl7UWooMyxhLGEucmV0dXJuKSxSaigzLGEpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX10cnl7UWooNSxhLGEucmV0dXJuKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7b2IoZSxcIlwiKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJmFiKGUsZik7dmIoaCxnKTt2YXIgbD12YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbT1rW2ddLHE9a1tnKzFdO1wic3R5bGVcIj09PW0/c2IoZSxxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1tP25iKGUscSk6XCJjaGlsZHJlblwiPT09bT9vYihlLHEpOnRhKGUsbSxxLGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpiYihlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciByPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9mYihlLCEhZi5tdWx0aXBsZSx5LCExKTpyIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZmIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtQZl09Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgNjpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7ZT1hLnN0YXRlTm9kZTtmPWEubWVtb2l6ZWRQcm9wczt0cnl7ZS5ub2RlVmFsdWU9Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMzpkayhiLGEpO2ZrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2JkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfWJyZWFrO2Nhc2UgNDpkayhiLGEpO2ZrKGEpO2JyZWFrO2Nhc2UgMTM6ZGsoYixhKTtmayhhKTtlPWEuY2hpbGQ7ZS5mbGFncyY4MTkyJiYoZj1udWxsIT09ZS5tZW1vaXplZFN0YXRlLGUuc3RhdGVOb2RlLmlzSGlkZGVuPWYsIWZ8fFxubnVsbCE9PWUuYWx0ZXJuYXRlJiZudWxsIT09ZS5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZXx8KGdrPUIoKSkpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMjptPW51bGwhPT1jJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlO2EubW9kZSYxPyhVPShsPVUpfHxtLGRrKGIsYSksVT1sKTpkayhiLGEpO2ZrKGEpO2lmKGQmODE5Mil7bD1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKChhLnN0YXRlTm9kZS5pc0hpZGRlbj1sKSYmIW0mJjAhPT0oYS5tb2RlJjEpKWZvcihWPWEsbT1hLmNoaWxkO251bGwhPT1tOyl7Zm9yKHE9Vj1tO251bGwhPT1WOyl7cj1WO3k9ci5jaGlsZDtzd2l0Y2goci50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpRaig0LHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpNaihyLHIucmV0dXJuKTt2YXIgbj1yLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsVW5tb3VudCl7ZD1yO2M9ci5yZXR1cm47dHJ5e2I9ZCxuLnByb3BzPVxuYi5tZW1vaXplZFByb3BzLG4uc3RhdGU9Yi5tZW1vaXplZFN0YXRlLG4uY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtXKGQsYyx0KX19YnJlYWs7Y2FzZSA1Ok1qKHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PXIubWVtb2l6ZWRTdGF0ZSl7aGsocSk7Y29udGludWV9fW51bGwhPT15Pyh5LnJldHVybj1yLFY9eSk6aGsocSl9bT1tLnNpYmxpbmd9YTpmb3IobT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT1tKXttPXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbD8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9XG5yYihcImRpc3BsYXlcIixnKSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX19ZWxzZSBpZig2PT09cS50YWcpe2lmKG51bGw9PT1tKXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bD9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTttPT09cSYmKG09bnVsbCk7cT1xLnJldHVybn1tPT09cSYmKG09bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ319YnJlYWs7Y2FzZSAxOTpkayhiLGEpO2ZrKGEpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OmRrKGIsXG5hKSxmayhhKX19ZnVuY3Rpb24gZmsoYSl7dmFyIGI9YS5mbGFncztpZihiJjIpe3RyeXthOntmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZihVaihjKSl7dmFyIGQ9YzticmVhayBhfWM9Yy5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoKGQudGFnKXtjYXNlIDU6dmFyIGU9ZC5zdGF0ZU5vZGU7ZC5mbGFncyYzMiYmKG9iKGUsXCJcIiksZC5mbGFncyY9LTMzKTt2YXIgZj1WaihhKTtYaihhLGYsZSk7YnJlYWs7Y2FzZSAzOmNhc2UgNDp2YXIgZz1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGg9VmooYSk7V2ooYSxoLGcpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fWNhdGNoKGspe1coYSxhLnJldHVybixrKX1hLmZsYWdzJj0tM31iJjQwOTYmJihhLmZsYWdzJj0tNDA5Nyl9ZnVuY3Rpb24gaWsoYSxiLGMpe1Y9YTtqayhhLGIsYyl9XG5mdW5jdGlvbiBqayhhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1WOyl7dmFyIGU9VixmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8S2o7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fFU7aD1Lajt2YXIgbD1VO0tqPWc7aWYoKFU9aykmJiFsKWZvcihWPWU7bnVsbCE9PVY7KWc9VixrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9rayhlKTpudWxsIT09az8oay5yZXR1cm49ZyxWPWspOmtrKGUpO2Zvcig7bnVsbCE9PWY7KVY9ZixqayhmLGIsYyksZj1mLnNpYmxpbmc7Vj1lO0tqPWg7VT1sfWxrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFY9Zik6bGsoYSxiLGMpfX1cbmZ1bmN0aW9uIGxrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VXx8UmooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhVSlpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpMZyhiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZpaChiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9aWgoYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciBxPW0uZGVoeWRyYXRlZDtudWxsIT09cSYmYmQocSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6Y2FzZSAyNTpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9VXx8Yi5mbGFncyY1MTImJlNqKGIpfWNhdGNoKHIpe1coYixiLnJldHVybixyKX19aWYoYj09PWEpe1Y9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fWZ1bmN0aW9uIGhrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19XG5mdW5jdGlvbiBrayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9Vjt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtSaig0LGIpfWNhdGNoKGspe1coYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtXKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGcsayl9fX1jYXRjaChrKXtXKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Y9aDticmVha31WPWIucmV0dXJufX1cbnZhciBtaz1NYXRoLmNlaWwsbms9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixvaz11YS5SZWFjdEN1cnJlbnRPd25lcixwaz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxLPTAsUj1udWxsLFk9bnVsbCxaPTAsZ2o9MCxmaj1VZigwKSxUPTAscWs9bnVsbCxoaD0wLHJrPTAsc2s9MCx0az1udWxsLHVrPW51bGwsZ2s9MCxIaj1JbmZpbml0eSx2az1udWxsLFBpPSExLFFpPW51bGwsU2k9bnVsbCx3az0hMSx4az1udWxsLHlrPTAsems9MCxBaz1udWxsLEJrPS0xLENrPTA7ZnVuY3Rpb24gTCgpe3JldHVybiAwIT09KEsmNik/QigpOi0xIT09Qms/Qms6Qms9QigpfVxuZnVuY3Rpb24gbGgoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09S2cudHJhbnNpdGlvbilyZXR1cm4gMD09PUNrJiYoQ2s9eWMoKSksQ2s7YT1DO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjpqZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIG1oKGEsYixjLGQpe2lmKDUwPHprKXRocm93IHprPTAsQWs9bnVsbCxFcnJvcihwKDE4NSkpO0FjKGEsYyxkKTtpZigwPT09KEsmMil8fGEhPT1SKWE9PT1SJiYoMD09PShLJjIpJiYocmt8PWMpLDQ9PT1UJiZEayhhLFopKSxFayhhLGQpLDE9PT1jJiYwPT09SyYmMD09PShiLm1vZGUmMSkmJihIaj1CKCkrNTAwLGZnJiZqZygpKX1cbmZ1bmN0aW9uIEVrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7d2MoYSxiKTt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpbnVsbCE9PWMmJmJjKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmYmMoYyk7aWYoMT09PWIpMD09PWEudGFnP2lnKEZrLmJpbmQobnVsbCxhKSk6aGcoRmsuYmluZChudWxsLGEpKSxKZihmdW5jdGlvbigpezA9PT0oSyY2KSYmamcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaChEYyhkKSl7Y2FzZSAxOmM9ZmM7YnJlYWs7Y2FzZSA0OmM9Z2M7YnJlYWs7Y2FzZSAxNjpjPWhjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9amM7YnJlYWs7ZGVmYXVsdDpjPWhjfWM9R2soYyxIay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gSGsoYSxiKXtCaz0tMTtDaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKElrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPUprKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9SztLfD0yO3ZhciBmPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsSGo9QigpKzUwMCxMayhhLGIpO2RvIHRyeXtNaygpO2JyZWFrfWNhdGNoKGgpe05rKGEsaCl9d2hpbGUoMSk7UWcoKTtuay5jdXJyZW50PWY7Sz1lO251bGwhPT1ZP2I9MDooUj1udWxsLFo9MCxiPVQpfWlmKDAhPT1iKXsyPT09YiYmKGU9eGMoYSksMCE9PWUmJihkPWUsYj1PayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7aWYoNj09PWIpRGsoYSxkKTtcbmVsc2V7ZT1hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFQayhlKSYmKGI9SmsoYSxkKSwyPT09YiYmKGY9eGMoYSksMCE9PWYmJihkPWYsYj1PayhhLGYpKSksMT09PWIpKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSAzOkRrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPWdrKzUwMC1CKCksMTA8Yikpe2lmKDAhPT11YyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe0woKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxiKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDQ6RGsoYSxkKTtpZigoZCY0MTk0MjQwKT09PVxuZClicmVhaztiPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1vYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9QigpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCptayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksZCk7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA1OlFrKGEsdWssdmspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1FayhhLEIoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz9Iay5iaW5kKG51bGwsYSk6bnVsbH1cbmZ1bmN0aW9uIE9rKGEsYil7dmFyIGM9dGs7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoTGsoYSxiKS5mbGFnc3w9MjU2KTthPUprKGEsYik7MiE9PWEmJihiPXVrLHVrPWMsbnVsbCE9PWImJkdqKGIpKTtyZXR1cm4gYX1mdW5jdGlvbiBHaihhKXtudWxsPT09dWs/dWs9YTp1ay5wdXNoLmFwcGx5KHVrLGEpfVxuZnVuY3Rpb24gUGsoYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFIZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIERrKGEsYil7YiY9fnNrO2ImPX5yazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLW9jKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiBGayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtJaygpO3ZhciBiPXVjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiBFayhhLEIoKSksbnVsbDt2YXIgYz1KayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXhjKGEpOzAhPT1kJiYoYj1kLGM9T2soYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1xayxMayhhLDApLERrKGEsYiksRWsoYSxCKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1FrKGEsdWssdmspO0VrKGEsQigpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfX1mdW5jdGlvbiBTayhhKXtudWxsIT09eGsmJjA9PT14ay50YWcmJjA9PT0oSyY2KSYmSWsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9cGsudHJhbnNpdGlvbixkPUM7dHJ5e2lmKHBrLnRyYW5zaXRpb249bnVsbCxDPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7Qz1kLHBrLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZqZygpfX1mdW5jdGlvbiBJaigpe2dqPWZqLmN1cnJlbnQ7RShmail9XG5mdW5jdGlvbiBMayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxHZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiYkZigpO2JyZWFrO2Nhc2UgMzpKaCgpO0UoV2YpO0UoSCk7T2goKTticmVhaztjYXNlIDU6TGgoZCk7YnJlYWs7Y2FzZSA0OkpoKCk7YnJlYWs7Y2FzZSAxMzpFKE0pO2JyZWFrO2Nhc2UgMTk6RShNKTticmVhaztjYXNlIDEwOlJnKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOklqKCl9Yz1jLnJldHVybn1SPWE7WT1hPXdoKGEuY3VycmVudCxudWxsKTtaPWdqPWI7VD0wO3FrPW51bGw7c2s9cms9aGg9MDt1az10az1udWxsO2lmKG51bGwhPT1XZyl7Zm9yKGI9XG4wO2I8V2cubGVuZ3RoO2IrKylpZihjPVdnW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfVdnPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBOayhhLGIpe2Rve3ZhciBjPVk7dHJ5e1FnKCk7UGguY3VycmVudD1haTtpZihTaCl7Zm9yKHZhciBkPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9U2g9ITF9Umg9MDtQPU89Tj1udWxsO1RoPSExO1VoPTA7b2suY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Q9MTtxaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgscT1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT1xfHwxMT09PXF8fDE1PT09cSkpe3ZhciByPW0uYWx0ZXJuYXRlO3I/KG0udXBkYXRlUXVldWU9ci51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9ci5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz1yLmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1WaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztXaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZUaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO2IudXBkYXRlUXVldWU9dH1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe1RpKGYsbCxiKTt1aigpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKEkmJmgubW9kZSYxKXt2YXIgSj1WaShnKTtpZihudWxsIT09Sil7MD09PShKLmZsYWdzJjY1NTM2KSYmKEouZmxhZ3N8PTI1Nik7V2koSixnLGgsZixiKTtKZyhLaShrLGgpKTticmVhayBhfX1mPWs9S2koayxoKTs0IT09VCYmKFQ9Mik7bnVsbD09PXRrP3RrPVtmXTp0ay5wdXNoKGYpO2Y9Zztkb3tzd2l0Y2goZi50YWcpe2Nhc2UgMzpmLmZsYWdzfD02NTUzNjtcbmImPS1iO2YubGFuZXN8PWI7dmFyIHg9T2koZixrLGIpO2ZoKGYseCk7YnJlYWsgYTtjYXNlIDE6aD1rO3ZhciB3PWYudHlwZSx1PWYuc3RhdGVOb2RlO2lmKDA9PT0oZi5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHUuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXModSkpKSl7Zi5mbGFnc3w9NjU1MzY7YiY9LWI7Zi5sYW5lc3w9Yjt2YXIgRj1SaShmLGgsYik7ZmgoZixGKTticmVhayBhfX1mPWYucmV0dXJufXdoaWxlKG51bGwhPT1mKX1UayhjKX1jYXRjaChuYSl7Yj1uYTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEtrKCl7dmFyIGE9bmsuY3VycmVudDtuay5jdXJyZW50PWFpO3JldHVybiBudWxsPT09YT9haTphfVxuZnVuY3Rpb24gdWooKXtpZigwPT09VHx8Mz09PVR8fDI9PT1UKVQ9NDtudWxsPT09Unx8MD09PShoaCYyNjg0MzU0NTUpJiYwPT09KHJrJjI2ODQzNTQ1NSl8fERrKFIsWil9ZnVuY3Rpb24gSmsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxMayhhLGIpO2RvIHRyeXtVaygpO2JyZWFrfWNhdGNoKGUpe05rKGEsZSl9d2hpbGUoMSk7UWcoKTtLPWM7bmsuY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHAoMjYxKSk7Uj1udWxsO1o9MDtyZXR1cm4gVH1mdW5jdGlvbiBVaygpe2Zvcig7bnVsbCE9PVk7KVZrKFkpfWZ1bmN0aW9uIE1rKCl7Zm9yKDtudWxsIT09WSYmIWNjKCk7KVZrKFkpfWZ1bmN0aW9uIFZrKGEpe3ZhciBiPVdrKGEuYWx0ZXJuYXRlLGEsZ2opO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9UayhhKTpZPWI7b2suY3VycmVudD1udWxsfVxuZnVuY3Rpb24gVGsoYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9RmooYyxiLGdqKSxudWxsIT09Yyl7WT1jO3JldHVybn19ZWxzZXtjPUpqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1k9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7VD02O1k9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09VCYmKFQ9NSl9ZnVuY3Rpb24gUWsoYSxiLGMpe3ZhciBkPUMsZT1way50cmFuc2l0aW9uO3RyeXtway50cmFuc2l0aW9uPW51bGwsQz0xLFhrKGEsYixjLGQpfWZpbmFsbHl7cGsudHJhbnNpdGlvbj1lLEM9ZH1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFhrKGEsYixjLGQpe2RvIElrKCk7d2hpbGUobnVsbCE9PXhrKTtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtjPWEuZmluaXNoZWRXb3JrO3ZhciBlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWMubGFuZXN8Yy5jaGlsZExhbmVzO0JjKGEsZik7YT09PVImJihZPVI9bnVsbCxaPTApOzA9PT0oYy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oYy5mbGFncyYyMDY0KXx8d2t8fCh3az0hMCxHayhoYyxmdW5jdGlvbigpe0lrKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGMuZmxhZ3MmMTU5OTApO2lmKDAhPT0oYy5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPXBrLnRyYW5zaXRpb247cGsudHJhbnNpdGlvbj1udWxsO1xudmFyIGc9QztDPTE7dmFyIGg9SztLfD00O29rLmN1cnJlbnQ9bnVsbDtQaihhLGMpO2VrKGMsYSk7T2UoRGYpO2RkPSEhQ2Y7RGY9Q2Y9bnVsbDthLmN1cnJlbnQ9YztpayhjLGEsZSk7ZGMoKTtLPWg7Qz1nO3BrLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1jO3drJiYod2s9ITEseGs9YSx5az1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoU2k9bnVsbCk7bWMoYy5zdGF0ZU5vZGUsZCk7RWsoYSxCKCkpO2lmKG51bGwhPT1iKWZvcihkPWEub25SZWNvdmVyYWJsZUVycm9yLGM9MDtjPGIubGVuZ3RoO2MrKyllPWJbY10sZChlLnZhbHVlLHtjb21wb25lbnRTdGFjazplLnN0YWNrLGRpZ2VzdDplLmRpZ2VzdH0pO2lmKFBpKXRocm93IFBpPSExLGE9UWksUWk9bnVsbCxhOzAhPT0oeWsmMSkmJjAhPT1hLnRhZyYmSWsoKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09QWs/emsrKzooems9MCxBaz1hKTp6az0wO2pnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBJaygpe2lmKG51bGwhPT14ayl7dmFyIGE9RGMoeWspLGI9cGsudHJhbnNpdGlvbixjPUM7dHJ5e3BrLnRyYW5zaXRpb249bnVsbDtDPTE2PmE/MTY6YTtpZihudWxsPT09eGspdmFyIGQ9ITE7ZWxzZXthPXhrO3hrPW51bGw7eWs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1LO0t8PTQ7Zm9yKFY9YS5jdXJyZW50O251bGwhPT1WOyl7dmFyIGY9VixnPWYuY2hpbGQ7aWYoMCE9PShWLmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihWPWw7bnVsbCE9PVY7KXt2YXIgbT1WO3N3aXRjaChtLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig4LG0sZil9dmFyIHE9bS5jaGlsZDtpZihudWxsIT09cSlxLnJldHVybj1tLFY9cTtlbHNlIGZvcig7bnVsbCE9PVY7KXttPVY7dmFyIHI9bS5zaWJsaW5nLHk9bS5yZXR1cm47VGoobSk7aWYobT09PVxubCl7Vj1udWxsO2JyZWFrfWlmKG51bGwhPT1yKXtyLnJldHVybj15O1Y9cjticmVha31WPXl9fX12YXIgbj1mLmFsdGVybmF0ZTtpZihudWxsIT09bil7dmFyIHQ9bi5jaGlsZDtpZihudWxsIT09dCl7bi5jaGlsZD1udWxsO2Rve3ZhciBKPXQuc2libGluZzt0LnNpYmxpbmc9bnVsbDt0PUp9d2hpbGUobnVsbCE9PXQpfX1WPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsVj1nO2Vsc2UgYjpmb3IoO251bGwhPT1WOyl7Zj1WO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOSxmLGYucmV0dXJuKX12YXIgeD1mLnNpYmxpbmc7aWYobnVsbCE9PXgpe3gucmV0dXJuPWYucmV0dXJuO1Y9eDticmVhayBifVY9Zi5yZXR1cm59fXZhciB3PWEuY3VycmVudDtmb3IoVj13O251bGwhPT1WOyl7Zz1WO3ZhciB1PWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxudSl1LnJldHVybj1nLFY9dTtlbHNlIGI6Zm9yKGc9dztudWxsIT09Vjspe2g9VjtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpSaig5LGgpfX1jYXRjaChuYSl7VyhoLGgucmV0dXJuLG5hKX1pZihoPT09Zyl7Vj1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtWPUY7YnJlYWsgYn1WPWgucmV0dXJufX1LPWU7amcoKTtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Qb3N0Q29tbWl0RmliZXJSb290KGtjLGEpfWNhdGNoKG5hKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0M9Yyxway50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIFlrKGEsYixjKXtiPUtpKGMsYik7Yj1PaShhLGIsMSk7YT1kaChhLGIsMSk7Yj1MKCk7bnVsbCE9PWEmJihBYyhhLDEsYiksRWsoYSxiKSl9XG5mdW5jdGlvbiBXKGEsYixjKXtpZigzPT09YS50YWcpWWsoYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7WWsoYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXMoZCkpKXthPUtpKGMsYSk7YT1SaShiLGEsMSk7Yj1kaChiLGEsMSk7YT1MKCk7bnVsbCE9PWImJihBYyhiLDEsYSksRWsoYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gVWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUwoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7Uj09PWEmJihaJmMpPT09YyYmKDQ9PT1UfHwzPT09VCYmKFomMTMwMDIzNDI0KT09PVomJjUwMD5CKCktZ2s/TGsoYSwwKTpza3w9Yyk7RWsoYSxiKX1mdW5jdGlvbiBaayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXNjLHNjPDw9MSwwPT09KHNjJjEzMDAyMzQyNCkmJihzYz00MTk0MzA0KSkpO3ZhciBjPUwoKTthPVpnKGEsYik7bnVsbCE9PWEmJihBYyhhLGIsYyksRWsoYSxjKSl9ZnVuY3Rpb24gdmooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1prKGEsYyl9XG5mdW5jdGlvbiBjayhhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtaayhhLGMpfXZhciBXaztcbldrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8V2YuY3VycmVudClVZz0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIFVnPSExLHpqKGEsYixjKTtVZz0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIFVnPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmdWcoYixuZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1ZZihiLEguY3VycmVudCk7VGcoYixjKTtlPVhoKG51bGwsYixkLGEsZSxjKTt2YXIgZj1iaSgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mPyhiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9XG5udWxsLFpmKGQpPyhmPSEwLGNnKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwsYWgoYiksZS51cGRhdGVyPW5oLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixyaChiLGQsYSxjKSxiPWtqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLEkmJmYmJnZnKGIpLFlpKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz0kayhkKTthPUxnKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWRqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1paihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVppKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWoobnVsbCxiLGQsTGcoZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsXG5kLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGRqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGlqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2xqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDtiaChhLGIpO2doKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLGNhY2hlOmcuY2FjaGUscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpnLnBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9XG5mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUtpKEVycm9yKHAoNDIzKSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1LaShFcnJvcihwKDQyNCkpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKHlnPUxmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCkseGc9YixJPSEwLHpnPW51bGwsYz1DaChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtJZygpO2lmKGQ9PT1lKXtiPSRpKGEsYixjKTticmVhayBhfVlpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEtoKGIpLG51bGw9PT1hJiZFZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLEVmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZFZihkLGYpJiYoYi5mbGFnc3w9MzIpLFxuaGooYSxiKSxZaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gcGooYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9QmgoYixudWxsLGQsYyk6WWkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLFppKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztcbmc9ZS52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoSGUoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFXZi5jdXJyZW50KXtiPSRpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPWNoKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTtTZyhmLnJldHVybixcbmMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTtTZyhnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WWkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixUZyhiLGMpLGU9VmcoZSksZD1kKGUpLGIuZmxhZ3N8PTEsWWkoYSxiLGQsYyksXG5iLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9TGcoZCxiLnBlbmRpbmdQcm9wcyksZT1MZyhkLnR5cGUsZSksYWooYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBjaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksamooYSxiKSxiLnRhZz0xLFpmKGQpPyhhPSEwLGNnKGIpKTphPSExLFRnKGIsYykscGgoYixkLGUpLHJoKGIsZCxlLGMpLGtqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4geWooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGVqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO307ZnVuY3Rpb24gR2soYSxiKXtyZXR1cm4gYWMoYSxiKX1cbmZ1bmN0aW9uIGFsKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEJnKGEsYixjLGQpe3JldHVybiBuZXcgYWwoYSxiLGMsZCl9ZnVuY3Rpb24gYmooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uICRrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09RGEpcmV0dXJuIDExO2lmKGE9PT1HYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiB3aChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUJnKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB5aChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuIEFoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgemE6Zz04O2V8PTg7YnJlYWs7Y2FzZSBBYTpyZXR1cm4gYT1CZygxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPUFhLGEubGFuZXM9ZixhO2Nhc2UgRWE6cmV0dXJuIGE9QmcoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RWEsYS5sYW5lcz1mLGE7Y2FzZSBGYTpyZXR1cm4gYT1CZygxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1GYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiBxaihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQmE6Zz0xMDticmVhayBhO2Nhc2UgQ2E6Zz05O2JyZWFrIGE7Y2FzZSBEYTpnPTExO1xuYnJlYWsgYTtjYXNlIEdhOmc9MTQ7YnJlYWsgYTtjYXNlIEhhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1CZyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9QmcoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHFqKGEsYixjLGQpe2E9QmcoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXtpc0hpZGRlbjohMX07cmV0dXJuIGF9ZnVuY3Rpb24geGgoYSxiLGMpe2E9QmcoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gemgoYSxiLGMpe2I9QmcoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBibChhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXpjKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBjbChhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgYmwoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1CZygzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbCxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOm51bGx9O2FoKGYpO3JldHVybiBhfWZ1bmN0aW9uIGRsKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6d2Esa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBlbChhKXtpZighYSlyZXR1cm4gVmY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihWYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFpmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoWmYoYykpcmV0dXJuIGJnKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGZsKGEsYixjLGQsZSxmLGcsaCxrKXthPWNsKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PWVsKG51bGwpO2M9YS5jdXJyZW50O2Q9TCgpO2U9bGgoYyk7Zj1jaChkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO2RoKGMsZixlKTthLmN1cnJlbnQubGFuZXM9ZTtBYyhhLGUsZCk7RWsoYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBnbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1MKCksZz1saChlKTtjPWVsKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9Y2goZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7YT1kaChlLGIsZyk7bnVsbCE9PWEmJihtaChhLGUsZyxmKSxlaChhLGUsZykpO3JldHVybiBnfVxuZnVuY3Rpb24gaGwoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBpbChhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gamwoYSxiKXtpbChhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmaWwoYSxiKX1mdW5jdGlvbiBrbCgpe3JldHVybiBudWxsfXZhciBsbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24gbWwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUucmVuZGVyPW1sLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7Z2woYSxiLG51bGwsbnVsbCl9O25sLnByb3RvdHlwZS51bm1vdW50PW1sLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87U2soZnVuY3Rpb24oKXtnbChudWxsLGEsbnVsbCxudWxsKX0pO2JbdWZdPW51bGx9fTtmdW5jdGlvbiBubChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1IYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8UWMubGVuZ3RoJiYwIT09YiYmYjxRY1tjXS5wcmlvcml0eTtjKyspO1FjLnNwbGljZShjLDAsYSk7MD09PWMmJlZjKGEpfX07ZnVuY3Rpb24gb2woYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIHBsKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBxbCgpe31cbmZ1bmN0aW9uIHJsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2YuY2FsbChhKX19dmFyIGc9ZmwoYixkLGEsMCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbdWZdPWcuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGspO2guY2FsbChhKX19dmFyIGs9Y2woYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3VmXT1rLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKGZ1bmN0aW9uKCl7Z2woYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIHNsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2guY2FsbChhKX19Z2woYixnLGEsZSl9ZWxzZSBnPXJsKGMsYixhLGUsZCk7cmV0dXJuIGhsKGcpfUVjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9dGMoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoQ2MoYixjfDEpLEVrKGIsQigpKSwwPT09KEsmNikmJihIaj1CKCkrNTAwLGpnKCkpKX1icmVhaztjYXNlIDEzOlNrKGZ1bmN0aW9uKCl7dmFyIGI9WmcoYSwxKTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxLGMpfX0pLGpsKGEsMSl9fTtcbkZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPVpnKGEsMTM0MjE3NzI4KTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxMzQyMTc3MjgsYyl9amwoYSwxMzQyMTc3MjgpfX07R2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9bGgoYSksYz1aZyhhLGIpO2lmKG51bGwhPT1jKXt2YXIgZD1MKCk7bWgoYyxhLGIsZCl9amwoYSxiKX19O0hjPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O0ljPWZ1bmN0aW9uKGEsYil7dmFyIGM9Qzt0cnl7cmV0dXJuIEM9YSxiKCl9ZmluYWxseXtDPWN9fTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YmIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtXYShkKTtiYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9Ums7SGI9U2s7XG52YXIgdGw9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W0NiLHVlLERiLEViLEZiLFJrXX0sdWw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOldjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMi4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB2bD17YnVuZGxlVHlwZTp1bC5idW5kbGVUeXBlLHZlcnNpb246dWwudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOnVsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6dWwucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVpiKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp1bC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5rbCxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgd2w9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF3bC5pc0Rpc2FibGVkJiZ3bC5zdXBwb3J0c0ZpYmVyKXRyeXtrYz13bC5pbmplY3QodmwpLGxjPXdsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD10bDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGRsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1sbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9Y2woYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt1Zl09Yi5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IG1sKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1aYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBTayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1sbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZmwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt1Zl09Yi5jdXJyZW50O3NmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbmwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcGwoYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFNrKGZ1bmN0aW9uKCl7c2wobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3VmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9Ums7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFwbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gc2woYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGI9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksYz1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLGQ9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLGU9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLGY9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLGc9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLGg9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksaz1TeW1ib2wuZm9yKFwicmVhY3Quc2VydmVyX2NvbnRleHRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksbT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksbj1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxwPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksdD1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpLHU7dT1TeW1ib2wuZm9yKFwicmVhY3QubW9kdWxlLnJlZmVyZW5jZVwiKTtcbmZ1bmN0aW9uIHYoYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHI9YS4kJHR5cGVvZjtzd2l0Y2gocil7Y2FzZSBiOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGQ6Y2FzZSBmOmNhc2UgZTpjYXNlIG06Y2FzZSBuOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBoOmNhc2UgbDpjYXNlIHE6Y2FzZSBwOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiByfX1jYXNlIGM6cmV0dXJuIHJ9fX1leHBvcnRzLkNvbnRleHRDb25zdW1lcj1oO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWc7ZXhwb3J0cy5FbGVtZW50PWI7ZXhwb3J0cy5Gb3J3YXJkUmVmPWw7ZXhwb3J0cy5GcmFnbWVudD1kO2V4cG9ydHMuTGF6eT1xO2V4cG9ydHMuTWVtbz1wO2V4cG9ydHMuUG9ydGFsPWM7ZXhwb3J0cy5Qcm9maWxlcj1mO2V4cG9ydHMuU3RyaWN0TW9kZT1lO2V4cG9ydHMuU3VzcGVuc2U9bTtcbmV4cG9ydHMuU3VzcGVuc2VMaXN0PW47ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1sfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXF9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09cH07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1tfTtleHBvcnRzLmlzU3VzcGVuc2VMaXN0PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bn07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT1lfHxhPT09bXx8YT09PW58fGE9PT10fHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXF8fGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09Z3x8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1sfHxhLiQkdHlwZW9mPT09dXx8dm9pZCAwIT09YS5nZXRNb2R1bGVJZCk/ITA6ITF9O2V4cG9ydHMudHlwZU9mPXY7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmFibGUnO1xuaW1wb3J0IHsgaXNTZXJ2ZXIgfSBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCB2YXIgRm9jdXNNYW5hZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU3Vic2NyaWJhYmxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKEZvY3VzTWFuYWdlciwgX1N1YnNjcmliYWJsZSk7XG5cbiAgZnVuY3Rpb24gRm9jdXNNYW5hZ2VyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1N1YnNjcmliYWJsZS5jYWxsKHRoaXMpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5zZXR1cCA9IGZ1bmN0aW9uIChvbkZvY3VzKSB7XG4gICAgICB2YXIgX3dpbmRvdztcblxuICAgICAgaWYgKCFpc1NlcnZlciAmJiAoKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgICAgIHJldHVybiBvbkZvY3VzKCk7XG4gICAgICAgIH07IC8vIExpc3RlbiB0byB2aXNpYmlsbGl0eWNoYW5nZSBhbmQgZm9jdXNcblxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBCZSBzdXJlIHRvIHVuc3Vic2NyaWJlIGlmIGEgbmV3IGhhbmRsZXIgaXMgc2V0XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBsaXN0ZW5lcik7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgbGlzdGVuZXIpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRm9jdXNNYW5hZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ub25TdWJzY3JpYmUgPSBmdW5jdGlvbiBvblN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuY2xlYW51cCkge1xuICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVyKHRoaXMuc2V0dXApO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25VbnN1YnNjcmliZSA9IGZ1bmN0aW9uIG9uVW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmhhc0xpc3RlbmVycygpKSB7XG4gICAgICB2YXIgX3RoaXMkY2xlYW51cDtcblxuICAgICAgKF90aGlzJGNsZWFudXAgPSB0aGlzLmNsZWFudXApID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjbGVhbnVwLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLmNsZWFudXAgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gc2V0RXZlbnRMaXN0ZW5lcihzZXR1cCkge1xuICAgIHZhciBfdGhpcyRjbGVhbnVwMixcbiAgICAgICAgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMuc2V0dXAgPSBzZXR1cDtcbiAgICAoX3RoaXMkY2xlYW51cDIgPSB0aGlzLmNsZWFudXApID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjbGVhbnVwMi5jYWxsKHRoaXMpO1xuICAgIHRoaXMuY2xlYW51cCA9IHNldHVwKGZ1bmN0aW9uIChmb2N1c2VkKSB7XG4gICAgICBpZiAodHlwZW9mIGZvY3VzZWQgPT09ICdib29sZWFuJykge1xuICAgICAgICBfdGhpczIuc2V0Rm9jdXNlZChmb2N1c2VkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzMi5vbkZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnNldEZvY3VzZWQgPSBmdW5jdGlvbiBzZXRGb2N1c2VkKGZvY3VzZWQpIHtcbiAgICB0aGlzLmZvY3VzZWQgPSBmb2N1c2VkO1xuXG4gICAgaWYgKGZvY3VzZWQpIHtcbiAgICAgIHRoaXMub25Gb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25Gb2N1cyA9IGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzRm9jdXNlZCA9IGZ1bmN0aW9uIGlzRm9jdXNlZCgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuZm9jdXNlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb2N1c2VkO1xuICAgIH0gLy8gZG9jdW1lbnQgZ2xvYmFsIGNhbiBiZSB1bmF2YWlsYWJsZSBpbiByZWFjdCBuYXRpdmVcblxuXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBbdW5kZWZpbmVkLCAndmlzaWJsZScsICdwcmVyZW5kZXInXS5pbmNsdWRlcyhkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUpO1xuICB9O1xuXG4gIHJldHVybiBGb2N1c01hbmFnZXI7XG59KFN1YnNjcmliYWJsZSk7XG5leHBvcnQgdmFyIGZvY3VzTWFuYWdlciA9IG5ldyBGb2N1c01hbmFnZXIoKTsiLCIvLyBUWVBFU1xuLy8gRlVOQ1RJT05TXG52YXIgbG9nZ2VyID0gY29uc29sZTtcbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2dnZXIoKSB7XG4gIHJldHVybiBsb2dnZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0TG9nZ2VyKG5ld0xvZ2dlcikge1xuICBsb2dnZXIgPSBuZXdMb2dnZXI7XG59IiwiaW1wb3J0IHsgc2NoZWR1bGVNaWNyb3Rhc2sgfSBmcm9tICcuL3V0aWxzJzsgLy8gVFlQRVNcblxuLy8gQ0xBU1NcbmV4cG9ydCB2YXIgTm90aWZ5TWFuYWdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE5vdGlmeU1hbmFnZXIoKSB7XG4gICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgIHRoaXMudHJhbnNhY3Rpb25zID0gMDtcblxuICAgIHRoaXMubm90aWZ5Rm4gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfTtcblxuICAgIHRoaXMuYmF0Y2hOb3RpZnlGbiA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE5vdGlmeU1hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5iYXRjaCA9IGZ1bmN0aW9uIGJhdGNoKGNhbGxiYWNrKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICB0aGlzLnRyYW5zYWN0aW9ucysrO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMudHJhbnNhY3Rpb25zLS07XG5cbiAgICAgIGlmICghdGhpcy50cmFuc2FjdGlvbnMpIHtcbiAgICAgICAgdGhpcy5mbHVzaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLnNjaGVkdWxlID0gZnVuY3Rpb24gc2NoZWR1bGUoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMudHJhbnNhY3Rpb25zKSB7XG4gICAgICB0aGlzLnF1ZXVlLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZU1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLm5vdGlmeUZuKGNhbGxiYWNrKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQWxsIGNhbGxzIHRvIHRoZSB3cmFwcGVkIGZ1bmN0aW9uIHdpbGwgYmUgYmF0Y2hlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYmF0Y2hDYWxscyA9IGZ1bmN0aW9uIGJhdGNoQ2FsbHMoY2FsbGJhY2spIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2suYXBwbHkodm9pZCAwLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLmZsdXNoID0gZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgcXVldWUgPSB0aGlzLnF1ZXVlO1xuICAgIHRoaXMucXVldWUgPSBbXTtcblxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHNjaGVkdWxlTWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLmJhdGNoTm90aWZ5Rm4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBfdGhpczMubm90aWZ5Rm4oY2FsbGJhY2spO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHNldCBhIGN1c3RvbSBub3RpZnkgZnVuY3Rpb24uXG4gICAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gZm9yIGV4YW1wbGUgd3JhcCBub3RpZmljYXRpb25zIHdpdGggYFJlYWN0LmFjdGAgd2hpbGUgcnVubmluZyB0ZXN0cy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0Tm90aWZ5RnVuY3Rpb24gPSBmdW5jdGlvbiBzZXROb3RpZnlGdW5jdGlvbihmbikge1xuICAgIHRoaXMubm90aWZ5Rm4gPSBmbjtcbiAgfVxuICAvKipcbiAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHNldCBhIGN1c3RvbSBmdW5jdGlvbiB0byBiYXRjaCBub3RpZmljYXRpb25zIHRvZ2V0aGVyIGludG8gYSBzaW5nbGUgdGljay5cbiAgICogQnkgZGVmYXVsdCBSZWFjdCBRdWVyeSB3aWxsIHVzZSB0aGUgYmF0Y2ggZnVuY3Rpb24gcHJvdmlkZWQgYnkgUmVhY3RET00gb3IgUmVhY3QgTmF0aXZlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zZXRCYXRjaE5vdGlmeUZ1bmN0aW9uID0gZnVuY3Rpb24gc2V0QmF0Y2hOb3RpZnlGdW5jdGlvbihmbikge1xuICAgIHRoaXMuYmF0Y2hOb3RpZnlGbiA9IGZuO1xuICB9O1xuXG4gIHJldHVybiBOb3RpZnlNYW5hZ2VyO1xufSgpOyAvLyBTSU5HTEVUT05cblxuZXhwb3J0IHZhciBub3RpZnlNYW5hZ2VyID0gbmV3IE5vdGlmeU1hbmFnZXIoKTsiLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJhYmxlJztcbmltcG9ydCB7IGlzU2VydmVyIH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgdmFyIE9ubGluZU1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9TdWJzY3JpYmFibGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoT25saW5lTWFuYWdlciwgX1N1YnNjcmliYWJsZSk7XG5cbiAgZnVuY3Rpb24gT25saW5lTWFuYWdlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdWJzY3JpYmFibGUuY2FsbCh0aGlzKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuc2V0dXAgPSBmdW5jdGlvbiAob25PbmxpbmUpIHtcbiAgICAgIHZhciBfd2luZG93O1xuXG4gICAgICBpZiAoIWlzU2VydmVyICYmICgoX3dpbmRvdyA9IHdpbmRvdykgPT0gbnVsbCA/IHZvaWQgMCA6IF93aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcikpIHtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICAgICAgcmV0dXJuIG9uT25saW5lKCk7XG4gICAgICAgIH07IC8vIExpc3RlbiB0byBvbmxpbmVcblxuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb2ZmbGluZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gQmUgc3VyZSB0byB1bnN1YnNjcmliZSBpZiBhIG5ldyBoYW5kbGVyIGlzIHNldFxuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvbmxpbmUnLCBsaXN0ZW5lcik7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCBsaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBPbmxpbmVNYW5hZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ub25TdWJzY3JpYmUgPSBmdW5jdGlvbiBvblN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuY2xlYW51cCkge1xuICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVyKHRoaXMuc2V0dXApO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25VbnN1YnNjcmliZSA9IGZ1bmN0aW9uIG9uVW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmhhc0xpc3RlbmVycygpKSB7XG4gICAgICB2YXIgX3RoaXMkY2xlYW51cDtcblxuICAgICAgKF90aGlzJGNsZWFudXAgPSB0aGlzLmNsZWFudXApID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjbGVhbnVwLmNhbGwodGhpcyk7XG4gICAgICB0aGlzLmNsZWFudXAgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gc2V0RXZlbnRMaXN0ZW5lcihzZXR1cCkge1xuICAgIHZhciBfdGhpcyRjbGVhbnVwMixcbiAgICAgICAgX3RoaXMyID0gdGhpcztcblxuICAgIHRoaXMuc2V0dXAgPSBzZXR1cDtcbiAgICAoX3RoaXMkY2xlYW51cDIgPSB0aGlzLmNsZWFudXApID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRjbGVhbnVwMi5jYWxsKHRoaXMpO1xuICAgIHRoaXMuY2xlYW51cCA9IHNldHVwKGZ1bmN0aW9uIChvbmxpbmUpIHtcbiAgICAgIGlmICh0eXBlb2Ygb25saW5lID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgX3RoaXMyLnNldE9ubGluZShvbmxpbmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMyLm9uT25saW5lKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE9ubGluZSA9IGZ1bmN0aW9uIHNldE9ubGluZShvbmxpbmUpIHtcbiAgICB0aGlzLm9ubGluZSA9IG9ubGluZTtcblxuICAgIGlmIChvbmxpbmUpIHtcbiAgICAgIHRoaXMub25PbmxpbmUoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uT25saW5lID0gZnVuY3Rpb24gb25PbmxpbmUoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzT25saW5lID0gZnVuY3Rpb24gaXNPbmxpbmUoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm9ubGluZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICByZXR1cm4gdGhpcy5vbmxpbmU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBuYXZpZ2F0b3Iub25MaW5lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hdmlnYXRvci5vbkxpbmU7XG4gIH07XG5cbiAgcmV0dXJuIE9ubGluZU1hbmFnZXI7XG59KFN1YnNjcmliYWJsZSk7XG5leHBvcnQgdmFyIG9ubGluZU1hbmFnZXIgPSBuZXcgT25saW5lTWFuYWdlcigpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgZ2V0QWJvcnRDb250cm9sbGVyLCBmdW5jdGlvbmFsVXBkYXRlLCBpc1ZhbGlkVGltZW91dCwgbm9vcCwgcmVwbGFjZUVxdWFsRGVlcCwgdGltZVVudGlsU3RhbGUsIGVuc3VyZVF1ZXJ5S2V5QXJyYXkgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICcuL25vdGlmeU1hbmFnZXInO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgUmV0cnllciwgaXNDYW5jZWxsZWRFcnJvciB9IGZyb20gJy4vcmV0cnllcic7IC8vIFRZUEVTXG5cbi8vIENMQVNTXG5leHBvcnQgdmFyIFF1ZXJ5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUXVlcnkoY29uZmlnKSB7XG4gICAgdGhpcy5hYm9ydFNpZ25hbENvbnN1bWVkID0gZmFsc2U7XG4gICAgdGhpcy5oYWRPYnNlcnZlcnMgPSBmYWxzZTtcbiAgICB0aGlzLmRlZmF1bHRPcHRpb25zID0gY29uZmlnLmRlZmF1bHRPcHRpb25zO1xuICAgIHRoaXMuc2V0T3B0aW9ucyhjb25maWcub3B0aW9ucyk7XG4gICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICB0aGlzLmNhY2hlID0gY29uZmlnLmNhY2hlO1xuICAgIHRoaXMucXVlcnlLZXkgPSBjb25maWcucXVlcnlLZXk7XG4gICAgdGhpcy5xdWVyeUhhc2ggPSBjb25maWcucXVlcnlIYXNoO1xuICAgIHRoaXMuaW5pdGlhbFN0YXRlID0gY29uZmlnLnN0YXRlIHx8IHRoaXMuZ2V0RGVmYXVsdFN0YXRlKHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuaW5pdGlhbFN0YXRlO1xuICAgIHRoaXMubWV0YSA9IGNvbmZpZy5tZXRhO1xuICAgIHRoaXMuc2NoZWR1bGVHYygpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFF1ZXJ5LnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0T3B0aW9ucyA9IGZ1bmN0aW9uIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRvcHRpb25zJGNhY2hlVGk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5kZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgdGhpcy5tZXRhID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5tZXRhOyAvLyBEZWZhdWx0IHRvIDUgbWludXRlcyBpZiBub3QgY2FjaGUgdGltZSBpcyBzZXRcblxuICAgIHRoaXMuY2FjaGVUaW1lID0gTWF0aC5tYXgodGhpcy5jYWNoZVRpbWUgfHwgMCwgKF90aGlzJG9wdGlvbnMkY2FjaGVUaSA9IHRoaXMub3B0aW9ucy5jYWNoZVRpbWUpICE9IG51bGwgPyBfdGhpcyRvcHRpb25zJGNhY2hlVGkgOiA1ICogNjAgKiAxMDAwKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0RGVmYXVsdE9wdGlvbnMgPSBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdGhpcy5kZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XG4gIH07XG5cbiAgX3Byb3RvLnNjaGVkdWxlR2MgPSBmdW5jdGlvbiBzY2hlZHVsZUdjKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLmNsZWFyR2NUaW1lb3V0KCk7XG5cbiAgICBpZiAoaXNWYWxpZFRpbWVvdXQodGhpcy5jYWNoZVRpbWUpKSB7XG4gICAgICB0aGlzLmdjVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5vcHRpb25hbFJlbW92ZSgpO1xuICAgICAgfSwgdGhpcy5jYWNoZVRpbWUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY2xlYXJHY1RpbWVvdXQgPSBmdW5jdGlvbiBjbGVhckdjVGltZW91dCgpIHtcbiAgICBpZiAodGhpcy5nY1RpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmdjVGltZW91dCk7XG4gICAgICB0aGlzLmdjVGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9wdGlvbmFsUmVtb3ZlID0gZnVuY3Rpb24gb3B0aW9uYWxSZW1vdmUoKSB7XG4gICAgaWYgKCF0aGlzLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmlzRmV0Y2hpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFkT2JzZXJ2ZXJzKSB7XG4gICAgICAgICAgdGhpcy5zY2hlZHVsZUdjKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY2FjaGUucmVtb3ZlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0RGF0YSA9IGZ1bmN0aW9uIHNldERhdGEodXBkYXRlciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRvcHRpb25zJGlzRGF0YUUsIF90aGlzJG9wdGlvbnM7XG5cbiAgICB2YXIgcHJldkRhdGEgPSB0aGlzLnN0YXRlLmRhdGE7IC8vIEdldCB0aGUgbmV3IGRhdGFcblxuICAgIHZhciBkYXRhID0gZnVuY3Rpb25hbFVwZGF0ZSh1cGRhdGVyLCBwcmV2RGF0YSk7IC8vIFVzZSBwcmV2IGRhdGEgaWYgYW4gaXNEYXRhRXF1YWwgZnVuY3Rpb24gaXMgZGVmaW5lZCBhbmQgcmV0dXJucyBgdHJ1ZWBcblxuICAgIGlmICgoX3RoaXMkb3B0aW9ucyRpc0RhdGFFID0gKF90aGlzJG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMpLmlzRGF0YUVxdWFsKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkb3B0aW9ucyRpc0RhdGFFLmNhbGwoX3RoaXMkb3B0aW9ucywgcHJldkRhdGEsIGRhdGEpKSB7XG4gICAgICBkYXRhID0gcHJldkRhdGE7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuc3RydWN0dXJhbFNoYXJpbmcgIT09IGZhbHNlKSB7XG4gICAgICAvLyBTdHJ1Y3R1cmFsbHkgc2hhcmUgZGF0YSBiZXR3ZWVuIHByZXYgYW5kIG5ldyBkYXRhIGlmIG5lZWRlZFxuICAgICAgZGF0YSA9IHJlcGxhY2VFcXVhbERlZXAocHJldkRhdGEsIGRhdGEpO1xuICAgIH0gLy8gU2V0IGRhdGEgYW5kIG1hcmsgaXQgYXMgY2FjaGVkXG5cblxuICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgIGRhdGFVcGRhdGVkQXQ6IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMudXBkYXRlZEF0XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgX3Byb3RvLnNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUoc3RhdGUsIHNldFN0YXRlT3B0aW9ucykge1xuICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgdHlwZTogJ3NldFN0YXRlJyxcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHNldFN0YXRlT3B0aW9uczogc2V0U3RhdGVPcHRpb25zXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbCA9IGZ1bmN0aW9uIGNhbmNlbChvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzJHJldHJ5ZXI7XG5cbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcbiAgICAoX3RoaXMkcmV0cnllciA9IHRoaXMucmV0cnllcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHJldHJ5ZXIuY2FuY2VsKG9wdGlvbnMpO1xuICAgIHJldHVybiBwcm9taXNlID8gcHJvbWlzZS50aGVuKG5vb3ApLmNhdGNoKG5vb3ApIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHRoaXMuY2xlYXJHY1RpbWVvdXQoKTtcbiAgICB0aGlzLmNhbmNlbCh7XG4gICAgICBzaWxlbnQ6IHRydWVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB0aGlzLnNldFN0YXRlKHRoaXMuaW5pdGlhbFN0YXRlKTtcbiAgfTtcblxuICBfcHJvdG8uaXNBY3RpdmUgPSBmdW5jdGlvbiBpc0FjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5vYnNlcnZlcnMuc29tZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIHJldHVybiBvYnNlcnZlci5vcHRpb25zLmVuYWJsZWQgIT09IGZhbHNlO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5pc0ZldGNoaW5nID0gZnVuY3Rpb24gaXNGZXRjaGluZygpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pc0ZldGNoaW5nO1xuICB9O1xuXG4gIF9wcm90by5pc1N0YWxlID0gZnVuY3Rpb24gaXNTdGFsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pc0ludmFsaWRhdGVkIHx8ICF0aGlzLnN0YXRlLmRhdGFVcGRhdGVkQXQgfHwgdGhpcy5vYnNlcnZlcnMuc29tZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgIHJldHVybiBvYnNlcnZlci5nZXRDdXJyZW50UmVzdWx0KCkuaXNTdGFsZTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uaXNTdGFsZUJ5VGltZSA9IGZ1bmN0aW9uIGlzU3RhbGVCeVRpbWUoc3RhbGVUaW1lKSB7XG4gICAgaWYgKHN0YWxlVGltZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGFsZVRpbWUgPSAwO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0YXRlLmlzSW52YWxpZGF0ZWQgfHwgIXRoaXMuc3RhdGUuZGF0YVVwZGF0ZWRBdCB8fCAhdGltZVVudGlsU3RhbGUodGhpcy5zdGF0ZS5kYXRhVXBkYXRlZEF0LCBzdGFsZVRpbWUpO1xuICB9O1xuXG4gIF9wcm90by5vbkZvY3VzID0gZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICB2YXIgX3RoaXMkcmV0cnllcjI7XG5cbiAgICB2YXIgb2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVycy5maW5kKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4geC5zaG91bGRGZXRjaE9uV2luZG93Rm9jdXMoKTtcbiAgICB9KTtcblxuICAgIGlmIChvYnNlcnZlcikge1xuICAgICAgb2JzZXJ2ZXIucmVmZXRjaCgpO1xuICAgIH0gLy8gQ29udGludWUgZmV0Y2ggaWYgY3VycmVudGx5IHBhdXNlZFxuXG5cbiAgICAoX3RoaXMkcmV0cnllcjIgPSB0aGlzLnJldHJ5ZXIpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRyZXRyeWVyMi5jb250aW51ZSgpO1xuICB9O1xuXG4gIF9wcm90by5vbk9ubGluZSA9IGZ1bmN0aW9uIG9uT25saW5lKCkge1xuICAgIHZhciBfdGhpcyRyZXRyeWVyMztcblxuICAgIHZhciBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJzLmZpbmQoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiB4LnNob3VsZEZldGNoT25SZWNvbm5lY3QoKTtcbiAgICB9KTtcblxuICAgIGlmIChvYnNlcnZlcikge1xuICAgICAgb2JzZXJ2ZXIucmVmZXRjaCgpO1xuICAgIH0gLy8gQ29udGludWUgZmV0Y2ggaWYgY3VycmVudGx5IHBhdXNlZFxuXG5cbiAgICAoX3RoaXMkcmV0cnllcjMgPSB0aGlzLnJldHJ5ZXIpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRyZXRyeWVyMy5jb250aW51ZSgpO1xuICB9O1xuXG4gIF9wcm90by5hZGRPYnNlcnZlciA9IGZ1bmN0aW9uIGFkZE9ic2VydmVyKG9ic2VydmVyKSB7XG4gICAgaWYgKHRoaXMub2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpID09PSAtMSkge1xuICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XG4gICAgICB0aGlzLmhhZE9ic2VydmVycyA9IHRydWU7IC8vIFN0b3AgdGhlIHF1ZXJ5IGZyb20gYmVpbmcgZ2FyYmFnZSBjb2xsZWN0ZWRcblxuICAgICAgdGhpcy5jbGVhckdjVGltZW91dCgpO1xuICAgICAgdGhpcy5jYWNoZS5ub3RpZnkoe1xuICAgICAgICB0eXBlOiAnb2JzZXJ2ZXJBZGRlZCcsXG4gICAgICAgIHF1ZXJ5OiB0aGlzLFxuICAgICAgICBvYnNlcnZlcjogb2JzZXJ2ZXJcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlT2JzZXJ2ZXIgPSBmdW5jdGlvbiByZW1vdmVPYnNlcnZlcihvYnNlcnZlcikge1xuICAgIGlmICh0aGlzLm9ic2VydmVycy5pbmRleE9mKG9ic2VydmVyKSAhPT0gLTEpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiB4ICE9PSBvYnNlcnZlcjtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXRoaXMub2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAvLyBJZiB0aGUgdHJhbnNwb3J0IGxheWVyIGRvZXMgbm90IHN1cHBvcnQgY2FuY2VsbGF0aW9uXG4gICAgICAgIC8vIHdlJ2xsIGxldCB0aGUgcXVlcnkgY29udGludWUgc28gdGhlIHJlc3VsdCBjYW4gYmUgY2FjaGVkXG4gICAgICAgIGlmICh0aGlzLnJldHJ5ZXIpIHtcbiAgICAgICAgICBpZiAodGhpcy5yZXRyeWVyLmlzVHJhbnNwb3J0Q2FuY2VsYWJsZSB8fCB0aGlzLmFib3J0U2lnbmFsQ29uc3VtZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmV0cnllci5jYW5jZWwoe1xuICAgICAgICAgICAgICByZXZlcnQ6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJldHJ5ZXIuY2FuY2VsUmV0cnkoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jYWNoZVRpbWUpIHtcbiAgICAgICAgICB0aGlzLnNjaGVkdWxlR2MoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNhY2hlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNhY2hlLm5vdGlmeSh7XG4gICAgICAgIHR5cGU6ICdvYnNlcnZlclJlbW92ZWQnLFxuICAgICAgICBxdWVyeTogdGhpcyxcbiAgICAgICAgb2JzZXJ2ZXI6IG9ic2VydmVyXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldE9ic2VydmVyc0NvdW50ID0gZnVuY3Rpb24gZ2V0T2JzZXJ2ZXJzQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JzZXJ2ZXJzLmxlbmd0aDtcbiAgfTtcblxuICBfcHJvdG8uaW52YWxpZGF0ZSA9IGZ1bmN0aW9uIGludmFsaWRhdGUoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmlzSW52YWxpZGF0ZWQpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnaW52YWxpZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZmV0Y2ggPSBmdW5jdGlvbiBmZXRjaChvcHRpb25zLCBmZXRjaE9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcyxcbiAgICAgICAgX3RoaXMkb3B0aW9ucyRiZWhhdmlvLFxuICAgICAgICBfY29udGV4dCRmZXRjaE9wdGlvbnMsXG4gICAgICAgIF9hYm9ydENvbnRyb2xsZXIkYWJvcjtcblxuICAgIGlmICh0aGlzLnN0YXRlLmlzRmV0Y2hpbmcpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmRhdGFVcGRhdGVkQXQgJiYgKGZldGNoT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogZmV0Y2hPcHRpb25zLmNhbmNlbFJlZmV0Y2gpKSB7XG4gICAgICAgIC8vIFNpbGVudGx5IGNhbmNlbCBjdXJyZW50IGZldGNoIGlmIHRoZSB1c2VyIHdhbnRzIHRvIGNhbmNlbCByZWZldGNoZXNcbiAgICAgICAgdGhpcy5jYW5jZWwoe1xuICAgICAgICAgIHNpbGVudDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9taXNlKSB7XG4gICAgICAgIHZhciBfdGhpcyRyZXRyeWVyNDtcblxuICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCByZXRyaWVzIHRoYXQgd2VyZSBwb3RlbnRpYWxseSBjYW5jZWxsZWQgZHVlIHRvIHVubW91bnRzIGNhbiBjb250aW51ZVxuICAgICAgICAoX3RoaXMkcmV0cnllcjQgPSB0aGlzLnJldHJ5ZXIpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRyZXRyeWVyNC5jb250aW51ZVJldHJ5KCk7IC8vIFJldHVybiBjdXJyZW50IHByb21pc2UgaWYgd2UgYXJlIGFscmVhZHkgZmV0Y2hpbmdcblxuICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlO1xuICAgICAgfVxuICAgIH0gLy8gVXBkYXRlIGNvbmZpZyBpZiBwYXNzZWQsIG90aGVyd2lzZSB0aGUgY29uZmlnIGZyb20gdGhlIGxhc3QgZXhlY3V0aW9uIGlzIHVzZWRcblxuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICB9IC8vIFVzZSB0aGUgb3B0aW9ucyBmcm9tIHRoZSBmaXJzdCBvYnNlcnZlciB3aXRoIGEgcXVlcnkgZnVuY3Rpb24gaWYgbm8gZnVuY3Rpb24gaXMgZm91bmQuXG4gICAgLy8gVGhpcyBjYW4gaGFwcGVuIHdoZW4gdGhlIHF1ZXJ5IGlzIGh5ZHJhdGVkIG9yIGNyZWF0ZWQgd2l0aCBzZXRRdWVyeURhdGEuXG5cblxuICAgIGlmICghdGhpcy5vcHRpb25zLnF1ZXJ5Rm4pIHtcbiAgICAgIHZhciBvYnNlcnZlciA9IHRoaXMub2JzZXJ2ZXJzLmZpbmQoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHgub3B0aW9ucy5xdWVyeUZuO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChvYnNlcnZlcikge1xuICAgICAgICB0aGlzLnNldE9wdGlvbnMob2JzZXJ2ZXIub3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHF1ZXJ5S2V5ID0gZW5zdXJlUXVlcnlLZXlBcnJheSh0aGlzLnF1ZXJ5S2V5KTtcbiAgICB2YXIgYWJvcnRDb250cm9sbGVyID0gZ2V0QWJvcnRDb250cm9sbGVyKCk7IC8vIENyZWF0ZSBxdWVyeSBmdW5jdGlvbiBjb250ZXh0XG5cbiAgICB2YXIgcXVlcnlGbkNvbnRleHQgPSB7XG4gICAgICBxdWVyeUtleTogcXVlcnlLZXksXG4gICAgICBwYWdlUGFyYW06IHVuZGVmaW5lZCxcbiAgICAgIG1ldGE6IHRoaXMubWV0YVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHF1ZXJ5Rm5Db250ZXh0LCAnc2lnbmFsJywge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAoYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgICAgX3RoaXMyLmFib3J0U2lnbmFsQ29uc3VtZWQgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBhYm9ydENvbnRyb2xsZXIuc2lnbmFsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9KTsgLy8gQ3JlYXRlIGZldGNoIGZ1bmN0aW9uXG5cbiAgICB2YXIgZmV0Y2hGbiA9IGZ1bmN0aW9uIGZldGNoRm4oKSB7XG4gICAgICBpZiAoIV90aGlzMi5vcHRpb25zLnF1ZXJ5Rm4pIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdNaXNzaW5nIHF1ZXJ5Rm4nKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMyLmFib3J0U2lnbmFsQ29uc3VtZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiBfdGhpczIub3B0aW9ucy5xdWVyeUZuKHF1ZXJ5Rm5Db250ZXh0KTtcbiAgICB9OyAvLyBUcmlnZ2VyIGJlaGF2aW9yIGhvb2tcblxuXG4gICAgdmFyIGNvbnRleHQgPSB7XG4gICAgICBmZXRjaE9wdGlvbnM6IGZldGNoT3B0aW9ucyxcbiAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgIHF1ZXJ5S2V5OiBxdWVyeUtleSxcbiAgICAgIHN0YXRlOiB0aGlzLnN0YXRlLFxuICAgICAgZmV0Y2hGbjogZmV0Y2hGbixcbiAgICAgIG1ldGE6IHRoaXMubWV0YVxuICAgIH07XG5cbiAgICBpZiAoKF90aGlzJG9wdGlvbnMkYmVoYXZpbyA9IHRoaXMub3B0aW9ucy5iZWhhdmlvcikgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG9wdGlvbnMkYmVoYXZpby5vbkZldGNoKSB7XG4gICAgICB2YXIgX3RoaXMkb3B0aW9ucyRiZWhhdmlvMjtcblxuICAgICAgKF90aGlzJG9wdGlvbnMkYmVoYXZpbzIgPSB0aGlzLm9wdGlvbnMuYmVoYXZpb3IpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRvcHRpb25zJGJlaGF2aW8yLm9uRmV0Y2goY29udGV4dCk7XG4gICAgfSAvLyBTdG9yZSBzdGF0ZSBpbiBjYXNlIHRoZSBjdXJyZW50IGZldGNoIG5lZWRzIHRvIGJlIHJldmVydGVkXG5cblxuICAgIHRoaXMucmV2ZXJ0U3RhdGUgPSB0aGlzLnN0YXRlOyAvLyBTZXQgdG8gZmV0Y2hpbmcgc3RhdGUgaWYgbm90IGFscmVhZHkgaW4gaXRcblxuICAgIGlmICghdGhpcy5zdGF0ZS5pc0ZldGNoaW5nIHx8IHRoaXMuc3RhdGUuZmV0Y2hNZXRhICE9PSAoKF9jb250ZXh0JGZldGNoT3B0aW9ucyA9IGNvbnRleHQuZmV0Y2hPcHRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbnRleHQkZmV0Y2hPcHRpb25zLm1ldGEpKSB7XG4gICAgICB2YXIgX2NvbnRleHQkZmV0Y2hPcHRpb25zMjtcblxuICAgICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdmZXRjaCcsXG4gICAgICAgIG1ldGE6IChfY29udGV4dCRmZXRjaE9wdGlvbnMyID0gY29udGV4dC5mZXRjaE9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfY29udGV4dCRmZXRjaE9wdGlvbnMyLm1ldGFcbiAgICAgIH0pO1xuICAgIH0gLy8gVHJ5IHRvIGZldGNoIHRoZSBkYXRhXG5cblxuICAgIHRoaXMucmV0cnllciA9IG5ldyBSZXRyeWVyKHtcbiAgICAgIGZuOiBjb250ZXh0LmZldGNoRm4sXG4gICAgICBhYm9ydDogYWJvcnRDb250cm9sbGVyID09IG51bGwgPyB2b2lkIDAgOiAoX2Fib3J0Q29udHJvbGxlciRhYm9yID0gYWJvcnRDb250cm9sbGVyLmFib3J0KSA9PSBudWxsID8gdm9pZCAwIDogX2Fib3J0Q29udHJvbGxlciRhYm9yLmJpbmQoYWJvcnRDb250cm9sbGVyKSxcbiAgICAgIG9uU3VjY2VzczogZnVuY3Rpb24gb25TdWNjZXNzKGRhdGEpIHtcbiAgICAgICAgX3RoaXMyLnNldERhdGEoZGF0YSk7IC8vIE5vdGlmeSBjYWNoZSBjYWxsYmFja1xuXG5cbiAgICAgICAgX3RoaXMyLmNhY2hlLmNvbmZpZy5vblN1Y2Nlc3MgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzMi5jYWNoZS5jb25maWcub25TdWNjZXNzKGRhdGEsIF90aGlzMik7IC8vIFJlbW92ZSBxdWVyeSBhZnRlciBmZXRjaGluZyBpZiBjYWNoZSB0aW1lIGlzIDBcblxuICAgICAgICBpZiAoX3RoaXMyLmNhY2hlVGltZSA9PT0gMCkge1xuICAgICAgICAgIF90aGlzMi5vcHRpb25hbFJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25FcnJvcjogZnVuY3Rpb24gb25FcnJvcihlcnJvcikge1xuICAgICAgICAvLyBPcHRpbWlzdGljYWxseSB1cGRhdGUgc3RhdGUgaWYgbmVlZGVkXG4gICAgICAgIGlmICghKGlzQ2FuY2VsbGVkRXJyb3IoZXJyb3IpICYmIGVycm9yLnNpbGVudCkpIHtcbiAgICAgICAgICBfdGhpczIuZGlzcGF0Y2goe1xuICAgICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0NhbmNlbGxlZEVycm9yKGVycm9yKSkge1xuICAgICAgICAgIC8vIE5vdGlmeSBjYWNoZSBjYWxsYmFja1xuICAgICAgICAgIF90aGlzMi5jYWNoZS5jb25maWcub25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMyLmNhY2hlLmNvbmZpZy5vbkVycm9yKGVycm9yLCBfdGhpczIpOyAvLyBMb2cgZXJyb3JcblxuICAgICAgICAgIGdldExvZ2dlcigpLmVycm9yKGVycm9yKTtcbiAgICAgICAgfSAvLyBSZW1vdmUgcXVlcnkgYWZ0ZXIgZmV0Y2hpbmcgaWYgY2FjaGUgdGltZSBpcyAwXG5cblxuICAgICAgICBpZiAoX3RoaXMyLmNhY2hlVGltZSA9PT0gMCkge1xuICAgICAgICAgIF90aGlzMi5vcHRpb25hbFJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25GYWlsOiBmdW5jdGlvbiBvbkZhaWwoKSB7XG4gICAgICAgIF90aGlzMi5kaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogJ2ZhaWxlZCdcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb25QYXVzZTogZnVuY3Rpb24gb25QYXVzZSgpIHtcbiAgICAgICAgX3RoaXMyLmRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAncGF1c2UnXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uQ29udGludWU6IGZ1bmN0aW9uIG9uQ29udGludWUoKSB7XG4gICAgICAgIF90aGlzMi5kaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogJ2NvbnRpbnVlJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICByZXRyeTogY29udGV4dC5vcHRpb25zLnJldHJ5LFxuICAgICAgcmV0cnlEZWxheTogY29udGV4dC5vcHRpb25zLnJldHJ5RGVsYXlcbiAgICB9KTtcbiAgICB0aGlzLnByb21pc2UgPSB0aGlzLnJldHJ5ZXIucHJvbWlzZTtcbiAgICByZXR1cm4gdGhpcy5wcm9taXNlO1xuICB9O1xuXG4gIF9wcm90by5kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMucmVkdWNlcih0aGlzLnN0YXRlLCBhY3Rpb24pO1xuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLm9ic2VydmVycy5mb3JFYWNoKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICBvYnNlcnZlci5vblF1ZXJ5VXBkYXRlKGFjdGlvbik7XG4gICAgICB9KTtcblxuICAgICAgX3RoaXMzLmNhY2hlLm5vdGlmeSh7XG4gICAgICAgIHF1ZXJ5OiBfdGhpczMsXG4gICAgICAgIHR5cGU6ICdxdWVyeVVwZGF0ZWQnLFxuICAgICAgICBhY3Rpb246IGFjdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldERlZmF1bHRTdGF0ZSA9IGZ1bmN0aW9uIGdldERlZmF1bHRTdGF0ZShvcHRpb25zKSB7XG4gICAgdmFyIGRhdGEgPSB0eXBlb2Ygb3B0aW9ucy5pbml0aWFsRGF0YSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMuaW5pdGlhbERhdGEoKSA6IG9wdGlvbnMuaW5pdGlhbERhdGE7XG4gICAgdmFyIGhhc0luaXRpYWxEYXRhID0gdHlwZW9mIG9wdGlvbnMuaW5pdGlhbERhdGEgIT09ICd1bmRlZmluZWQnO1xuICAgIHZhciBpbml0aWFsRGF0YVVwZGF0ZWRBdCA9IGhhc0luaXRpYWxEYXRhID8gdHlwZW9mIG9wdGlvbnMuaW5pdGlhbERhdGFVcGRhdGVkQXQgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmluaXRpYWxEYXRhVXBkYXRlZEF0KCkgOiBvcHRpb25zLmluaXRpYWxEYXRhVXBkYXRlZEF0IDogMDtcbiAgICB2YXIgaGFzRGF0YSA9IHR5cGVvZiBkYXRhICE9PSAndW5kZWZpbmVkJztcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIGRhdGFVcGRhdGVDb3VudDogMCxcbiAgICAgIGRhdGFVcGRhdGVkQXQ6IGhhc0RhdGEgPyBpbml0aWFsRGF0YVVwZGF0ZWRBdCAhPSBudWxsID8gaW5pdGlhbERhdGFVcGRhdGVkQXQgOiBEYXRlLm5vdygpIDogMCxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgICAgZXJyb3JVcGRhdGVDb3VudDogMCxcbiAgICAgIGVycm9yVXBkYXRlZEF0OiAwLFxuICAgICAgZmV0Y2hGYWlsdXJlQ291bnQ6IDAsXG4gICAgICBmZXRjaE1ldGE6IG51bGwsXG4gICAgICBpc0ZldGNoaW5nOiBmYWxzZSxcbiAgICAgIGlzSW52YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgaXNQYXVzZWQ6IGZhbHNlLFxuICAgICAgc3RhdHVzOiBoYXNEYXRhID8gJ3N1Y2Nlc3MnIDogJ2lkbGUnXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8ucmVkdWNlciA9IGZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICAgIHZhciBfYWN0aW9uJG1ldGEsIF9hY3Rpb24kZGF0YVVwZGF0ZWRBdDtcblxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgIGNhc2UgJ2ZhaWxlZCc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICBmZXRjaEZhaWx1cmVDb3VudDogc3RhdGUuZmV0Y2hGYWlsdXJlQ291bnQgKyAxXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdwYXVzZSc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICBpc1BhdXNlZDogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnY29udGludWUnOlxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgICAgaXNQYXVzZWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdmZXRjaCc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICBmZXRjaEZhaWx1cmVDb3VudDogMCxcbiAgICAgICAgICBmZXRjaE1ldGE6IChfYWN0aW9uJG1ldGEgPSBhY3Rpb24ubWV0YSkgIT0gbnVsbCA/IF9hY3Rpb24kbWV0YSA6IG51bGwsXG4gICAgICAgICAgaXNGZXRjaGluZzogdHJ1ZSxcbiAgICAgICAgICBpc1BhdXNlZDogZmFsc2VcbiAgICAgICAgfSwgIXN0YXRlLmRhdGFVcGRhdGVkQXQgJiYge1xuICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgIHN0YXR1czogJ2xvYWRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdzdWNjZXNzJzpcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICAgIGRhdGE6IGFjdGlvbi5kYXRhLFxuICAgICAgICAgIGRhdGFVcGRhdGVDb3VudDogc3RhdGUuZGF0YVVwZGF0ZUNvdW50ICsgMSxcbiAgICAgICAgICBkYXRhVXBkYXRlZEF0OiAoX2FjdGlvbiRkYXRhVXBkYXRlZEF0ID0gYWN0aW9uLmRhdGFVcGRhdGVkQXQpICE9IG51bGwgPyBfYWN0aW9uJGRhdGFVcGRhdGVkQXQgOiBEYXRlLm5vdygpLFxuICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgIGZldGNoRmFpbHVyZUNvdW50OiAwLFxuICAgICAgICAgIGlzRmV0Y2hpbmc6IGZhbHNlLFxuICAgICAgICAgIGlzSW52YWxpZGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgIGlzUGF1c2VkOiBmYWxzZSxcbiAgICAgICAgICBzdGF0dXM6ICdzdWNjZXNzJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICB2YXIgZXJyb3IgPSBhY3Rpb24uZXJyb3I7XG5cbiAgICAgICAgaWYgKGlzQ2FuY2VsbGVkRXJyb3IoZXJyb3IpICYmIGVycm9yLnJldmVydCAmJiB0aGlzLnJldmVydFN0YXRlKSB7XG4gICAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0aGlzLnJldmVydFN0YXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgICAgICAgZXJyb3JVcGRhdGVDb3VudDogc3RhdGUuZXJyb3JVcGRhdGVDb3VudCArIDEsXG4gICAgICAgICAgZXJyb3JVcGRhdGVkQXQ6IERhdGUubm93KCksXG4gICAgICAgICAgZmV0Y2hGYWlsdXJlQ291bnQ6IHN0YXRlLmZldGNoRmFpbHVyZUNvdW50ICsgMSxcbiAgICAgICAgICBpc0ZldGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICBpc1BhdXNlZDogZmFsc2UsXG4gICAgICAgICAgc3RhdHVzOiAnZXJyb3InXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdpbnZhbGlkYXRlJzpcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICAgIGlzSW52YWxpZGF0ZWQ6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ3NldFN0YXRlJzpcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwgYWN0aW9uLnN0YXRlKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUXVlcnk7XG59KCk7IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgeyBoYXNoUXVlcnlLZXlCeU9wdGlvbnMsIG1hdGNoUXVlcnksIHBhcnNlRmlsdGVyQXJncyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgUXVlcnkgfSBmcm9tICcuL3F1ZXJ5JztcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICcuL25vdGlmeU1hbmFnZXInO1xuaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmFibGUnO1xuLy8gQ0xBU1NcbmV4cG9ydCB2YXIgUXVlcnlDYWNoZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1N1YnNjcmliYWJsZSkge1xuICBfaW5oZXJpdHNMb29zZShRdWVyeUNhY2hlLCBfU3Vic2NyaWJhYmxlKTtcblxuICBmdW5jdGlvbiBRdWVyeUNhY2hlKGNvbmZpZykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1N1YnNjcmliYWJsZS5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgX3RoaXMuY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIF90aGlzLnF1ZXJpZXMgPSBbXTtcbiAgICBfdGhpcy5xdWVyaWVzTWFwID0ge307XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFF1ZXJ5Q2FjaGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5idWlsZCA9IGZ1bmN0aW9uIGJ1aWxkKGNsaWVudCwgb3B0aW9ucywgc3RhdGUpIHtcbiAgICB2YXIgX29wdGlvbnMkcXVlcnlIYXNoO1xuXG4gICAgdmFyIHF1ZXJ5S2V5ID0gb3B0aW9ucy5xdWVyeUtleTtcbiAgICB2YXIgcXVlcnlIYXNoID0gKF9vcHRpb25zJHF1ZXJ5SGFzaCA9IG9wdGlvbnMucXVlcnlIYXNoKSAhPSBudWxsID8gX29wdGlvbnMkcXVlcnlIYXNoIDogaGFzaFF1ZXJ5S2V5QnlPcHRpb25zKHF1ZXJ5S2V5LCBvcHRpb25zKTtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmdldChxdWVyeUhhc2gpO1xuXG4gICAgaWYgKCFxdWVyeSkge1xuICAgICAgcXVlcnkgPSBuZXcgUXVlcnkoe1xuICAgICAgICBjYWNoZTogdGhpcyxcbiAgICAgICAgcXVlcnlLZXk6IHF1ZXJ5S2V5LFxuICAgICAgICBxdWVyeUhhc2g6IHF1ZXJ5SGFzaCxcbiAgICAgICAgb3B0aW9uczogY2xpZW50LmRlZmF1bHRRdWVyeU9wdGlvbnMob3B0aW9ucyksXG4gICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgZGVmYXVsdE9wdGlvbnM6IGNsaWVudC5nZXRRdWVyeURlZmF1bHRzKHF1ZXJ5S2V5KSxcbiAgICAgICAgbWV0YTogb3B0aW9ucy5tZXRhXG4gICAgICB9KTtcbiAgICAgIHRoaXMuYWRkKHF1ZXJ5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcXVlcnk7XG4gIH07XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChxdWVyeSkge1xuICAgIGlmICghdGhpcy5xdWVyaWVzTWFwW3F1ZXJ5LnF1ZXJ5SGFzaF0pIHtcbiAgICAgIHRoaXMucXVlcmllc01hcFtxdWVyeS5xdWVyeUhhc2hdID0gcXVlcnk7XG4gICAgICB0aGlzLnF1ZXJpZXMucHVzaChxdWVyeSk7XG4gICAgICB0aGlzLm5vdGlmeSh7XG4gICAgICAgIHR5cGU6ICdxdWVyeUFkZGVkJyxcbiAgICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShxdWVyeSkge1xuICAgIHZhciBxdWVyeUluTWFwID0gdGhpcy5xdWVyaWVzTWFwW3F1ZXJ5LnF1ZXJ5SGFzaF07XG5cbiAgICBpZiAocXVlcnlJbk1hcCkge1xuICAgICAgcXVlcnkuZGVzdHJveSgpO1xuICAgICAgdGhpcy5xdWVyaWVzID0gdGhpcy5xdWVyaWVzLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geCAhPT0gcXVlcnk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHF1ZXJ5SW5NYXAgPT09IHF1ZXJ5KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnF1ZXJpZXNNYXBbcXVlcnkucXVlcnlIYXNoXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5ub3RpZnkoe1xuICAgICAgICB0eXBlOiAncXVlcnlSZW1vdmVkJyxcbiAgICAgICAgcXVlcnk6IHF1ZXJ5XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5xdWVyaWVzLmZvckVhY2goZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgIF90aGlzMi5yZW1vdmUocXVlcnkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChxdWVyeUhhc2gpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyaWVzTWFwW3F1ZXJ5SGFzaF07XG4gIH07XG5cbiAgX3Byb3RvLmdldEFsbCA9IGZ1bmN0aW9uIGdldEFsbCgpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyaWVzO1xuICB9O1xuXG4gIF9wcm90by5maW5kID0gZnVuY3Rpb24gZmluZChhcmcxLCBhcmcyKSB7XG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3MgPSBwYXJzZUZpbHRlckFyZ3MoYXJnMSwgYXJnMiksXG4gICAgICAgIGZpbHRlcnMgPSBfcGFyc2VGaWx0ZXJBcmdzWzBdO1xuXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXJzLmV4YWN0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZmlsdGVycy5leGFjdCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucXVlcmllcy5maW5kKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgcmV0dXJuIG1hdGNoUXVlcnkoZmlsdGVycywgcXVlcnkpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5maW5kQWxsID0gZnVuY3Rpb24gZmluZEFsbChhcmcxLCBhcmcyKSB7XG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3MyID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnczJbMF07XG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZmlsdGVycykubGVuZ3RoID4gMCA/IHRoaXMucXVlcmllcy5maWx0ZXIoZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICByZXR1cm4gbWF0Y2hRdWVyeShmaWx0ZXJzLCBxdWVyeSk7XG4gICAgfSkgOiB0aGlzLnF1ZXJpZXM7XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeShldmVudCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbkZvY3VzID0gZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXM0LnF1ZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgcXVlcnkub25Gb2N1cygpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uT25saW5lID0gZnVuY3Rpb24gb25PbmxpbmUoKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzNS5xdWVyaWVzLmZvckVhY2goZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgIHF1ZXJ5Lm9uT25saW5lKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUXVlcnlDYWNoZTtcbn0oU3Vic2NyaWJhYmxlKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICcuL25vdGlmeU1hbmFnZXInO1xuaW1wb3J0IHsgUmV0cnllciB9IGZyb20gJy4vcmV0cnllcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi91dGlscyc7IC8vIFRZUEVTXG5cbi8vIENMQVNTXG5leHBvcnQgdmFyIE11dGF0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTXV0YXRpb24oY29uZmlnKSB7XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIGNvbmZpZy5kZWZhdWx0T3B0aW9ucywgY29uZmlnLm9wdGlvbnMpO1xuICAgIHRoaXMubXV0YXRpb25JZCA9IGNvbmZpZy5tdXRhdGlvbklkO1xuICAgIHRoaXMubXV0YXRpb25DYWNoZSA9IGNvbmZpZy5tdXRhdGlvbkNhY2hlO1xuICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgdGhpcy5zdGF0ZSA9IGNvbmZpZy5zdGF0ZSB8fCBnZXREZWZhdWx0U3RhdGUoKTtcbiAgICB0aGlzLm1ldGEgPSBjb25maWcubWV0YTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNdXRhdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUoc3RhdGUpIHtcbiAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdzZXRTdGF0ZScsXG4gICAgICBzdGF0ZTogc3RhdGVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uYWRkT2JzZXJ2ZXIgPSBmdW5jdGlvbiBhZGRPYnNlcnZlcihvYnNlcnZlcikge1xuICAgIGlmICh0aGlzLm9ic2VydmVycy5pbmRleE9mKG9ic2VydmVyKSA9PT0gLTEpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlT2JzZXJ2ZXIgPSBmdW5jdGlvbiByZW1vdmVPYnNlcnZlcihvYnNlcnZlcikge1xuICAgIHRoaXMub2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4geCAhPT0gb2JzZXJ2ZXI7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbCA9IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGhpcy5yZXRyeWVyKSB7XG4gICAgICB0aGlzLnJldHJ5ZXIuY2FuY2VsKCk7XG4gICAgICByZXR1cm4gdGhpcy5yZXRyeWVyLnByb21pc2UudGhlbihub29wKS5jYXRjaChub29wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbnRpbnVlID0gZnVuY3Rpb24gX2NvbnRpbnVlKCkge1xuICAgIGlmICh0aGlzLnJldHJ5ZXIpIHtcbiAgICAgIHRoaXMucmV0cnllci5jb250aW51ZSgpO1xuICAgICAgcmV0dXJuIHRoaXMucmV0cnllci5wcm9taXNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmV4ZWN1dGUoKTtcbiAgfTtcblxuICBfcHJvdG8uZXhlY3V0ZSA9IGZ1bmN0aW9uIGV4ZWN1dGUoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBkYXRhO1xuICAgIHZhciByZXN0b3JlZCA9IHRoaXMuc3RhdGUuc3RhdHVzID09PSAnbG9hZGluZyc7XG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcblxuICAgIGlmICghcmVzdG9yZWQpIHtcbiAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnbG9hZGluZycsXG4gICAgICAgIHZhcmlhYmxlczogdGhpcy5vcHRpb25zLnZhcmlhYmxlc1xuICAgICAgfSk7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gTm90aWZ5IGNhY2hlIGNhbGxiYWNrXG4gICAgICAgIF90aGlzLm11dGF0aW9uQ2FjaGUuY29uZmlnLm9uTXV0YXRlID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcy5tdXRhdGlvbkNhY2hlLmNvbmZpZy5vbk11dGF0ZShfdGhpcy5zdGF0ZS52YXJpYWJsZXMsIF90aGlzKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy5vbk11dGF0ZSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMub3B0aW9ucy5vbk11dGF0ZShfdGhpcy5zdGF0ZS52YXJpYWJsZXMpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgICBpZiAoY29udGV4dCAhPT0gX3RoaXMuc3RhdGUuY29udGV4dCkge1xuICAgICAgICAgIF90aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdsb2FkaW5nJyxcbiAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICAgICAgICB2YXJpYWJsZXM6IF90aGlzLnN0YXRlLnZhcmlhYmxlc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5leGVjdXRlTXV0YXRpb24oKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgIGRhdGEgPSByZXN1bHQ7IC8vIE5vdGlmeSBjYWNoZSBjYWxsYmFja1xuXG4gICAgICBfdGhpcy5tdXRhdGlvbkNhY2hlLmNvbmZpZy5vblN1Y2Nlc3MgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzLm11dGF0aW9uQ2FjaGUuY29uZmlnLm9uU3VjY2VzcyhkYXRhLCBfdGhpcy5zdGF0ZS52YXJpYWJsZXMsIF90aGlzLnN0YXRlLmNvbnRleHQsIF90aGlzKTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLm9uU3VjY2VzcyA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMub3B0aW9ucy5vblN1Y2Nlc3MoZGF0YSwgX3RoaXMuc3RhdGUudmFyaWFibGVzLCBfdGhpcy5zdGF0ZS5jb250ZXh0KTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLm9uU2V0dGxlZCA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMub3B0aW9ucy5vblNldHRsZWQoZGF0YSwgbnVsbCwgX3RoaXMuc3RhdGUudmFyaWFibGVzLCBfdGhpcy5zdGF0ZS5jb250ZXh0KTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ3N1Y2Nlc3MnLFxuICAgICAgICBkYXRhOiBkYXRhXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAvLyBOb3RpZnkgY2FjaGUgY2FsbGJhY2tcbiAgICAgIF90aGlzLm11dGF0aW9uQ2FjaGUuY29uZmlnLm9uRXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzLm11dGF0aW9uQ2FjaGUuY29uZmlnLm9uRXJyb3IoZXJyb3IsIF90aGlzLnN0YXRlLnZhcmlhYmxlcywgX3RoaXMuc3RhdGUuY29udGV4dCwgX3RoaXMpOyAvLyBMb2cgZXJyb3JcblxuICAgICAgZ2V0TG9nZ2VyKCkuZXJyb3IoZXJyb3IpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy5vbkVycm9yID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcy5vcHRpb25zLm9uRXJyb3IoZXJyb3IsIF90aGlzLnN0YXRlLnZhcmlhYmxlcywgX3RoaXMuc3RhdGUuY29udGV4dCk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm9wdGlvbnMub25TZXR0bGVkID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcy5vcHRpb25zLm9uU2V0dGxlZCh1bmRlZmluZWQsIGVycm9yLCBfdGhpcy5zdGF0ZS52YXJpYWJsZXMsIF90aGlzLnN0YXRlLmNvbnRleHQpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9KTtcblxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5leGVjdXRlTXV0YXRpb24gPSBmdW5jdGlvbiBleGVjdXRlTXV0YXRpb24oKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXMsXG4gICAgICAgIF90aGlzJG9wdGlvbnMkcmV0cnk7XG5cbiAgICB0aGlzLnJldHJ5ZXIgPSBuZXcgUmV0cnllcih7XG4gICAgICBmbjogZnVuY3Rpb24gZm4oKSB7XG4gICAgICAgIGlmICghX3RoaXMyLm9wdGlvbnMubXV0YXRpb25Gbikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnTm8gbXV0YXRpb25GbiBmb3VuZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF90aGlzMi5vcHRpb25zLm11dGF0aW9uRm4oX3RoaXMyLnN0YXRlLnZhcmlhYmxlcyk7XG4gICAgICB9LFxuICAgICAgb25GYWlsOiBmdW5jdGlvbiBvbkZhaWwoKSB7XG4gICAgICAgIF90aGlzMi5kaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogJ2ZhaWxlZCdcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb25QYXVzZTogZnVuY3Rpb24gb25QYXVzZSgpIHtcbiAgICAgICAgX3RoaXMyLmRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAncGF1c2UnXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uQ29udGludWU6IGZ1bmN0aW9uIG9uQ29udGludWUoKSB7XG4gICAgICAgIF90aGlzMi5kaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogJ2NvbnRpbnVlJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICByZXRyeTogKF90aGlzJG9wdGlvbnMkcmV0cnkgPSB0aGlzLm9wdGlvbnMucmV0cnkpICE9IG51bGwgPyBfdGhpcyRvcHRpb25zJHJldHJ5IDogMCxcbiAgICAgIHJldHJ5RGVsYXk6IHRoaXMub3B0aW9ucy5yZXRyeURlbGF5XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMucmV0cnllci5wcm9taXNlO1xuICB9O1xuXG4gIF9wcm90by5kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHJlZHVjZXIodGhpcy5zdGF0ZSwgYWN0aW9uKTtcbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIub25NdXRhdGlvblVwZGF0ZShhY3Rpb24pO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzMy5tdXRhdGlvbkNhY2hlLm5vdGlmeShfdGhpczMpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNdXRhdGlvbjtcbn0oKTtcbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0U3RhdGUoKSB7XG4gIHJldHVybiB7XG4gICAgY29udGV4dDogdW5kZWZpbmVkLFxuICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICBlcnJvcjogbnVsbCxcbiAgICBmYWlsdXJlQ291bnQ6IDAsXG4gICAgaXNQYXVzZWQ6IGZhbHNlLFxuICAgIHN0YXR1czogJ2lkbGUnLFxuICAgIHZhcmlhYmxlczogdW5kZWZpbmVkXG4gIH07XG59XG5cbmZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSAnZmFpbGVkJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgZmFpbHVyZUNvdW50OiBzdGF0ZS5mYWlsdXJlQ291bnQgKyAxXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BhdXNlJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgaXNQYXVzZWQ6IHRydWVcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnY29udGludWUnOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBpc1BhdXNlZDogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnbG9hZGluZyc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGNvbnRleHQ6IGFjdGlvbi5jb250ZXh0LFxuICAgICAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICBpc1BhdXNlZDogZmFsc2UsXG4gICAgICAgIHN0YXR1czogJ2xvYWRpbmcnLFxuICAgICAgICB2YXJpYWJsZXM6IGFjdGlvbi52YXJpYWJsZXNcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGRhdGE6IGFjdGlvbi5kYXRhLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgc3RhdHVzOiAnc3VjY2VzcycsXG4gICAgICAgIGlzUGF1c2VkOiBmYWxzZVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdlcnJvcic6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgZXJyb3I6IGFjdGlvbi5lcnJvcixcbiAgICAgICAgZmFpbHVyZUNvdW50OiBzdGF0ZS5mYWlsdXJlQ291bnQgKyAxLFxuICAgICAgICBpc1BhdXNlZDogZmFsc2UsXG4gICAgICAgIHN0YXR1czogJ2Vycm9yJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdzZXRTdGF0ZSc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCBhY3Rpb24uc3RhdGUpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufSIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJy4vbm90aWZ5TWFuYWdlcic7XG5pbXBvcnQgeyBNdXRhdGlvbiB9IGZyb20gJy4vbXV0YXRpb24nO1xuaW1wb3J0IHsgbWF0Y2hNdXRhdGlvbiwgbm9vcCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmFibGUnOyAvLyBUWVBFU1xuXG4vLyBDTEFTU1xuZXhwb3J0IHZhciBNdXRhdGlvbkNhY2hlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU3Vic2NyaWJhYmxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKE11dGF0aW9uQ2FjaGUsIF9TdWJzY3JpYmFibGUpO1xuXG4gIGZ1bmN0aW9uIE11dGF0aW9uQ2FjaGUoY29uZmlnKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfU3Vic2NyaWJhYmxlLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICBfdGhpcy5jb25maWcgPSBjb25maWcgfHwge307XG4gICAgX3RoaXMubXV0YXRpb25zID0gW107XG4gICAgX3RoaXMubXV0YXRpb25JZCA9IDA7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IE11dGF0aW9uQ2FjaGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5idWlsZCA9IGZ1bmN0aW9uIGJ1aWxkKGNsaWVudCwgb3B0aW9ucywgc3RhdGUpIHtcbiAgICB2YXIgbXV0YXRpb24gPSBuZXcgTXV0YXRpb24oe1xuICAgICAgbXV0YXRpb25DYWNoZTogdGhpcyxcbiAgICAgIG11dGF0aW9uSWQ6ICsrdGhpcy5tdXRhdGlvbklkLFxuICAgICAgb3B0aW9uczogY2xpZW50LmRlZmF1bHRNdXRhdGlvbk9wdGlvbnMob3B0aW9ucyksXG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBkZWZhdWx0T3B0aW9uczogb3B0aW9ucy5tdXRhdGlvbktleSA/IGNsaWVudC5nZXRNdXRhdGlvbkRlZmF1bHRzKG9wdGlvbnMubXV0YXRpb25LZXkpIDogdW5kZWZpbmVkLFxuICAgICAgbWV0YTogb3B0aW9ucy5tZXRhXG4gICAgfSk7XG4gICAgdGhpcy5hZGQobXV0YXRpb24pO1xuICAgIHJldHVybiBtdXRhdGlvbjtcbiAgfTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKG11dGF0aW9uKSB7XG4gICAgdGhpcy5tdXRhdGlvbnMucHVzaChtdXRhdGlvbik7XG4gICAgdGhpcy5ub3RpZnkobXV0YXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUobXV0YXRpb24pIHtcbiAgICB0aGlzLm11dGF0aW9ucyA9IHRoaXMubXV0YXRpb25zLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHggIT09IG11dGF0aW9uO1xuICAgIH0pO1xuICAgIG11dGF0aW9uLmNhbmNlbCgpO1xuICAgIHRoaXMubm90aWZ5KG11dGF0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8uY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMyLm11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICBfdGhpczIucmVtb3ZlKG11dGF0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5nZXRBbGwgPSBmdW5jdGlvbiBnZXRBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMubXV0YXRpb25zO1xuICB9O1xuXG4gIF9wcm90by5maW5kID0gZnVuY3Rpb24gZmluZChmaWx0ZXJzKSB7XG4gICAgaWYgKHR5cGVvZiBmaWx0ZXJzLmV4YWN0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZmlsdGVycy5leGFjdCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubXV0YXRpb25zLmZpbmQoZnVuY3Rpb24gKG11dGF0aW9uKSB7XG4gICAgICByZXR1cm4gbWF0Y2hNdXRhdGlvbihmaWx0ZXJzLCBtdXRhdGlvbik7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmZpbmRBbGwgPSBmdW5jdGlvbiBmaW5kQWxsKGZpbHRlcnMpIHtcbiAgICByZXR1cm4gdGhpcy5tdXRhdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgcmV0dXJuIG1hdGNoTXV0YXRpb24oZmlsdGVycywgbXV0YXRpb24pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkobXV0YXRpb24pIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcihtdXRhdGlvbik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25Gb2N1cyA9IGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgdGhpcy5yZXN1bWVQYXVzZWRNdXRhdGlvbnMoKTtcbiAgfTtcblxuICBfcHJvdG8ub25PbmxpbmUgPSBmdW5jdGlvbiBvbk9ubGluZSgpIHtcbiAgICB0aGlzLnJlc3VtZVBhdXNlZE11dGF0aW9ucygpO1xuICB9O1xuXG4gIF9wcm90by5yZXN1bWVQYXVzZWRNdXRhdGlvbnMgPSBmdW5jdGlvbiByZXN1bWVQYXVzZWRNdXRhdGlvbnMoKSB7XG4gICAgdmFyIHBhdXNlZE11dGF0aW9ucyA9IHRoaXMubXV0YXRpb25zLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHguc3RhdGUuaXNQYXVzZWQ7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHBhdXNlZE11dGF0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHByb21pc2UsIG11dGF0aW9uKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBtdXRhdGlvbi5jb250aW51ZSgpLmNhdGNoKG5vb3ApO1xuICAgICAgICB9KTtcbiAgICAgIH0sIFByb21pc2UucmVzb2x2ZSgpKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTXV0YXRpb25DYWNoZTtcbn0oU3Vic2NyaWJhYmxlKTsiLCJpbXBvcnQgeyBpc0NhbmNlbGFibGUgfSBmcm9tICcuL3JldHJ5ZXInO1xuaW1wb3J0IHsgZ2V0QWJvcnRDb250cm9sbGVyIH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgZnVuY3Rpb24gaW5maW5pdGVRdWVyeUJlaGF2aW9yKCkge1xuICByZXR1cm4ge1xuICAgIG9uRmV0Y2g6IGZ1bmN0aW9uIG9uRmV0Y2goY29udGV4dCkge1xuICAgICAgY29udGV4dC5mZXRjaEZuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2NvbnRleHQkZmV0Y2hPcHRpb25zLCBfY29udGV4dCRmZXRjaE9wdGlvbnMyLCBfY29udGV4dCRmZXRjaE9wdGlvbnMzLCBfY29udGV4dCRmZXRjaE9wdGlvbnM0LCBfY29udGV4dCRzdGF0ZSRkYXRhLCBfY29udGV4dCRzdGF0ZSRkYXRhMjtcblxuICAgICAgICB2YXIgcmVmZXRjaFBhZ2UgPSAoX2NvbnRleHQkZmV0Y2hPcHRpb25zID0gY29udGV4dC5mZXRjaE9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiAoX2NvbnRleHQkZmV0Y2hPcHRpb25zMiA9IF9jb250ZXh0JGZldGNoT3B0aW9ucy5tZXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbnRleHQkZmV0Y2hPcHRpb25zMi5yZWZldGNoUGFnZTtcbiAgICAgICAgdmFyIGZldGNoTW9yZSA9IChfY29udGV4dCRmZXRjaE9wdGlvbnMzID0gY29udGV4dC5mZXRjaE9wdGlvbnMpID09IG51bGwgPyB2b2lkIDAgOiAoX2NvbnRleHQkZmV0Y2hPcHRpb25zNCA9IF9jb250ZXh0JGZldGNoT3B0aW9uczMubWV0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb250ZXh0JGZldGNoT3B0aW9uczQuZmV0Y2hNb3JlO1xuICAgICAgICB2YXIgcGFnZVBhcmFtID0gZmV0Y2hNb3JlID09IG51bGwgPyB2b2lkIDAgOiBmZXRjaE1vcmUucGFnZVBhcmFtO1xuICAgICAgICB2YXIgaXNGZXRjaGluZ05leHRQYWdlID0gKGZldGNoTW9yZSA9PSBudWxsID8gdm9pZCAwIDogZmV0Y2hNb3JlLmRpcmVjdGlvbikgPT09ICdmb3J3YXJkJztcbiAgICAgICAgdmFyIGlzRmV0Y2hpbmdQcmV2aW91c1BhZ2UgPSAoZmV0Y2hNb3JlID09IG51bGwgPyB2b2lkIDAgOiBmZXRjaE1vcmUuZGlyZWN0aW9uKSA9PT0gJ2JhY2t3YXJkJztcbiAgICAgICAgdmFyIG9sZFBhZ2VzID0gKChfY29udGV4dCRzdGF0ZSRkYXRhID0gY29udGV4dC5zdGF0ZS5kYXRhKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbnRleHQkc3RhdGUkZGF0YS5wYWdlcykgfHwgW107XG4gICAgICAgIHZhciBvbGRQYWdlUGFyYW1zID0gKChfY29udGV4dCRzdGF0ZSRkYXRhMiA9IGNvbnRleHQuc3RhdGUuZGF0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb250ZXh0JHN0YXRlJGRhdGEyLnBhZ2VQYXJhbXMpIHx8IFtdO1xuICAgICAgICB2YXIgYWJvcnRDb250cm9sbGVyID0gZ2V0QWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgIHZhciBhYm9ydFNpZ25hbCA9IGFib3J0Q29udHJvbGxlciA9PSBudWxsID8gdm9pZCAwIDogYWJvcnRDb250cm9sbGVyLnNpZ25hbDtcbiAgICAgICAgdmFyIG5ld1BhZ2VQYXJhbXMgPSBvbGRQYWdlUGFyYW1zO1xuICAgICAgICB2YXIgY2FuY2VsbGVkID0gZmFsc2U7IC8vIEdldCBxdWVyeSBmdW5jdGlvblxuXG4gICAgICAgIHZhciBxdWVyeUZuID0gY29udGV4dC5vcHRpb25zLnF1ZXJ5Rm4gfHwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnTWlzc2luZyBxdWVyeUZuJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGJ1aWxkTmV3UGFnZXMgPSBmdW5jdGlvbiBidWlsZE5ld1BhZ2VzKHBhZ2VzLCBwYXJhbSwgcGFnZSwgcHJldmlvdXMpIHtcbiAgICAgICAgICBuZXdQYWdlUGFyYW1zID0gcHJldmlvdXMgPyBbcGFyYW1dLmNvbmNhdChuZXdQYWdlUGFyYW1zKSA6IFtdLmNvbmNhdChuZXdQYWdlUGFyYW1zLCBbcGFyYW1dKTtcbiAgICAgICAgICByZXR1cm4gcHJldmlvdXMgPyBbcGFnZV0uY29uY2F0KHBhZ2VzKSA6IFtdLmNvbmNhdChwYWdlcywgW3BhZ2VdKTtcbiAgICAgICAgfTsgLy8gQ3JlYXRlIGZ1bmN0aW9uIHRvIGZldGNoIGEgcGFnZVxuXG5cbiAgICAgICAgdmFyIGZldGNoUGFnZSA9IGZ1bmN0aW9uIGZldGNoUGFnZShwYWdlcywgbWFudWFsLCBwYXJhbSwgcHJldmlvdXMpIHtcbiAgICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ0NhbmNlbGxlZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW0gPT09ICd1bmRlZmluZWQnICYmICFtYW51YWwgJiYgcGFnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHBhZ2VzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcXVlcnlGbkNvbnRleHQgPSB7XG4gICAgICAgICAgICBxdWVyeUtleTogY29udGV4dC5xdWVyeUtleSxcbiAgICAgICAgICAgIHNpZ25hbDogYWJvcnRTaWduYWwsXG4gICAgICAgICAgICBwYWdlUGFyYW06IHBhcmFtLFxuICAgICAgICAgICAgbWV0YTogY29udGV4dC5tZXRhXG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgcXVlcnlGblJlc3VsdCA9IHF1ZXJ5Rm4ocXVlcnlGbkNvbnRleHQpO1xuICAgICAgICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHF1ZXJ5Rm5SZXN1bHQpLnRoZW4oZnVuY3Rpb24gKHBhZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBidWlsZE5ld1BhZ2VzKHBhZ2VzLCBwYXJhbSwgcGFnZSwgcHJldmlvdXMpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGlzQ2FuY2VsYWJsZShxdWVyeUZuUmVzdWx0KSkge1xuICAgICAgICAgICAgdmFyIHByb21pc2VBc0FueSA9IHByb21pc2U7XG4gICAgICAgICAgICBwcm9taXNlQXNBbnkuY2FuY2VsID0gcXVlcnlGblJlc3VsdC5jYW5jZWw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHByb21pc2U7IC8vIEZldGNoIGZpcnN0IHBhZ2U/XG5cbiAgICAgICAgaWYgKCFvbGRQYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgICBwcm9taXNlID0gZmV0Y2hQYWdlKFtdKTtcbiAgICAgICAgfSAvLyBGZXRjaCBuZXh0IHBhZ2U/XG4gICAgICAgIGVsc2UgaWYgKGlzRmV0Y2hpbmdOZXh0UGFnZSkge1xuICAgICAgICAgICAgdmFyIG1hbnVhbCA9IHR5cGVvZiBwYWdlUGFyYW0gIT09ICd1bmRlZmluZWQnO1xuICAgICAgICAgICAgdmFyIHBhcmFtID0gbWFudWFsID8gcGFnZVBhcmFtIDogZ2V0TmV4dFBhZ2VQYXJhbShjb250ZXh0Lm9wdGlvbnMsIG9sZFBhZ2VzKTtcbiAgICAgICAgICAgIHByb21pc2UgPSBmZXRjaFBhZ2Uob2xkUGFnZXMsIG1hbnVhbCwgcGFyYW0pO1xuICAgICAgICAgIH0gLy8gRmV0Y2ggcHJldmlvdXMgcGFnZT9cbiAgICAgICAgICBlbHNlIGlmIChpc0ZldGNoaW5nUHJldmlvdXNQYWdlKSB7XG4gICAgICAgICAgICAgIHZhciBfbWFudWFsID0gdHlwZW9mIHBhZ2VQYXJhbSAhPT0gJ3VuZGVmaW5lZCc7XG5cbiAgICAgICAgICAgICAgdmFyIF9wYXJhbSA9IF9tYW51YWwgPyBwYWdlUGFyYW0gOiBnZXRQcmV2aW91c1BhZ2VQYXJhbShjb250ZXh0Lm9wdGlvbnMsIG9sZFBhZ2VzKTtcblxuICAgICAgICAgICAgICBwcm9taXNlID0gZmV0Y2hQYWdlKG9sZFBhZ2VzLCBfbWFudWFsLCBfcGFyYW0sIHRydWUpO1xuICAgICAgICAgICAgfSAvLyBSZWZldGNoIHBhZ2VzXG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgbmV3UGFnZVBhcmFtcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgdmFyIG1hbnVhbCA9IHR5cGVvZiBjb250ZXh0Lm9wdGlvbnMuZ2V0TmV4dFBhZ2VQYXJhbSA9PT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICAgICAgICB2YXIgc2hvdWxkRmV0Y2hGaXJzdFBhZ2UgPSByZWZldGNoUGFnZSAmJiBvbGRQYWdlc1swXSA/IHJlZmV0Y2hQYWdlKG9sZFBhZ2VzWzBdLCAwLCBvbGRQYWdlcykgOiB0cnVlOyAvLyBGZXRjaCBmaXJzdCBwYWdlXG5cbiAgICAgICAgICAgICAgICAgIHByb21pc2UgPSBzaG91bGRGZXRjaEZpcnN0UGFnZSA/IGZldGNoUGFnZShbXSwgbWFudWFsLCBvbGRQYWdlUGFyYW1zWzBdKSA6IFByb21pc2UucmVzb2x2ZShidWlsZE5ld1BhZ2VzKFtdLCBvbGRQYWdlUGFyYW1zWzBdLCBvbGRQYWdlc1swXSkpOyAvLyBGZXRjaCByZW1haW5pbmcgcGFnZXNcblxuICAgICAgICAgICAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChwYWdlcykge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBzaG91bGRGZXRjaE5leHRQYWdlID0gcmVmZXRjaFBhZ2UgJiYgb2xkUGFnZXNbaV0gPyByZWZldGNoUGFnZShvbGRQYWdlc1tpXSwgaSwgb2xkUGFnZXMpIDogdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChzaG91bGRGZXRjaE5leHRQYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3BhcmFtMiA9IG1hbnVhbCA/IG9sZFBhZ2VQYXJhbXNbaV0gOiBnZXROZXh0UGFnZVBhcmFtKGNvbnRleHQub3B0aW9ucywgcGFnZXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hQYWdlKHBhZ2VzLCBtYW51YWwsIF9wYXJhbTIpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoYnVpbGROZXdQYWdlcyhwYWdlcywgb2xkUGFnZVBhcmFtc1tpXSwgb2xkUGFnZXNbaV0pKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IG9sZFBhZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIF9sb29wKGkpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICB2YXIgZmluYWxQcm9taXNlID0gcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChwYWdlcykge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYWdlczogcGFnZXMsXG4gICAgICAgICAgICBwYWdlUGFyYW1zOiBuZXdQYWdlUGFyYW1zXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBmaW5hbFByb21pc2VBc0FueSA9IGZpbmFsUHJvbWlzZTtcblxuICAgICAgICBmaW5hbFByb21pc2VBc0FueS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICBhYm9ydENvbnRyb2xsZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGFib3J0Q29udHJvbGxlci5hYm9ydCgpO1xuXG4gICAgICAgICAgaWYgKGlzQ2FuY2VsYWJsZShwcm9taXNlKSkge1xuICAgICAgICAgICAgcHJvbWlzZS5jYW5jZWwoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGZpbmFsUHJvbWlzZTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRQYWdlUGFyYW0ob3B0aW9ucywgcGFnZXMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZ2V0TmV4dFBhZ2VQYXJhbSA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5nZXROZXh0UGFnZVBhcmFtKHBhZ2VzW3BhZ2VzLmxlbmd0aCAtIDFdLCBwYWdlcyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJldmlvdXNQYWdlUGFyYW0ob3B0aW9ucywgcGFnZXMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZ2V0UHJldmlvdXNQYWdlUGFyYW0gPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZ2V0UHJldmlvdXNQYWdlUGFyYW0ocGFnZXNbMF0sIHBhZ2VzKTtcbn1cbi8qKlxuICogQ2hlY2tzIGlmIHRoZXJlIGlzIGEgbmV4dCBwYWdlLlxuICogUmV0dXJucyBgdW5kZWZpbmVkYCBpZiBpdCBjYW5ub3QgYmUgZGV0ZXJtaW5lZC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzTmV4dFBhZ2Uob3B0aW9ucywgcGFnZXMpIHtcbiAgaWYgKG9wdGlvbnMuZ2V0TmV4dFBhZ2VQYXJhbSAmJiBBcnJheS5pc0FycmF5KHBhZ2VzKSkge1xuICAgIHZhciBuZXh0UGFnZVBhcmFtID0gZ2V0TmV4dFBhZ2VQYXJhbShvcHRpb25zLCBwYWdlcyk7XG4gICAgcmV0dXJuIHR5cGVvZiBuZXh0UGFnZVBhcmFtICE9PSAndW5kZWZpbmVkJyAmJiBuZXh0UGFnZVBhcmFtICE9PSBudWxsICYmIG5leHRQYWdlUGFyYW0gIT09IGZhbHNlO1xuICB9XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGVyZSBpcyBhIHByZXZpb3VzIHBhZ2UuXG4gKiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIGl0IGNhbm5vdCBiZSBkZXRlcm1pbmVkLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNQcmV2aW91c1BhZ2Uob3B0aW9ucywgcGFnZXMpIHtcbiAgaWYgKG9wdGlvbnMuZ2V0UHJldmlvdXNQYWdlUGFyYW0gJiYgQXJyYXkuaXNBcnJheShwYWdlcykpIHtcbiAgICB2YXIgcHJldmlvdXNQYWdlUGFyYW0gPSBnZXRQcmV2aW91c1BhZ2VQYXJhbShvcHRpb25zLCBwYWdlcyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwcmV2aW91c1BhZ2VQYXJhbSAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJldmlvdXNQYWdlUGFyYW0gIT09IG51bGwgJiYgcHJldmlvdXNQYWdlUGFyYW0gIT09IGZhbHNlO1xuICB9XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBoYXNoUXVlcnlLZXksIG5vb3AsIHBhcnNlRmlsdGVyQXJncywgcGFyc2VRdWVyeUFyZ3MsIHBhcnRpYWxNYXRjaEtleSwgaGFzaFF1ZXJ5S2V5QnlPcHRpb25zIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBRdWVyeUNhY2hlIH0gZnJvbSAnLi9xdWVyeUNhY2hlJztcbmltcG9ydCB7IE11dGF0aW9uQ2FjaGUgfSBmcm9tICcuL211dGF0aW9uQ2FjaGUnO1xuaW1wb3J0IHsgZm9jdXNNYW5hZ2VyIH0gZnJvbSAnLi9mb2N1c01hbmFnZXInO1xuaW1wb3J0IHsgb25saW5lTWFuYWdlciB9IGZyb20gJy4vb25saW5lTWFuYWdlcic7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi9ub3RpZnlNYW5hZ2VyJztcbmltcG9ydCB7IGluZmluaXRlUXVlcnlCZWhhdmlvciB9IGZyb20gJy4vaW5maW5pdGVRdWVyeUJlaGF2aW9yJztcbi8vIENMQVNTXG5leHBvcnQgdmFyIFF1ZXJ5Q2xpZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUXVlcnlDbGllbnQoY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICBjb25maWcgPSB7fTtcbiAgICB9XG5cbiAgICB0aGlzLnF1ZXJ5Q2FjaGUgPSBjb25maWcucXVlcnlDYWNoZSB8fCBuZXcgUXVlcnlDYWNoZSgpO1xuICAgIHRoaXMubXV0YXRpb25DYWNoZSA9IGNvbmZpZy5tdXRhdGlvbkNhY2hlIHx8IG5ldyBNdXRhdGlvbkNhY2hlKCk7XG4gICAgdGhpcy5kZWZhdWx0T3B0aW9ucyA9IGNvbmZpZy5kZWZhdWx0T3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLnF1ZXJ5RGVmYXVsdHMgPSBbXTtcbiAgICB0aGlzLm11dGF0aW9uRGVmYXVsdHMgPSBbXTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBRdWVyeUNsaWVudC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm1vdW50ID0gZnVuY3Rpb24gbW91bnQoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHRoaXMudW5zdWJzY3JpYmVGb2N1cyA9IGZvY3VzTWFuYWdlci5zdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGZvY3VzTWFuYWdlci5pc0ZvY3VzZWQoKSAmJiBvbmxpbmVNYW5hZ2VyLmlzT25saW5lKCkpIHtcbiAgICAgICAgX3RoaXMubXV0YXRpb25DYWNoZS5vbkZvY3VzKCk7XG5cbiAgICAgICAgX3RoaXMucXVlcnlDYWNoZS5vbkZvY3VzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy51bnN1YnNjcmliZU9ubGluZSA9IG9ubGluZU1hbmFnZXIuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChmb2N1c01hbmFnZXIuaXNGb2N1c2VkKCkgJiYgb25saW5lTWFuYWdlci5pc09ubGluZSgpKSB7XG4gICAgICAgIF90aGlzLm11dGF0aW9uQ2FjaGUub25PbmxpbmUoKTtcblxuICAgICAgICBfdGhpcy5xdWVyeUNhY2hlLm9uT25saW5lKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnVubW91bnQgPSBmdW5jdGlvbiB1bm1vdW50KCkge1xuICAgIHZhciBfdGhpcyR1bnN1YnNjcmliZUZvY3UsIF90aGlzJHVuc3Vic2NyaWJlT25saTtcblxuICAgIChfdGhpcyR1bnN1YnNjcmliZUZvY3UgPSB0aGlzLnVuc3Vic2NyaWJlRm9jdXMpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyR1bnN1YnNjcmliZUZvY3UuY2FsbCh0aGlzKTtcbiAgICAoX3RoaXMkdW5zdWJzY3JpYmVPbmxpID0gdGhpcy51bnN1YnNjcmliZU9ubGluZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHVuc3Vic2NyaWJlT25saS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5pc0ZldGNoaW5nID0gZnVuY3Rpb24gaXNGZXRjaGluZyhhcmcxLCBhcmcyKSB7XG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3MgPSBwYXJzZUZpbHRlckFyZ3MoYXJnMSwgYXJnMiksXG4gICAgICAgIGZpbHRlcnMgPSBfcGFyc2VGaWx0ZXJBcmdzWzBdO1xuXG4gICAgZmlsdGVycy5mZXRjaGluZyA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlDYWNoZS5maW5kQWxsKGZpbHRlcnMpLmxlbmd0aDtcbiAgfTtcblxuICBfcHJvdG8uaXNNdXRhdGluZyA9IGZ1bmN0aW9uIGlzTXV0YXRpbmcoZmlsdGVycykge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9uQ2FjaGUuZmluZEFsbChfZXh0ZW5kcyh7fSwgZmlsdGVycywge1xuICAgICAgZmV0Y2hpbmc6IHRydWVcbiAgICB9KSkubGVuZ3RoO1xuICB9O1xuXG4gIF9wcm90by5nZXRRdWVyeURhdGEgPSBmdW5jdGlvbiBnZXRRdWVyeURhdGEocXVlcnlLZXksIGZpbHRlcnMpIHtcbiAgICB2YXIgX3RoaXMkcXVlcnlDYWNoZSRmaW5kO1xuXG4gICAgcmV0dXJuIChfdGhpcyRxdWVyeUNhY2hlJGZpbmQgPSB0aGlzLnF1ZXJ5Q2FjaGUuZmluZChxdWVyeUtleSwgZmlsdGVycykpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRxdWVyeUNhY2hlJGZpbmQuc3RhdGUuZGF0YTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0UXVlcmllc0RhdGEgPSBmdW5jdGlvbiBnZXRRdWVyaWVzRGF0YShxdWVyeUtleU9yRmlsdGVycykge1xuICAgIHJldHVybiB0aGlzLmdldFF1ZXJ5Q2FjaGUoKS5maW5kQWxsKHF1ZXJ5S2V5T3JGaWx0ZXJzKS5tYXAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBxdWVyeUtleSA9IF9yZWYucXVlcnlLZXksXG4gICAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuICAgICAgdmFyIGRhdGEgPSBzdGF0ZS5kYXRhO1xuICAgICAgcmV0dXJuIFtxdWVyeUtleSwgZGF0YV07XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnNldFF1ZXJ5RGF0YSA9IGZ1bmN0aW9uIHNldFF1ZXJ5RGF0YShxdWVyeUtleSwgdXBkYXRlciwgb3B0aW9ucykge1xuICAgIHZhciBwYXJzZWRPcHRpb25zID0gcGFyc2VRdWVyeUFyZ3MocXVlcnlLZXkpO1xuICAgIHZhciBkZWZhdWx0ZWRPcHRpb25zID0gdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zKHBhcnNlZE9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5Q2FjaGUuYnVpbGQodGhpcywgZGVmYXVsdGVkT3B0aW9ucykuc2V0RGF0YSh1cGRhdGVyLCBvcHRpb25zKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0UXVlcmllc0RhdGEgPSBmdW5jdGlvbiBzZXRRdWVyaWVzRGF0YShxdWVyeUtleU9yRmlsdGVycywgdXBkYXRlciwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzMi5nZXRRdWVyeUNhY2hlKCkuZmluZEFsbChxdWVyeUtleU9yRmlsdGVycykubWFwKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICB2YXIgcXVlcnlLZXkgPSBfcmVmMi5xdWVyeUtleTtcbiAgICAgICAgcmV0dXJuIFtxdWVyeUtleSwgX3RoaXMyLnNldFF1ZXJ5RGF0YShxdWVyeUtleSwgdXBkYXRlciwgb3B0aW9ucyldO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFF1ZXJ5U3RhdGUgPSBmdW5jdGlvbiBnZXRRdWVyeVN0YXRlKHF1ZXJ5S2V5LCBmaWx0ZXJzKSB7XG4gICAgdmFyIF90aGlzJHF1ZXJ5Q2FjaGUkZmluZDI7XG5cbiAgICByZXR1cm4gKF90aGlzJHF1ZXJ5Q2FjaGUkZmluZDIgPSB0aGlzLnF1ZXJ5Q2FjaGUuZmluZChxdWVyeUtleSwgZmlsdGVycykpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRxdWVyeUNhY2hlJGZpbmQyLnN0YXRlO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmVRdWVyaWVzID0gZnVuY3Rpb24gcmVtb3ZlUXVlcmllcyhhcmcxLCBhcmcyKSB7XG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3MyID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnczJbMF07XG5cbiAgICB2YXIgcXVlcnlDYWNoZSA9IHRoaXMucXVlcnlDYWNoZTtcbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHF1ZXJ5Q2FjaGUuZmluZEFsbChmaWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICBxdWVyeUNhY2hlLnJlbW92ZShxdWVyeSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ucmVzZXRRdWVyaWVzID0gZnVuY3Rpb24gcmVzZXRRdWVyaWVzKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBfcGFyc2VGaWx0ZXJBcmdzMyA9IHBhcnNlRmlsdGVyQXJncyhhcmcxLCBhcmcyLCBhcmczKSxcbiAgICAgICAgZmlsdGVycyA9IF9wYXJzZUZpbHRlckFyZ3MzWzBdLFxuICAgICAgICBvcHRpb25zID0gX3BhcnNlRmlsdGVyQXJnczNbMV07XG5cbiAgICB2YXIgcXVlcnlDYWNoZSA9IHRoaXMucXVlcnlDYWNoZTtcblxuICAgIHZhciByZWZldGNoRmlsdGVycyA9IF9leHRlbmRzKHt9LCBmaWx0ZXJzLCB7XG4gICAgICBhY3RpdmU6IHRydWVcbiAgICB9KTtcblxuICAgIHJldHVybiBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHF1ZXJ5Q2FjaGUuZmluZEFsbChmaWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICBxdWVyeS5yZXNldCgpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3RoaXMzLnJlZmV0Y2hRdWVyaWVzKHJlZmV0Y2hGaWx0ZXJzLCBvcHRpb25zKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsUXVlcmllcyA9IGZ1bmN0aW9uIGNhbmNlbFF1ZXJpZXMoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3M0ID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIsIGFyZzMpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnczRbMF0sXG4gICAgICAgIF9wYXJzZUZpbHRlckFyZ3M0JCA9IF9wYXJzZUZpbHRlckFyZ3M0WzFdLFxuICAgICAgICBjYW5jZWxPcHRpb25zID0gX3BhcnNlRmlsdGVyQXJnczQkID09PSB2b2lkIDAgPyB7fSA6IF9wYXJzZUZpbHRlckFyZ3M0JDtcblxuICAgIGlmICh0eXBlb2YgY2FuY2VsT3B0aW9ucy5yZXZlcnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjYW5jZWxPcHRpb25zLnJldmVydCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHByb21pc2VzID0gbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXM0LnF1ZXJ5Q2FjaGUuZmluZEFsbChmaWx0ZXJzKS5tYXAoZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiBxdWVyeS5jYW5jZWwoY2FuY2VsT3B0aW9ucyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4obm9vcCkuY2F0Y2gobm9vcCk7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGVRdWVyaWVzID0gZnVuY3Rpb24gaW52YWxpZGF0ZVF1ZXJpZXMoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciBfcmVmMyxcbiAgICAgICAgX2ZpbHRlcnMkcmVmZXRjaEFjdGl2LFxuICAgICAgICBfZmlsdGVycyRyZWZldGNoSW5hY3QsXG4gICAgICAgIF90aGlzNSA9IHRoaXM7XG5cbiAgICB2YXIgX3BhcnNlRmlsdGVyQXJnczUgPSBwYXJzZUZpbHRlckFyZ3MoYXJnMSwgYXJnMiwgYXJnMyksXG4gICAgICAgIGZpbHRlcnMgPSBfcGFyc2VGaWx0ZXJBcmdzNVswXSxcbiAgICAgICAgb3B0aW9ucyA9IF9wYXJzZUZpbHRlckFyZ3M1WzFdO1xuXG4gICAgdmFyIHJlZmV0Y2hGaWx0ZXJzID0gX2V4dGVuZHMoe30sIGZpbHRlcnMsIHtcbiAgICAgIC8vIGlmIGZpbHRlcnMucmVmZXRjaEFjdGl2ZSBpcyBub3QgcHJvdmlkZWQgYW5kIGZpbHRlcnMuYWN0aXZlIGlzIGV4cGxpY2l0bHkgZmFsc2UsXG4gICAgICAvLyBlLmcuIGludmFsaWRhdGVRdWVyaWVzKHsgYWN0aXZlOiBmYWxzZSB9KSwgd2UgZG9uJ3Qgd2FudCB0byByZWZldGNoIGFjdGl2ZSBxdWVyaWVzXG4gICAgICBhY3RpdmU6IChfcmVmMyA9IChfZmlsdGVycyRyZWZldGNoQWN0aXYgPSBmaWx0ZXJzLnJlZmV0Y2hBY3RpdmUpICE9IG51bGwgPyBfZmlsdGVycyRyZWZldGNoQWN0aXYgOiBmaWx0ZXJzLmFjdGl2ZSkgIT0gbnVsbCA/IF9yZWYzIDogdHJ1ZSxcbiAgICAgIGluYWN0aXZlOiAoX2ZpbHRlcnMkcmVmZXRjaEluYWN0ID0gZmlsdGVycy5yZWZldGNoSW5hY3RpdmUpICE9IG51bGwgPyBfZmlsdGVycyRyZWZldGNoSW5hY3QgOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXM1LnF1ZXJ5Q2FjaGUuZmluZEFsbChmaWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICBxdWVyeS5pbnZhbGlkYXRlKCk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF90aGlzNS5yZWZldGNoUXVlcmllcyhyZWZldGNoRmlsdGVycywgb3B0aW9ucyk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlZmV0Y2hRdWVyaWVzID0gZnVuY3Rpb24gcmVmZXRjaFF1ZXJpZXMoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3M2ID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIsIGFyZzMpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnczZbMF0sXG4gICAgICAgIG9wdGlvbnMgPSBfcGFyc2VGaWx0ZXJBcmdzNlsxXTtcblxuICAgIHZhciBwcm9taXNlcyA9IG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzNi5xdWVyeUNhY2hlLmZpbmRBbGwoZmlsdGVycykubWFwKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICByZXR1cm4gcXVlcnkuZmV0Y2godW5kZWZpbmVkLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgICAgIG1ldGE6IHtcbiAgICAgICAgICAgIHJlZmV0Y2hQYWdlOiBmaWx0ZXJzID09IG51bGwgPyB2b2lkIDAgOiBmaWx0ZXJzLnJlZmV0Y2hQYWdlXG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKG5vb3ApO1xuXG4gICAgaWYgKCEob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy50aHJvd09uRXJyb3IpKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS5jYXRjaChub29wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBfcHJvdG8uZmV0Y2hRdWVyeSA9IGZ1bmN0aW9uIGZldGNoUXVlcnkoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciBwYXJzZWRPcHRpb25zID0gcGFyc2VRdWVyeUFyZ3MoYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgdmFyIGRlZmF1bHRlZE9wdGlvbnMgPSB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMocGFyc2VkT3B0aW9ucyk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YW5uZXJsaW5zbGV5L3JlYWN0LXF1ZXJ5L2lzc3Vlcy82NTJcblxuICAgIGlmICh0eXBlb2YgZGVmYXVsdGVkT3B0aW9ucy5yZXRyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMucmV0cnkgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5Q2FjaGUuYnVpbGQodGhpcywgZGVmYXVsdGVkT3B0aW9ucyk7XG4gICAgcmV0dXJuIHF1ZXJ5LmlzU3RhbGVCeVRpbWUoZGVmYXVsdGVkT3B0aW9ucy5zdGFsZVRpbWUpID8gcXVlcnkuZmV0Y2goZGVmYXVsdGVkT3B0aW9ucykgOiBQcm9taXNlLnJlc29sdmUocXVlcnkuc3RhdGUuZGF0YSk7XG4gIH07XG5cbiAgX3Byb3RvLnByZWZldGNoUXVlcnkgPSBmdW5jdGlvbiBwcmVmZXRjaFF1ZXJ5KGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaFF1ZXJ5KGFyZzEsIGFyZzIsIGFyZzMpLnRoZW4obm9vcCkuY2F0Y2gobm9vcCk7XG4gIH07XG5cbiAgX3Byb3RvLmZldGNoSW5maW5pdGVRdWVyeSA9IGZ1bmN0aW9uIGZldGNoSW5maW5pdGVRdWVyeShhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgdmFyIHBhcnNlZE9wdGlvbnMgPSBwYXJzZVF1ZXJ5QXJncyhhcmcxLCBhcmcyLCBhcmczKTtcbiAgICBwYXJzZWRPcHRpb25zLmJlaGF2aW9yID0gaW5maW5pdGVRdWVyeUJlaGF2aW9yKCk7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hRdWVyeShwYXJzZWRPcHRpb25zKTtcbiAgfTtcblxuICBfcHJvdG8ucHJlZmV0Y2hJbmZpbml0ZVF1ZXJ5ID0gZnVuY3Rpb24gcHJlZmV0Y2hJbmZpbml0ZVF1ZXJ5KGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaEluZmluaXRlUXVlcnkoYXJnMSwgYXJnMiwgYXJnMykudGhlbihub29wKS5jYXRjaChub29wKTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTXV0YXRpb25zID0gZnVuY3Rpb24gY2FuY2VsTXV0YXRpb25zKCkge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgdmFyIHByb21pc2VzID0gbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXM3Lm11dGF0aW9uQ2FjaGUuZ2V0QWxsKCkubWFwKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgICByZXR1cm4gbXV0YXRpb24uY2FuY2VsKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4obm9vcCkuY2F0Y2gobm9vcCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc3VtZVBhdXNlZE11dGF0aW9ucyA9IGZ1bmN0aW9uIHJlc3VtZVBhdXNlZE11dGF0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRNdXRhdGlvbkNhY2hlKCkucmVzdW1lUGF1c2VkTXV0YXRpb25zKCk7XG4gIH07XG5cbiAgX3Byb3RvLmV4ZWN1dGVNdXRhdGlvbiA9IGZ1bmN0aW9uIGV4ZWN1dGVNdXRhdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMubXV0YXRpb25DYWNoZS5idWlsZCh0aGlzLCBvcHRpb25zKS5leGVjdXRlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFF1ZXJ5Q2FjaGUgPSBmdW5jdGlvbiBnZXRRdWVyeUNhY2hlKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5Q2FjaGU7XG4gIH07XG5cbiAgX3Byb3RvLmdldE11dGF0aW9uQ2FjaGUgPSBmdW5jdGlvbiBnZXRNdXRhdGlvbkNhY2hlKCkge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9uQ2FjaGU7XG4gIH07XG5cbiAgX3Byb3RvLmdldERlZmF1bHRPcHRpb25zID0gZnVuY3Rpb24gZ2V0RGVmYXVsdE9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdE9wdGlvbnM7XG4gIH07XG5cbiAgX3Byb3RvLnNldERlZmF1bHRPcHRpb25zID0gZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMob3B0aW9ucykge1xuICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zO1xuICB9O1xuXG4gIF9wcm90by5zZXRRdWVyeURlZmF1bHRzID0gZnVuY3Rpb24gc2V0UXVlcnlEZWZhdWx0cyhxdWVyeUtleSwgb3B0aW9ucykge1xuICAgIHZhciByZXN1bHQgPSB0aGlzLnF1ZXJ5RGVmYXVsdHMuZmluZChmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIGhhc2hRdWVyeUtleShxdWVyeUtleSkgPT09IGhhc2hRdWVyeUtleSh4LnF1ZXJ5S2V5KTtcbiAgICB9KTtcblxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJlc3VsdC5kZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucXVlcnlEZWZhdWx0cy5wdXNoKHtcbiAgICAgICAgcXVlcnlLZXk6IHF1ZXJ5S2V5LFxuICAgICAgICBkZWZhdWx0T3B0aW9uczogb3B0aW9uc1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXRRdWVyeURlZmF1bHRzID0gZnVuY3Rpb24gZ2V0UXVlcnlEZWZhdWx0cyhxdWVyeUtleSkge1xuICAgIHZhciBfdGhpcyRxdWVyeURlZmF1bHRzJGY7XG5cbiAgICByZXR1cm4gcXVlcnlLZXkgPyAoX3RoaXMkcXVlcnlEZWZhdWx0cyRmID0gdGhpcy5xdWVyeURlZmF1bHRzLmZpbmQoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsTWF0Y2hLZXkocXVlcnlLZXksIHgucXVlcnlLZXkpO1xuICAgIH0pKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkcXVlcnlEZWZhdWx0cyRmLmRlZmF1bHRPcHRpb25zIDogdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by5zZXRNdXRhdGlvbkRlZmF1bHRzID0gZnVuY3Rpb24gc2V0TXV0YXRpb25EZWZhdWx0cyhtdXRhdGlvbktleSwgb3B0aW9ucykge1xuICAgIHZhciByZXN1bHQgPSB0aGlzLm11dGF0aW9uRGVmYXVsdHMuZmluZChmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIGhhc2hRdWVyeUtleShtdXRhdGlvbktleSkgPT09IGhhc2hRdWVyeUtleSh4Lm11dGF0aW9uS2V5KTtcbiAgICB9KTtcblxuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJlc3VsdC5kZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubXV0YXRpb25EZWZhdWx0cy5wdXNoKHtcbiAgICAgICAgbXV0YXRpb25LZXk6IG11dGF0aW9uS2V5LFxuICAgICAgICBkZWZhdWx0T3B0aW9uczogb3B0aW9uc1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXRNdXRhdGlvbkRlZmF1bHRzID0gZnVuY3Rpb24gZ2V0TXV0YXRpb25EZWZhdWx0cyhtdXRhdGlvbktleSkge1xuICAgIHZhciBfdGhpcyRtdXRhdGlvbkRlZmF1bHQ7XG5cbiAgICByZXR1cm4gbXV0YXRpb25LZXkgPyAoX3RoaXMkbXV0YXRpb25EZWZhdWx0ID0gdGhpcy5tdXRhdGlvbkRlZmF1bHRzLmZpbmQoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsTWF0Y2hLZXkobXV0YXRpb25LZXksIHgubXV0YXRpb25LZXkpO1xuICAgIH0pKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkbXV0YXRpb25EZWZhdWx0LmRlZmF1bHRPcHRpb25zIDogdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by5kZWZhdWx0UXVlcnlPcHRpb25zID0gZnVuY3Rpb24gZGVmYXVsdFF1ZXJ5T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuX2RlZmF1bHRlZCkge1xuICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRlZE9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5kZWZhdWx0T3B0aW9ucy5xdWVyaWVzLCB0aGlzLmdldFF1ZXJ5RGVmYXVsdHMob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5xdWVyeUtleSksIG9wdGlvbnMsIHtcbiAgICAgIF9kZWZhdWx0ZWQ6IHRydWVcbiAgICB9KTtcblxuICAgIGlmICghZGVmYXVsdGVkT3B0aW9ucy5xdWVyeUhhc2ggJiYgZGVmYXVsdGVkT3B0aW9ucy5xdWVyeUtleSkge1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5xdWVyeUhhc2ggPSBoYXNoUXVlcnlLZXlCeU9wdGlvbnMoZGVmYXVsdGVkT3B0aW9ucy5xdWVyeUtleSwgZGVmYXVsdGVkT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmF1bHRlZE9wdGlvbnM7XG4gIH07XG5cbiAgX3Byb3RvLmRlZmF1bHRRdWVyeU9ic2VydmVyT3B0aW9ucyA9IGZ1bmN0aW9uIGRlZmF1bHRRdWVyeU9ic2VydmVyT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucyhvcHRpb25zKTtcbiAgfTtcblxuICBfcHJvdG8uZGVmYXVsdE11dGF0aW9uT3B0aW9ucyA9IGZ1bmN0aW9uIGRlZmF1bHRNdXRhdGlvbk9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLl9kZWZhdWx0ZWQpIHtcbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgdGhpcy5kZWZhdWx0T3B0aW9ucy5tdXRhdGlvbnMsIHRoaXMuZ2V0TXV0YXRpb25EZWZhdWx0cyhvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLm11dGF0aW9uS2V5KSwgb3B0aW9ucywge1xuICAgICAgX2RlZmF1bHRlZDogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHRoaXMucXVlcnlDYWNoZS5jbGVhcigpO1xuICAgIHRoaXMubXV0YXRpb25DYWNoZS5jbGVhcigpO1xuICB9O1xuXG4gIHJldHVybiBRdWVyeUNsaWVudDtcbn0oKTsiLCJpbXBvcnQgeyBmb2N1c01hbmFnZXIgfSBmcm9tICcuL2ZvY3VzTWFuYWdlcic7XG5pbXBvcnQgeyBvbmxpbmVNYW5hZ2VyIH0gZnJvbSAnLi9vbmxpbmVNYW5hZ2VyJztcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSAnLi91dGlscyc7XG5cbmZ1bmN0aW9uIGRlZmF1bHRSZXRyeURlbGF5KGZhaWx1cmVDb3VudCkge1xuICByZXR1cm4gTWF0aC5taW4oMTAwMCAqIE1hdGgucG93KDIsIGZhaWx1cmVDb3VudCksIDMwMDAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2FuY2VsYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mICh2YWx1ZSA9PSBudWxsID8gdm9pZCAwIDogdmFsdWUuY2FuY2VsKSA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydCB2YXIgQ2FuY2VsbGVkRXJyb3IgPSBmdW5jdGlvbiBDYW5jZWxsZWRFcnJvcihvcHRpb25zKSB7XG4gIHRoaXMucmV2ZXJ0ID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5yZXZlcnQ7XG4gIHRoaXMuc2lsZW50ID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5zaWxlbnQ7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGlzQ2FuY2VsbGVkRXJyb3IodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgQ2FuY2VsbGVkRXJyb3I7XG59IC8vIENMQVNTXG5cbmV4cG9ydCB2YXIgUmV0cnllciA9IGZ1bmN0aW9uIFJldHJ5ZXIoY29uZmlnKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdmFyIGNhbmNlbFJldHJ5ID0gZmFsc2U7XG4gIHZhciBjYW5jZWxGbjtcbiAgdmFyIGNvbnRpbnVlRm47XG4gIHZhciBwcm9taXNlUmVzb2x2ZTtcbiAgdmFyIHByb21pc2VSZWplY3Q7XG4gIHRoaXMuYWJvcnQgPSBjb25maWcuYWJvcnQ7XG5cbiAgdGhpcy5jYW5jZWwgPSBmdW5jdGlvbiAoY2FuY2VsT3B0aW9ucykge1xuICAgIHJldHVybiBjYW5jZWxGbiA9PSBudWxsID8gdm9pZCAwIDogY2FuY2VsRm4oY2FuY2VsT3B0aW9ucyk7XG4gIH07XG5cbiAgdGhpcy5jYW5jZWxSZXRyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYW5jZWxSZXRyeSA9IHRydWU7XG4gIH07XG5cbiAgdGhpcy5jb250aW51ZVJldHJ5ID0gZnVuY3Rpb24gKCkge1xuICAgIGNhbmNlbFJldHJ5ID0gZmFsc2U7XG4gIH07XG5cbiAgdGhpcy5jb250aW51ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29udGludWVGbiA9PSBudWxsID8gdm9pZCAwIDogY29udGludWVGbigpO1xuICB9O1xuXG4gIHRoaXMuZmFpbHVyZUNvdW50ID0gMDtcbiAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICB0aGlzLmlzUmVzb2x2ZWQgPSBmYWxzZTtcbiAgdGhpcy5pc1RyYW5zcG9ydENhbmNlbGFibGUgPSBmYWxzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKG91dGVyUmVzb2x2ZSwgb3V0ZXJSZWplY3QpIHtcbiAgICBwcm9taXNlUmVzb2x2ZSA9IG91dGVyUmVzb2x2ZTtcbiAgICBwcm9taXNlUmVqZWN0ID0gb3V0ZXJSZWplY3Q7XG4gIH0pO1xuXG4gIHZhciByZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSh2YWx1ZSkge1xuICAgIGlmICghX3RoaXMuaXNSZXNvbHZlZCkge1xuICAgICAgX3RoaXMuaXNSZXNvbHZlZCA9IHRydWU7XG4gICAgICBjb25maWcub25TdWNjZXNzID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcub25TdWNjZXNzKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlRm4gPT0gbnVsbCA/IHZvaWQgMCA6IGNvbnRpbnVlRm4oKTtcbiAgICAgIHByb21pc2VSZXNvbHZlKHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJlamVjdCA9IGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkge1xuICAgIGlmICghX3RoaXMuaXNSZXNvbHZlZCkge1xuICAgICAgX3RoaXMuaXNSZXNvbHZlZCA9IHRydWU7XG4gICAgICBjb25maWcub25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLm9uRXJyb3IodmFsdWUpO1xuICAgICAgY29udGludWVGbiA9PSBudWxsID8gdm9pZCAwIDogY29udGludWVGbigpO1xuICAgICAgcHJvbWlzZVJlamVjdCh2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBwYXVzZSA9IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoY29udGludWVSZXNvbHZlKSB7XG4gICAgICBjb250aW51ZUZuID0gY29udGludWVSZXNvbHZlO1xuICAgICAgX3RoaXMuaXNQYXVzZWQgPSB0cnVlO1xuICAgICAgY29uZmlnLm9uUGF1c2UgPT0gbnVsbCA/IHZvaWQgMCA6IGNvbmZpZy5vblBhdXNlKCk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBjb250aW51ZUZuID0gdW5kZWZpbmVkO1xuICAgICAgX3RoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgIGNvbmZpZy5vbkNvbnRpbnVlID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcub25Db250aW51ZSgpO1xuICAgIH0pO1xuICB9OyAvLyBDcmVhdGUgbG9vcCBmdW5jdGlvblxuXG5cbiAgdmFyIHJ1biA9IGZ1bmN0aW9uIHJ1bigpIHtcbiAgICAvLyBEbyBub3RoaW5nIGlmIGFscmVhZHkgcmVzb2x2ZWRcbiAgICBpZiAoX3RoaXMuaXNSZXNvbHZlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlT3JWYWx1ZTsgLy8gRXhlY3V0ZSBxdWVyeVxuXG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2VPclZhbHVlID0gY29uZmlnLmZuKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHByb21pc2VPclZhbHVlID0gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH0gLy8gQ3JlYXRlIGNhbGxiYWNrIHRvIGNhbmNlbCB0aGlzIGZldGNoXG5cblxuICAgIGNhbmNlbEZuID0gZnVuY3Rpb24gY2FuY2VsRm4oY2FuY2VsT3B0aW9ucykge1xuICAgICAgaWYgKCFfdGhpcy5pc1Jlc29sdmVkKSB7XG4gICAgICAgIHJlamVjdChuZXcgQ2FuY2VsbGVkRXJyb3IoY2FuY2VsT3B0aW9ucykpO1xuICAgICAgICBfdGhpcy5hYm9ydCA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMuYWJvcnQoKTsgLy8gQ2FuY2VsIHRyYW5zcG9ydCBpZiBzdXBwb3J0ZWRcblxuICAgICAgICBpZiAoaXNDYW5jZWxhYmxlKHByb21pc2VPclZhbHVlKSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwcm9taXNlT3JWYWx1ZS5jYW5jZWwoKTtcbiAgICAgICAgICB9IGNhdGNoIChfdW51c2VkKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTsgLy8gQ2hlY2sgaWYgdGhlIHRyYW5zcG9ydCBsYXllciBzdXBwb3J0IGNhbmNlbGxhdGlvblxuXG5cbiAgICBfdGhpcy5pc1RyYW5zcG9ydENhbmNlbGFibGUgPSBpc0NhbmNlbGFibGUocHJvbWlzZU9yVmFsdWUpO1xuICAgIFByb21pc2UucmVzb2x2ZShwcm9taXNlT3JWYWx1ZSkudGhlbihyZXNvbHZlKS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHZhciBfY29uZmlnJHJldHJ5LCBfY29uZmlnJHJldHJ5RGVsYXk7XG5cbiAgICAgIC8vIFN0b3AgaWYgdGhlIGZldGNoIGlzIGFscmVhZHkgcmVzb2x2ZWRcbiAgICAgIGlmIChfdGhpcy5pc1Jlc29sdmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gRG8gd2UgbmVlZCB0byByZXRyeSB0aGUgcmVxdWVzdD9cblxuXG4gICAgICB2YXIgcmV0cnkgPSAoX2NvbmZpZyRyZXRyeSA9IGNvbmZpZy5yZXRyeSkgIT0gbnVsbCA/IF9jb25maWckcmV0cnkgOiAzO1xuICAgICAgdmFyIHJldHJ5RGVsYXkgPSAoX2NvbmZpZyRyZXRyeURlbGF5ID0gY29uZmlnLnJldHJ5RGVsYXkpICE9IG51bGwgPyBfY29uZmlnJHJldHJ5RGVsYXkgOiBkZWZhdWx0UmV0cnlEZWxheTtcbiAgICAgIHZhciBkZWxheSA9IHR5cGVvZiByZXRyeURlbGF5ID09PSAnZnVuY3Rpb24nID8gcmV0cnlEZWxheShfdGhpcy5mYWlsdXJlQ291bnQsIGVycm9yKSA6IHJldHJ5RGVsYXk7XG4gICAgICB2YXIgc2hvdWxkUmV0cnkgPSByZXRyeSA9PT0gdHJ1ZSB8fCB0eXBlb2YgcmV0cnkgPT09ICdudW1iZXInICYmIF90aGlzLmZhaWx1cmVDb3VudCA8IHJldHJ5IHx8IHR5cGVvZiByZXRyeSA9PT0gJ2Z1bmN0aW9uJyAmJiByZXRyeShfdGhpcy5mYWlsdXJlQ291bnQsIGVycm9yKTtcblxuICAgICAgaWYgKGNhbmNlbFJldHJ5IHx8ICFzaG91bGRSZXRyeSkge1xuICAgICAgICAvLyBXZSBhcmUgZG9uZSBpZiB0aGUgcXVlcnkgZG9lcyBub3QgbmVlZCB0byBiZSByZXRyaWVkXG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuZmFpbHVyZUNvdW50Kys7IC8vIE5vdGlmeSBvbiBmYWlsXG5cbiAgICAgIGNvbmZpZy5vbkZhaWwgPT0gbnVsbCA/IHZvaWQgMCA6IGNvbmZpZy5vbkZhaWwoX3RoaXMuZmFpbHVyZUNvdW50LCBlcnJvcik7IC8vIERlbGF5XG5cbiAgICAgIHNsZWVwKGRlbGF5KSAvLyBQYXVzZSBpZiB0aGUgZG9jdW1lbnQgaXMgbm90IHZpc2libGUgb3Igd2hlbiB0aGUgZGV2aWNlIGlzIG9mZmxpbmVcbiAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFmb2N1c01hbmFnZXIuaXNGb2N1c2VkKCkgfHwgIW9ubGluZU1hbmFnZXIuaXNPbmxpbmUoKSkge1xuICAgICAgICAgIHJldHVybiBwYXVzZSgpO1xuICAgICAgICB9XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNhbmNlbFJldHJ5KSB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBydW4oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07IC8vIFN0YXJ0IGxvb3BcblxuXG4gIHJ1bigpO1xufTsiLCJleHBvcnQgdmFyIFN1YnNjcmliYWJsZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmliYWJsZSgpIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN1YnNjcmliYWJsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgY2FsbGJhY2sgPSBsaXN0ZW5lciB8fCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG5cbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgICB0aGlzLm9uU3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLmxpc3RlbmVycyA9IF90aGlzLmxpc3RlbmVycy5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHggIT09IGNhbGxiYWNrO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzLm9uVW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbiBoYXNMaXN0ZW5lcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLmxlbmd0aCA+IDA7XG4gIH07XG5cbiAgX3Byb3RvLm9uU3Vic2NyaWJlID0gZnVuY3Rpb24gb25TdWJzY3JpYmUoKSB7Ly8gRG8gbm90aGluZ1xuICB9O1xuXG4gIF9wcm90by5vblVuc3Vic2NyaWJlID0gZnVuY3Rpb24gb25VbnN1YnNjcmliZSgpIHsvLyBEbyBub3RoaW5nXG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmliYWJsZTtcbn0oKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbi8vIFRZUEVTXG4vLyBVVElMU1xuZXhwb3J0IHZhciBpc1NlcnZlciA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnO1xuZXhwb3J0IGZ1bmN0aW9uIG5vb3AoKSB7XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gZnVuY3Rpb25hbFVwZGF0ZSh1cGRhdGVyLCBpbnB1dCkge1xuICByZXR1cm4gdHlwZW9mIHVwZGF0ZXIgPT09ICdmdW5jdGlvbicgPyB1cGRhdGVyKGlucHV0KSA6IHVwZGF0ZXI7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFRpbWVvdXQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgPj0gMCAmJiB2YWx1ZSAhPT0gSW5maW5pdHk7XG59XG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlUXVlcnlLZXlBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG59XG5leHBvcnQgZnVuY3Rpb24gZGlmZmVyZW5jZShhcnJheTEsIGFycmF5Mikge1xuICByZXR1cm4gYXJyYXkxLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBhcnJheTIuaW5kZXhPZih4KSA9PT0gLTE7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlcGxhY2VBdChhcnJheSwgaW5kZXgsIHZhbHVlKSB7XG4gIHZhciBjb3B5ID0gYXJyYXkuc2xpY2UoMCk7XG4gIGNvcHlbaW5kZXhdID0gdmFsdWU7XG4gIHJldHVybiBjb3B5O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVVbnRpbFN0YWxlKHVwZGF0ZWRBdCwgc3RhbGVUaW1lKSB7XG4gIHJldHVybiBNYXRoLm1heCh1cGRhdGVkQXQgKyAoc3RhbGVUaW1lIHx8IDApIC0gRGF0ZS5ub3coKSwgMCk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VRdWVyeUFyZ3MoYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAoIWlzUXVlcnlLZXkoYXJnMSkpIHtcbiAgICByZXR1cm4gYXJnMTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYXJnMiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXJnMywge1xuICAgICAgcXVlcnlLZXk6IGFyZzEsXG4gICAgICBxdWVyeUZuOiBhcmcyXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGFyZzIsIHtcbiAgICBxdWVyeUtleTogYXJnMVxuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU11dGF0aW9uQXJncyhhcmcxLCBhcmcyLCBhcmczKSB7XG4gIGlmIChpc1F1ZXJ5S2V5KGFyZzEpKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGFyZzMsIHtcbiAgICAgICAgbXV0YXRpb25LZXk6IGFyZzEsXG4gICAgICAgIG11dGF0aW9uRm46IGFyZzJcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXJnMiwge1xuICAgICAgbXV0YXRpb25LZXk6IGFyZzFcbiAgICB9KTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYXJnMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgYXJnMiwge1xuICAgICAgbXV0YXRpb25GbjogYXJnMVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBhcmcxKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUZpbHRlckFyZ3MoYXJnMSwgYXJnMiwgYXJnMykge1xuICByZXR1cm4gaXNRdWVyeUtleShhcmcxKSA/IFtfZXh0ZW5kcyh7fSwgYXJnMiwge1xuICAgIHF1ZXJ5S2V5OiBhcmcxXG4gIH0pLCBhcmczXSA6IFthcmcxIHx8IHt9LCBhcmcyXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU11dGF0aW9uRmlsdGVyQXJncyhhcmcxLCBhcmcyKSB7XG4gIHJldHVybiBpc1F1ZXJ5S2V5KGFyZzEpID8gX2V4dGVuZHMoe30sIGFyZzIsIHtcbiAgICBtdXRhdGlvbktleTogYXJnMVxuICB9KSA6IGFyZzE7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFwUXVlcnlTdGF0dXNGaWx0ZXIoYWN0aXZlLCBpbmFjdGl2ZSkge1xuICBpZiAoYWN0aXZlID09PSB0cnVlICYmIGluYWN0aXZlID09PSB0cnVlIHx8IGFjdGl2ZSA9PSBudWxsICYmIGluYWN0aXZlID09IG51bGwpIHtcbiAgICByZXR1cm4gJ2FsbCc7XG4gIH0gZWxzZSBpZiAoYWN0aXZlID09PSBmYWxzZSAmJiBpbmFjdGl2ZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gJ25vbmUnO1xuICB9IGVsc2Uge1xuICAgIC8vIEF0IHRoaXMgcG9pbnQsIGFjdGl2ZXxpbmFjdGl2ZSBjYW4gb25seSBiZSB0cnVlfGZhbHNlIG9yIGZhbHNlfHRydWVcbiAgICAvLyBzbywgd2hlbiBvbmx5IG9uZSB2YWx1ZSBpcyBwcm92aWRlZCwgdGhlIG1pc3Npbmcgb25lIGhhcyB0byBiZSB0aGUgbmVnYXRlZCB2YWx1ZVxuICAgIHZhciBpc0FjdGl2ZSA9IGFjdGl2ZSAhPSBudWxsID8gYWN0aXZlIDogIWluYWN0aXZlO1xuICAgIHJldHVybiBpc0FjdGl2ZSA/ICdhY3RpdmUnIDogJ2luYWN0aXZlJztcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoUXVlcnkoZmlsdGVycywgcXVlcnkpIHtcbiAgdmFyIGFjdGl2ZSA9IGZpbHRlcnMuYWN0aXZlLFxuICAgICAgZXhhY3QgPSBmaWx0ZXJzLmV4YWN0LFxuICAgICAgZmV0Y2hpbmcgPSBmaWx0ZXJzLmZldGNoaW5nLFxuICAgICAgaW5hY3RpdmUgPSBmaWx0ZXJzLmluYWN0aXZlLFxuICAgICAgcHJlZGljYXRlID0gZmlsdGVycy5wcmVkaWNhdGUsXG4gICAgICBxdWVyeUtleSA9IGZpbHRlcnMucXVlcnlLZXksXG4gICAgICBzdGFsZSA9IGZpbHRlcnMuc3RhbGU7XG5cbiAgaWYgKGlzUXVlcnlLZXkocXVlcnlLZXkpKSB7XG4gICAgaWYgKGV4YWN0KSB7XG4gICAgICBpZiAocXVlcnkucXVlcnlIYXNoICE9PSBoYXNoUXVlcnlLZXlCeU9wdGlvbnMocXVlcnlLZXksIHF1ZXJ5Lm9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFwYXJ0aWFsTWF0Y2hLZXkocXVlcnkucXVlcnlLZXksIHF1ZXJ5S2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBxdWVyeVN0YXR1c0ZpbHRlciA9IG1hcFF1ZXJ5U3RhdHVzRmlsdGVyKGFjdGl2ZSwgaW5hY3RpdmUpO1xuXG4gIGlmIChxdWVyeVN0YXR1c0ZpbHRlciA9PT0gJ25vbmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKHF1ZXJ5U3RhdHVzRmlsdGVyICE9PSAnYWxsJykge1xuICAgIHZhciBpc0FjdGl2ZSA9IHF1ZXJ5LmlzQWN0aXZlKCk7XG5cbiAgICBpZiAocXVlcnlTdGF0dXNGaWx0ZXIgPT09ICdhY3RpdmUnICYmICFpc0FjdGl2ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChxdWVyeVN0YXR1c0ZpbHRlciA9PT0gJ2luYWN0aXZlJyAmJiBpc0FjdGl2ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2Ygc3RhbGUgPT09ICdib29sZWFuJyAmJiBxdWVyeS5pc1N0YWxlKCkgIT09IHN0YWxlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBmZXRjaGluZyA9PT0gJ2Jvb2xlYW4nICYmIHF1ZXJ5LmlzRmV0Y2hpbmcoKSAhPT0gZmV0Y2hpbmcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocHJlZGljYXRlICYmICFwcmVkaWNhdGUocXVlcnkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hNdXRhdGlvbihmaWx0ZXJzLCBtdXRhdGlvbikge1xuICB2YXIgZXhhY3QgPSBmaWx0ZXJzLmV4YWN0LFxuICAgICAgZmV0Y2hpbmcgPSBmaWx0ZXJzLmZldGNoaW5nLFxuICAgICAgcHJlZGljYXRlID0gZmlsdGVycy5wcmVkaWNhdGUsXG4gICAgICBtdXRhdGlvbktleSA9IGZpbHRlcnMubXV0YXRpb25LZXk7XG5cbiAgaWYgKGlzUXVlcnlLZXkobXV0YXRpb25LZXkpKSB7XG4gICAgaWYgKCFtdXRhdGlvbi5vcHRpb25zLm11dGF0aW9uS2V5KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGV4YWN0KSB7XG4gICAgICBpZiAoaGFzaFF1ZXJ5S2V5KG11dGF0aW9uLm9wdGlvbnMubXV0YXRpb25LZXkpICE9PSBoYXNoUXVlcnlLZXkobXV0YXRpb25LZXkpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFwYXJ0aWFsTWF0Y2hLZXkobXV0YXRpb24ub3B0aW9ucy5tdXRhdGlvbktleSwgbXV0YXRpb25LZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBmZXRjaGluZyA9PT0gJ2Jvb2xlYW4nICYmIG11dGF0aW9uLnN0YXRlLnN0YXR1cyA9PT0gJ2xvYWRpbmcnICE9PSBmZXRjaGluZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChwcmVkaWNhdGUgJiYgIXByZWRpY2F0ZShtdXRhdGlvbikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNoUXVlcnlLZXlCeU9wdGlvbnMocXVlcnlLZXksIG9wdGlvbnMpIHtcbiAgdmFyIGhhc2hGbiA9IChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnF1ZXJ5S2V5SGFzaEZuKSB8fCBoYXNoUXVlcnlLZXk7XG4gIHJldHVybiBoYXNoRm4ocXVlcnlLZXkpO1xufVxuLyoqXG4gKiBEZWZhdWx0IHF1ZXJ5IGtleXMgaGFzaCBmdW5jdGlvbi5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzaFF1ZXJ5S2V5KHF1ZXJ5S2V5KSB7XG4gIHZhciBhc0FycmF5ID0gZW5zdXJlUXVlcnlLZXlBcnJheShxdWVyeUtleSk7XG4gIHJldHVybiBzdGFibGVWYWx1ZUhhc2goYXNBcnJheSk7XG59XG4vKipcbiAqIEhhc2hlcyB0aGUgdmFsdWUgaW50byBhIHN0YWJsZSBoYXNoLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFibGVWYWx1ZUhhc2godmFsdWUpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlLCBmdW5jdGlvbiAoXywgdmFsKSB7XG4gICAgcmV0dXJuIGlzUGxhaW5PYmplY3QodmFsKSA/IE9iamVjdC5rZXlzKHZhbCkuc29ydCgpLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsW2tleV07XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIHt9KSA6IHZhbDtcbiAgfSk7XG59XG4vKipcbiAqIENoZWNrcyBpZiBrZXkgYGJgIHBhcnRpYWxseSBtYXRjaGVzIHdpdGgga2V5IGBhYC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcGFydGlhbE1hdGNoS2V5KGEsIGIpIHtcbiAgcmV0dXJuIHBhcnRpYWxEZWVwRXF1YWwoZW5zdXJlUXVlcnlLZXlBcnJheShhKSwgZW5zdXJlUXVlcnlLZXlBcnJheShiKSk7XG59XG4vKipcbiAqIENoZWNrcyBpZiBgYmAgcGFydGlhbGx5IG1hdGNoZXMgd2l0aCBgYWAuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnRpYWxEZWVwRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBhICE9PSB0eXBlb2YgYikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnICYmIHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiAhT2JqZWN0LmtleXMoYikuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gIXBhcnRpYWxEZWVwRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYGFgIGlmIGBiYCBpcyBkZWVwbHkgZXF1YWwuXG4gKiBJZiBub3QsIGl0IHdpbGwgcmVwbGFjZSBhbnkgZGVlcGx5IGVxdWFsIGNoaWxkcmVuIG9mIGBiYCB3aXRoIHRob3NlIG9mIGBhYC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgZm9yIHN0cnVjdHVyYWwgc2hhcmluZyBiZXR3ZWVuIEpTT04gdmFsdWVzIGZvciBleGFtcGxlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlRXF1YWxEZWVwKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIHZhciBhcnJheSA9IEFycmF5LmlzQXJyYXkoYSkgJiYgQXJyYXkuaXNBcnJheShiKTtcblxuICBpZiAoYXJyYXkgfHwgaXNQbGFpbk9iamVjdChhKSAmJiBpc1BsYWluT2JqZWN0KGIpKSB7XG4gICAgdmFyIGFTaXplID0gYXJyYXkgPyBhLmxlbmd0aCA6IE9iamVjdC5rZXlzKGEpLmxlbmd0aDtcbiAgICB2YXIgYkl0ZW1zID0gYXJyYXkgPyBiIDogT2JqZWN0LmtleXMoYik7XG4gICAgdmFyIGJTaXplID0gYkl0ZW1zLmxlbmd0aDtcbiAgICB2YXIgY29weSA9IGFycmF5ID8gW10gOiB7fTtcbiAgICB2YXIgZXF1YWxJdGVtcyA9IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJTaXplOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBhcnJheSA/IGkgOiBiSXRlbXNbaV07XG4gICAgICBjb3B5W2tleV0gPSByZXBsYWNlRXF1YWxEZWVwKGFba2V5XSwgYltrZXldKTtcblxuICAgICAgaWYgKGNvcHlba2V5XSA9PT0gYVtrZXldKSB7XG4gICAgICAgIGVxdWFsSXRlbXMrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYVNpemUgPT09IGJTaXplICYmIGVxdWFsSXRlbXMgPT09IGFTaXplID8gYSA6IGNvcHk7XG4gIH1cblxuICByZXR1cm4gYjtcbn1cbi8qKlxuICogU2hhbGxvdyBjb21wYXJlIG9iamVjdHMuIE9ubHkgd29ya3Mgd2l0aCBvYmplY3RzIHRoYXQgYWx3YXlzIGhhdmUgdGhlIHNhbWUgcHJvcGVydGllcy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd0VxdWFsT2JqZWN0cyhhLCBiKSB7XG4gIGlmIChhICYmICFiIHx8IGIgJiYgIWEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gYSkge1xuICAgIGlmIChhW2tleV0gIT09IGJba2V5XSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufSAvLyBDb3BpZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQvaXMtcGxhaW4tb2JqZWN0XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KG8pIHtcbiAgaWYgKCFoYXNPYmplY3RQcm90b3R5cGUobykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSWYgaGFzIG1vZGlmaWVkIGNvbnN0cnVjdG9yXG5cblxuICB2YXIgY3RvciA9IG8uY29uc3RydWN0b3I7XG5cbiAgaWYgKHR5cGVvZiBjdG9yID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIElmIGhhcyBtb2RpZmllZCBwcm90b3R5cGVcblxuXG4gIHZhciBwcm90ID0gY3Rvci5wcm90b3R5cGU7XG5cbiAgaWYgKCFoYXNPYmplY3RQcm90b3R5cGUocHJvdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSWYgY29uc3RydWN0b3IgZG9lcyBub3QgaGF2ZSBhbiBPYmplY3Qtc3BlY2lmaWMgbWV0aG9kXG5cblxuICBpZiAoIXByb3QuaGFzT3duUHJvcGVydHkoJ2lzUHJvdG90eXBlT2YnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBNb3N0IGxpa2VseSBhIHBsYWluIE9iamVjdFxuXG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGhhc09iamVjdFByb3RvdHlwZShvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNRdWVyeUtleSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEVycm9yO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNsZWVwKHRpbWVvdXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgc2V0VGltZW91dChyZXNvbHZlLCB0aW1lb3V0KTtcbiAgfSk7XG59XG4vKipcbiAqIFNjaGVkdWxlcyBhIG1pY3JvdGFzay5cbiAqIFRoaXMgY2FuIGJlIHVzZWZ1bCB0byBzY2hlZHVsZSBzdGF0ZSB1cGRhdGVzIGFmdGVyIHJlbmRlcmluZy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVNaWNyb3Rhc2soY2FsbGJhY2spIHtcbiAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihjYWxsYmFjaykuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEFib3J0Q29udHJvbGxlcigpIHtcbiAgaWYgKHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICB9XG59IiwiaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5leHBvcnQgdmFyIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzID0gUmVhY3RET00udW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM7IiwiaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgfSBmcm9tICcuL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xubm90aWZ5TWFuYWdlci5zZXRCYXRjaE5vdGlmeUZ1bmN0aW9uKHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzKTsiLCJleHBvcnQgdmFyIGxvZ2dlciA9IGNvbnNvbGU7IiwiaW1wb3J0IHsgc2V0TG9nZ2VyIH0gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5zZXRMb2dnZXIobG9nZ2VyKTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xudmFyIGRlZmF1bHRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcbnZhciBRdWVyeUNsaWVudFNoYXJpbmdDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoZmFsc2UpOyAvLyBpZiBjb250ZXh0U2hhcmluZyBpcyBvbiwgd2Ugc2hhcmUgdGhlIGZpcnN0IGFuZCBhdCBsZWFzdCBvbmVcbi8vIGluc3RhbmNlIG9mIHRoZSBjb250ZXh0IGFjcm9zcyB0aGUgd2luZG93XG4vLyB0byBlbnN1cmUgdGhhdCBpZiBSZWFjdCBRdWVyeSBpcyB1c2VkIGFjcm9zc1xuLy8gZGlmZmVyZW50IGJ1bmRsZXMgb3IgbWljcm9mcm9udGVuZHMgdGhleSB3aWxsXG4vLyBhbGwgdXNlIHRoZSBzYW1lICoqaW5zdGFuY2UqKiBvZiBjb250ZXh0LCByZWdhcmRsZXNzXG4vLyBvZiBtb2R1bGUgc2NvcGluZy5cblxuZnVuY3Rpb24gZ2V0UXVlcnlDbGllbnRDb250ZXh0KGNvbnRleHRTaGFyaW5nKSB7XG4gIGlmIChjb250ZXh0U2hhcmluZyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICghd2luZG93LlJlYWN0UXVlcnlDbGllbnRDb250ZXh0KSB7XG4gICAgICB3aW5kb3cuUmVhY3RRdWVyeUNsaWVudENvbnRleHQgPSBkZWZhdWx0Q29udGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gd2luZG93LlJlYWN0UXVlcnlDbGllbnRDb250ZXh0O1xuICB9XG5cbiAgcmV0dXJuIGRlZmF1bHRDb250ZXh0O1xufVxuXG5leHBvcnQgdmFyIHVzZVF1ZXJ5Q2xpZW50ID0gZnVuY3Rpb24gdXNlUXVlcnlDbGllbnQoKSB7XG4gIHZhciBxdWVyeUNsaWVudCA9IFJlYWN0LnVzZUNvbnRleHQoZ2V0UXVlcnlDbGllbnRDb250ZXh0KFJlYWN0LnVzZUNvbnRleHQoUXVlcnlDbGllbnRTaGFyaW5nQ29udGV4dCkpKTtcblxuICBpZiAoIXF1ZXJ5Q2xpZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBRdWVyeUNsaWVudCBzZXQsIHVzZSBRdWVyeUNsaWVudFByb3ZpZGVyIHRvIHNldCBvbmUnKTtcbiAgfVxuXG4gIHJldHVybiBxdWVyeUNsaWVudDtcbn07XG5leHBvcnQgdmFyIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgPSBmdW5jdGlvbiBRdWVyeUNsaWVudFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIGNsaWVudCA9IF9yZWYuY2xpZW50LFxuICAgICAgX3JlZiRjb250ZXh0U2hhcmluZyA9IF9yZWYuY29udGV4dFNoYXJpbmcsXG4gICAgICBjb250ZXh0U2hhcmluZyA9IF9yZWYkY29udGV4dFNoYXJpbmcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRjb250ZXh0U2hhcmluZyxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBjbGllbnQubW91bnQoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xpZW50LnVubW91bnQoKTtcbiAgICB9O1xuICB9LCBbY2xpZW50XSk7XG4gIHZhciBDb250ZXh0ID0gZ2V0UXVlcnlDbGllbnRDb250ZXh0KGNvbnRleHRTaGFyaW5nKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFF1ZXJ5Q2xpZW50U2hhcmluZ0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFNoYXJpbmdcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjbGllbnRcbiAgfSwgY2hpbGRyZW4pKTtcbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCB7IGlzU2VydmVyLCBpc1ZhbGlkVGltZW91dCwgbm9vcCwgcmVwbGFjZUVxdWFsRGVlcCwgc2hhbGxvd0VxdWFsT2JqZWN0cywgdGltZVVudGlsU3RhbGUgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICcuL25vdGlmeU1hbmFnZXInO1xuaW1wb3J0IHsgZm9jdXNNYW5hZ2VyIH0gZnJvbSAnLi9mb2N1c01hbmFnZXInO1xuaW1wb3J0IHsgU3Vic2NyaWJhYmxlIH0gZnJvbSAnLi9zdWJzY3JpYmFibGUnO1xuaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgaXNDYW5jZWxsZWRFcnJvciB9IGZyb20gJy4vcmV0cnllcic7XG5leHBvcnQgdmFyIFF1ZXJ5T2JzZXJ2ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9TdWJzY3JpYmFibGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoUXVlcnlPYnNlcnZlciwgX1N1YnNjcmliYWJsZSk7XG5cbiAgZnVuY3Rpb24gUXVlcnlPYnNlcnZlcihjbGllbnQsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdWJzY3JpYmFibGUuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICBfdGhpcy50cmFja2VkUHJvcHMgPSBbXTtcbiAgICBfdGhpcy5zZWxlY3RFcnJvciA9IG51bGw7XG5cbiAgICBfdGhpcy5iaW5kTWV0aG9kcygpO1xuXG4gICAgX3RoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBRdWVyeU9ic2VydmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYmluZE1ldGhvZHMgPSBmdW5jdGlvbiBiaW5kTWV0aG9kcygpIHtcbiAgICB0aGlzLnJlbW92ZSA9IHRoaXMucmVtb3ZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZWZldGNoID0gdGhpcy5yZWZldGNoLmJpbmQodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLm9uU3Vic2NyaWJlID0gZnVuY3Rpb24gb25TdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMubGlzdGVuZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy5jdXJyZW50UXVlcnkuYWRkT2JzZXJ2ZXIodGhpcyk7XG5cbiAgICAgIGlmIChzaG91bGRGZXRjaE9uTW91bnQodGhpcy5jdXJyZW50UXVlcnksIHRoaXMub3B0aW9ucykpIHtcbiAgICAgICAgdGhpcy5leGVjdXRlRmV0Y2goKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGRhdGVUaW1lcnMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uVW5zdWJzY3JpYmUgPSBmdW5jdGlvbiBvblVuc3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy5saXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNob3VsZEZldGNoT25SZWNvbm5lY3QgPSBmdW5jdGlvbiBzaG91bGRGZXRjaE9uUmVjb25uZWN0KCkge1xuICAgIHJldHVybiBzaG91bGRGZXRjaE9uKHRoaXMuY3VycmVudFF1ZXJ5LCB0aGlzLm9wdGlvbnMsIHRoaXMub3B0aW9ucy5yZWZldGNoT25SZWNvbm5lY3QpO1xuICB9O1xuXG4gIF9wcm90by5zaG91bGRGZXRjaE9uV2luZG93Rm9jdXMgPSBmdW5jdGlvbiBzaG91bGRGZXRjaE9uV2luZG93Rm9jdXMoKSB7XG4gICAgcmV0dXJuIHNob3VsZEZldGNoT24odGhpcy5jdXJyZW50UXVlcnksIHRoaXMub3B0aW9ucywgdGhpcy5vcHRpb25zLnJlZmV0Y2hPbldpbmRvd0ZvY3VzKTtcbiAgfTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICB0aGlzLmNsZWFyVGltZXJzKCk7XG4gICAgdGhpcy5jdXJyZW50UXVlcnkucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE9wdGlvbnMgPSBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMsIG5vdGlmeU9wdGlvbnMpIHtcbiAgICB2YXIgcHJldk9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgdmFyIHByZXZRdWVyeSA9IHRoaXMuY3VycmVudFF1ZXJ5O1xuICAgIHRoaXMub3B0aW9ucyA9IHRoaXMuY2xpZW50LmRlZmF1bHRRdWVyeU9ic2VydmVyT3B0aW9ucyhvcHRpb25zKTtcblxuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmVuYWJsZWQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzLm9wdGlvbnMuZW5hYmxlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGVuYWJsZWQgdG8gYmUgYSBib29sZWFuJyk7XG4gICAgfSAvLyBLZWVwIHByZXZpb3VzIHF1ZXJ5IGtleSBpZiB0aGUgdXNlciBkb2VzIG5vdCBzdXBwbHkgb25lXG5cblxuICAgIGlmICghdGhpcy5vcHRpb25zLnF1ZXJ5S2V5KSB7XG4gICAgICB0aGlzLm9wdGlvbnMucXVlcnlLZXkgPSBwcmV2T3B0aW9ucy5xdWVyeUtleTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVF1ZXJ5KCk7XG4gICAgdmFyIG1vdW50ZWQgPSB0aGlzLmhhc0xpc3RlbmVycygpOyAvLyBGZXRjaCBpZiB0aGVyZSBhcmUgc3Vic2NyaWJlcnNcblxuICAgIGlmIChtb3VudGVkICYmIHNob3VsZEZldGNoT3B0aW9uYWxseSh0aGlzLmN1cnJlbnRRdWVyeSwgcHJldlF1ZXJ5LCB0aGlzLm9wdGlvbnMsIHByZXZPcHRpb25zKSkge1xuICAgICAgdGhpcy5leGVjdXRlRmV0Y2goKTtcbiAgICB9IC8vIFVwZGF0ZSByZXN1bHRcblxuXG4gICAgdGhpcy51cGRhdGVSZXN1bHQobm90aWZ5T3B0aW9ucyk7IC8vIFVwZGF0ZSBzdGFsZSBpbnRlcnZhbCBpZiBuZWVkZWRcblxuICAgIGlmIChtb3VudGVkICYmICh0aGlzLmN1cnJlbnRRdWVyeSAhPT0gcHJldlF1ZXJ5IHx8IHRoaXMub3B0aW9ucy5lbmFibGVkICE9PSBwcmV2T3B0aW9ucy5lbmFibGVkIHx8IHRoaXMub3B0aW9ucy5zdGFsZVRpbWUgIT09IHByZXZPcHRpb25zLnN0YWxlVGltZSkpIHtcbiAgICAgIHRoaXMudXBkYXRlU3RhbGVUaW1lb3V0KCk7XG4gICAgfVxuXG4gICAgdmFyIG5leHRSZWZldGNoSW50ZXJ2YWwgPSB0aGlzLmNvbXB1dGVSZWZldGNoSW50ZXJ2YWwoKTsgLy8gVXBkYXRlIHJlZmV0Y2ggaW50ZXJ2YWwgaWYgbmVlZGVkXG5cbiAgICBpZiAobW91bnRlZCAmJiAodGhpcy5jdXJyZW50UXVlcnkgIT09IHByZXZRdWVyeSB8fCB0aGlzLm9wdGlvbnMuZW5hYmxlZCAhPT0gcHJldk9wdGlvbnMuZW5hYmxlZCB8fCBuZXh0UmVmZXRjaEludGVydmFsICE9PSB0aGlzLmN1cnJlbnRSZWZldGNoSW50ZXJ2YWwpKSB7XG4gICAgICB0aGlzLnVwZGF0ZVJlZmV0Y2hJbnRlcnZhbChuZXh0UmVmZXRjaEludGVydmFsKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldE9wdGltaXN0aWNSZXN1bHQgPSBmdW5jdGlvbiBnZXRPcHRpbWlzdGljUmVzdWx0KG9wdGlvbnMpIHtcbiAgICB2YXIgZGVmYXVsdGVkT3B0aW9ucyA9IHRoaXMuY2xpZW50LmRlZmF1bHRRdWVyeU9ic2VydmVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmNsaWVudC5nZXRRdWVyeUNhY2hlKCkuYnVpbGQodGhpcy5jbGllbnQsIGRlZmF1bHRlZE9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZVJlc3VsdChxdWVyeSwgZGVmYXVsdGVkT3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLmdldEN1cnJlbnRSZXN1bHQgPSBmdW5jdGlvbiBnZXRDdXJyZW50UmVzdWx0KCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRSZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLnRyYWNrUmVzdWx0ID0gZnVuY3Rpb24gdHJhY2tSZXN1bHQocmVzdWx0LCBkZWZhdWx0ZWRPcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgdHJhY2tlZFJlc3VsdCA9IHt9O1xuXG4gICAgdmFyIHRyYWNrUHJvcCA9IGZ1bmN0aW9uIHRyYWNrUHJvcChrZXkpIHtcbiAgICAgIGlmICghX3RoaXMyLnRyYWNrZWRQcm9wcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIF90aGlzMi50cmFja2VkUHJvcHMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRyYWNrZWRSZXN1bHQsIGtleSwge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICB0cmFja1Byb3Aoa2V5KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0W2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaWYgKGRlZmF1bHRlZE9wdGlvbnMudXNlRXJyb3JCb3VuZGFyeSB8fCBkZWZhdWx0ZWRPcHRpb25zLnN1c3BlbnNlKSB7XG4gICAgICB0cmFja1Byb3AoJ2Vycm9yJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYWNrZWRSZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLmdldE5leHRSZXN1bHQgPSBmdW5jdGlvbiBnZXROZXh0UmVzdWx0KG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgdW5zdWJzY3JpYmUgPSBfdGhpczMuc3Vic2NyaWJlKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgaWYgKCFyZXN1bHQuaXNGZXRjaGluZykge1xuICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG5cbiAgICAgICAgICBpZiAocmVzdWx0LmlzRXJyb3IgJiYgKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMudGhyb3dPbkVycm9yKSkge1xuICAgICAgICAgICAgcmVqZWN0KHJlc3VsdC5lcnJvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5nZXRDdXJyZW50UXVlcnkgPSBmdW5jdGlvbiBnZXRDdXJyZW50UXVlcnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudFF1ZXJ5O1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgdGhpcy5jbGllbnQuZ2V0UXVlcnlDYWNoZSgpLnJlbW92ZSh0aGlzLmN1cnJlbnRRdWVyeSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlZmV0Y2ggPSBmdW5jdGlvbiByZWZldGNoKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5mZXRjaChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgbWV0YToge1xuICAgICAgICByZWZldGNoUGFnZTogb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5yZWZldGNoUGFnZVxuICAgICAgfVxuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG8uZmV0Y2hPcHRpbWlzdGljID0gZnVuY3Rpb24gZmV0Y2hPcHRpbWlzdGljKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBkZWZhdWx0ZWRPcHRpb25zID0gdGhpcy5jbGllbnQuZGVmYXVsdFF1ZXJ5T2JzZXJ2ZXJPcHRpb25zKG9wdGlvbnMpO1xuICAgIHZhciBxdWVyeSA9IHRoaXMuY2xpZW50LmdldFF1ZXJ5Q2FjaGUoKS5idWlsZCh0aGlzLmNsaWVudCwgZGVmYXVsdGVkT3B0aW9ucyk7XG4gICAgcmV0dXJuIHF1ZXJ5LmZldGNoKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXM0LmNyZWF0ZVJlc3VsdChxdWVyeSwgZGVmYXVsdGVkT3B0aW9ucyk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmZldGNoID0gZnVuY3Rpb24gZmV0Y2goZmV0Y2hPcHRpb25zKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICByZXR1cm4gdGhpcy5leGVjdXRlRmV0Y2goZmV0Y2hPcHRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzNS51cGRhdGVSZXN1bHQoKTtcblxuICAgICAgcmV0dXJuIF90aGlzNS5jdXJyZW50UmVzdWx0O1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5leGVjdXRlRmV0Y2ggPSBmdW5jdGlvbiBleGVjdXRlRmV0Y2goZmV0Y2hPcHRpb25zKSB7XG4gICAgLy8gTWFrZSBzdXJlIHdlIHJlZmVyZW5jZSB0aGUgbGF0ZXN0IHF1ZXJ5IGFzIHRoZSBjdXJyZW50IG9uZSBtaWdodCBoYXZlIGJlZW4gcmVtb3ZlZFxuICAgIHRoaXMudXBkYXRlUXVlcnkoKTsgLy8gRmV0Y2hcblxuICAgIHZhciBwcm9taXNlID0gdGhpcy5jdXJyZW50UXVlcnkuZmV0Y2godGhpcy5vcHRpb25zLCBmZXRjaE9wdGlvbnMpO1xuXG4gICAgaWYgKCEoZmV0Y2hPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBmZXRjaE9wdGlvbnMudGhyb3dPbkVycm9yKSkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UuY2F0Y2gobm9vcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YWxlVGltZW91dCA9IGZ1bmN0aW9uIHVwZGF0ZVN0YWxlVGltZW91dCgpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHRoaXMuY2xlYXJTdGFsZVRpbWVvdXQoKTtcblxuICAgIGlmIChpc1NlcnZlciB8fCB0aGlzLmN1cnJlbnRSZXN1bHQuaXNTdGFsZSB8fCAhaXNWYWxpZFRpbWVvdXQodGhpcy5vcHRpb25zLnN0YWxlVGltZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGltZSA9IHRpbWVVbnRpbFN0YWxlKHRoaXMuY3VycmVudFJlc3VsdC5kYXRhVXBkYXRlZEF0LCB0aGlzLm9wdGlvbnMuc3RhbGVUaW1lKTsgLy8gVGhlIHRpbWVvdXQgaXMgc29tZXRpbWVzIHRyaWdnZXJlZCAxIG1zIGJlZm9yZSB0aGUgc3RhbGUgdGltZSBleHBpcmF0aW9uLlxuICAgIC8vIFRvIG1pdGlnYXRlIHRoaXMgaXNzdWUgd2UgYWx3YXlzIGFkZCAxIG1zIHRvIHRoZSB0aW1lb3V0LlxuXG4gICAgdmFyIHRpbWVvdXQgPSB0aW1lICsgMTtcbiAgICB0aGlzLnN0YWxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIV90aGlzNi5jdXJyZW50UmVzdWx0LmlzU3RhbGUpIHtcbiAgICAgICAgX3RoaXM2LnVwZGF0ZVJlc3VsdCgpO1xuICAgICAgfVxuICAgIH0sIHRpbWVvdXQpO1xuICB9O1xuXG4gIF9wcm90by5jb21wdXRlUmVmZXRjaEludGVydmFsID0gZnVuY3Rpb24gY29tcHV0ZVJlZmV0Y2hJbnRlcnZhbCgpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyRyZWZldGNoO1xuXG4gICAgcmV0dXJuIHR5cGVvZiB0aGlzLm9wdGlvbnMucmVmZXRjaEludGVydmFsID09PSAnZnVuY3Rpb24nID8gdGhpcy5vcHRpb25zLnJlZmV0Y2hJbnRlcnZhbCh0aGlzLmN1cnJlbnRSZXN1bHQuZGF0YSwgdGhpcy5jdXJyZW50UXVlcnkpIDogKF90aGlzJG9wdGlvbnMkcmVmZXRjaCA9IHRoaXMub3B0aW9ucy5yZWZldGNoSW50ZXJ2YWwpICE9IG51bGwgPyBfdGhpcyRvcHRpb25zJHJlZmV0Y2ggOiBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlUmVmZXRjaEludGVydmFsID0gZnVuY3Rpb24gdXBkYXRlUmVmZXRjaEludGVydmFsKG5leHRJbnRlcnZhbCkge1xuICAgIHZhciBfdGhpczcgPSB0aGlzO1xuXG4gICAgdGhpcy5jbGVhclJlZmV0Y2hJbnRlcnZhbCgpO1xuICAgIHRoaXMuY3VycmVudFJlZmV0Y2hJbnRlcnZhbCA9IG5leHRJbnRlcnZhbDtcblxuICAgIGlmIChpc1NlcnZlciB8fCB0aGlzLm9wdGlvbnMuZW5hYmxlZCA9PT0gZmFsc2UgfHwgIWlzVmFsaWRUaW1lb3V0KHRoaXMuY3VycmVudFJlZmV0Y2hJbnRlcnZhbCkgfHwgdGhpcy5jdXJyZW50UmVmZXRjaEludGVydmFsID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5yZWZldGNoSW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChfdGhpczcub3B0aW9ucy5yZWZldGNoSW50ZXJ2YWxJbkJhY2tncm91bmQgfHwgZm9jdXNNYW5hZ2VyLmlzRm9jdXNlZCgpKSB7XG4gICAgICAgIF90aGlzNy5leGVjdXRlRmV0Y2goKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLmN1cnJlbnRSZWZldGNoSW50ZXJ2YWwpO1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVUaW1lcnMgPSBmdW5jdGlvbiB1cGRhdGVUaW1lcnMoKSB7XG4gICAgdGhpcy51cGRhdGVTdGFsZVRpbWVvdXQoKTtcbiAgICB0aGlzLnVwZGF0ZVJlZmV0Y2hJbnRlcnZhbCh0aGlzLmNvbXB1dGVSZWZldGNoSW50ZXJ2YWwoKSk7XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyVGltZXJzID0gZnVuY3Rpb24gY2xlYXJUaW1lcnMoKSB7XG4gICAgdGhpcy5jbGVhclN0YWxlVGltZW91dCgpO1xuICAgIHRoaXMuY2xlYXJSZWZldGNoSW50ZXJ2YWwoKTtcbiAgfTtcblxuICBfcHJvdG8uY2xlYXJTdGFsZVRpbWVvdXQgPSBmdW5jdGlvbiBjbGVhclN0YWxlVGltZW91dCgpIHtcbiAgICBpZiAodGhpcy5zdGFsZVRpbWVvdXRJZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc3RhbGVUaW1lb3V0SWQpO1xuICAgICAgdGhpcy5zdGFsZVRpbWVvdXRJZCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyUmVmZXRjaEludGVydmFsID0gZnVuY3Rpb24gY2xlYXJSZWZldGNoSW50ZXJ2YWwoKSB7XG4gICAgaWYgKHRoaXMucmVmZXRjaEludGVydmFsSWQpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWZldGNoSW50ZXJ2YWxJZCk7XG4gICAgICB0aGlzLnJlZmV0Y2hJbnRlcnZhbElkID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY3JlYXRlUmVzdWx0ID0gZnVuY3Rpb24gY3JlYXRlUmVzdWx0KHF1ZXJ5LCBvcHRpb25zKSB7XG4gICAgdmFyIHByZXZRdWVyeSA9IHRoaXMuY3VycmVudFF1ZXJ5O1xuICAgIHZhciBwcmV2T3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICB2YXIgcHJldlJlc3VsdCA9IHRoaXMuY3VycmVudFJlc3VsdDtcbiAgICB2YXIgcHJldlJlc3VsdFN0YXRlID0gdGhpcy5jdXJyZW50UmVzdWx0U3RhdGU7XG4gICAgdmFyIHByZXZSZXN1bHRPcHRpb25zID0gdGhpcy5jdXJyZW50UmVzdWx0T3B0aW9ucztcbiAgICB2YXIgcXVlcnlDaGFuZ2UgPSBxdWVyeSAhPT0gcHJldlF1ZXJ5O1xuICAgIHZhciBxdWVyeUluaXRpYWxTdGF0ZSA9IHF1ZXJ5Q2hhbmdlID8gcXVlcnkuc3RhdGUgOiB0aGlzLmN1cnJlbnRRdWVyeUluaXRpYWxTdGF0ZTtcbiAgICB2YXIgcHJldlF1ZXJ5UmVzdWx0ID0gcXVlcnlDaGFuZ2UgPyB0aGlzLmN1cnJlbnRSZXN1bHQgOiB0aGlzLnByZXZpb3VzUXVlcnlSZXN1bHQ7XG4gICAgdmFyIHN0YXRlID0gcXVlcnkuc3RhdGU7XG4gICAgdmFyIGRhdGFVcGRhdGVkQXQgPSBzdGF0ZS5kYXRhVXBkYXRlZEF0LFxuICAgICAgICBlcnJvciA9IHN0YXRlLmVycm9yLFxuICAgICAgICBlcnJvclVwZGF0ZWRBdCA9IHN0YXRlLmVycm9yVXBkYXRlZEF0LFxuICAgICAgICBpc0ZldGNoaW5nID0gc3RhdGUuaXNGZXRjaGluZyxcbiAgICAgICAgc3RhdHVzID0gc3RhdGUuc3RhdHVzO1xuICAgIHZhciBpc1ByZXZpb3VzRGF0YSA9IGZhbHNlO1xuICAgIHZhciBpc1BsYWNlaG9sZGVyRGF0YSA9IGZhbHNlO1xuICAgIHZhciBkYXRhOyAvLyBPcHRpbWlzdGljYWxseSBzZXQgcmVzdWx0IGluIGZldGNoaW5nIHN0YXRlIGlmIG5lZWRlZFxuXG4gICAgaWYgKG9wdGlvbnMub3B0aW1pc3RpY1Jlc3VsdHMpIHtcbiAgICAgIHZhciBtb3VudGVkID0gdGhpcy5oYXNMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBmZXRjaE9uTW91bnQgPSAhbW91bnRlZCAmJiBzaG91bGRGZXRjaE9uTW91bnQocXVlcnksIG9wdGlvbnMpO1xuICAgICAgdmFyIGZldGNoT3B0aW9uYWxseSA9IG1vdW50ZWQgJiYgc2hvdWxkRmV0Y2hPcHRpb25hbGx5KHF1ZXJ5LCBwcmV2UXVlcnksIG9wdGlvbnMsIHByZXZPcHRpb25zKTtcblxuICAgICAgaWYgKGZldGNoT25Nb3VudCB8fCBmZXRjaE9wdGlvbmFsbHkpIHtcbiAgICAgICAgaXNGZXRjaGluZyA9IHRydWU7XG5cbiAgICAgICAgaWYgKCFkYXRhVXBkYXRlZEF0KSB7XG4gICAgICAgICAgc3RhdHVzID0gJ2xvYWRpbmcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBLZWVwIHByZXZpb3VzIGRhdGEgaWYgbmVlZGVkXG5cblxuICAgIGlmIChvcHRpb25zLmtlZXBQcmV2aW91c0RhdGEgJiYgIXN0YXRlLmRhdGFVcGRhdGVDb3VudCAmJiAocHJldlF1ZXJ5UmVzdWx0ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UXVlcnlSZXN1bHQuaXNTdWNjZXNzKSAmJiBzdGF0dXMgIT09ICdlcnJvcicpIHtcbiAgICAgIGRhdGEgPSBwcmV2UXVlcnlSZXN1bHQuZGF0YTtcbiAgICAgIGRhdGFVcGRhdGVkQXQgPSBwcmV2UXVlcnlSZXN1bHQuZGF0YVVwZGF0ZWRBdDtcbiAgICAgIHN0YXR1cyA9IHByZXZRdWVyeVJlc3VsdC5zdGF0dXM7XG4gICAgICBpc1ByZXZpb3VzRGF0YSA9IHRydWU7XG4gICAgfSAvLyBTZWxlY3QgZGF0YSBpZiBuZWVkZWRcbiAgICBlbHNlIGlmIChvcHRpb25zLnNlbGVjdCAmJiB0eXBlb2Ygc3RhdGUuZGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gTWVtb2l6ZSBzZWxlY3QgcmVzdWx0XG4gICAgICAgIGlmIChwcmV2UmVzdWx0ICYmIHN0YXRlLmRhdGEgPT09IChwcmV2UmVzdWx0U3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHByZXZSZXN1bHRTdGF0ZS5kYXRhKSAmJiBvcHRpb25zLnNlbGVjdCA9PT0gdGhpcy5zZWxlY3RGbikge1xuICAgICAgICAgIGRhdGEgPSB0aGlzLnNlbGVjdFJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RGbiA9IG9wdGlvbnMuc2VsZWN0O1xuICAgICAgICAgICAgZGF0YSA9IG9wdGlvbnMuc2VsZWN0KHN0YXRlLmRhdGEpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdHJ1Y3R1cmFsU2hhcmluZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgZGF0YSA9IHJlcGxhY2VFcXVhbERlZXAocHJldlJlc3VsdCA9PSBudWxsID8gdm9pZCAwIDogcHJldlJlc3VsdC5kYXRhLCBkYXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zZWxlY3RSZXN1bHQgPSBkYXRhO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RFcnJvciA9IG51bGw7XG4gICAgICAgICAgfSBjYXRjaCAoc2VsZWN0RXJyb3IpIHtcbiAgICAgICAgICAgIGdldExvZ2dlcigpLmVycm9yKHNlbGVjdEVycm9yKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0RXJyb3IgPSBzZWxlY3RFcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gLy8gVXNlIHF1ZXJ5IGRhdGFcbiAgICAgIGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSBzdGF0ZS5kYXRhO1xuICAgICAgICB9IC8vIFNob3cgcGxhY2Vob2xkZXIgZGF0YSBpZiBuZWVkZWRcblxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnBsYWNlaG9sZGVyRGF0YSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnICYmIChzdGF0dXMgPT09ICdsb2FkaW5nJyB8fCBzdGF0dXMgPT09ICdpZGxlJykpIHtcbiAgICAgIHZhciBwbGFjZWhvbGRlckRhdGE7IC8vIE1lbW9pemUgcGxhY2Vob2xkZXIgZGF0YVxuXG4gICAgICBpZiAoKHByZXZSZXN1bHQgPT0gbnVsbCA/IHZvaWQgMCA6IHByZXZSZXN1bHQuaXNQbGFjZWhvbGRlckRhdGEpICYmIG9wdGlvbnMucGxhY2Vob2xkZXJEYXRhID09PSAocHJldlJlc3VsdE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IHByZXZSZXN1bHRPcHRpb25zLnBsYWNlaG9sZGVyRGF0YSkpIHtcbiAgICAgICAgcGxhY2Vob2xkZXJEYXRhID0gcHJldlJlc3VsdC5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGxhY2Vob2xkZXJEYXRhID0gdHlwZW9mIG9wdGlvbnMucGxhY2Vob2xkZXJEYXRhID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5wbGFjZWhvbGRlckRhdGEoKSA6IG9wdGlvbnMucGxhY2Vob2xkZXJEYXRhO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNlbGVjdCAmJiB0eXBlb2YgcGxhY2Vob2xkZXJEYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwbGFjZWhvbGRlckRhdGEgPSBvcHRpb25zLnNlbGVjdChwbGFjZWhvbGRlckRhdGEpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zdHJ1Y3R1cmFsU2hhcmluZyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXJEYXRhID0gcmVwbGFjZUVxdWFsRGVlcChwcmV2UmVzdWx0ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UmVzdWx0LmRhdGEsIHBsYWNlaG9sZGVyRGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0RXJyb3IgPSBudWxsO1xuICAgICAgICAgIH0gY2F0Y2ggKHNlbGVjdEVycm9yKSB7XG4gICAgICAgICAgICBnZXRMb2dnZXIoKS5lcnJvcihzZWxlY3RFcnJvcik7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdEVycm9yID0gc2VsZWN0RXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgcGxhY2Vob2xkZXJEYXRhICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzdGF0dXMgPSAnc3VjY2Vzcyc7XG4gICAgICAgIGRhdGEgPSBwbGFjZWhvbGRlckRhdGE7XG4gICAgICAgIGlzUGxhY2Vob2xkZXJEYXRhID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5zZWxlY3RFcnJvcikge1xuICAgICAgZXJyb3IgPSB0aGlzLnNlbGVjdEVycm9yO1xuICAgICAgZGF0YSA9IHRoaXMuc2VsZWN0UmVzdWx0O1xuICAgICAgZXJyb3JVcGRhdGVkQXQgPSBEYXRlLm5vdygpO1xuICAgICAgc3RhdHVzID0gJ2Vycm9yJztcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgc3RhdHVzOiBzdGF0dXMsXG4gICAgICBpc0xvYWRpbmc6IHN0YXR1cyA9PT0gJ2xvYWRpbmcnLFxuICAgICAgaXNTdWNjZXNzOiBzdGF0dXMgPT09ICdzdWNjZXNzJyxcbiAgICAgIGlzRXJyb3I6IHN0YXR1cyA9PT0gJ2Vycm9yJyxcbiAgICAgIGlzSWRsZTogc3RhdHVzID09PSAnaWRsZScsXG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgZGF0YVVwZGF0ZWRBdDogZGF0YVVwZGF0ZWRBdCxcbiAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgIGVycm9yVXBkYXRlZEF0OiBlcnJvclVwZGF0ZWRBdCxcbiAgICAgIGZhaWx1cmVDb3VudDogc3RhdGUuZmV0Y2hGYWlsdXJlQ291bnQsXG4gICAgICBlcnJvclVwZGF0ZUNvdW50OiBzdGF0ZS5lcnJvclVwZGF0ZUNvdW50LFxuICAgICAgaXNGZXRjaGVkOiBzdGF0ZS5kYXRhVXBkYXRlQ291bnQgPiAwIHx8IHN0YXRlLmVycm9yVXBkYXRlQ291bnQgPiAwLFxuICAgICAgaXNGZXRjaGVkQWZ0ZXJNb3VudDogc3RhdGUuZGF0YVVwZGF0ZUNvdW50ID4gcXVlcnlJbml0aWFsU3RhdGUuZGF0YVVwZGF0ZUNvdW50IHx8IHN0YXRlLmVycm9yVXBkYXRlQ291bnQgPiBxdWVyeUluaXRpYWxTdGF0ZS5lcnJvclVwZGF0ZUNvdW50LFxuICAgICAgaXNGZXRjaGluZzogaXNGZXRjaGluZyxcbiAgICAgIGlzUmVmZXRjaGluZzogaXNGZXRjaGluZyAmJiBzdGF0dXMgIT09ICdsb2FkaW5nJyxcbiAgICAgIGlzTG9hZGluZ0Vycm9yOiBzdGF0dXMgPT09ICdlcnJvcicgJiYgc3RhdGUuZGF0YVVwZGF0ZWRBdCA9PT0gMCxcbiAgICAgIGlzUGxhY2Vob2xkZXJEYXRhOiBpc1BsYWNlaG9sZGVyRGF0YSxcbiAgICAgIGlzUHJldmlvdXNEYXRhOiBpc1ByZXZpb3VzRGF0YSxcbiAgICAgIGlzUmVmZXRjaEVycm9yOiBzdGF0dXMgPT09ICdlcnJvcicgJiYgc3RhdGUuZGF0YVVwZGF0ZWRBdCAhPT0gMCxcbiAgICAgIGlzU3RhbGU6IGlzU3RhbGUocXVlcnksIG9wdGlvbnMpLFxuICAgICAgcmVmZXRjaDogdGhpcy5yZWZldGNoLFxuICAgICAgcmVtb3ZlOiB0aGlzLnJlbW92ZVxuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBfcHJvdG8uc2hvdWxkTm90aWZ5TGlzdGVuZXJzID0gZnVuY3Rpb24gc2hvdWxkTm90aWZ5TGlzdGVuZXJzKHJlc3VsdCwgcHJldlJlc3VsdCkge1xuICAgIGlmICghcHJldlJlc3VsdCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIF90aGlzJG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMsXG4gICAgICAgIG5vdGlmeU9uQ2hhbmdlUHJvcHMgPSBfdGhpcyRvcHRpb25zLm5vdGlmeU9uQ2hhbmdlUHJvcHMsXG4gICAgICAgIG5vdGlmeU9uQ2hhbmdlUHJvcHNFeGNsdXNpb25zID0gX3RoaXMkb3B0aW9ucy5ub3RpZnlPbkNoYW5nZVByb3BzRXhjbHVzaW9ucztcblxuICAgIGlmICghbm90aWZ5T25DaGFuZ2VQcm9wcyAmJiAhbm90aWZ5T25DaGFuZ2VQcm9wc0V4Y2x1c2lvbnMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChub3RpZnlPbkNoYW5nZVByb3BzID09PSAndHJhY2tlZCcgJiYgIXRoaXMudHJhY2tlZFByb3BzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGluY2x1ZGVkUHJvcHMgPSBub3RpZnlPbkNoYW5nZVByb3BzID09PSAndHJhY2tlZCcgPyB0aGlzLnRyYWNrZWRQcm9wcyA6IG5vdGlmeU9uQ2hhbmdlUHJvcHM7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHJlc3VsdCkuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgdHlwZWRLZXkgPSBrZXk7XG4gICAgICB2YXIgY2hhbmdlZCA9IHJlc3VsdFt0eXBlZEtleV0gIT09IHByZXZSZXN1bHRbdHlwZWRLZXldO1xuICAgICAgdmFyIGlzSW5jbHVkZWQgPSBpbmNsdWRlZFByb3BzID09IG51bGwgPyB2b2lkIDAgOiBpbmNsdWRlZFByb3BzLnNvbWUoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHggPT09IGtleTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGlzRXhjbHVkZWQgPSBub3RpZnlPbkNoYW5nZVByb3BzRXhjbHVzaW9ucyA9PSBudWxsID8gdm9pZCAwIDogbm90aWZ5T25DaGFuZ2VQcm9wc0V4Y2x1c2lvbnMuc29tZShmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geCA9PT0ga2V5O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2hhbmdlZCAmJiAhaXNFeGNsdWRlZCAmJiAoIWluY2x1ZGVkUHJvcHMgfHwgaXNJbmNsdWRlZCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVJlc3VsdCA9IGZ1bmN0aW9uIHVwZGF0ZVJlc3VsdChub3RpZnlPcHRpb25zKSB7XG4gICAgdmFyIHByZXZSZXN1bHQgPSB0aGlzLmN1cnJlbnRSZXN1bHQ7XG4gICAgdGhpcy5jdXJyZW50UmVzdWx0ID0gdGhpcy5jcmVhdGVSZXN1bHQodGhpcy5jdXJyZW50UXVlcnksIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5jdXJyZW50UmVzdWx0U3RhdGUgPSB0aGlzLmN1cnJlbnRRdWVyeS5zdGF0ZTtcbiAgICB0aGlzLmN1cnJlbnRSZXN1bHRPcHRpb25zID0gdGhpcy5vcHRpb25zOyAvLyBPbmx5IG5vdGlmeSBpZiBzb21ldGhpbmcgaGFzIGNoYW5nZWRcblxuICAgIGlmIChzaGFsbG93RXF1YWxPYmplY3RzKHRoaXMuY3VycmVudFJlc3VsdCwgcHJldlJlc3VsdCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIERldGVybWluZSB3aGljaCBjYWxsYmFja3MgdG8gdHJpZ2dlclxuXG5cbiAgICB2YXIgZGVmYXVsdE5vdGlmeU9wdGlvbnMgPSB7XG4gICAgICBjYWNoZTogdHJ1ZVxuICAgIH07XG5cbiAgICBpZiAoKG5vdGlmeU9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG5vdGlmeU9wdGlvbnMubGlzdGVuZXJzKSAhPT0gZmFsc2UgJiYgdGhpcy5zaG91bGROb3RpZnlMaXN0ZW5lcnModGhpcy5jdXJyZW50UmVzdWx0LCBwcmV2UmVzdWx0KSkge1xuICAgICAgZGVmYXVsdE5vdGlmeU9wdGlvbnMubGlzdGVuZXJzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLm5vdGlmeShfZXh0ZW5kcyh7fSwgZGVmYXVsdE5vdGlmeU9wdGlvbnMsIG5vdGlmeU9wdGlvbnMpKTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlUXVlcnkgPSBmdW5jdGlvbiB1cGRhdGVRdWVyeSgpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmNsaWVudC5nZXRRdWVyeUNhY2hlKCkuYnVpbGQodGhpcy5jbGllbnQsIHRoaXMub3B0aW9ucyk7XG5cbiAgICBpZiAocXVlcnkgPT09IHRoaXMuY3VycmVudFF1ZXJ5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHByZXZRdWVyeSA9IHRoaXMuY3VycmVudFF1ZXJ5O1xuICAgIHRoaXMuY3VycmVudFF1ZXJ5ID0gcXVlcnk7XG4gICAgdGhpcy5jdXJyZW50UXVlcnlJbml0aWFsU3RhdGUgPSBxdWVyeS5zdGF0ZTtcbiAgICB0aGlzLnByZXZpb3VzUXVlcnlSZXN1bHQgPSB0aGlzLmN1cnJlbnRSZXN1bHQ7XG5cbiAgICBpZiAodGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgcHJldlF1ZXJ5ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UXVlcnkucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XG4gICAgICBxdWVyeS5hZGRPYnNlcnZlcih0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uUXVlcnlVcGRhdGUgPSBmdW5jdGlvbiBvblF1ZXJ5VXBkYXRlKGFjdGlvbikge1xuICAgIHZhciBub3RpZnlPcHRpb25zID0ge307XG5cbiAgICBpZiAoYWN0aW9uLnR5cGUgPT09ICdzdWNjZXNzJykge1xuICAgICAgbm90aWZ5T3B0aW9ucy5vblN1Y2Nlc3MgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoYWN0aW9uLnR5cGUgPT09ICdlcnJvcicgJiYgIWlzQ2FuY2VsbGVkRXJyb3IoYWN0aW9uLmVycm9yKSkge1xuICAgICAgbm90aWZ5T3B0aW9ucy5vbkVycm9yID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZVJlc3VsdChub3RpZnlPcHRpb25zKTtcblxuICAgIGlmICh0aGlzLmhhc0xpc3RlbmVycygpKSB7XG4gICAgICB0aGlzLnVwZGF0ZVRpbWVycygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KG5vdGlmeU9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgLy8gRmlyc3QgdHJpZ2dlciB0aGUgY29uZmlndXJhdGlvbiBjYWxsYmFja3NcbiAgICAgIGlmIChub3RpZnlPcHRpb25zLm9uU3VjY2Vzcykge1xuICAgICAgICBfdGhpczgub3B0aW9ucy5vblN1Y2Nlc3MgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzOC5vcHRpb25zLm9uU3VjY2VzcyhfdGhpczguY3VycmVudFJlc3VsdC5kYXRhKTtcbiAgICAgICAgX3RoaXM4Lm9wdGlvbnMub25TZXR0bGVkID09IG51bGwgPyB2b2lkIDAgOiBfdGhpczgub3B0aW9ucy5vblNldHRsZWQoX3RoaXM4LmN1cnJlbnRSZXN1bHQuZGF0YSwgbnVsbCk7XG4gICAgICB9IGVsc2UgaWYgKG5vdGlmeU9wdGlvbnMub25FcnJvcikge1xuICAgICAgICBfdGhpczgub3B0aW9ucy5vbkVycm9yID09IG51bGwgPyB2b2lkIDAgOiBfdGhpczgub3B0aW9ucy5vbkVycm9yKF90aGlzOC5jdXJyZW50UmVzdWx0LmVycm9yKTtcbiAgICAgICAgX3RoaXM4Lm9wdGlvbnMub25TZXR0bGVkID09IG51bGwgPyB2b2lkIDAgOiBfdGhpczgub3B0aW9ucy5vblNldHRsZWQodW5kZWZpbmVkLCBfdGhpczguY3VycmVudFJlc3VsdC5lcnJvcik7XG4gICAgICB9IC8vIFRoZW4gdHJpZ2dlciB0aGUgbGlzdGVuZXJzXG5cblxuICAgICAgaWYgKG5vdGlmeU9wdGlvbnMubGlzdGVuZXJzKSB7XG4gICAgICAgIF90aGlzOC5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lcihfdGhpczguY3VycmVudFJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgICAgfSAvLyBUaGVuIHRoZSBjYWNoZSBsaXN0ZW5lcnNcblxuXG4gICAgICBpZiAobm90aWZ5T3B0aW9ucy5jYWNoZSkge1xuICAgICAgICBfdGhpczguY2xpZW50LmdldFF1ZXJ5Q2FjaGUoKS5ub3RpZnkoe1xuICAgICAgICAgIHF1ZXJ5OiBfdGhpczguY3VycmVudFF1ZXJ5LFxuICAgICAgICAgIHR5cGU6ICdvYnNlcnZlclJlc3VsdHNVcGRhdGVkJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUXVlcnlPYnNlcnZlcjtcbn0oU3Vic2NyaWJhYmxlKTtcblxuZnVuY3Rpb24gc2hvdWxkTG9hZE9uTW91bnQocXVlcnksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZW5hYmxlZCAhPT0gZmFsc2UgJiYgIXF1ZXJ5LnN0YXRlLmRhdGFVcGRhdGVkQXQgJiYgIShxdWVyeS5zdGF0ZS5zdGF0dXMgPT09ICdlcnJvcicgJiYgb3B0aW9ucy5yZXRyeU9uTW91bnQgPT09IGZhbHNlKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkRmV0Y2hPbk1vdW50KHF1ZXJ5LCBvcHRpb25zKSB7XG4gIHJldHVybiBzaG91bGRMb2FkT25Nb3VudChxdWVyeSwgb3B0aW9ucykgfHwgcXVlcnkuc3RhdGUuZGF0YVVwZGF0ZWRBdCA+IDAgJiYgc2hvdWxkRmV0Y2hPbihxdWVyeSwgb3B0aW9ucywgb3B0aW9ucy5yZWZldGNoT25Nb3VudCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZEZldGNoT24ocXVlcnksIG9wdGlvbnMsIGZpZWxkKSB7XG4gIGlmIChvcHRpb25zLmVuYWJsZWQgIT09IGZhbHNlKSB7XG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIGZpZWxkID09PSAnZnVuY3Rpb24nID8gZmllbGQocXVlcnkpIDogZmllbGQ7XG4gICAgcmV0dXJuIHZhbHVlID09PSAnYWx3YXlzJyB8fCB2YWx1ZSAhPT0gZmFsc2UgJiYgaXNTdGFsZShxdWVyeSwgb3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHNob3VsZEZldGNoT3B0aW9uYWxseShxdWVyeSwgcHJldlF1ZXJ5LCBvcHRpb25zLCBwcmV2T3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5lbmFibGVkICE9PSBmYWxzZSAmJiAocXVlcnkgIT09IHByZXZRdWVyeSB8fCBwcmV2T3B0aW9ucy5lbmFibGVkID09PSBmYWxzZSkgJiYgKCFvcHRpb25zLnN1c3BlbnNlIHx8IHF1ZXJ5LnN0YXRlLnN0YXR1cyAhPT0gJ2Vycm9yJykgJiYgaXNTdGFsZShxdWVyeSwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGlzU3RhbGUocXVlcnksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHF1ZXJ5LmlzU3RhbGVCeVRpbWUob3B0aW9ucy5zdGFsZVRpbWUpO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7IC8vIENPTlRFWFRcblxuZnVuY3Rpb24gY3JlYXRlVmFsdWUoKSB7XG4gIHZhciBfaXNSZXNldCA9IGZhbHNlO1xuICByZXR1cm4ge1xuICAgIGNsZWFyUmVzZXQ6IGZ1bmN0aW9uIGNsZWFyUmVzZXQoKSB7XG4gICAgICBfaXNSZXNldCA9IGZhbHNlO1xuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgX2lzUmVzZXQgPSB0cnVlO1xuICAgIH0sXG4gICAgaXNSZXNldDogZnVuY3Rpb24gaXNSZXNldCgpIHtcbiAgICAgIHJldHVybiBfaXNSZXNldDtcbiAgICB9XG4gIH07XG59XG5cbnZhciBRdWVyeUVycm9yUmVzZXRCb3VuZGFyeUNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChjcmVhdGVWYWx1ZSgpKTsgLy8gSE9PS1xuXG5leHBvcnQgdmFyIHVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5ID0gZnVuY3Rpb24gdXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Q29udGV4dCk7XG59OyAvLyBDT01QT05FTlRcblxuZXhwb3J0IHZhciBRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSA9IGZ1bmN0aW9uIFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5KF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgdmFyIHZhbHVlID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVZhbHVlKCk7XG4gIH0sIFtdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Q29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB2YWx1ZVxuICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbih2YWx1ZSkgOiBjaGlsZHJlbik7XG59OyIsImltcG9ydCB7IFF1ZXJ5T2JzZXJ2ZXIgfSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB7IHBhcnNlUXVlcnlBcmdzIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5pbXBvcnQgeyB1c2VCYXNlUXVlcnkgfSBmcm9tICcuL3VzZUJhc2VRdWVyeSc7IC8vIEhPT0tcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVF1ZXJ5KGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgdmFyIHBhcnNlZE9wdGlvbnMgPSBwYXJzZVF1ZXJ5QXJncyhhcmcxLCBhcmcyLCBhcmczKTtcbiAgcmV0dXJuIHVzZUJhc2VRdWVyeShwYXJzZWRPcHRpb25zLCBRdWVyeU9ic2VydmVyKTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJy4uL2NvcmUvbm90aWZ5TWFuYWdlcic7XG5pbXBvcnQgeyB1c2VRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSB9IGZyb20gJy4vUXVlcnlFcnJvclJlc2V0Qm91bmRhcnknO1xuaW1wb3J0IHsgdXNlUXVlcnlDbGllbnQgfSBmcm9tICcuL1F1ZXJ5Q2xpZW50UHJvdmlkZXInO1xuaW1wb3J0IHsgc2hvdWxkVGhyb3dFcnJvciB9IGZyb20gJy4vdXRpbHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUJhc2VRdWVyeShvcHRpb25zLCBPYnNlcnZlcikge1xuICB2YXIgbW91bnRlZFJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKDApLFxuICAgICAgZm9yY2VVcGRhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIHF1ZXJ5Q2xpZW50ID0gdXNlUXVlcnlDbGllbnQoKTtcbiAgdmFyIGVycm9yUmVzZXRCb3VuZGFyeSA9IHVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5KCk7XG4gIHZhciBkZWZhdWx0ZWRPcHRpb25zID0gcXVlcnlDbGllbnQuZGVmYXVsdFF1ZXJ5T2JzZXJ2ZXJPcHRpb25zKG9wdGlvbnMpOyAvLyBNYWtlIHN1cmUgcmVzdWx0cyBhcmUgb3B0aW1pc3RpY2FsbHkgc2V0IGluIGZldGNoaW5nIHN0YXRlIGJlZm9yZSBzdWJzY3JpYmluZyBvciB1cGRhdGluZyBvcHRpb25zXG5cbiAgZGVmYXVsdGVkT3B0aW9ucy5vcHRpbWlzdGljUmVzdWx0cyA9IHRydWU7IC8vIEluY2x1ZGUgY2FsbGJhY2tzIGluIGJhdGNoIHJlbmRlcnNcblxuICBpZiAoZGVmYXVsdGVkT3B0aW9ucy5vbkVycm9yKSB7XG4gICAgZGVmYXVsdGVkT3B0aW9ucy5vbkVycm9yID0gbm90aWZ5TWFuYWdlci5iYXRjaENhbGxzKGRlZmF1bHRlZE9wdGlvbnMub25FcnJvcik7XG4gIH1cblxuICBpZiAoZGVmYXVsdGVkT3B0aW9ucy5vblN1Y2Nlc3MpIHtcbiAgICBkZWZhdWx0ZWRPcHRpb25zLm9uU3VjY2VzcyA9IG5vdGlmeU1hbmFnZXIuYmF0Y2hDYWxscyhkZWZhdWx0ZWRPcHRpb25zLm9uU3VjY2Vzcyk7XG4gIH1cblxuICBpZiAoZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQpIHtcbiAgICBkZWZhdWx0ZWRPcHRpb25zLm9uU2V0dGxlZCA9IG5vdGlmeU1hbmFnZXIuYmF0Y2hDYWxscyhkZWZhdWx0ZWRPcHRpb25zLm9uU2V0dGxlZCk7XG4gIH1cblxuICBpZiAoZGVmYXVsdGVkT3B0aW9ucy5zdXNwZW5zZSkge1xuICAgIC8vIEFsd2F5cyBzZXQgc3RhbGUgdGltZSB3aGVuIHVzaW5nIHN1c3BlbnNlIHRvIHByZXZlbnRcbiAgICAvLyBmZXRjaGluZyBhZ2FpbiB3aGVuIGRpcmVjdGx5IG1vdW50aW5nIGFmdGVyIHN1c3BlbmRpbmdcbiAgICBpZiAodHlwZW9mIGRlZmF1bHRlZE9wdGlvbnMuc3RhbGVUaW1lICE9PSAnbnVtYmVyJykge1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5zdGFsZVRpbWUgPSAxMDAwO1xuICAgIH0gLy8gU2V0IGNhY2hlIHRpbWUgdG8gMSBpZiB0aGUgb3B0aW9uIGhhcyBiZWVuIHNldCB0byAwXG4gICAgLy8gd2hlbiB1c2luZyBzdXNwZW5zZSB0byBwcmV2ZW50IGluZmluaXRlIGxvb3Agb2YgZmV0Y2hlc1xuXG5cbiAgICBpZiAoZGVmYXVsdGVkT3B0aW9ucy5jYWNoZVRpbWUgPT09IDApIHtcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMuY2FjaGVUaW1lID0gMTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGVmYXVsdGVkT3B0aW9ucy5zdXNwZW5zZSB8fCBkZWZhdWx0ZWRPcHRpb25zLnVzZUVycm9yQm91bmRhcnkpIHtcbiAgICAvLyBQcmV2ZW50IHJldHJ5aW5nIGZhaWxlZCBxdWVyeSBpZiB0aGUgZXJyb3IgYm91bmRhcnkgaGFzIG5vdCBiZWVuIHJlc2V0IHlldFxuICAgIGlmICghZXJyb3JSZXNldEJvdW5kYXJ5LmlzUmVzZXQoKSkge1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5yZXRyeU9uTW91bnQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB2YXIgX1JlYWN0JHVzZVN0YXRlMiA9IFJlYWN0LnVzZVN0YXRlKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmVyKHF1ZXJ5Q2xpZW50LCBkZWZhdWx0ZWRPcHRpb25zKTtcbiAgfSksXG4gICAgICBvYnNlcnZlciA9IF9SZWFjdCR1c2VTdGF0ZTJbMF07XG5cbiAgdmFyIHJlc3VsdCA9IG9ic2VydmVyLmdldE9wdGltaXN0aWNSZXN1bHQoZGVmYXVsdGVkT3B0aW9ucyk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbW91bnRlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICBlcnJvclJlc2V0Qm91bmRhcnkuY2xlYXJSZXNldCgpO1xuICAgIHZhciB1bnN1YnNjcmliZSA9IG9ic2VydmVyLnN1YnNjcmliZShub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG1vdW50ZWRSZWYuY3VycmVudCkge1xuICAgICAgICBmb3JjZVVwZGF0ZShmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIHJldHVybiB4ICsgMTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSkpOyAvLyBVcGRhdGUgcmVzdWx0IHRvIG1ha2Ugc3VyZSB3ZSBkaWQgbm90IG1pc3MgYW55IHF1ZXJ5IHVwZGF0ZXNcbiAgICAvLyBiZXR3ZWVuIGNyZWF0aW5nIHRoZSBvYnNlcnZlciBhbmQgc3Vic2NyaWJpbmcgdG8gaXQuXG5cbiAgICBvYnNlcnZlci51cGRhdGVSZXN1bHQoKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgbW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICB1bnN1YnNjcmliZSgpO1xuICAgIH07XG4gIH0sIFtlcnJvclJlc2V0Qm91bmRhcnksIG9ic2VydmVyXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgLy8gRG8gbm90IG5vdGlmeSBvbiB1cGRhdGVzIGJlY2F1c2Ugb2YgY2hhbmdlcyBpbiB0aGUgb3B0aW9ucyBiZWNhdXNlXG4gICAgLy8gdGhlc2UgY2hhbmdlcyBzaG91bGQgYWxyZWFkeSBiZSByZWZsZWN0ZWQgaW4gdGhlIG9wdGltaXN0aWMgcmVzdWx0LlxuICAgIG9ic2VydmVyLnNldE9wdGlvbnMoZGVmYXVsdGVkT3B0aW9ucywge1xuICAgICAgbGlzdGVuZXJzOiBmYWxzZVxuICAgIH0pO1xuICB9LCBbZGVmYXVsdGVkT3B0aW9ucywgb2JzZXJ2ZXJdKTsgLy8gSGFuZGxlIHN1c3BlbnNlXG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMuc3VzcGVuc2UgJiYgcmVzdWx0LmlzTG9hZGluZykge1xuICAgIHRocm93IG9ic2VydmVyLmZldGNoT3B0aW1pc3RpYyhkZWZhdWx0ZWRPcHRpb25zKS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgZGF0YSA9IF9yZWYuZGF0YTtcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMub25TdWNjZXNzID09IG51bGwgPyB2b2lkIDAgOiBkZWZhdWx0ZWRPcHRpb25zLm9uU3VjY2VzcyhkYXRhKTtcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkID09IG51bGwgPyB2b2lkIDAgOiBkZWZhdWx0ZWRPcHRpb25zLm9uU2V0dGxlZChkYXRhLCBudWxsKTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGVycm9yUmVzZXRCb3VuZGFyeS5jbGVhclJlc2V0KCk7XG4gICAgICBkZWZhdWx0ZWRPcHRpb25zLm9uRXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGRlZmF1bHRlZE9wdGlvbnMub25FcnJvcihlcnJvcik7XG4gICAgICBkZWZhdWx0ZWRPcHRpb25zLm9uU2V0dGxlZCA9PSBudWxsID8gdm9pZCAwIDogZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQodW5kZWZpbmVkLCBlcnJvcik7XG4gICAgfSk7XG4gIH0gLy8gSGFuZGxlIGVycm9yIGJvdW5kYXJ5XG5cblxuICBpZiAocmVzdWx0LmlzRXJyb3IgJiYgIWVycm9yUmVzZXRCb3VuZGFyeS5pc1Jlc2V0KCkgJiYgIXJlc3VsdC5pc0ZldGNoaW5nICYmIHNob3VsZFRocm93RXJyb3IoZGVmYXVsdGVkT3B0aW9ucy5zdXNwZW5zZSwgZGVmYXVsdGVkT3B0aW9ucy51c2VFcnJvckJvdW5kYXJ5LCBbcmVzdWx0LmVycm9yLCBvYnNlcnZlci5nZXRDdXJyZW50UXVlcnkoKV0pKSB7XG4gICAgdGhyb3cgcmVzdWx0LmVycm9yO1xuICB9IC8vIEhhbmRsZSByZXN1bHQgcHJvcGVydHkgdXNhZ2UgdHJhY2tpbmdcblxuXG4gIGlmIChkZWZhdWx0ZWRPcHRpb25zLm5vdGlmeU9uQ2hhbmdlUHJvcHMgPT09ICd0cmFja2VkJykge1xuICAgIHJlc3VsdCA9IG9ic2VydmVyLnRyYWNrUmVzdWx0KHJlc3VsdCwgZGVmYXVsdGVkT3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsImV4cG9ydCBmdW5jdGlvbiBzaG91bGRUaHJvd0Vycm9yKHN1c3BlbnNlLCBfdXNlRXJyb3JCb3VuZGFyeSwgcGFyYW1zKSB7XG4gIC8vIEFsbG93IHVzZUVycm9yQm91bmRhcnkgZnVuY3Rpb24gdG8gb3ZlcnJpZGUgdGhyb3dpbmcgYmVoYXZpb3Igb24gYSBwZXItZXJyb3IgYmFzaXNcbiAgaWYgKHR5cGVvZiBfdXNlRXJyb3JCb3VuZGFyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBfdXNlRXJyb3JCb3VuZGFyeS5hcHBseSh2b2lkIDAsIHBhcmFtcyk7XG4gIH0gLy8gQWxsb3cgdXNlRXJyb3JCb3VuZGFyeSB0byBvdmVycmlkZSBzdXNwZW5zZSdzIHRocm93aW5nIGJlaGF2aW9yXG5cblxuICBpZiAodHlwZW9mIF91c2VFcnJvckJvdW5kYXJ5ID09PSAnYm9vbGVhbicpIHJldHVybiBfdXNlRXJyb3JCb3VuZGFyeTsgLy8gSWYgc3VzcGVuc2UgaXMgZW5hYmxlZCBkZWZhdWx0IHRvIHRocm93aW5nIGVycm9yc1xuXG4gIHJldHVybiAhIXN1c3BlbnNlO1xufSIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtcbmV4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9O1xuZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCLCBjb21wYXJlLCBjb21wYXJlQ29udGV4dCkge1xuICB2YXIgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgb2JqQSwgb2JqQikgOiB2b2lkIDA7XG5cbiAgaWYgKHJldCAhPT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuICEhcmV0O1xuICB9XG5cbiAgaWYgKG9iakEgPT09IG9iakIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQSB8fCB0eXBlb2Ygb2JqQiAhPT0gXCJvYmplY3RcIiB8fCAhb2JqQikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgYkhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5iaW5kKG9iakIpO1xuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGlkeCA9IDA7IGlkeCA8IGtleXNBLmxlbmd0aDsgaWR4KyspIHtcbiAgICB2YXIga2V5ID0ga2V5c0FbaWR4XTtcblxuICAgIGlmICghYkhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVBID0gb2JqQVtrZXldO1xuICAgIHZhciB2YWx1ZUIgPSBvYmpCW2tleV07XG5cbiAgICByZXQgPSBjb21wYXJlID8gY29tcGFyZS5jYWxsKGNvbXBhcmVDb250ZXh0LCB2YWx1ZUEsIHZhbHVlQiwga2V5KSA6IHZvaWQgMDtcblxuICAgIGlmIChyZXQgPT09IGZhbHNlIHx8IChyZXQgPT09IHZvaWQgMCAmJiB2YWx1ZUEgIT09IHZhbHVlQikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn07XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiB1c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZT1yZXF1aXJlKFwicmVhY3RcIik7ZnVuY3Rpb24gaChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIGs9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6aCxsPWUudXNlU3RhdGUsbT1lLnVzZUVmZmVjdCxuPWUudXNlTGF5b3V0RWZmZWN0LHA9ZS51c2VEZWJ1Z1ZhbHVlO2Z1bmN0aW9uIHEoYSxiKXt2YXIgZD1iKCksZj1sKHtpbnN0Ont2YWx1ZTpkLGdldFNuYXBzaG90OmJ9fSksYz1mWzBdLmluc3QsZz1mWzFdO24oZnVuY3Rpb24oKXtjLnZhbHVlPWQ7Yy5nZXRTbmFwc2hvdD1iO3IoYykmJmcoe2luc3Q6Y30pfSxbYSxkLGJdKTttKGZ1bmN0aW9uKCl7cihjKSYmZyh7aW5zdDpjfSk7cmV0dXJuIGEoZnVuY3Rpb24oKXtyKGMpJiZnKHtpbnN0OmN9KX0pfSxbYV0pO3AoZCk7cmV0dXJuIGR9XG5mdW5jdGlvbiByKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgZD1iKCk7cmV0dXJuIWsoYSxkKX1jYXRjaChmKXtyZXR1cm4hMH19ZnVuY3Rpb24gdChhLGIpe3JldHVybiBiKCl9dmFyIHU9XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50P3Q6cTtleHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlPXZvaWQgMCE9PWUudXNlU3luY0V4dGVybmFsU3RvcmU/ZS51c2VTeW5jRXh0ZXJuYWxTdG9yZTp1O1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgaD1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwidXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbVwiKTtmdW5jdGlvbiBwKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgcT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpwLHI9bi51c2VTeW5jRXh0ZXJuYWxTdG9yZSx0PWgudXNlUmVmLHU9aC51c2VFZmZlY3Qsdj1oLnVzZU1lbW8sdz1oLnVzZURlYnVnVmFsdWU7XG5leHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yPWZ1bmN0aW9uKGEsYixlLGwsZyl7dmFyIGM9dChudWxsKTtpZihudWxsPT09Yy5jdXJyZW50KXt2YXIgZj17aGFzVmFsdWU6ITEsdmFsdWU6bnVsbH07Yy5jdXJyZW50PWZ9ZWxzZSBmPWMuY3VycmVudDtjPXYoZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGEpe2lmKCFjKXtjPSEwO2Q9YTthPWwoYSk7aWYodm9pZCAwIT09ZyYmZi5oYXNWYWx1ZSl7dmFyIGI9Zi52YWx1ZTtpZihnKGIsYSkpcmV0dXJuIGs9Yn1yZXR1cm4gaz1hfWI9aztpZihxKGQsYSkpcmV0dXJuIGI7dmFyIGU9bChhKTtpZih2b2lkIDAhPT1nJiZnKGIsZSkpcmV0dXJuIGI7ZD1hO3JldHVybiBrPWV9dmFyIGM9ITEsZCxrLG09dm9pZCAwPT09ZT9udWxsOmU7cmV0dXJuW2Z1bmN0aW9uKCl7cmV0dXJuIGEoYigpKX0sbnVsbD09PW0/dm9pZCAwOmZ1bmN0aW9uKCl7cmV0dXJuIGEobSgpKX1dfSxbYixlLGwsZ10pO3ZhciBkPXIoYSxjWzBdLGNbMV0pO1xudShmdW5jdGlvbigpe2YuaGFzVmFsdWU9ITA7Zi52YWx1ZT1kfSxbZF0pO3coZCk7cmV0dXJuIGR9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKSA6IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbmxldCBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCBjb25zdCBzZXRCYXRjaCA9IG5ld0JhdGNoID0+IGJhdGNoID0gbmV3QmF0Y2g7IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgY29uc3QgZ2V0QmF0Y2ggPSAoKSA9PiBiYXRjaDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGNvbnN0IFJlYWN0UmVkdXhDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuXG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcclxuICogaG9vayB0aGF0IHlvdSBzaG91bGQgdXN1YWxseSBub3QgbmVlZCB0byBjYWxsIGRpcmVjdGx5LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSZWR1eENvbnRleHQoKSB7XG4gIGNvbnN0IGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb250ZXh0VmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPicpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VEZWJ1Z1ZhbHVlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyBub3RJbml0aWFsaXplZCB9IGZyb20gJy4uL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlJztcbmxldCB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciA9IG5vdEluaXRpYWxpemVkO1xuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVVc2VTZWxlY3RvciA9IGZuID0+IHtcbiAgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgPSBmbjtcbn07XG5cbmNvbnN0IHJlZkVxdWFsaXR5ID0gKGEsIGIpID0+IGEgPT09IGI7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0b3JIb29rKGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dCkge1xuICBjb25zdCB1c2VSZWR1eENvbnRleHQgPSBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiAoKSA9PiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU2VsZWN0b3Ioc2VsZWN0b3IsIGVxdWFsaXR5Rm4gPSByZWZFcXVhbGl0eSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yYCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcmApO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGVxdWFsaXR5Rm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYW4gZXF1YWxpdHkgZnVuY3Rpb24gdG8gdXNlU2VsZWN0b3JgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB7XG4gICAgICBzdG9yZSxcbiAgICAgIHN1YnNjcmlwdGlvbixcbiAgICAgIGdldFNlcnZlclN0YXRlXG4gICAgfSA9IHVzZVJlZHV4Q29udGV4dCgpO1xuICAgIGNvbnN0IHNlbGVjdGVkU3RhdGUgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvcihzdWJzY3JpcHRpb24uYWRkTmVzdGVkU3ViLCBzdG9yZS5nZXRTdGF0ZSwgZ2V0U2VydmVyU3RhdGUgfHwgc3RvcmUuZ2V0U3RhdGUsIHNlbGVjdG9yLCBlcXVhbGl0eUZuKTtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgY29uc3QgdXNlU2VsZWN0b3IgPSAvKiNfX1BVUkVfXyovY3JlYXRlU2VsZWN0b3JIb29rKCk7IiwiZXhwb3J0IGNvbnN0IG5vdEluaXRpYWxpemVkID0gKCkgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3VTRVMgbm90IGluaXRpYWxpemVkIScpO1xufTsiLCJpbXBvcnQgeyBnZXRCYXRjaCB9IGZyb20gJy4vYmF0Y2gnOyAvLyBlbmNhcHN1bGF0ZXMgdGhlIHN1YnNjcmlwdGlvbiBsb2dpYyBmb3IgY29ubmVjdGluZyBhIGNvbXBvbmVudCB0byB0aGUgcmVkdXggc3RvcmUsIGFzXG4vLyB3ZWxsIGFzIG5lc3Rpbmcgc3Vic2NyaXB0aW9ucyBvZiBkZXNjZW5kYW50IGNvbXBvbmVudHMsIHNvIHRoYXQgd2UgY2FuIGVuc3VyZSB0aGVcbi8vIGFuY2VzdG9yIGNvbXBvbmVudHMgcmUtcmVuZGVyIGJlZm9yZSBkZXNjZW5kYW50c1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIGNvbnN0IGJhdGNoID0gZ2V0QmF0Y2goKTtcbiAgbGV0IGZpcnN0ID0gbnVsbDtcbiAgbGV0IGxhc3QgPSBudWxsO1xuICByZXR1cm4ge1xuICAgIGNsZWFyKCkge1xuICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgbGFzdCA9IG51bGw7XG4gICAgfSxcblxuICAgIG5vdGlmeSgpIHtcbiAgICAgIGJhdGNoKCgpID0+IHtcbiAgICAgICAgbGV0IGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIuY2FsbGJhY2soKTtcbiAgICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBnZXQoKSB7XG4gICAgICBsZXQgbGlzdGVuZXJzID0gW107XG4gICAgICBsZXQgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgd2hpbGUgKGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzO1xuICAgIH0sXG5cbiAgICBzdWJzY3JpYmUoY2FsbGJhY2spIHtcbiAgICAgIGxldCBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgbGV0IGxpc3RlbmVyID0gbGFzdCA9IHtcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICB9O1xufVxuXG5jb25zdCBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnkoKSB7fSxcblxuICBnZXQ6ICgpID0+IFtdXG59O1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gIGxldCB1bnN1YnNjcmliZTtcbiAgbGV0IGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG5cbiAgZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIGxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICBsaXN0ZW5lcnMubm90aWZ5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmIChzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odW5zdWJzY3JpYmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdW5zdWJzY3JpYmUpIHtcbiAgICAgIHVuc3Vic2NyaWJlID0gcGFyZW50U3ViID8gcGFyZW50U3ViLmFkZE5lc3RlZFN1YihoYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHN0b3JlLnN1YnNjcmliZShoYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIGxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIHVuc3Vic2NyaWJlID0gdW5kZWZpbmVkO1xuICAgICAgbGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICBsaXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHtcbiAgICBhZGROZXN0ZWRTdWIsXG4gICAgbm90aWZ5TmVzdGVkU3VicyxcbiAgICBoYW5kbGVDaGFuZ2VXcmFwcGVyLFxuICAgIGlzU3Vic2NyaWJlZCxcbiAgICB0cnlTdWJzY3JpYmUsXG4gICAgdHJ5VW5zdWJzY3JpYmUsXG4gICAgZ2V0TGlzdGVuZXJzOiAoKSA9PiBsaXN0ZW5lcnNcbiAgfTtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbn0iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcbi8vIE1hdGNoZXMgbG9naWMgaW4gUmVhY3QncyBgc2hhcmVkL0V4ZWN1dGlvbkVudmlyb25tZW50YCBmaWxlXG5cbmV4cG9ydCBjb25zdCBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnKTtcbmV4cG9ydCBjb25zdCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gY2FuVXNlRE9NID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXCJdO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSB2YWxpZC1qc2RvYywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcbmltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUsIGlzQ29udGV4dENvbnN1bWVyIH0gZnJvbSAncmVhY3QtaXMnO1xuaW1wb3J0IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgZnJvbSAnLi4vY29ubmVjdC9zZWxlY3RvckZhY3RvcnknO1xuaW1wb3J0IHsgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yeSB9IGZyb20gJy4uL2Nvbm5lY3QvbWFwRGlzcGF0Y2hUb1Byb3BzJztcbmltcG9ydCB7IG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkgfSBmcm9tICcuLi9jb25uZWN0L21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgeyBtZXJnZVByb3BzRmFjdG9yeSB9IGZyb20gJy4uL2Nvbm5lY3QvbWVyZ2VQcm9wcyc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnLi4vdXRpbHMvd2FybmluZyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgeyBub3RJbml0aWFsaXplZCB9IGZyb20gJy4uL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlJztcbmxldCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IG5vdEluaXRpYWxpemVkO1xuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVDb25uZWN0ID0gZm4gPT4ge1xuICB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9IGZuO1xufTsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxuY29uc3QgRU1QVFlfQVJSQVkgPSBbbnVsbCwgMF07XG5jb25zdCBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07IC8vIEF0dGVtcHRzIHRvIHN0cmluZ2lmeSB3aGF0ZXZlciBub3QtcmVhbGx5LWEtY29tcG9uZW50IHZhbHVlIHdlIHdlcmUgZ2l2ZW5cbi8vIGZvciBsb2dnaW5nIGluIGFuIGVycm9yIG1lc3NhZ2VcblxuY29uc3Qgc3RyaW5naWZ5Q29tcG9uZW50ID0gQ29tcCA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KENvbXApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gU3RyaW5nKENvbXApO1xuICB9XG59O1xuXG4vLyBUaGlzIGlzIFwianVzdFwiIGEgYHVzZUxheW91dEVmZmVjdGAsIGJ1dCB3aXRoIHR3byBtb2RpZmljYXRpb25zOlxuLy8gLSB3ZSBuZWVkIHRvIGZhbGwgYmFjayB0byBgdXNlRWZmZWN0YCBpbiBTU1IgdG8gYXZvaWQgYW5ub3lpbmcgd2FybmluZ3Ncbi8vIC0gd2UgZXh0cmFjdCB0aGlzIHRvIGEgc2VwYXJhdGUgZnVuY3Rpb24gdG8gYXZvaWQgY2xvc2luZyBvdmVyIHZhbHVlc1xuLy8gICBhbmQgY2F1c2luZyBtZW1vcnkgbGVha3NcbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiBlZmZlY3RGdW5jKC4uLmVmZmVjdEFyZ3MpLCBkZXBlbmRlbmNpZXMpO1xufSAvLyBFZmZlY3QgY2FsbGJhY2ssIGV4dHJhY3RlZDogYXNzaWduIHRoZSBsYXRlc3QgcHJvcHMgdmFsdWVzIHRvIHJlZnMgZm9yIGxhdGVyIHVzYWdlXG5cblxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgLy8gYWN0dWFsQ2hpbGRQcm9wczogdW5rbm93bixcbmNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMpIHtcbiAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufSAvLyBFZmZlY3QgY2FsbGJhY2ssIGV4dHJhY3RlZDogc3Vic2NyaWJlIHRvIHRoZSBSZWR1eCBzdG9yZSBvciBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvcixcbi8vIGNoZWNrIGZvciB1cGRhdGVzIGFmdGVyIGRpc3BhdGNoZWQgYWN0aW9ucywgYW5kIHRyaWdnZXIgcmUtcmVuZGVycy5cblxuXG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGlzTW91bnRlZCwgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3VicywgLy8gZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaDogUmVhY3QuRGlzcGF0Y2g8YW55PixcbmFkZGl0aW9uYWxTdWJzY3JpYmVMaXN0ZW5lcikge1xuICAvLyBJZiB3ZSdyZSBub3Qgc3Vic2NyaWJlZCB0byB0aGUgc3RvcmUsIG5vdGhpbmcgdG8gZG8gaGVyZVxuICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuICgpID0+IHt9OyAvLyBDYXB0dXJlIHZhbHVlcyBmb3IgY2hlY2tpbmcgaWYgYW5kIHdoZW4gdGhpcyBjb21wb25lbnQgdW5tb3VudHNcblxuICBsZXQgZGlkVW5zdWJzY3JpYmUgPSBmYWxzZTtcbiAgbGV0IGxhc3RUaHJvd25FcnJvciA9IG51bGw7IC8vIFdlJ2xsIHJ1biB0aGlzIGNhbGxiYWNrIGV2ZXJ5IHRpbWUgYSBzdG9yZSBzdWJzY3JpcHRpb24gdXBkYXRlIHByb3BhZ2F0ZXMgdG8gdGhpcyBjb21wb25lbnRcblxuICBjb25zdCBjaGVja0ZvclVwZGF0ZXMgPSAoKSA9PiB7XG4gICAgaWYgKGRpZFVuc3Vic2NyaWJlIHx8ICFpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgLy8gRG9uJ3QgcnVuIHN0YWxlIGxpc3RlbmVycy5cbiAgICAgIC8vIFJlZHV4IGRvZXNuJ3QgZ3VhcmFudGVlIHVuc3Vic2NyaXB0aW9ucyBoYXBwZW4gdW50aWwgbmV4dCBkaXNwYXRjaC5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFRPRE8gV2UncmUgY3VycmVudGx5IGNhbGxpbmcgZ2V0U3RhdGUgb3Vyc2VsdmVzIGhlcmUsIHJhdGhlciB0aGFuIGxldHRpbmcgYHVTRVNgIGRvIGl0XG5cblxuICAgIGNvbnN0IGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGxldCBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gVE9ETyBUaGlzIGlzIGhhY2t5IGFuZCBub3QgaG93IGB1U0VTYCBpcyBtZWFudCB0byBiZSB1c2VkXG4gICAgICAvLyBUcmlnZ2VyIHRoZSBSZWFjdCBgdXNlU3luY0V4dGVybmFsU3RvcmVgIHN1YnNjcmliZXJcblxuICAgICAgYWRkaXRpb25hbFN1YnNjcmliZUxpc3RlbmVyKCk7XG4gICAgfVxuICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgY29uc3QgdW5zdWJzY3JpYmVXcmFwcGVyID0gKCkgPT4ge1xuICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG59IC8vIFJlZHVjZXIgaW5pdGlhbCBzdGF0ZSBjcmVhdGlvbiBmb3Igb3VyIHVwZGF0ZSByZWR1Y2VyXG5cblxuY29uc3QgaW5pdFN0YXRlVXBkYXRlcyA9ICgpID0+IEVNUFRZX0FSUkFZO1xuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufVxuLyoqXHJcbiAqIEluZmVycyB0aGUgdHlwZSBvZiBwcm9wcyB0aGF0IGEgY29ubmVjdG9yIHdpbGwgaW5qZWN0IGludG8gYSBjb21wb25lbnQuXHJcbiAqL1xuXG5cbmxldCBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRQdXJlT3B0aW9uID0gZmFsc2U7XG4vKipcclxuICogQ29ubmVjdHMgYSBSZWFjdCBjb21wb25lbnQgdG8gYSBSZWR1eCBzdG9yZS5cclxuICpcclxuICogLSBXaXRob3V0IGFyZ3VtZW50cywganVzdCB3cmFwcyB0aGUgY29tcG9uZW50LCB3aXRob3V0IGNoYW5naW5nIHRoZSBiZWhhdmlvciAvIHByb3BzXHJcbiAqXHJcbiAqIC0gSWYgMiBwYXJhbXMgYXJlIHBhc3NlZCAoM3JkIHBhcmFtLCBtZXJnZVByb3BzLCBpcyBza2lwcGVkKSwgZGVmYXVsdCBiZWhhdmlvclxyXG4gKiBpcyB0byBvdmVycmlkZSBvd25Qcm9wcyAoYXMgc3RhdGVkIGluIHRoZSBkb2NzKSwgc28gd2hhdCByZW1haW5zIGlzIGV2ZXJ5dGhpbmcgdGhhdCdzXHJcbiAqIG5vdCBhIHN0YXRlIG9yIGRpc3BhdGNoIHByb3BcclxuICpcclxuICogLSBXaGVuIDNyZCBwYXJhbSBpcyBwYXNzZWQsIHdlIGRvbid0IGtub3cgaWYgb3duUHJvcHMgcHJvcGFnYXRlIGFuZCB3aGV0aGVyIHRoZXlcclxuICogc2hvdWxkIGJlIHZhbGlkIGNvbXBvbmVudCBwcm9wcywgYmVjYXVzZSBpdCBkZXBlbmRzIG9uIG1lcmdlUHJvcHMgaW1wbGVtZW50YXRpb24uXHJcbiAqIEFzIHN1Y2gsIGl0IGlzIHRoZSB1c2VyJ3MgcmVzcG9uc2liaWxpdHkgdG8gZXh0ZW5kIG93blByb3BzIGludGVyZmFjZSBmcm9tIHN0YXRlIG9yXHJcbiAqIGRpc3BhdGNoIHByb3BzIG9yIGJvdGggd2hlbiBhcHBsaWNhYmxlXHJcbiAqXHJcbiAqIEBwYXJhbSBtYXBTdGF0ZVRvUHJvcHMgQSBmdW5jdGlvbiB0aGF0IGV4dHJhY3RzIHZhbHVlcyBmcm9tIHN0YXRlXHJcbiAqIEBwYXJhbSBtYXBEaXNwYXRjaFRvUHJvcHMgU2V0dXAgZm9yIGRpc3BhdGNoaW5nIGFjdGlvbnNcclxuICogQHBhcmFtIG1lcmdlUHJvcHMgT3B0aW9uYWwgY2FsbGJhY2sgdG8gbWVyZ2Ugc3RhdGUgYW5kIGRpc3BhdGNoIHByb3BzIHRvZ2V0aGVyXHJcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIGNvbmZpZ3VyaW5nIHRoZSBjb25uZWN0aW9uXHJcbiAqXHJcbiAqL1xuXG5mdW5jdGlvbiBjb25uZWN0KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCB7XG4gIC8vIFRoZSBgcHVyZWAgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQsIHNvIFRTIGRvZXNuJ3QgbGlrZSB1cyBkZXN0cnVjdHVyaW5nIHRoaXMgdG8gY2hlY2sgaXRzIGV4aXN0ZW5jZS5cbiAgLy8gQHRzLWlnbm9yZVxuICBwdXJlLFxuICBhcmVTdGF0ZXNFcXVhbCA9IHN0cmljdEVxdWFsLFxuICBhcmVPd25Qcm9wc0VxdWFsID0gc2hhbGxvd0VxdWFsLFxuICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBzaGFsbG93RXF1YWwsXG4gIC8vIHVzZSBSZWFjdCdzIGZvcndhcmRSZWYgdG8gZXhwb3NlIGEgcmVmIG9mIHRoZSB3cmFwcGVkIGNvbXBvbmVudFxuICBmb3J3YXJkUmVmID0gZmFsc2UsXG4gIC8vIHRoZSBjb250ZXh0IGNvbnN1bWVyIHRvIHVzZVxuICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHRcbn0gPSB7fSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChwdXJlICE9PSB1bmRlZmluZWQgJiYgIWhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZFB1cmVPcHRpb24pIHtcbiAgICAgIGhhc1dhcm5lZEFib3V0RGVwcmVjYXRlZFB1cmVPcHRpb24gPSB0cnVlO1xuICAgICAgd2FybmluZygnVGhlIGBwdXJlYCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gYGNvbm5lY3RgIGlzIG5vdyBhbHdheXMgYSBcInB1cmUvbWVtb2l6ZWRcIiBjb21wb25lbnQnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBDb250ZXh0ID0gY29udGV4dDtcbiAgY29uc3QgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcnkobWFwU3RhdGVUb1Byb3BzKTtcbiAgY29uc3QgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcnkobWFwRGlzcGF0Y2hUb1Byb3BzKTtcbiAgY29uc3QgaW5pdE1lcmdlUHJvcHMgPSBtZXJnZVByb3BzRmFjdG9yeShtZXJnZVByb3BzKTtcbiAgY29uc3Qgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gQm9vbGVhbihtYXBTdGF0ZVRvUHJvcHMpO1xuXG4gIGNvbnN0IHdyYXBXaXRoQ29ubmVjdCA9IFdyYXBwZWRDb21wb25lbnQgPT4ge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkRWxlbWVudFR5cGUoV3JhcHBlZENvbXBvbmVudCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgY29ubmVjdC4gSW5zdGVhZCByZWNlaXZlZCAke3N0cmluZ2lmeUNvbXBvbmVudChXcmFwcGVkQ29tcG9uZW50KX1gKTtcbiAgICB9XG5cbiAgICBjb25zdCB3cmFwcGVkQ29tcG9uZW50TmFtZSA9IFdyYXBwZWRDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgV3JhcHBlZENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnO1xuICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gYENvbm5lY3QoJHt3cmFwcGVkQ29tcG9uZW50TmFtZX0pYDtcbiAgICBjb25zdCBzZWxlY3RvckZhY3RvcnlPcHRpb25zID0ge1xuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgZGlzcGxheU5hbWUsXG4gICAgICB3cmFwcGVkQ29tcG9uZW50TmFtZSxcbiAgICAgIFdyYXBwZWRDb21wb25lbnQsXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpbml0TWFwU3RhdGVUb1Byb3BzLFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzLFxuICAgICAgYXJlU3RhdGVzRXF1YWwsXG4gICAgICBhcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICBhcmVPd25Qcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBDb25uZWN0RnVuY3Rpb24ocHJvcHMpIHtcbiAgICAgIGNvbnN0IFtwcm9wc0NvbnRleHQsIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc10gPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZlxuICAgICAgICB9ID0gcHJvcHMsXG4gICAgICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHByb3BzLCBfZXhjbHVkZWQpO1xuXG4gICAgICAgIHJldHVybiBbcHJvcHMuY29udGV4dCwgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgd3JhcHBlclByb3BzXTtcbiAgICAgIH0sIFtwcm9wc10pO1xuICAgICAgY29uc3QgQ29udGV4dFRvVXNlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaXNDb250ZXh0Q29uc3VtZXIoIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICBjb25zdCBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KENvbnRleHRUb1VzZSk7IC8vIFRoZSBzdG9yZSBfbXVzdF8gZXhpc3QgYXMgZWl0aGVyIGEgcHJvcCBvciBpbiBjb250ZXh0LlxuICAgICAgLy8gV2UnbGwgY2hlY2sgdG8gc2VlIGlmIGl0IF9sb29rc18gbGlrZSBhIFJlZHV4IHN0b3JlIGZpcnN0LlxuICAgICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gcGFzcyB0aHJvdWdoIGEgYHN0b3JlYCBwcm9wIHRoYXQgaXMganVzdCBhIHBsYWluIHZhbHVlLlxuXG4gICAgICBjb25zdCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmdldFN0YXRlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIGNvbnN0IGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID0gQm9vbGVhbihjb250ZXh0VmFsdWUpICYmIEJvb2xlYW4oY29udGV4dFZhbHVlLnN0b3JlKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWRpZFN0b3JlQ29tZUZyb21Qcm9wcyAmJiAhZGlkU3RvcmVDb21lRnJvbUNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBcInN0b3JlXCIgaW4gdGhlIGNvbnRleHQgb2YgYCArIGBcIiR7ZGlzcGxheU5hbWV9XCIuIEVpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sIGAgKyBgb3IgcGFzcyBhIGN1c3RvbSBSZWFjdCBjb250ZXh0IHByb3ZpZGVyIHRvIDxQcm92aWRlcj4gYW5kIHRoZSBjb3JyZXNwb25kaW5nIGAgKyBgUmVhY3QgY29udGV4dCBjb25zdW1lciB0byAke2Rpc3BsYXlOYW1lfSBpbiBjb25uZWN0IG9wdGlvbnMuYCk7XG4gICAgICB9IC8vIEJhc2VkIG9uIHRoZSBwcmV2aW91cyBjaGVjaywgb25lIG9mIHRoZXNlIG11c3QgYmUgdHJ1ZVxuXG5cbiAgICAgIGNvbnN0IHN0b3JlID0gZGlkU3RvcmVDb21lRnJvbVByb3BzID8gcHJvcHMuc3RvcmUgOiBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICBjb25zdCBnZXRTZXJ2ZXJTdGF0ZSA9IGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID8gY29udGV4dFZhbHVlLmdldFNlcnZlclN0YXRlIDogc3RvcmUuZ2V0U3RhdGU7XG4gICAgICBjb25zdCBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gZGVmYXVsdFNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgICB9LCBbc3RvcmVdKTtcbiAgICAgIGNvbnN0IFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm4gTk9fU1VCU0NSSVBUSU9OX0FSUkFZOyAvLyBUaGlzIFN1YnNjcmlwdGlvbidzIHNvdXJjZSBzaG91bGQgbWF0Y2ggd2hlcmUgc3RvcmUgY2FtZSBmcm9tOiBwcm9wcyB2cy4gY29udGV4dC4gQSBjb21wb25lbnRcbiAgICAgICAgLy8gY29ubmVjdGVkIHRvIHRoZSBzdG9yZSB2aWEgcHJvcHMgc2hvdWxkbid0IHVzZSBzdWJzY3JpcHRpb24gZnJvbSBjb250ZXh0LCBvciB2aWNlIHZlcnNhLlxuXG4gICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gdW5kZWZpbmVkIDogY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbik7IC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG5cbiAgICAgICAgY29uc3Qgbm90aWZ5TmVzdGVkU3VicyA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzLmJpbmQoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgcmV0dXJuIFtzdWJzY3JpcHRpb24sIG5vdGlmeU5lc3RlZFN1YnNdO1xuICAgICAgfSwgW3N0b3JlLCBkaWRTdG9yZUNvbWVGcm9tUHJvcHMsIGNvbnRleHRWYWx1ZV0pOyAvLyBEZXRlcm1pbmUgd2hhdCB7c3RvcmUsIHN1YnNjcmlwdGlvbn0gdmFsdWUgc2hvdWxkIGJlIHB1dCBpbnRvIG5lc3RlZCBjb250ZXh0LCBpZiBuZWNlc3NhcnksXG4gICAgICAvLyBhbmQgbWVtb2l6ZSB0aGF0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGNvbnRleHQgdXBkYXRlcy5cblxuICAgICAgY29uc3Qgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoZGlkU3RvcmVDb21lRnJvbVByb3BzKSB7XG4gICAgICAgICAgLy8gVGhpcyBjb21wb25lbnQgaXMgZGlyZWN0bHkgc3Vic2NyaWJlZCB0byBhIHN0b3JlIGZyb20gcHJvcHMuXG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCBkZXNjZW5kYW50cyByZWFkaW5nIGZyb20gdGhpcyBzdG9yZSAtIHBhc3MgZG93biB3aGF0ZXZlclxuICAgICAgICAgIC8vIHRoZSBleGlzdGluZyBjb250ZXh0IHZhbHVlIGlzIGZyb20gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yLlxuICAgICAgICAgIHJldHVybiBjb250ZXh0VmFsdWU7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBwdXQgdGhpcyBjb21wb25lbnQncyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgaW50byBjb250ZXh0LCBzbyB0aGF0XG4gICAgICAgIC8vIGNvbm5lY3RlZCBkZXNjZW5kYW50cyB3b24ndCB1cGRhdGUgdW50aWwgYWZ0ZXIgdGhpcyBjb21wb25lbnQgaXMgZG9uZVxuXG5cbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0VmFsdWUsIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb25cbiAgICAgICAgfSk7XG4gICAgICB9LCBbZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWUsIHN1YnNjcmlwdGlvbl0pOyAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cbiAgICAgIGNvbnN0IGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICBjb25zdCBsYXN0V3JhcHBlclByb3BzID0gdXNlUmVmKHdyYXBwZXJQcm9wcyk7XG4gICAgICBjb25zdCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlID0gdXNlUmVmKCk7XG4gICAgICBjb25zdCByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICBjb25zdCBpc1Byb2Nlc3NpbmdEaXNwYXRjaCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICBjb25zdCBpc01vdW50ZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgY29uc3QgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciA9IHVzZVJlZigpO1xuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICBpc01vdW50ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgfSwgW10pO1xuICAgICAgY29uc3QgYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdG9yID0gKCkgPT4ge1xuICAgICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAgIC8vIC0gVGhpcyByZW5kZXIgbWF5IGhhdmUgYmVlbiB0cmlnZ2VyZWQgYnkgYSBSZWR1eCBzdG9yZSB1cGRhdGUgdGhhdCBwcm9kdWNlZCBuZXcgY2hpbGQgcHJvcHNcbiAgICAgICAgICAvLyAtIEhvd2V2ZXIsIHdlIG1heSBoYXZlIGdvdHRlbiBuZXcgd3JhcHBlciBwcm9wcyBhZnRlciB0aGF0XG4gICAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgICAvLyBCdXQsIGlmIHdlIGhhdmUgbmV3IHdyYXBwZXIgcHJvcHMsIHRob3NlIG1pZ2h0IGNoYW5nZSB0aGUgY2hpbGQgcHJvcHMsIHNvIHdlIGhhdmUgdG8gcmVjYWxjdWxhdGUgdGhpbmdzLlxuICAgICAgICAgIC8vIFNvLCB3ZSdsbCB1c2UgdGhlIGNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlIG9ubHkgaWYgdGhlIHdyYXBwZXIgcHJvcHMgYXJlIHRoZSBzYW1lIGFzIGxhc3QgdGltZS5cbiAgICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50O1xuICAgICAgICAgIH0gLy8gVE9ETyBXZSdyZSByZWFkaW5nIHRoZSBzdG9yZSBkaXJlY3RseSBpbiByZW5kZXIoKSBoZXJlLiBCYWQgaWRlYT9cbiAgICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBkbyB0aGlzIGJlY2F1c2Ugb24gcmVuZGVycyBfbm90XyBjYXVzZWQgYnkgc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0aGUgbGF0ZXN0IHN0b3JlIHN0YXRlXG4gICAgICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZS5cblxuXG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICAgIH0sIFtzdG9yZSwgd3JhcHBlclByb3BzXSk7IC8vIFdlIG5lZWQgdGhpcyB0byBleGVjdXRlIHN5bmNocm9ub3VzbHkgZXZlcnkgdGltZSB3ZSByZS1yZW5kZXIuIEhvd2V2ZXIsIFJlYWN0IHdhcm5zXG4gICAgICAvLyBhYm91dCB1c2VMYXlvdXRFZmZlY3QgaW4gU1NSLCBzbyB3ZSB0cnkgdG8gZGV0ZWN0IGVudmlyb25tZW50IGFuZCBmYWxsIGJhY2sgdG9cbiAgICAgIC8vIGp1c3QgdXNlRWZmZWN0IGluc3RlYWQgdG8gYXZvaWQgdGhlIHdhcm5pbmcsIHNpbmNlIG5laXRoZXIgd2lsbCBydW4gYW55d2F5LlxuXG4gICAgICBjb25zdCBzdWJzY3JpYmVGb3JSZWFjdCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBzdWJzY3JpYmUgPSByZWFjdExpc3RlbmVyID0+IHtcbiAgICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBpc01vdW50ZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIHJlYWN0TGlzdGVuZXIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzdWJzY3JpYmU7XG4gICAgICB9LCBbc3Vic2NyaXB0aW9uXSk7XG4gICAgICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoY2FwdHVyZVdyYXBwZXJQcm9wcywgW2xhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgd3JhcHBlclByb3BzLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzXSk7XG4gICAgICBsZXQgYWN0dWFsQ2hpbGRQcm9wcztcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVN5bmNFeHRlcm5hbFN0b3JlKCAvLyBUT0RPIFdlJ3JlIHBhc3NpbmcgdGhyb3VnaCBhIGJpZyB3cmFwcGVyIHRoYXQgZG9lcyBhIGJ1bmNoIG9mIGV4dHJhIHNpZGUgZWZmZWN0cyBiZXNpZGVzIHN1YnNjcmliaW5nXG4gICAgICAgIHN1YnNjcmliZUZvclJlYWN0LCAvLyBUT0RPIFRoaXMgaXMgaW5jcmVkaWJseSBoYWNreS4gV2UndmUgYWxyZWFkeSBwcm9jZXNzZWQgdGhlIHN0b3JlIHVwZGF0ZSBhbmQgY2FsY3VsYXRlZCBuZXcgY2hpbGQgcHJvcHMsXG4gICAgICAgIC8vIFRPRE8gYW5kIHdlJ3JlIGp1c3QgcGFzc2luZyB0aGF0IHRocm91Z2ggc28gaXQgdHJpZ2dlcnMgYSByZS1yZW5kZXIgZm9yIHVzIHJhdGhlciB0aGFuIHJlbHlpbmcgb24gYHVTRVNgLlxuICAgICAgICBhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3IsIGdldFNlcnZlclN0YXRlID8gKCkgPT4gY2hpbGRQcm9wc1NlbGVjdG9yKGdldFNlcnZlclN0YXRlKCksIHdyYXBwZXJQcm9wcykgOiBhY3R1YWxDaGlsZFByb3BzU2VsZWN0b3IpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgICAgICA7XG4gICAgICAgICAgZXJyLm1lc3NhZ2UgKz0gYFxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuJHtsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2t9XFxuXFxuYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gYWN0dWFsQ2hpbGRQcm9wcztcbiAgICAgIH0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgY29uc3QgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50ID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgLyojX19QVVJFX18qL1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCBhY3R1YWxDaGlsZFByb3BzLCB7XG4gICAgICAgICAgICByZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgICB9KSlcbiAgICAgICAgKTtcbiAgICAgIH0sIFtyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCBXcmFwcGVkQ29tcG9uZW50LCBhY3R1YWxDaGlsZFByb3BzXSk7IC8vIElmIFJlYWN0IHNlZXMgdGhlIGV4YWN0IHNhbWUgZWxlbWVudCByZWZlcmVuY2UgYXMgbGFzdCB0aW1lLCBpdCBiYWlscyBvdXQgb2YgcmUtcmVuZGVyaW5nXG4gICAgICAvLyB0aGF0IGNoaWxkLCBzYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIFJlYWN0Lm1lbW8oKSBvciByZXR1cm5lZCBmYWxzZSBmcm9tIHNob3VsZENvbXBvbmVudFVwZGF0ZS5cblxuICAgICAgY29uc3QgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH1cblxuICAgIGNvbnN0IF9Db25uZWN0ID0gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pO1xuXG4gICAgLy8gQWRkIGEgaGFja3kgY2FzdCB0byBnZXQgdGhlIHJpZ2h0IG91dHB1dCB0eXBlXG4gICAgY29uc3QgQ29ubmVjdCA9IF9Db25uZWN0O1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IENvbm5lY3RGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIGNvbnN0IF9mb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZjogcmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBmb3J3YXJkZWQgPSBfZm9yd2FyZGVkO1xuICAgICAgZm9yd2FyZGVkLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICBmb3J3YXJkZWQuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICByZXR1cm4gaG9pc3RTdGF0aWNzKGZvcndhcmRlZCwgV3JhcHBlZENvbXBvbmVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvaXN0U3RhdGljcyhDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcblxuICByZXR1cm4gd3JhcFdpdGhDb25uZWN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0OyIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0Jztcbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTdG9yZWAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3RvcmVIb29rKGNvbnRleHQgPSBSZWFjdFJlZHV4Q29udGV4dCkge1xuICBjb25zdCB1c2VSZWR1eENvbnRleHQgPSAvLyBAdHMtaWdub3JlXG4gIGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6ICgpID0+IHVzZUNvbnRleHQoY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VTdG9yZSgpIHtcbiAgICBjb25zdCB7XG4gICAgICBzdG9yZVxuICAgIH0gPSB1c2VSZWR1eENvbnRleHQoKTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGNvbnN0IHVzZVN0b3JlID0gLyojX19QVVJFX18qL2NyZWF0ZVN0b3JlSG9vaygpOyIsImltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcbmltcG9ydCB7IHVzZVN0b3JlIGFzIHVzZURlZmF1bHRTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi91c2VTdG9yZSc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlRGlzcGF0Y2hgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURpc3BhdGNoSG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlU3RvcmUgPSAvLyBAdHMtaWdub3JlXG4gIGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFN0b3JlIDogY3JlYXRlU3RvcmVIb29rKGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlRGlzcGF0Y2goKSB7XG4gICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpOyAvLyBAdHMtaWdub3JlXG5cbiAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2g7XG4gIH07XG59XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgcmVkdXggYGRpc3BhdGNoYCBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybnMge2FueXxmdW5jdGlvbn0gcmVkdXggc3RvcmUncyBgZGlzcGF0Y2hgIGZ1bmN0aW9uXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjayB9IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VEaXNwYXRjaCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICh7IHZhbHVlIH0pID0+IHtcclxuICogICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcclxuICogICBjb25zdCBpbmNyZWFzZUNvdW50ZXIgPSB1c2VDYWxsYmFjaygoKSA9PiBkaXNwYXRjaCh7IHR5cGU6ICdpbmNyZWFzZS1jb3VudGVyJyB9KSwgW10pXHJcbiAqICAgcmV0dXJuIChcclxuICogICAgIDxkaXY+XHJcbiAqICAgICAgIDxzcGFuPnt2YWx1ZX08L3NwYW4+XHJcbiAqICAgICAgIDxidXR0b24gb25DbGljaz17aW5jcmVhc2VDb3VudGVyfT5JbmNyZWFzZSBjb3VudGVyPC9idXR0b24+XHJcbiAqICAgICA8L2Rpdj5cclxuICogICApXHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCBjb25zdCB1c2VEaXNwYXRjaCA9IC8qI19fUFVSRV9fKi9jcmVhdGVEaXNwYXRjaEhvb2soKTsiLCIvLyBUaGUgcHJpbWFyeSBlbnRyeSBwb2ludCBhc3N1bWVzIHdlJ3JlIHdvcmtpbmcgd2l0aCBzdGFuZGFyZCBSZWFjdERPTS9STiwgYnV0XG4vLyBvbGRlciB2ZXJzaW9ucyB0aGF0IGRvIG5vdCBpbmNsdWRlIGB1c2VTeW5jRXh0ZXJuYWxTdG9yZWAgKFJlYWN0IDE2LjkgLSAxNy54KS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhlIHVzZVN5bmNFeHRlcm5hbFN0b3JlIGNvbXBhdCBzaGltIGlzIG5lZWRlZC5cbmltcG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlIH0gZnJvbSAndXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbSc7XG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3RvciB9IGZyb20gJ3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vd2l0aC1zZWxlY3Rvcic7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgeyBzZXRCYXRjaCB9IGZyb20gJy4vdXRpbHMvYmF0Y2gnO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZVVzZVNlbGVjdG9yIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3Rvcic7XG5pbXBvcnQgeyBpbml0aWFsaXplQ29ubmVjdCB9IGZyb20gJy4vY29tcG9uZW50cy9jb25uZWN0JztcbmluaXRpYWxpemVVc2VTZWxlY3Rvcih1c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3Rvcik7XG5pbml0aWFsaXplQ29ubmVjdCh1c2VTeW5jRXh0ZXJuYWxTdG9yZSk7IC8vIEVuYWJsZSBiYXRjaGVkIHVwZGF0ZXMgaW4gb3VyIHN1YnNjcmlwdGlvbnMgZm9yIHVzZVxuLy8gd2l0aCBzdGFuZGFyZCBSZWFjdCByZW5kZXJlcnMgKFJlYWN0RE9NLCBSZWFjdCBOYXRpdmUpXG5cbnNldEJhdGNoKGJhdGNoKTtcbmV4cG9ydCB7IGJhdGNoIH07XG5leHBvcnQgKiBmcm9tICcuL2V4cG9ydHMnOyIsImZ1bmN0aW9uIHN0eWxpc19taW4gKFcpIHtcbiAgZnVuY3Rpb24gTShkLCBjLCBlLCBoLCBhKSB7XG4gICAgZm9yICh2YXIgbSA9IDAsIGIgPSAwLCB2ID0gMCwgbiA9IDAsIHEsIGcsIHggPSAwLCBLID0gMCwgaywgdSA9IGsgPSBxID0gMCwgbCA9IDAsIHIgPSAwLCBJID0gMCwgdCA9IDAsIEIgPSBlLmxlbmd0aCwgSiA9IEIgLSAxLCB5LCBmID0gJycsIHAgPSAnJywgRiA9ICcnLCBHID0gJycsIEM7IGwgPCBCOykge1xuICAgICAgZyA9IGUuY2hhckNvZGVBdChsKTtcbiAgICAgIGwgPT09IEogJiYgMCAhPT0gYiArIG4gKyB2ICsgbSAmJiAoMCAhPT0gYiAmJiAoZyA9IDQ3ID09PSBiID8gMTAgOiA0NyksIG4gPSB2ID0gbSA9IDAsIEIrKywgSisrKTtcblxuICAgICAgaWYgKDAgPT09IGIgKyBuICsgdiArIG0pIHtcbiAgICAgICAgaWYgKGwgPT09IEogJiYgKDAgPCByICYmIChmID0gZi5yZXBsYWNlKE4sICcnKSksIDAgPCBmLnRyaW0oKS5sZW5ndGgpKSB7XG4gICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgZiArPSBlLmNoYXJBdChsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBnID0gNTk7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICBjYXNlIDEyMzpcbiAgICAgICAgICAgIGYgPSBmLnRyaW0oKTtcbiAgICAgICAgICAgIHEgPSBmLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgICBrID0gMTtcblxuICAgICAgICAgICAgZm9yICh0ID0gKytsOyBsIDwgQjspIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChnID0gZS5jaGFyQ29kZUF0KGwpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICAgICAgICBrKys7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgICAgICAgICAgay0tO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgc3dpdGNoIChnID0gZS5jaGFyQ29kZUF0KGwgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodSA9IGwgKyAxOyB1IDwgSjsgKyt1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5jaGFyQ29kZUF0KHUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICg0MiA9PT0gZyAmJiA0MiA9PT0gZS5jaGFyQ29kZUF0KHUgLSAxKSAmJiBsICsgMiAhPT0gdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICg0NyA9PT0gZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdSArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gdTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAgICAgZysrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MDpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgICAgIGZvciAoOyBsKysgPCBKICYmIGUuY2hhckNvZGVBdChsKSAhPT0gZzspIHtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKDAgPT09IGspIGJyZWFrO1xuICAgICAgICAgICAgICBsKys7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGsgPSBlLnN1YnN0cmluZyh0LCBsKTtcbiAgICAgICAgICAgIDAgPT09IHEgJiYgKHEgPSAoZiA9IGYucmVwbGFjZShjYSwgJycpLnRyaW0oKSkuY2hhckNvZGVBdCgwKSk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAocSkge1xuICAgICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAgIDAgPCByICYmIChmID0gZi5yZXBsYWNlKE4sICcnKSk7XG4gICAgICAgICAgICAgICAgZyA9IGYuY2hhckNvZGVBdCgxKTtcblxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6XG4gICAgICAgICAgICAgICAgICBjYXNlIDEwOTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgciA9IGM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByID0gTztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBrID0gTShjLCByLCBrLCBnLCBhICsgMSk7XG4gICAgICAgICAgICAgICAgdCA9IGsubGVuZ3RoO1xuICAgICAgICAgICAgICAgIDAgPCBBICYmIChyID0gWChPLCBmLCBJKSwgQyA9IEgoMywgaywgciwgYywgRCwgeiwgdCwgZywgYSwgaCksIGYgPSByLmpvaW4oJycpLCB2b2lkIDAgIT09IEMgJiYgMCA9PT0gKHQgPSAoayA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChnID0gMCwgayA9ICcnKSk7XG4gICAgICAgICAgICAgICAgaWYgKDAgPCB0KSBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgICAgICAgICBmID0gZi5yZXBsYWNlKGRhLCBlYSk7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDQ1OlxuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwNzpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShmYSwgJyQxICQyJyk7XG4gICAgICAgICAgICAgICAgICAgIGsgPSBmICsgJ3snICsgayArICd9JztcbiAgICAgICAgICAgICAgICAgICAgayA9IDEgPT09IHcgfHwgMiA9PT0gdyAmJiBMKCdAJyArIGssIDMpID8gJ0Atd2Via2l0LScgKyBrICsgJ0AnICsgayA6ICdAJyArIGs7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBrID0gZiArIGssIDExMiA9PT0gaCAmJiAoayA9IChwICs9IGssICcnKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGsgPSAnJztcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGsgPSBNKGMsIFgoYywgZiwgSSksIGssIGgsIGEgKyAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgRiArPSBrO1xuICAgICAgICAgICAgayA9IEkgPSByID0gdSA9IHEgPSAwO1xuICAgICAgICAgICAgZiA9ICcnO1xuICAgICAgICAgICAgZyA9IGUuY2hhckNvZGVBdCgrK2wpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBjYXNlIDU5OlxuICAgICAgICAgICAgZiA9ICgwIDwgciA/IGYucmVwbGFjZShOLCAnJykgOiBmKS50cmltKCk7XG4gICAgICAgICAgICBpZiAoMSA8ICh0ID0gZi5sZW5ndGgpKSBzd2l0Y2ggKDAgPT09IHUgJiYgKHEgPSBmLmNoYXJDb2RlQXQoMCksIDQ1ID09PSBxIHx8IDk2IDwgcSAmJiAxMjMgPiBxKSAmJiAodCA9IChmID0gZi5yZXBsYWNlKCcgJywgJzonKSkubGVuZ3RoKSwgMCA8IEEgJiYgdm9pZCAwICE9PSAoQyA9IEgoMSwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpKSAmJiAwID09PSAodCA9IChmID0gQy50cmltKCkpLmxlbmd0aCkgJiYgKGYgPSAnXFx4MDBcXHgwMCcpLCBxID0gZi5jaGFyQ29kZUF0KDApLCBnID0gZi5jaGFyQ29kZUF0KDEpLCBxKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDY0OlxuICAgICAgICAgICAgICAgIGlmICgxMDUgPT09IGcgfHwgOTkgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgIEcgKz0gZiArIGUuY2hhckF0KGwpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgNTggIT09IGYuY2hhckNvZGVBdCh0IC0gMSkgJiYgKHAgKz0gUChmLCBxLCBnLCBmLmNoYXJDb2RlQXQoMikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEkgPSByID0gdSA9IHEgPSAwO1xuICAgICAgICAgICAgZiA9ICcnO1xuICAgICAgICAgICAgZyA9IGUuY2hhckNvZGVBdCgrK2wpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICBjYXNlIDEzOlxuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIDQ3ID09PSBiID8gYiA9IDAgOiAwID09PSAxICsgcSAmJiAxMDcgIT09IGggJiYgMCA8IGYubGVuZ3RoICYmIChyID0gMSwgZiArPSAnXFx4MDAnKTtcbiAgICAgICAgICAwIDwgQSAqIFkgJiYgSCgwLCBmLCBjLCBkLCBELCB6LCBwLmxlbmd0aCwgaCwgYSwgaCk7XG4gICAgICAgICAgeiA9IDE7XG4gICAgICAgICAgRCsrO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNTk6XG4gICAgICAgIGNhc2UgMTI1OlxuICAgICAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgICAgICB6Kys7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB6Kys7XG4gICAgICAgICAgeSA9IGUuY2hhckF0KGwpO1xuXG4gICAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIG0gKyBiKSBzd2l0Y2ggKHgpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGNhc2UgMzI6XG4gICAgICAgICAgICAgICAgICB5ID0gJyc7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAzMiAhPT0gZyAmJiAoeSA9ICcgJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcMCc7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFxmJztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXHYnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyBtICYmIChyID0gSSA9IDEsIHkgPSAnXFxmJyArIHkpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMDg6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgYiArIG0gKyBFICYmIDAgPCB1KSBzd2l0Y2ggKGwgLSB1KSB7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgMTEyID09PSB4ICYmIDU4ID09PSBlLmNoYXJDb2RlQXQobCAtIDMpICYmIChFID0geCk7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAxMTEgPT09IEsgJiYgKEUgPSBLKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA1ODpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyBtICYmICh1ID0gbCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQ0OlxuICAgICAgICAgICAgICAwID09PSBiICsgdiArIG4gKyBtICYmIChyID0gMSwgeSArPSAnXFxyJyk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgY2FzZSAzOTpcbiAgICAgICAgICAgICAgMCA9PT0gYiAmJiAobiA9IG4gPT09IGcgPyAwIDogMCA9PT0gbiA/IGcgOiBuKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgOTE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgdiAmJiBtKys7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkzOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbS0tO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MTpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyBtICYmIHYtLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgIGlmICgwID09PSBuICsgYiArIG0pIHtcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gcSkgc3dpdGNoICgyICogeCArIDMgKiBLKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDUzMzpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHEgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2Kys7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSArIHUgKyBrICYmIChrID0gMSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgaWYgKCEoMCA8IG4gKyBtICsgdikpIHN3aXRjaCAoYikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoMiAqIGcgKyAzICogZS5jaGFyQ29kZUF0KGwgKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDIzNTpcbiAgICAgICAgICAgICAgICAgICAgICBiID0gNDc7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMjA6XG4gICAgICAgICAgICAgICAgICAgICAgdCA9IGwsIGIgPSA0MjtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDQyOlxuICAgICAgICAgICAgICAgICAgNDcgPT09IGcgJiYgNDIgPT09IHggJiYgdCArIDIgIT09IGwgJiYgKDMzID09PSBlLmNoYXJDb2RlQXQodCArIDIpICYmIChwICs9IGUuc3Vic3RyaW5nKHQsIGwgKyAxKSksIHkgPSAnJywgYiA9IDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgMCA9PT0gYiAmJiAoZiArPSB5KTtcbiAgICAgIH1cblxuICAgICAgSyA9IHg7XG4gICAgICB4ID0gZztcbiAgICAgIGwrKztcbiAgICB9XG5cbiAgICB0ID0gcC5sZW5ndGg7XG5cbiAgICBpZiAoMCA8IHQpIHtcbiAgICAgIHIgPSBjO1xuICAgICAgaWYgKDAgPCBBICYmIChDID0gSCgyLCBwLCByLCBkLCBELCB6LCB0LCBoLCBhLCBoKSwgdm9pZCAwICE9PSBDICYmIDAgPT09IChwID0gQykubGVuZ3RoKSkgcmV0dXJuIEcgKyBwICsgRjtcbiAgICAgIHAgPSByLmpvaW4oJywnKSArICd7JyArIHAgKyAnfSc7XG5cbiAgICAgIGlmICgwICE9PSB3ICogRSkge1xuICAgICAgICAyICE9PSB3IHx8IEwocCwgMikgfHwgKEUgPSAwKTtcblxuICAgICAgICBzd2l0Y2ggKEUpIHtcbiAgICAgICAgICBjYXNlIDExMTpcbiAgICAgICAgICAgIHAgPSBwLnJlcGxhY2UoaGEsICc6LW1vei0kMScpICsgcDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMTI6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKFEsICc6Oi13ZWJraXQtaW5wdXQtJDEnKSArIHAucmVwbGFjZShRLCAnOjotbW96LSQxJykgKyBwLnJlcGxhY2UoUSwgJzotbXMtaW5wdXQtJDEnKSArIHA7XG4gICAgICAgIH1cblxuICAgICAgICBFID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gRyArIHAgKyBGO1xuICB9XG5cbiAgZnVuY3Rpb24gWChkLCBjLCBlKSB7XG4gICAgdmFyIGggPSBjLnRyaW0oKS5zcGxpdChpYSk7XG4gICAgYyA9IGg7XG4gICAgdmFyIGEgPSBoLmxlbmd0aCxcbiAgICAgICAgbSA9IGQubGVuZ3RoO1xuXG4gICAgc3dpdGNoIChtKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHZhciBiID0gMDtcblxuICAgICAgICBmb3IgKGQgPSAwID09PSBtID8gJycgOiBkWzBdICsgJyAnOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgY1tiXSA9IFooZCwgY1tiXSwgZSkudHJpbSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHZhciB2ID0gYiA9IDA7XG5cbiAgICAgICAgZm9yIChjID0gW107IGIgPCBhOyArK2IpIHtcbiAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IG07ICsrbikge1xuICAgICAgICAgICAgY1t2KytdID0gWihkW25dICsgJyAnLCBoW2JdLCBlKS50cmltKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIGZ1bmN0aW9uIFooZCwgYywgZSkge1xuICAgIHZhciBoID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIDMzID4gaCAmJiAoaCA9IChjID0gYy50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgc3dpdGNoIChoKSB7XG4gICAgICBjYXNlIDM4OlxuICAgICAgICByZXR1cm4gYy5yZXBsYWNlKEYsICckMScgKyBkLnRyaW0oKSk7XG5cbiAgICAgIGNhc2UgNTg6XG4gICAgICAgIHJldHVybiBkLnRyaW0oKSArIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoMCA8IDEgKiBlICYmIDAgPCBjLmluZGV4T2YoJ1xcZicpKSByZXR1cm4gYy5yZXBsYWNlKEYsICg1OCA9PT0gZC5jaGFyQ29kZUF0KDApID8gJycgOiAnJDEnKSArIGQudHJpbSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZCArIGM7XG4gIH1cblxuICBmdW5jdGlvbiBQKGQsIGMsIGUsIGgpIHtcbiAgICB2YXIgYSA9IGQgKyAnOycsXG4gICAgICAgIG0gPSAyICogYyArIDMgKiBlICsgNCAqIGg7XG5cbiAgICBpZiAoOTQ0ID09PSBtKSB7XG4gICAgICBkID0gYS5pbmRleE9mKCc6JywgOSkgKyAxO1xuICAgICAgdmFyIGIgPSBhLnN1YnN0cmluZyhkLCBhLmxlbmd0aCAtIDEpLnRyaW0oKTtcbiAgICAgIGIgPSBhLnN1YnN0cmluZygwLCBkKS50cmltKCkgKyBiICsgJzsnO1xuICAgICAgcmV0dXJuIDEgPT09IHcgfHwgMiA9PT0gdyAmJiBMKGIsIDEpID8gJy13ZWJraXQtJyArIGIgKyBiIDogYjtcbiAgICB9XG5cbiAgICBpZiAoMCA9PT0gdyB8fCAyID09PSB3ICYmICFMKGEsIDEpKSByZXR1cm4gYTtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAxMDE1OlxuICAgICAgICByZXR1cm4gOTcgPT09IGEuY2hhckNvZGVBdCgxMCkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDk1MTpcbiAgICAgICAgcmV0dXJuIDExNiA9PT0gYS5jaGFyQ29kZUF0KDMpID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NjM6XG4gICAgICAgIHJldHVybiAxMTAgPT09IGEuY2hhckNvZGVBdCg1KSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMTAwOTpcbiAgICAgICAgaWYgKDEwMCAhPT0gYS5jaGFyQ29kZUF0KDQpKSBicmVhaztcblxuICAgICAgY2FzZSA5Njk6XG4gICAgICBjYXNlIDk0MjpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgYTtcblxuICAgICAgY2FzZSA5Nzg6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbW96LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDE5OlxuICAgICAgY2FzZSA5ODM6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbW96LScgKyBhICsgJy1tcy0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgODgzOlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg4KSkgcmV0dXJuICctd2Via2l0LScgKyBhICsgYTtcbiAgICAgICAgaWYgKDAgPCBhLmluZGV4T2YoJ2ltYWdlLXNldCgnLCAxMSkpIHJldHVybiBhLnJlcGxhY2UoamEsICckMS13ZWJraXQtJDInKSArIGE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMjpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNCkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDUpKSB7XG4gICAgICAgICAgY2FzZSAxMDM6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LScgKyBhLnJlcGxhY2UoJy1ncm93JywgJycpICsgJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2dyb3cnLCAncG9zaXRpdmUnKSArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnc2hyaW5rJywgJ25lZ2F0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSA5ODpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEucmVwbGFjZSgnYmFzaXMnLCAncHJlZmVycmVkLXNpemUnKSArIGE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTY0OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDEwMjM6XG4gICAgICAgIGlmICg5OSAhPT0gYS5jaGFyQ29kZUF0KDgpKSBicmVhaztcbiAgICAgICAgYiA9IGEuc3Vic3RyaW5nKGEuaW5kZXhPZignOicsIDE1KSkucmVwbGFjZSgnZmxleC0nLCAnJykucmVwbGFjZSgnc3BhY2UtYmV0d2VlbicsICdqdXN0aWZ5Jyk7XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC1ib3gtcGFjaycgKyBiICsgJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtcGFjaycgKyBiICsgYTtcblxuICAgICAgY2FzZSAxMDA1OlxuICAgICAgICByZXR1cm4ga2EudGVzdChhKSA/IGEucmVwbGFjZShhYSwgJzotd2Via2l0LScpICsgYS5yZXBsYWNlKGFhLCAnOi1tb3otJykgKyBhIDogYTtcblxuICAgICAgY2FzZSAxZTM6XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZygxMykudHJpbSgpO1xuICAgICAgICBjID0gYi5pbmRleE9mKCctJykgKyAxO1xuXG4gICAgICAgIHN3aXRjaCAoYi5jaGFyQ29kZUF0KDApICsgYi5jaGFyQ29kZUF0KGMpKSB7XG4gICAgICAgICAgY2FzZSAyMjY6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0YicpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIzMjpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ3RiLXJsJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAnbHInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAxNzpcbiAgICAgICAgaWYgKC0xID09PSBhLmluZGV4T2YoJ3N0aWNreScsIDkpKSBicmVhaztcblxuICAgICAgY2FzZSA5NzU6XG4gICAgICAgIGMgPSAoYSA9IGQpLmxlbmd0aCAtIDEwO1xuICAgICAgICBiID0gKDMzID09PSBhLmNoYXJDb2RlQXQoYykgPyBhLnN1YnN0cmluZygwLCBjKSA6IGEpLnN1YnN0cmluZyhkLmluZGV4T2YoJzonLCA3KSArIDEpLnRyaW0oKTtcblxuICAgICAgICBzd2l0Y2ggKG0gPSBiLmNoYXJDb2RlQXQoMCkgKyAoYi5jaGFyQ29kZUF0KDcpIHwgMCkpIHtcbiAgICAgICAgICBjYXNlIDIwMzpcbiAgICAgICAgICAgIGlmICgxMTEgPiBiLmNoYXJDb2RlQXQoOCkpIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGE7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjA3OlxuICAgICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgKDEwMiA8IG0gPyAnaW5saW5lLScgOiAnJykgKyAnYm94JykgKyAnOycgKyBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgJzsnICsgYS5yZXBsYWNlKGIsICctbXMtJyArIGIgKyAnYm94JykgKyAnOycgKyBhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGEgKyAnOyc7XG5cbiAgICAgIGNhc2UgOTM4OlxuICAgICAgICBpZiAoNDUgPT09IGEuY2hhckNvZGVBdCg1KSkgc3dpdGNoIChhLmNoYXJDb2RlQXQoNikpIHtcbiAgICAgICAgICBjYXNlIDEwNTpcbiAgICAgICAgICAgIHJldHVybiBiID0gYS5yZXBsYWNlKCctaXRlbXMnLCAnJyksICctd2Via2l0LScgKyBhICsgJy13ZWJraXQtYm94LScgKyBiICsgJy1tcy1mbGV4LScgKyBiICsgYTtcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWl0ZW0tJyArIGEucmVwbGFjZShiYSwgJycpICsgYTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLWZsZXgtbGluZS1wYWNrJyArIGEucmVwbGFjZSgnYWxpZ24tY29udGVudCcsICcnKS5yZXBsYWNlKGJhLCAnJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk3MzpcbiAgICAgIGNhc2UgOTg5OlxuICAgICAgICBpZiAoNDUgIT09IGEuY2hhckNvZGVBdCgzKSB8fCAxMjIgPT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTMxOlxuICAgICAgY2FzZSA5NTM6XG4gICAgICAgIGlmICghMCA9PT0gbGEudGVzdChkKSkgcmV0dXJuIDExNSA9PT0gKGIgPSBkLnN1YnN0cmluZyhkLmluZGV4T2YoJzonKSArIDEpKS5jaGFyQ29kZUF0KDApID8gUChkLnJlcGxhY2UoJ3N0cmV0Y2gnLCAnZmlsbC1hdmFpbGFibGUnKSwgYywgZSwgaCkucmVwbGFjZSgnOmZpbGwtYXZhaWxhYmxlJywgJzpzdHJldGNoJykgOiBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArIGIpICsgYS5yZXBsYWNlKGIsICctbW96LScgKyBiLnJlcGxhY2UoJ2ZpbGwtJywgJycpKSArIGE7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk2MjpcbiAgICAgICAgaWYgKGEgPSAnLXdlYmtpdC0nICsgYSArICgxMDIgPT09IGEuY2hhckNvZGVBdCg1KSA/ICctbXMtJyArIGEgOiAnJykgKyBhLCAyMTEgPT09IGUgKyBoICYmIDEwNSA9PT0gYS5jaGFyQ29kZUF0KDEzKSAmJiAwIDwgYS5pbmRleE9mKCd0cmFuc2Zvcm0nLCAxMCkpIHJldHVybiBhLnN1YnN0cmluZygwLCBhLmluZGV4T2YoJzsnLCAyNykgKyAxKS5yZXBsYWNlKG1hLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgIH1cblxuICAgIHJldHVybiBhO1xuICB9XG5cbiAgZnVuY3Rpb24gTChkLCBjKSB7XG4gICAgdmFyIGUgPSBkLmluZGV4T2YoMSA9PT0gYyA/ICc6JyA6ICd7JyksXG4gICAgICAgIGggPSBkLnN1YnN0cmluZygwLCAzICE9PSBjID8gZSA6IDEwKTtcbiAgICBlID0gZC5zdWJzdHJpbmcoZSArIDEsIGQubGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuIFIoMiAhPT0gYyA/IGggOiBoLnJlcGxhY2UobmEsICckMScpLCBlLCBjKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVhKGQsIGMpIHtcbiAgICB2YXIgZSA9IFAoYywgYy5jaGFyQ29kZUF0KDApLCBjLmNoYXJDb2RlQXQoMSksIGMuY2hhckNvZGVBdCgyKSk7XG4gICAgcmV0dXJuIGUgIT09IGMgKyAnOycgPyBlLnJlcGxhY2Uob2EsICcgb3IgKCQxKScpLnN1YnN0cmluZyg0KSA6ICcoJyArIGMgKyAnKSc7XG4gIH1cblxuICBmdW5jdGlvbiBIKGQsIGMsIGUsIGgsIGEsIG0sIGIsIHYsIG4sIHEpIHtcbiAgICBmb3IgKHZhciBnID0gMCwgeCA9IGMsIHc7IGcgPCBBOyArK2cpIHtcbiAgICAgIHN3aXRjaCAodyA9IFNbZ10uY2FsbChCLCBkLCB4LCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSkge1xuICAgICAgICBjYXNlIHZvaWQgMDpcbiAgICAgICAgY2FzZSAhMTpcbiAgICAgICAgY2FzZSAhMDpcbiAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeCA9IHc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHggIT09IGMpIHJldHVybiB4O1xuICB9XG5cbiAgZnVuY3Rpb24gVChkKSB7XG4gICAgc3dpdGNoIChkKSB7XG4gICAgICBjYXNlIHZvaWQgMDpcbiAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgQSA9IFMubGVuZ3RoID0gMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZCkgU1tBKytdID0gZDtlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIGQpIGZvciAodmFyIGMgPSAwLCBlID0gZC5sZW5ndGg7IGMgPCBlOyArK2MpIHtcbiAgICAgICAgICBUKGRbY10pO1xuICAgICAgICB9IGVsc2UgWSA9ICEhZCB8IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIFQ7XG4gIH1cblxuICBmdW5jdGlvbiBVKGQpIHtcbiAgICBkID0gZC5wcmVmaXg7XG4gICAgdm9pZCAwICE9PSBkICYmIChSID0gbnVsbCwgZCA/ICdmdW5jdGlvbicgIT09IHR5cGVvZiBkID8gdyA9IDEgOiAodyA9IDIsIFIgPSBkKSA6IHcgPSAwKTtcbiAgICByZXR1cm4gVTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEIoZCwgYykge1xuICAgIHZhciBlID0gZDtcbiAgICAzMyA+IGUuY2hhckNvZGVBdCgwKSAmJiAoZSA9IGUudHJpbSgpKTtcbiAgICBWID0gZTtcbiAgICBlID0gW1ZdO1xuXG4gICAgaWYgKDAgPCBBKSB7XG4gICAgICB2YXIgaCA9IEgoLTEsIGMsIGUsIGUsIEQsIHosIDAsIDAsIDAsIDApO1xuICAgICAgdm9pZCAwICE9PSBoICYmICdzdHJpbmcnID09PSB0eXBlb2YgaCAmJiAoYyA9IGgpO1xuICAgIH1cblxuICAgIHZhciBhID0gTShPLCBlLCBjLCAwLCAwKTtcbiAgICAwIDwgQSAmJiAoaCA9IEgoLTIsIGEsIGUsIGUsIEQsIHosIGEubGVuZ3RoLCAwLCAwLCAwKSwgdm9pZCAwICE9PSBoICYmIChhID0gaCkpO1xuICAgIFYgPSAnJztcbiAgICBFID0gMDtcbiAgICB6ID0gRCA9IDE7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICB2YXIgY2EgPSAvXlxcMCsvZyxcbiAgICAgIE4gPSAvW1xcMFxcclxcZl0vZyxcbiAgICAgIGFhID0gLzogKi9nLFxuICAgICAga2EgPSAvem9vfGdyYS8sXG4gICAgICBtYSA9IC8oWyw6IF0pKHRyYW5zZm9ybSkvZyxcbiAgICAgIGlhID0gLyxcXHIrPy9nLFxuICAgICAgRiA9IC8oW1xcdFxcclxcbiBdKSpcXGY/Ji9nLFxuICAgICAgZmEgPSAvQChrXFx3KylcXHMqKFxcUyopXFxzKi8sXG4gICAgICBRID0gLzo6KHBsYWNlKS9nLFxuICAgICAgaGEgPSAvOihyZWFkLW9ubHkpL2csXG4gICAgICBHID0gL1tzdmhdXFx3Ky1bdGJscl17Mn0vLFxuICAgICAgZGEgPSAvXFwoXFxzKiguKilcXHMqXFwpL2csXG4gICAgICBvYSA9IC8oW1xcc1xcU10qPyk7L2csXG4gICAgICBiYSA9IC8tc2VsZnxmbGV4LS9nLFxuICAgICAgbmEgPSAvW15dKj8oOltycF1bZWxdYVtcXHctXSspW15dKi8sXG4gICAgICBsYSA9IC9zdHJldGNofDpcXHMqXFx3K1xcLSg/OmNvbnRlfGF2YWlsKS8sXG4gICAgICBqYSA9IC8oW14tXSkoaW1hZ2Utc2V0XFwoKS8sXG4gICAgICB6ID0gMSxcbiAgICAgIEQgPSAxLFxuICAgICAgRSA9IDAsXG4gICAgICB3ID0gMSxcbiAgICAgIE8gPSBbXSxcbiAgICAgIFMgPSBbXSxcbiAgICAgIEEgPSAwLFxuICAgICAgUiA9IG51bGwsXG4gICAgICBZID0gMCxcbiAgICAgIFYgPSAnJztcbiAgQi51c2UgPSBUO1xuICBCLnNldCA9IFU7XG4gIHZvaWQgMCAhPT0gVyAmJiBVKFcpO1xuICByZXR1cm4gQjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R5bGlzX21pbjtcbiIsInZhciB1bml0bGVzc0tleXMgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiAxLFxuICBib3JkZXJJbWFnZU91dHNldDogMSxcbiAgYm9yZGVySW1hZ2VTbGljZTogMSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogMSxcbiAgYm94RmxleDogMSxcbiAgYm94RmxleEdyb3VwOiAxLFxuICBib3hPcmRpbmFsR3JvdXA6IDEsXG4gIGNvbHVtbkNvdW50OiAxLFxuICBjb2x1bW5zOiAxLFxuICBmbGV4OiAxLFxuICBmbGV4R3JvdzogMSxcbiAgZmxleFBvc2l0aXZlOiAxLFxuICBmbGV4U2hyaW5rOiAxLFxuICBmbGV4TmVnYXRpdmU6IDEsXG4gIGZsZXhPcmRlcjogMSxcbiAgZ3JpZFJvdzogMSxcbiAgZ3JpZFJvd0VuZDogMSxcbiAgZ3JpZFJvd1NwYW46IDEsXG4gIGdyaWRSb3dTdGFydDogMSxcbiAgZ3JpZENvbHVtbjogMSxcbiAgZ3JpZENvbHVtbkVuZDogMSxcbiAgZ3JpZENvbHVtblNwYW46IDEsXG4gIGdyaWRDb2x1bW5TdGFydDogMSxcbiAgbXNHcmlkUm93OiAxLFxuICBtc0dyaWRSb3dTcGFuOiAxLFxuICBtc0dyaWRDb2x1bW46IDEsXG4gIG1zR3JpZENvbHVtblNwYW46IDEsXG4gIGZvbnRXZWlnaHQ6IDEsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG9wYWNpdHk6IDEsXG4gIG9yZGVyOiAxLFxuICBvcnBoYW5zOiAxLFxuICB0YWJTaXplOiAxLFxuICB3aWRvd3M6IDEsXG4gIHpJbmRleDogMSxcbiAgem9vbTogMSxcbiAgV2Via2l0TGluZUNsYW1wOiAxLFxuICAvLyBTVkctcmVsYXRlZCBwcm9wZXJ0aWVzXG4gIGZpbGxPcGFjaXR5OiAxLFxuICBmbG9vZE9wYWNpdHk6IDEsXG4gIHN0b3BPcGFjaXR5OiAxLFxuICBzdHJva2VEYXNoYXJyYXk6IDEsXG4gIHN0cm9rZURhc2hvZmZzZXQ6IDEsXG4gIHN0cm9rZU1pdGVybGltaXQ6IDEsXG4gIHN0cm9rZU9wYWNpdHk6IDEsXG4gIHN0cm9rZVdpZHRoOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCB1bml0bGVzc0tleXM7XG4iLCJmdW5jdGlvbiBtZW1vaXplKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemU7XG4iLCJpbXBvcnQgbWVtb2l6ZSBmcm9tICdAZW1vdGlvbi9tZW1vaXplJztcblxudmFyIHJlYWN0UHJvcHNSZWdleCA9IC9eKChjaGlsZHJlbnxkYW5nZXJvdXNseVNldElubmVySFRNTHxrZXl8cmVmfGF1dG9Gb2N1c3xkZWZhdWx0VmFsdWV8ZGVmYXVsdENoZWNrZWR8aW5uZXJIVE1MfHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ3xzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmd8dmFsdWVMaW5rfGFiYnJ8YWNjZXB0fGFjY2VwdENoYXJzZXR8YWNjZXNzS2V5fGFjdGlvbnxhbGxvd3xhbGxvd1VzZXJNZWRpYXxhbGxvd1BheW1lbnRSZXF1ZXN0fGFsbG93RnVsbFNjcmVlbnxhbGxvd1RyYW5zcGFyZW5jeXxhbHR8YXN5bmN8YXV0b0NvbXBsZXRlfGF1dG9QbGF5fGNhcHR1cmV8Y2VsbFBhZGRpbmd8Y2VsbFNwYWNpbmd8Y2hhbGxlbmdlfGNoYXJTZXR8Y2hlY2tlZHxjaXRlfGNsYXNzSUR8Y2xhc3NOYW1lfGNvbHN8Y29sU3Bhbnxjb250ZW50fGNvbnRlbnRFZGl0YWJsZXxjb250ZXh0TWVudXxjb250cm9sc3xjb250cm9sc0xpc3R8Y29vcmRzfGNyb3NzT3JpZ2lufGRhdGF8ZGF0ZVRpbWV8ZGVjb2Rpbmd8ZGVmYXVsdHxkZWZlcnxkaXJ8ZGlzYWJsZWR8ZGlzYWJsZVBpY3R1cmVJblBpY3R1cmV8ZG93bmxvYWR8ZHJhZ2dhYmxlfGVuY1R5cGV8ZW50ZXJLZXlIaW50fGZvcm18Zm9ybUFjdGlvbnxmb3JtRW5jVHlwZXxmb3JtTWV0aG9kfGZvcm1Ob1ZhbGlkYXRlfGZvcm1UYXJnZXR8ZnJhbWVCb3JkZXJ8aGVhZGVyc3xoZWlnaHR8aGlkZGVufGhpZ2h8aHJlZnxocmVmTGFuZ3xodG1sRm9yfGh0dHBFcXVpdnxpZHxpbnB1dE1vZGV8aW50ZWdyaXR5fGlzfGtleVBhcmFtc3xrZXlUeXBlfGtpbmR8bGFiZWx8bGFuZ3xsaXN0fGxvYWRpbmd8bG9vcHxsb3d8bWFyZ2luSGVpZ2h0fG1hcmdpbldpZHRofG1heHxtYXhMZW5ndGh8bWVkaWF8bWVkaWFHcm91cHxtZXRob2R8bWlufG1pbkxlbmd0aHxtdWx0aXBsZXxtdXRlZHxuYW1lfG5vbmNlfG5vVmFsaWRhdGV8b3BlbnxvcHRpbXVtfHBhdHRlcm58cGxhY2Vob2xkZXJ8cGxheXNJbmxpbmV8cG9zdGVyfHByZWxvYWR8cHJvZmlsZXxyYWRpb0dyb3VwfHJlYWRPbmx5fHJlZmVycmVyUG9saWN5fHJlbHxyZXF1aXJlZHxyZXZlcnNlZHxyb2xlfHJvd3N8cm93U3BhbnxzYW5kYm94fHNjb3BlfHNjb3BlZHxzY3JvbGxpbmd8c2VhbWxlc3N8c2VsZWN0ZWR8c2hhcGV8c2l6ZXxzaXplc3xzbG90fHNwYW58c3BlbGxDaGVja3xzcmN8c3JjRG9jfHNyY0xhbmd8c3JjU2V0fHN0YXJ0fHN0ZXB8c3R5bGV8c3VtbWFyeXx0YWJJbmRleHx0YXJnZXR8dGl0bGV8dHJhbnNsYXRlfHR5cGV8dXNlTWFwfHZhbHVlfHdpZHRofHdtb2RlfHdyYXB8YWJvdXR8ZGF0YXR5cGV8aW5saXN0fHByZWZpeHxwcm9wZXJ0eXxyZXNvdXJjZXx0eXBlb2Z8dm9jYWJ8YXV0b0NhcGl0YWxpemV8YXV0b0NvcnJlY3R8YXV0b1NhdmV8Y29sb3J8aW5jcmVtZW50YWx8ZmFsbGJhY2t8aW5lcnR8aXRlbVByb3B8aXRlbVNjb3BlfGl0ZW1UeXBlfGl0ZW1JRHxpdGVtUmVmfG9ufG9wdGlvbnxyZXN1bHRzfHNlY3VyaXR5fHVuc2VsZWN0YWJsZXxhY2NlbnRIZWlnaHR8YWNjdW11bGF0ZXxhZGRpdGl2ZXxhbGlnbm1lbnRCYXNlbGluZXxhbGxvd1Jlb3JkZXJ8YWxwaGFiZXRpY3xhbXBsaXR1ZGV8YXJhYmljRm9ybXxhc2NlbnR8YXR0cmlidXRlTmFtZXxhdHRyaWJ1dGVUeXBlfGF1dG9SZXZlcnNlfGF6aW11dGh8YmFzZUZyZXF1ZW5jeXxiYXNlbGluZVNoaWZ0fGJhc2VQcm9maWxlfGJib3h8YmVnaW58Ymlhc3xieXxjYWxjTW9kZXxjYXBIZWlnaHR8Y2xpcHxjbGlwUGF0aFVuaXRzfGNsaXBQYXRofGNsaXBSdWxlfGNvbG9ySW50ZXJwb2xhdGlvbnxjb2xvckludGVycG9sYXRpb25GaWx0ZXJzfGNvbG9yUHJvZmlsZXxjb2xvclJlbmRlcmluZ3xjb250ZW50U2NyaXB0VHlwZXxjb250ZW50U3R5bGVUeXBlfGN1cnNvcnxjeHxjeXxkfGRlY2VsZXJhdGV8ZGVzY2VudHxkaWZmdXNlQ29uc3RhbnR8ZGlyZWN0aW9ufGRpc3BsYXl8ZGl2aXNvcnxkb21pbmFudEJhc2VsaW5lfGR1cnxkeHxkeXxlZGdlTW9kZXxlbGV2YXRpb258ZW5hYmxlQmFja2dyb3VuZHxlbmR8ZXhwb25lbnR8ZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZHxmaWxsfGZpbGxPcGFjaXR5fGZpbGxSdWxlfGZpbHRlcnxmaWx0ZXJSZXN8ZmlsdGVyVW5pdHN8Zmxvb2RDb2xvcnxmbG9vZE9wYWNpdHl8Zm9jdXNhYmxlfGZvbnRGYW1pbHl8Zm9udFNpemV8Zm9udFNpemVBZGp1c3R8Zm9udFN0cmV0Y2h8Zm9udFN0eWxlfGZvbnRWYXJpYW50fGZvbnRXZWlnaHR8Zm9ybWF0fGZyb218ZnJ8Znh8Znl8ZzF8ZzJ8Z2x5cGhOYW1lfGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsfGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbHxnbHlwaFJlZnxncmFkaWVudFRyYW5zZm9ybXxncmFkaWVudFVuaXRzfGhhbmdpbmd8aG9yaXpBZHZYfGhvcml6T3JpZ2luWHxpZGVvZ3JhcGhpY3xpbWFnZVJlbmRlcmluZ3xpbnxpbjJ8aW50ZXJjZXB0fGt8azF8azJ8azN8azR8a2VybmVsTWF0cml4fGtlcm5lbFVuaXRMZW5ndGh8a2VybmluZ3xrZXlQb2ludHN8a2V5U3BsaW5lc3xrZXlUaW1lc3xsZW5ndGhBZGp1c3R8bGV0dGVyU3BhY2luZ3xsaWdodGluZ0NvbG9yfGxpbWl0aW5nQ29uZUFuZ2xlfGxvY2FsfG1hcmtlckVuZHxtYXJrZXJNaWR8bWFya2VyU3RhcnR8bWFya2VySGVpZ2h0fG1hcmtlclVuaXRzfG1hcmtlcldpZHRofG1hc2t8bWFza0NvbnRlbnRVbml0c3xtYXNrVW5pdHN8bWF0aGVtYXRpY2FsfG1vZGV8bnVtT2N0YXZlc3xvZmZzZXR8b3BhY2l0eXxvcGVyYXRvcnxvcmRlcnxvcmllbnR8b3JpZW50YXRpb258b3JpZ2lufG92ZXJmbG93fG92ZXJsaW5lUG9zaXRpb258b3ZlcmxpbmVUaGlja25lc3N8cGFub3NlMXxwYWludE9yZGVyfHBhdGhMZW5ndGh8cGF0dGVybkNvbnRlbnRVbml0c3xwYXR0ZXJuVHJhbnNmb3JtfHBhdHRlcm5Vbml0c3xwb2ludGVyRXZlbnRzfHBvaW50c3xwb2ludHNBdFh8cG9pbnRzQXRZfHBvaW50c0F0WnxwcmVzZXJ2ZUFscGhhfHByZXNlcnZlQXNwZWN0UmF0aW98cHJpbWl0aXZlVW5pdHN8cnxyYWRpdXN8cmVmWHxyZWZZfHJlbmRlcmluZ0ludGVudHxyZXBlYXRDb3VudHxyZXBlYXREdXJ8cmVxdWlyZWRFeHRlbnNpb25zfHJlcXVpcmVkRmVhdHVyZXN8cmVzdGFydHxyZXN1bHR8cm90YXRlfHJ4fHJ5fHNjYWxlfHNlZWR8c2hhcGVSZW5kZXJpbmd8c2xvcGV8c3BhY2luZ3xzcGVjdWxhckNvbnN0YW50fHNwZWN1bGFyRXhwb25lbnR8c3BlZWR8c3ByZWFkTWV0aG9kfHN0YXJ0T2Zmc2V0fHN0ZERldmlhdGlvbnxzdGVtaHxzdGVtdnxzdGl0Y2hUaWxlc3xzdG9wQ29sb3J8c3RvcE9wYWNpdHl8c3RyaWtldGhyb3VnaFBvc2l0aW9ufHN0cmlrZXRocm91Z2hUaGlja25lc3N8c3RyaW5nfHN0cm9rZXxzdHJva2VEYXNoYXJyYXl8c3Ryb2tlRGFzaG9mZnNldHxzdHJva2VMaW5lY2FwfHN0cm9rZUxpbmVqb2lufHN0cm9rZU1pdGVybGltaXR8c3Ryb2tlT3BhY2l0eXxzdHJva2VXaWR0aHxzdXJmYWNlU2NhbGV8c3lzdGVtTGFuZ3VhZ2V8dGFibGVWYWx1ZXN8dGFyZ2V0WHx0YXJnZXRZfHRleHRBbmNob3J8dGV4dERlY29yYXRpb258dGV4dFJlbmRlcmluZ3x0ZXh0TGVuZ3RofHRvfHRyYW5zZm9ybXx1MXx1Mnx1bmRlcmxpbmVQb3NpdGlvbnx1bmRlcmxpbmVUaGlja25lc3N8dW5pY29kZXx1bmljb2RlQmlkaXx1bmljb2RlUmFuZ2V8dW5pdHNQZXJFbXx2QWxwaGFiZXRpY3x2SGFuZ2luZ3x2SWRlb2dyYXBoaWN8dk1hdGhlbWF0aWNhbHx2YWx1ZXN8dmVjdG9yRWZmZWN0fHZlcnNpb258dmVydEFkdll8dmVydE9yaWdpblh8dmVydE9yaWdpbll8dmlld0JveHx2aWV3VGFyZ2V0fHZpc2liaWxpdHl8d2lkdGhzfHdvcmRTcGFjaW5nfHdyaXRpbmdNb2RlfHh8eEhlaWdodHx4MXx4Mnx4Q2hhbm5lbFNlbGVjdG9yfHhsaW5rQWN0dWF0ZXx4bGlua0FyY3JvbGV8eGxpbmtIcmVmfHhsaW5rUm9sZXx4bGlua1Nob3d8eGxpbmtUaXRsZXx4bGlua1R5cGV8eG1sQmFzZXx4bWxuc3x4bWxuc1hsaW5rfHhtbExhbmd8eG1sU3BhY2V8eXx5MXx5Mnx5Q2hhbm5lbFNlbGVjdG9yfHp8em9vbUFuZFBhbnxmb3J8Y2xhc3N8YXV0b2ZvY3VzKXwoKFtEZF1bQWFdW1R0XVtBYV18W0FhXVtScl1bSWldW0FhXXx4KS0uKikpJC87IC8vIGh0dHBzOi8vZXNiZW5jaC5jb20vYmVuY2gvNWJmZWU2OGE0Y2Q3ZTYwMDllZjYxZDIzXG5cbnZhciBpc1Byb3BWYWxpZCA9IC8qICNfX1BVUkVfXyAqL21lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgcmV0dXJuIHJlYWN0UHJvcHNSZWdleC50ZXN0KHByb3ApIHx8IHByb3AuY2hhckNvZGVBdCgwKSA9PT0gMTExXG4gIC8qIG8gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDEpID09PSAxMTBcbiAgLyogbiAqL1xuICAmJiBwcm9wLmNoYXJDb2RlQXQoMikgPCA5MTtcbn1cbi8qIForMSAqL1xuKTtcblxuZXhwb3J0IGRlZmF1bHQgaXNQcm9wVmFsaWQ7XG4iLCJpbXBvcnR7dHlwZU9mIGFzIGUsaXNFbGVtZW50IGFzIHQsaXNWYWxpZEVsZW1lbnRUeXBlIGFzIG59ZnJvbVwicmVhY3QtaXNcIjtpbXBvcnQgcix7dXNlU3RhdGUgYXMgbyx1c2VDb250ZXh0IGFzIHMsdXNlTWVtbyBhcyBpLHVzZUVmZmVjdCBhcyBhLHVzZVJlZiBhcyBjLGNyZWF0ZUVsZW1lbnQgYXMgdSx1c2VEZWJ1Z1ZhbHVlIGFzIGwsdXNlTGF5b3V0RWZmZWN0IGFzIGR9ZnJvbVwicmVhY3RcIjtpbXBvcnQgaCBmcm9tXCJzaGFsbG93ZXF1YWxcIjtpbXBvcnQgcCBmcm9tXCJAZW1vdGlvbi9zdHlsaXNcIjtpbXBvcnQgZiBmcm9tXCJAZW1vdGlvbi91bml0bGVzc1wiO2ltcG9ydCBtIGZyb21cIkBlbW90aW9uL2lzLXByb3AtdmFsaWRcIjtpbXBvcnQgeSBmcm9tXCJob2lzdC1ub24tcmVhY3Qtc3RhdGljc1wiO2Z1bmN0aW9uIHYoKXtyZXR1cm4odj1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgbj1hcmd1bWVudHNbdF07Zm9yKHZhciByIGluIG4pT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG4scikmJihlW3JdPW5bcl0pfXJldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBnPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPVtlWzBdXSxyPTAsbz10Lmxlbmd0aDtyPG87cis9MSluLnB1c2godFtyXSxlW3IrMV0pO3JldHVybiBufSxTPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT09dCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJlwiW29iamVjdCBPYmplY3RdXCI9PT0odC50b1N0cmluZz90LnRvU3RyaW5nKCk6T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKSYmIWUodCl9LHc9T2JqZWN0LmZyZWV6ZShbXSksRT1PYmplY3QuZnJlZXplKHt9KTtmdW5jdGlvbiBiKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV9ZnVuY3Rpb24gXyhlKXtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInN0cmluZ1wiPT10eXBlb2YgZSYmZXx8ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lfHxcIkNvbXBvbmVudFwifWZ1bmN0aW9uIE4oZSl7cmV0dXJuIGUmJlwic3RyaW5nXCI9PXR5cGVvZiBlLnN0eWxlZENvbXBvbmVudElkfXZhciBBPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiYocHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0FUVFJ8fHByb2Nlc3MuZW52LlNDX0FUVFIpfHxcImRhdGEtc3R5bGVkXCIsQz1cIjUuMy41XCIsST1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZcIkhUTUxFbGVtZW50XCJpbiB3aW5kb3csUD1Cb29sZWFuKFwiYm9vbGVhblwiPT10eXBlb2YgU0NfRElTQUJMRV9TUEVFRFk/U0NfRElTQUJMRV9TUEVFRFk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJnZvaWQgMCE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSYmXCJcIiE9PXByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkmJnByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWTpcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmdm9pZCAwIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWT9cImZhbHNlXCIhPT1wcm9jZXNzLmVudi5TQ19ESVNBQkxFX1NQRUVEWSYmcHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFk6XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViksTz17fSxSPVwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ezE6XCJDYW5ub3QgY3JlYXRlIHN0eWxlZC1jb21wb25lbnQgZm9yIGNvbXBvbmVudDogJXMuXFxuXFxuXCIsMjpcIkNhbid0IGNvbGxlY3Qgc3R5bGVzIG9uY2UgeW91J3ZlIGNvbnN1bWVkIGEgYFNlcnZlclN0eWxlU2hlZXRgJ3Mgc3R5bGVzISBgU2VydmVyU3R5bGVTaGVldGAgaXMgYSBvbmUgb2ZmIGluc3RhbmNlIGZvciBlYWNoIHNlcnZlci1zaWRlIHJlbmRlciBjeWNsZS5cXG5cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJldXNlIGl0IGFjcm9zcyByZW5kZXJzP1xcbi0gQXJlIHlvdSBhY2NpZGVudGFsbHkgY2FsbGluZyBjb2xsZWN0U3R5bGVzIHR3aWNlP1xcblxcblwiLDM6XCJTdHJlYW1pbmcgU1NSIGlzIG9ubHkgc3VwcG9ydGVkIGluIGEgTm9kZS5qcyBlbnZpcm9ubWVudDsgUGxlYXNlIGRvIG5vdCB0cnkgdG8gY2FsbCB0aGlzIG1ldGhvZCBpbiB0aGUgYnJvd3Nlci5cXG5cXG5cIiw0OlwiVGhlIGBTdHlsZVNoZWV0TWFuYWdlcmAgZXhwZWN0cyBhIHZhbGlkIHRhcmdldCBvciBzaGVldCBwcm9wIVxcblxcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBjbGllbnQgYW5kIGlzIHlvdXIgdGFyZ2V0IGZhbHN5P1xcbi0gRG9lcyB0aGlzIGVycm9yIG9jY3VyIG9uIHRoZSBzZXJ2ZXIgYW5kIGlzIHRoZSBzaGVldCBmYWxzeT9cXG5cXG5cIiw1OlwiVGhlIGNsb25lIG1ldGhvZCBjYW5ub3QgYmUgdXNlZCBvbiB0aGUgY2xpZW50IVxcblxcbi0gQXJlIHlvdSBydW5uaW5nIGluIGEgY2xpZW50LWxpa2UgZW52aXJvbm1lbnQgb24gdGhlIHNlcnZlcj9cXG4tIEFyZSB5b3UgdHJ5aW5nIHRvIHJ1biBTU1Igb24gdGhlIGNsaWVudD9cXG5cXG5cIiw2OlwiVHJ5aW5nIHRvIGluc2VydCBhIG5ldyBzdHlsZSB0YWcsIGJ1dCB0aGUgZ2l2ZW4gTm9kZSBpcyB1bm1vdW50ZWQhXFxuXFxuLSBBcmUgeW91IHVzaW5nIGEgY3VzdG9tIHRhcmdldCB0aGF0IGlzbid0IG1vdW50ZWQ/XFxuLSBEb2VzIHlvdXIgZG9jdW1lbnQgbm90IGhhdmUgYSB2YWxpZCBoZWFkIGVsZW1lbnQ/XFxuLSBIYXZlIHlvdSBhY2NpZGVudGFsbHkgcmVtb3ZlZCBhIHN0eWxlIHRhZyBtYW51YWxseT9cXG5cXG5cIiw3OidUaGVtZVByb3ZpZGVyOiBQbGVhc2UgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgXCJ0aGVtZVwiIHByb3AgZnVuY3Rpb24sIGUuZy5cXG5cXG5gYGBqc1xcbnRoZW1lPXsoKSA9PiAoe30pfVxcbmBgYFxcblxcbicsODonVGhlbWVQcm92aWRlcjogUGxlYXNlIG1ha2UgeW91ciBcInRoZW1lXCIgcHJvcCBhbiBvYmplY3QuXFxuXFxuJyw5OlwiTWlzc2luZyBkb2N1bWVudCBgPGhlYWQ+YFxcblxcblwiLDEwOlwiQ2Fubm90IGZpbmQgYSBTdHlsZVNoZWV0IGluc3RhbmNlLiBVc3VhbGx5IHRoaXMgaGFwcGVucyBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgY29waWVzIG9mIHN0eWxlZC1jb21wb25lbnRzIGxvYWRlZCBhdCBvbmNlLiBDaGVjayBvdXQgdGhpcyBpc3N1ZSBmb3IgaG93IHRvIHRyb3VibGVzaG9vdCBhbmQgZml4IHRoZSBjb21tb24gY2FzZXMgd2hlcmUgdGhpcyBzaXR1YXRpb24gY2FuIGhhcHBlbjogaHR0cHM6Ly9naXRodWIuY29tL3N0eWxlZC1jb21wb25lbnRzL3N0eWxlZC1jb21wb25lbnRzL2lzc3Vlcy8xOTQxI2lzc3VlY29tbWVudC00MTc4NjIwMjFcXG5cXG5cIiwxMTpcIl9UaGlzIGVycm9yIHdhcyByZXBsYWNlZCB3aXRoIGEgZGV2LXRpbWUgd2FybmluZywgaXQgd2lsbCBiZSBkZWxldGVkIGZvciB2NCBmaW5hbC5fIFtjcmVhdGVHbG9iYWxTdHlsZV0gcmVjZWl2ZWQgY2hpbGRyZW4gd2hpY2ggd2lsbCBub3QgYmUgcmVuZGVyZWQuIFBsZWFzZSB1c2UgdGhlIGNvbXBvbmVudCB3aXRob3V0IHBhc3NpbmcgY2hpbGRyZW4gZWxlbWVudHMuXFxuXFxuXCIsMTI6XCJJdCBzZWVtcyB5b3UgYXJlIGludGVycG9sYXRpbmcgYSBrZXlmcmFtZSBkZWNsYXJhdGlvbiAoJXMpIGludG8gYW4gdW50YWdnZWQgc3RyaW5nLiBUaGlzIHdhcyBzdXBwb3J0ZWQgaW4gc3R5bGVkLWNvbXBvbmVudHMgdjMsIGJ1dCBpcyBub3QgbG9uZ2VyIHN1cHBvcnRlZCBpbiB2NCBhcyBrZXlmcmFtZXMgYXJlIG5vdyBpbmplY3RlZCBvbi1kZW1hbmQuIFBsZWFzZSB3cmFwIHlvdXIgc3RyaW5nIGluIHRoZSBjc3NcXFxcYFxcXFxgIGhlbHBlciB3aGljaCBlbnN1cmVzIHRoZSBzdHlsZXMgYXJlIGluamVjdGVkIGNvcnJlY3RseS4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FwaSNjc3NcXG5cXG5cIiwxMzpcIiVzIGlzIG5vdCBhIHN0eWxlZCBjb21wb25lbnQgYW5kIGNhbm5vdCBiZSByZWZlcnJlZCB0byB2aWEgY29tcG9uZW50IHNlbGVjdG9yLiBTZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYWR2YW5jZWQjcmVmZXJyaW5nLXRvLW90aGVyLWNvbXBvbmVudHMgZm9yIG1vcmUgZGV0YWlscy5cXG5cXG5cIiwxNDonVGhlbWVQcm92aWRlcjogXCJ0aGVtZVwiIHByb3AgaXMgcmVxdWlyZWQuXFxuXFxuJywxNTpcIkEgc3R5bGlzIHBsdWdpbiBoYXMgYmVlbiBzdXBwbGllZCB0aGF0IGlzIG5vdCBuYW1lZC4gV2UgbmVlZCBhIG5hbWUgZm9yIGVhY2ggcGx1Z2luIHRvIGJlIGFibGUgdG8gcHJldmVudCBzdHlsaW5nIGNvbGxpc2lvbnMgYmV0d2VlbiBkaWZmZXJlbnQgc3R5bGlzIGNvbmZpZ3VyYXRpb25zIHdpdGhpbiB0aGUgc2FtZSBhcHAuIEJlZm9yZSB5b3UgcGFzcyB5b3VyIHBsdWdpbiB0byBgPFN0eWxlU2hlZXRNYW5hZ2VyIHN0eWxpc1BsdWdpbnM9e1tdfT5gLCBwbGVhc2UgbWFrZSBzdXJlIGVhY2ggcGx1Z2luIGlzIHVuaXF1ZWx5LW5hbWVkLCBlLmcuXFxuXFxuYGBganNcXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoaW1wb3J0ZWRQbHVnaW4sICduYW1lJywgeyB2YWx1ZTogJ3NvbWUtdW5pcXVlLW5hbWUnIH0pO1xcbmBgYFxcblxcblwiLDE2OlwiUmVhY2hlZCB0aGUgbGltaXQgb2YgaG93IG1hbnkgc3R5bGVkIGNvbXBvbmVudHMgbWF5IGJlIGNyZWF0ZWQgYXQgZ3JvdXAgJXMuXFxuWW91IG1heSBvbmx5IGNyZWF0ZSB1cCB0byAxLDA3Myw3NDEsODI0IGNvbXBvbmVudHMuIElmIHlvdSdyZSBjcmVhdGluZyBjb21wb25lbnRzIGR5bmFtaWNhbGx5LFxcbmFzIGZvciBpbnN0YW5jZSBpbiB5b3VyIHJlbmRlciBtZXRob2QgdGhlbiB5b3UgbWF5IGJlIHJ1bm5pbmcgaW50byB0aGlzIGxpbWl0YXRpb24uXFxuXFxuXCIsMTc6XCJDU1NTdHlsZVNoZWV0IGNvdWxkIG5vdCBiZSBmb3VuZCBvbiBIVE1MU3R5bGVFbGVtZW50LlxcbkhhcyBzdHlsZWQtY29tcG9uZW50cycgc3R5bGUgdGFnIGJlZW4gdW5tb3VudGVkIG9yIGFsdGVyZWQgYnkgYW5vdGhlciBzY3JpcHQ/XFxuXCJ9Ont9O2Z1bmN0aW9uIEQoKXtmb3IodmFyIGU9YXJndW1lbnRzLmxlbmd0aDw9MD92b2lkIDA6YXJndW1lbnRzWzBdLHQ9W10sbj0xLHI9YXJndW1lbnRzLmxlbmd0aDtuPHI7bis9MSl0LnB1c2gobjwwfHxhcmd1bWVudHMubGVuZ3RoPD1uP3ZvaWQgMDphcmd1bWVudHNbbl0pO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2U9ZS5yZXBsYWNlKC8lW2Etel0vLHQpfSkpLGV9ZnVuY3Rpb24gaihlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dGhyb3dcInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WP25ldyBFcnJvcihcIkFuIGVycm9yIG9jY3VycmVkLiBTZWUgaHR0cHM6Ly9naXQuaW8vSlVJYUUjXCIrZStcIiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cIisobi5sZW5ndGg+MD9cIiBBcmdzOiBcIituLmpvaW4oXCIsIFwiKTpcIlwiKSk6bmV3IEVycm9yKEQuYXBwbHkodm9pZCAwLFtSW2VdXS5jb25jYXQobikpLnRyaW0oKSl9dmFyIFQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMuZ3JvdXBTaXplcz1uZXcgVWludDMyQXJyYXkoNTEyKSx0aGlzLmxlbmd0aD01MTIsdGhpcy50YWc9ZX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbmRleE9mR3JvdXA9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj0wO248ZTtuKyspdCs9dGhpcy5ncm91cFNpemVzW25dO3JldHVybiB0fSx0Lmluc2VydFJ1bGVzPWZ1bmN0aW9uKGUsdCl7aWYoZT49dGhpcy5ncm91cFNpemVzLmxlbmd0aCl7Zm9yKHZhciBuPXRoaXMuZ3JvdXBTaXplcyxyPW4ubGVuZ3RoLG89cjtlPj1vOykobzw8PTEpPDAmJmooMTYsXCJcIitlKTt0aGlzLmdyb3VwU2l6ZXM9bmV3IFVpbnQzMkFycmF5KG8pLHRoaXMuZ3JvdXBTaXplcy5zZXQobiksdGhpcy5sZW5ndGg9bztmb3IodmFyIHM9cjtzPG87cysrKXRoaXMuZ3JvdXBTaXplc1tzXT0wfWZvcih2YXIgaT10aGlzLmluZGV4T2ZHcm91cChlKzEpLGE9MCxjPXQubGVuZ3RoO2E8YzthKyspdGhpcy50YWcuaW5zZXJ0UnVsZShpLHRbYV0pJiYodGhpcy5ncm91cFNpemVzW2VdKyssaSsrKX0sdC5jbGVhckdyb3VwPWZ1bmN0aW9uKGUpe2lmKGU8dGhpcy5sZW5ndGgpe3ZhciB0PXRoaXMuZ3JvdXBTaXplc1tlXSxuPXRoaXMuaW5kZXhPZkdyb3VwKGUpLHI9bit0O3RoaXMuZ3JvdXBTaXplc1tlXT0wO2Zvcih2YXIgbz1uO288cjtvKyspdGhpcy50YWcuZGVsZXRlUnVsZShuKX19LHQuZ2V0R3JvdXA9ZnVuY3Rpb24oZSl7dmFyIHQ9XCJcIjtpZihlPj10aGlzLmxlbmd0aHx8MD09PXRoaXMuZ3JvdXBTaXplc1tlXSlyZXR1cm4gdDtmb3IodmFyIG49dGhpcy5ncm91cFNpemVzW2VdLHI9dGhpcy5pbmRleE9mR3JvdXAoZSksbz1yK24scz1yO3M8bztzKyspdCs9dGhpcy50YWcuZ2V0UnVsZShzKStcIi8qIXNjKi9cXG5cIjtyZXR1cm4gdH0sZX0oKSx4PW5ldyBNYXAsaz1uZXcgTWFwLFY9MSxCPWZ1bmN0aW9uKGUpe2lmKHguaGFzKGUpKXJldHVybiB4LmdldChlKTtmb3IoO2suaGFzKFYpOylWKys7dmFyIHQ9VisrO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJigoMHx0KTwwfHx0PjE8PDMwKSYmaigxNixcIlwiK3QpLHguc2V0KGUsdCksay5zZXQodCxlKSx0fSx6PWZ1bmN0aW9uKGUpe3JldHVybiBrLmdldChlKX0sTT1mdW5jdGlvbihlLHQpe3Q+PVYmJihWPXQrMSkseC5zZXQoZSx0KSxrLnNldCh0LGUpfSxHPVwic3R5bGVbXCIrQSsnXVtkYXRhLXN0eWxlZC12ZXJzaW9uPVwiNS4zLjVcIl0nLEw9bmV3IFJlZ0V4cChcIl5cIitBKydcXFxcLmcoXFxcXGQrKVxcXFxbaWQ9XCIoW1xcXFx3XFxcXGQtXSspXCJcXFxcXS4qP1wiKFteXCJdKiknKSxGPWZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHIsbz1uLnNwbGl0KFwiLFwiKSxzPTAsaT1vLmxlbmd0aDtzPGk7cysrKShyPW9bc10pJiZlLnJlZ2lzdGVyTmFtZSh0LHIpfSxZPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPSh0LnRleHRDb250ZW50fHxcIlwiKS5zcGxpdChcIi8qIXNjKi9cXG5cIikscj1bXSxvPTAscz1uLmxlbmd0aDtvPHM7bysrKXt2YXIgaT1uW29dLnRyaW0oKTtpZihpKXt2YXIgYT1pLm1hdGNoKEwpO2lmKGEpe3ZhciBjPTB8cGFyc2VJbnQoYVsxXSwxMCksdT1hWzJdOzAhPT1jJiYoTSh1LGMpLEYoZSx1LGFbM10pLGUuZ2V0VGFnKCkuaW5zZXJ0UnVsZXMoYyxyKSksci5sZW5ndGg9MH1lbHNlIHIucHVzaChpKX19fSxxPWZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmdm9pZCAwIT09d2luZG93Ll9fd2VicGFja19ub25jZV9fP3dpbmRvdy5fX3dlYnBhY2tfbm9uY2VfXzpudWxsfSxIPWZ1bmN0aW9uKGUpe3ZhciB0PWRvY3VtZW50LmhlYWQsbj1lfHx0LHI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpLG89ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuY2hpbGROb2RlcyxuPXQubGVuZ3RoO24+PTA7bi0tKXt2YXIgcj10W25dO2lmKHImJjE9PT1yLm5vZGVUeXBlJiZyLmhhc0F0dHJpYnV0ZShBKSlyZXR1cm4gcn19KG4pLHM9dm9pZCAwIT09bz9vLm5leHRTaWJsaW5nOm51bGw7ci5zZXRBdHRyaWJ1dGUoQSxcImFjdGl2ZVwiKSxyLnNldEF0dHJpYnV0ZShcImRhdGEtc3R5bGVkLXZlcnNpb25cIixcIjUuMy41XCIpO3ZhciBpPXEoKTtyZXR1cm4gaSYmci5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLGkpLG4uaW5zZXJ0QmVmb3JlKHIscykscn0sJD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9dGhpcy5lbGVtZW50PUgoZSk7dC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKSksdGhpcy5zaGVldD1mdW5jdGlvbihlKXtpZihlLnNoZWV0KXJldHVybiBlLnNoZWV0O2Zvcih2YXIgdD1kb2N1bWVudC5zdHlsZVNoZWV0cyxuPTAscj10Lmxlbmd0aDtuPHI7bisrKXt2YXIgbz10W25dO2lmKG8ub3duZXJOb2RlPT09ZSlyZXR1cm4gb31qKDE3KX0odCksdGhpcy5sZW5ndGg9MH12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbnNlcnRSdWxlPWZ1bmN0aW9uKGUsdCl7dHJ5e3JldHVybiB0aGlzLnNoZWV0Lmluc2VydFJ1bGUodCxlKSx0aGlzLmxlbmd0aCsrLCEwfWNhdGNoKGUpe3JldHVybiExfX0sdC5kZWxldGVSdWxlPWZ1bmN0aW9uKGUpe3RoaXMuc2hlZXQuZGVsZXRlUnVsZShlKSx0aGlzLmxlbmd0aC0tfSx0LmdldFJ1bGU9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5zaGVldC5jc3NSdWxlc1tlXTtyZXR1cm4gdm9pZCAwIT09dCYmXCJzdHJpbmdcIj09dHlwZW9mIHQuY3NzVGV4dD90LmNzc1RleHQ6XCJcIn0sZX0oKSxXPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgdD10aGlzLmVsZW1lbnQ9SChlKTt0aGlzLm5vZGVzPXQuY2hpbGROb2Rlcyx0aGlzLmxlbmd0aD0wfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0Lmluc2VydFJ1bGU9ZnVuY3Rpb24oZSx0KXtpZihlPD10aGlzLmxlbmd0aCYmZT49MCl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodCkscj10aGlzLm5vZGVzW2VdO3JldHVybiB0aGlzLmVsZW1lbnQuaW5zZXJ0QmVmb3JlKG4scnx8bnVsbCksdGhpcy5sZW5ndGgrKywhMH1yZXR1cm4hMX0sdC5kZWxldGVSdWxlPWZ1bmN0aW9uKGUpe3RoaXMuZWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLm5vZGVzW2VdKSx0aGlzLmxlbmd0aC0tfSx0LmdldFJ1bGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU8dGhpcy5sZW5ndGg/dGhpcy5ub2Rlc1tlXS50ZXh0Q29udGVudDpcIlwifSxlfSgpLFU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3RoaXMucnVsZXM9W10sdGhpcy5sZW5ndGg9MH12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbnNlcnRSdWxlPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU8PXRoaXMubGVuZ3RoJiYodGhpcy5ydWxlcy5zcGxpY2UoZSwwLHQpLHRoaXMubGVuZ3RoKyssITApfSx0LmRlbGV0ZVJ1bGU9ZnVuY3Rpb24oZSl7dGhpcy5ydWxlcy5zcGxpY2UoZSwxKSx0aGlzLmxlbmd0aC0tfSx0LmdldFJ1bGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGU8dGhpcy5sZW5ndGg/dGhpcy5ydWxlc1tlXTpcIlwifSxlfSgpLEo9SSxYPXtpc1NlcnZlcjohSSx1c2VDU1NPTUluamVjdGlvbjohUH0sWj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0LG4pe3ZvaWQgMD09PWUmJihlPUUpLHZvaWQgMD09PXQmJih0PXt9KSx0aGlzLm9wdGlvbnM9dih7fSxYLHt9LGUpLHRoaXMuZ3M9dCx0aGlzLm5hbWVzPW5ldyBNYXAobiksdGhpcy5zZXJ2ZXI9ISFlLmlzU2VydmVyLCF0aGlzLnNlcnZlciYmSSYmSiYmKEo9ITEsZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoRyksbj0wLHI9dC5sZW5ndGg7bjxyO24rKyl7dmFyIG89dFtuXTtvJiZcImFjdGl2ZVwiIT09by5nZXRBdHRyaWJ1dGUoQSkmJihZKGUsbyksby5wYXJlbnROb2RlJiZvLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobykpfX0odGhpcykpfWUucmVnaXN0ZXJJZD1mdW5jdGlvbihlKXtyZXR1cm4gQihlKX07dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucz1mdW5jdGlvbih0LG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0hMCksbmV3IGUodih7fSx0aGlzLm9wdGlvbnMse30sdCksdGhpcy5ncyxuJiZ0aGlzLm5hbWVzfHx2b2lkIDApfSx0LmFsbG9jYXRlR1NJbnN0YW5jZT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5nc1tlXT0odGhpcy5nc1tlXXx8MCkrMX0sdC5nZXRUYWc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50YWd8fCh0aGlzLnRhZz0obj0odD10aGlzLm9wdGlvbnMpLmlzU2VydmVyLHI9dC51c2VDU1NPTUluamVjdGlvbixvPXQudGFyZ2V0LGU9bj9uZXcgVShvKTpyP25ldyAkKG8pOm5ldyBXKG8pLG5ldyBUKGUpKSk7dmFyIGUsdCxuLHIsb30sdC5oYXNOYW1lRm9ySWQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5uYW1lcy5oYXMoZSkmJnRoaXMubmFtZXMuZ2V0KGUpLmhhcyh0KX0sdC5yZWdpc3Rlck5hbWU9ZnVuY3Rpb24oZSx0KXtpZihCKGUpLHRoaXMubmFtZXMuaGFzKGUpKXRoaXMubmFtZXMuZ2V0KGUpLmFkZCh0KTtlbHNle3ZhciBuPW5ldyBTZXQ7bi5hZGQodCksdGhpcy5uYW1lcy5zZXQoZSxuKX19LHQuaW5zZXJ0UnVsZXM9ZnVuY3Rpb24oZSx0LG4pe3RoaXMucmVnaXN0ZXJOYW1lKGUsdCksdGhpcy5nZXRUYWcoKS5pbnNlcnRSdWxlcyhCKGUpLG4pfSx0LmNsZWFyTmFtZXM9ZnVuY3Rpb24oZSl7dGhpcy5uYW1lcy5oYXMoZSkmJnRoaXMubmFtZXMuZ2V0KGUpLmNsZWFyKCl9LHQuY2xlYXJSdWxlcz1mdW5jdGlvbihlKXt0aGlzLmdldFRhZygpLmNsZWFyR3JvdXAoQihlKSksdGhpcy5jbGVhck5hbWVzKGUpfSx0LmNsZWFyVGFnPWZ1bmN0aW9uKCl7dGhpcy50YWc9dm9pZCAwfSx0LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmdldFRhZygpLG49dC5sZW5ndGgscj1cIlwiLG89MDtvPG47bysrKXt2YXIgcz16KG8pO2lmKHZvaWQgMCE9PXMpe3ZhciBpPWUubmFtZXMuZ2V0KHMpLGE9dC5nZXRHcm91cChvKTtpZihpJiZhJiZpLnNpemUpe3ZhciBjPUErXCIuZ1wiK28rJ1tpZD1cIicrcysnXCJdJyx1PVwiXCI7dm9pZCAwIT09aSYmaS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmxlbmd0aD4wJiYodSs9ZStcIixcIil9KSkscis9XCJcIithK2MrJ3tjb250ZW50OlwiJyt1KydcIn0vKiFzYyovXFxuJ319fXJldHVybiByfSh0aGlzKX0sZX0oKSxLPS8oYSkoZCkvZ2ksUT1mdW5jdGlvbihlKXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShlKyhlPjI1PzM5Ojk3KSl9O2Z1bmN0aW9uIGVlKGUpe3ZhciB0LG49XCJcIjtmb3IodD1NYXRoLmFicyhlKTt0PjUyO3Q9dC81MnwwKW49USh0JTUyKStuO3JldHVybihRKHQlNTIpK24pLnJlcGxhY2UoSyxcIiQxLSQyXCIpfXZhciB0ZT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj10Lmxlbmd0aDtuOyllPTMzKmVedC5jaGFyQ29kZUF0KC0tbik7cmV0dXJuIGV9LG5lPWZ1bmN0aW9uKGUpe3JldHVybiB0ZSg1MzgxLGUpfTtmdW5jdGlvbiByZShlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrPTEpe3ZhciBuPWVbdF07aWYoYihuKSYmIU4obikpcmV0dXJuITF9cmV0dXJuITB9dmFyIG9lPW5lKFwiNS4zLjVcIiksc2U9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCxuKXt0aGlzLnJ1bGVzPWUsdGhpcy5zdGF0aWNSdWxlc0lkPVwiXCIsdGhpcy5pc1N0YXRpYz1cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYodm9pZCAwPT09bnx8bi5pc1N0YXRpYykmJnJlKGUpLHRoaXMuY29tcG9uZW50SWQ9dCx0aGlzLmJhc2VIYXNoPXRlKG9lLHQpLHRoaXMuYmFzZVN0eWxlPW4sWi5yZWdpc3RlcklkKHQpfXJldHVybiBlLnByb3RvdHlwZS5nZW5lcmF0ZUFuZEluamVjdFN0eWxlcz1mdW5jdGlvbihlLHQsbil7dmFyIHI9dGhpcy5jb21wb25lbnRJZCxvPVtdO2lmKHRoaXMuYmFzZVN0eWxlJiZvLnB1c2godGhpcy5iYXNlU3R5bGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoZSx0LG4pKSx0aGlzLmlzU3RhdGljJiYhbi5oYXNoKWlmKHRoaXMuc3RhdGljUnVsZXNJZCYmdC5oYXNOYW1lRm9ySWQocix0aGlzLnN0YXRpY1J1bGVzSWQpKW8ucHVzaCh0aGlzLnN0YXRpY1J1bGVzSWQpO2Vsc2V7dmFyIHM9TmUodGhpcy5ydWxlcyxlLHQsbikuam9pbihcIlwiKSxpPWVlKHRlKHRoaXMuYmFzZUhhc2gscyk+Pj4wKTtpZighdC5oYXNOYW1lRm9ySWQocixpKSl7dmFyIGE9bihzLFwiLlwiK2ksdm9pZCAwLHIpO3QuaW5zZXJ0UnVsZXMocixpLGEpfW8ucHVzaChpKSx0aGlzLnN0YXRpY1J1bGVzSWQ9aX1lbHNle2Zvcih2YXIgYz10aGlzLnJ1bGVzLmxlbmd0aCx1PXRlKHRoaXMuYmFzZUhhc2gsbi5oYXNoKSxsPVwiXCIsZD0wO2Q8YztkKyspe3ZhciBoPXRoaXMucnVsZXNbZF07aWYoXCJzdHJpbmdcIj09dHlwZW9mIGgpbCs9aCxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYodT10ZSh1LGgrZCkpO2Vsc2UgaWYoaCl7dmFyIHA9TmUoaCxlLHQsbiksZj1BcnJheS5pc0FycmF5KHApP3Auam9pbihcIlwiKTpwO3U9dGUodSxmK2QpLGwrPWZ9fWlmKGwpe3ZhciBtPWVlKHU+Pj4wKTtpZighdC5oYXNOYW1lRm9ySWQocixtKSl7dmFyIHk9bihsLFwiLlwiK20sdm9pZCAwLHIpO3QuaW5zZXJ0UnVsZXMocixtLHkpfW8ucHVzaChtKX19cmV0dXJuIG8uam9pbihcIiBcIil9LGV9KCksaWU9L15cXHMqXFwvXFwvLiokL2dtLGFlPVtcIjpcIixcIltcIixcIi5cIixcIiNcIl07ZnVuY3Rpb24gY2UoZSl7dmFyIHQsbixyLG8scz12b2lkIDA9PT1lP0U6ZSxpPXMub3B0aW9ucyxhPXZvaWQgMD09PWk/RTppLGM9cy5wbHVnaW5zLHU9dm9pZCAwPT09Yz93OmMsbD1uZXcgcChhKSxkPVtdLGg9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdCh0KXtpZih0KXRyeXtlKHQrXCJ9XCIpfWNhdGNoKGUpe319cmV0dXJuIGZ1bmN0aW9uKG4scixvLHMsaSxhLGMsdSxsLGQpe3N3aXRjaChuKXtjYXNlIDE6aWYoMD09PWwmJjY0PT09ci5jaGFyQ29kZUF0KDApKXJldHVybiBlKHIrXCI7XCIpLFwiXCI7YnJlYWs7Y2FzZSAyOmlmKDA9PT11KXJldHVybiByK1wiLyp8Ki9cIjticmVhaztjYXNlIDM6c3dpdGNoKHUpe2Nhc2UgMTAyOmNhc2UgMTEyOnJldHVybiBlKG9bMF0rciksXCJcIjtkZWZhdWx0OnJldHVybiByKygwPT09ZD9cIi8qfCovXCI6XCJcIil9Y2FzZS0yOnIuc3BsaXQoXCIvKnwqL31cIikuZm9yRWFjaCh0KX19fSgoZnVuY3Rpb24oZSl7ZC5wdXNoKGUpfSkpLGY9ZnVuY3Rpb24oZSxyLHMpe3JldHVybiAwPT09ciYmLTEhPT1hZS5pbmRleE9mKHNbbi5sZW5ndGhdKXx8cy5tYXRjaChvKT9lOlwiLlwiK3R9O2Z1bmN0aW9uIG0oZSxzLGksYSl7dm9pZCAwPT09YSYmKGE9XCImXCIpO3ZhciBjPWUucmVwbGFjZShpZSxcIlwiKSx1PXMmJmk/aStcIiBcIitzK1wiIHsgXCIrYytcIiB9XCI6YztyZXR1cm4gdD1hLG49cyxyPW5ldyBSZWdFeHAoXCJcXFxcXCIrbitcIlxcXFxiXCIsXCJnXCIpLG89bmV3IFJlZ0V4cChcIihcXFxcXCIrbitcIlxcXFxiKXsyLH1cIiksbChpfHwhcz9cIlwiOnMsdSl9cmV0dXJuIGwudXNlKFtdLmNvbmNhdCh1LFtmdW5jdGlvbihlLHQsbyl7Mj09PWUmJm8ubGVuZ3RoJiZvWzBdLmxhc3RJbmRleE9mKG4pPjAmJihvWzBdPW9bMF0ucmVwbGFjZShyLGYpKX0saCxmdW5jdGlvbihlKXtpZigtMj09PWUpe3ZhciB0PWQ7cmV0dXJuIGQ9W10sdH19XSkpLG0uaGFzaD11Lmxlbmd0aD91LnJlZHVjZSgoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5uYW1lfHxqKDE1KSx0ZShlLHQubmFtZSl9KSw1MzgxKS50b1N0cmluZygpOlwiXCIsbX12YXIgdWU9ci5jcmVhdGVDb250ZXh0KCksbGU9dWUuQ29uc3VtZXIsZGU9ci5jcmVhdGVDb250ZXh0KCksaGU9KGRlLkNvbnN1bWVyLG5ldyBaKSxwZT1jZSgpO2Z1bmN0aW9uIGZlKCl7cmV0dXJuIHModWUpfHxoZX1mdW5jdGlvbiBtZSgpe3JldHVybiBzKGRlKXx8cGV9ZnVuY3Rpb24geWUoZSl7dmFyIHQ9byhlLnN0eWxpc1BsdWdpbnMpLG49dFswXSxzPXRbMV0sYz1mZSgpLHU9aSgoZnVuY3Rpb24oKXt2YXIgdD1jO3JldHVybiBlLnNoZWV0P3Q9ZS5zaGVldDplLnRhcmdldCYmKHQ9dC5yZWNvbnN0cnVjdFdpdGhPcHRpb25zKHt0YXJnZXQ6ZS50YXJnZXR9LCExKSksZS5kaXNhYmxlQ1NTT01JbmplY3Rpb24mJih0PXQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyh7dXNlQ1NTT01JbmplY3Rpb246ITF9KSksdH0pLFtlLmRpc2FibGVDU1NPTUluamVjdGlvbixlLnNoZWV0LGUudGFyZ2V0XSksbD1pKChmdW5jdGlvbigpe3JldHVybiBjZSh7b3B0aW9uczp7cHJlZml4OiFlLmRpc2FibGVWZW5kb3JQcmVmaXhlc30scGx1Z2luczpufSl9KSxbZS5kaXNhYmxlVmVuZG9yUHJlZml4ZXMsbl0pO3JldHVybiBhKChmdW5jdGlvbigpe2gobixlLnN0eWxpc1BsdWdpbnMpfHxzKGUuc3R5bGlzUGx1Z2lucyl9KSxbZS5zdHlsaXNQbHVnaW5zXSksci5jcmVhdGVFbGVtZW50KHVlLlByb3ZpZGVyLHt2YWx1ZTp1fSxyLmNyZWF0ZUVsZW1lbnQoZGUuUHJvdmlkZXIse3ZhbHVlOmx9LFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ci5DaGlsZHJlbi5vbmx5KGUuY2hpbGRyZW4pOmUuY2hpbGRyZW4pKX12YXIgdmU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dmFyIG49dGhpczt0aGlzLmluamVjdD1mdW5jdGlvbihlLHQpe3ZvaWQgMD09PXQmJih0PXBlKTt2YXIgcj1uLm5hbWUrdC5oYXNoO2UuaGFzTmFtZUZvcklkKG4uaWQscil8fGUuaW5zZXJ0UnVsZXMobi5pZCxyLHQobi5ydWxlcyxyLFwiQGtleWZyYW1lc1wiKSl9LHRoaXMudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gaigxMixTdHJpbmcobi5uYW1lKSl9LHRoaXMubmFtZT1lLHRoaXMuaWQ9XCJzYy1rZXlmcmFtZXMtXCIrZSx0aGlzLnJ1bGVzPXR9cmV0dXJuIGUucHJvdG90eXBlLmdldE5hbWU9ZnVuY3Rpb24oZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPXBlKSx0aGlzLm5hbWUrZS5oYXNofSxlfSgpLGdlPS8oW0EtWl0pLyxTZT0vKFtBLVpdKS9nLHdlPS9ebXMtLyxFZT1mdW5jdGlvbihlKXtyZXR1cm5cIi1cIitlLnRvTG93ZXJDYXNlKCl9O2Z1bmN0aW9uIGJlKGUpe3JldHVybiBnZS50ZXN0KGUpP2UucmVwbGFjZShTZSxFZSkucmVwbGFjZSh3ZSxcIi1tcy1cIik6ZX12YXIgX2U9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGw9PWV8fCExPT09ZXx8XCJcIj09PWV9O2Z1bmN0aW9uIE5lKGUsbixyLG8pe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcih2YXIgcyxpPVtdLGE9MCxjPWUubGVuZ3RoO2E8YzthKz0xKVwiXCIhPT0ocz1OZShlW2FdLG4scixvKSkmJihBcnJheS5pc0FycmF5KHMpP2kucHVzaC5hcHBseShpLHMpOmkucHVzaChzKSk7cmV0dXJuIGl9aWYoX2UoZSkpcmV0dXJuXCJcIjtpZihOKGUpKXJldHVyblwiLlwiK2Uuc3R5bGVkQ29tcG9uZW50SWQ7aWYoYihlKSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YobD1lKXx8bC5wcm90b3R5cGUmJmwucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnR8fCFuKXJldHVybiBlO3ZhciB1PWUobik7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmdCh1KSYmY29uc29sZS53YXJuKF8oZSkrXCIgaXMgbm90IGEgc3R5bGVkIGNvbXBvbmVudCBhbmQgY2Fubm90IGJlIHJlZmVycmVkIHRvIHZpYSBjb21wb25lbnQgc2VsZWN0b3IuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hZHZhbmNlZCNyZWZlcnJpbmctdG8tb3RoZXItY29tcG9uZW50cyBmb3IgbW9yZSBkZXRhaWxzLlwiKSxOZSh1LG4scixvKX12YXIgbDtyZXR1cm4gZSBpbnN0YW5jZW9mIHZlP3I/KGUuaW5qZWN0KHIsbyksZS5nZXROYW1lKG8pKTplOlMoZSk/ZnVuY3Rpb24gZSh0LG4pe3ZhciByLG8scz1bXTtmb3IodmFyIGkgaW4gdCl0Lmhhc093blByb3BlcnR5KGkpJiYhX2UodFtpXSkmJihBcnJheS5pc0FycmF5KHRbaV0pJiZ0W2ldLmlzQ3NzfHxiKHRbaV0pP3MucHVzaChiZShpKStcIjpcIix0W2ldLFwiO1wiKTpTKHRbaV0pP3MucHVzaC5hcHBseShzLGUodFtpXSxpKSk6cy5wdXNoKGJlKGkpK1wiOiBcIisocj1pLG51bGw9PShvPXRbaV0pfHxcImJvb2xlYW5cIj09dHlwZW9mIG98fFwiXCI9PT1vP1wiXCI6XCJudW1iZXJcIiE9dHlwZW9mIG98fDA9PT1vfHxyIGluIGY/U3RyaW5nKG8pLnRyaW0oKTpvK1wicHhcIikrXCI7XCIpKTtyZXR1cm4gbj9bbitcIiB7XCJdLmNvbmNhdChzLFtcIn1cIl0pOnN9KGUpOmUudG9TdHJpbmcoKX12YXIgQWU9ZnVuY3Rpb24oZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSkmJihlLmlzQ3NzPSEwKSxlfTtmdW5jdGlvbiBDZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07cmV0dXJuIGIoZSl8fFMoZSk/QWUoTmUoZyh3LFtlXS5jb25jYXQobikpKSk6MD09PW4ubGVuZ3RoJiYxPT09ZS5sZW5ndGgmJlwic3RyaW5nXCI9PXR5cGVvZiBlWzBdP2U6QWUoTmUoZyhlLG4pKSl9dmFyIEllPS9pbnZhbGlkIGhvb2sgY2FsbC9pLFBlPW5ldyBTZXQsT2U9ZnVuY3Rpb24oZSx0KXtpZihcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WKXt2YXIgbj1cIlRoZSBjb21wb25lbnQgXCIrZSsodD8nIHdpdGggdGhlIGlkIG9mIFwiJyt0KydcIic6XCJcIikrXCIgaGFzIGJlZW4gY3JlYXRlZCBkeW5hbWljYWxseS5cXG5Zb3UgbWF5IHNlZSB0aGlzIHdhcm5pbmcgYmVjYXVzZSB5b3UndmUgY2FsbGVkIHN0eWxlZCBpbnNpZGUgYW5vdGhlciBjb21wb25lbnQuXFxuVG8gcmVzb2x2ZSB0aGlzIG9ubHkgY3JlYXRlIG5ldyBTdHlsZWRDb21wb25lbnRzIG91dHNpZGUgb2YgYW55IHJlbmRlciBtZXRob2QgYW5kIGZ1bmN0aW9uIGNvbXBvbmVudC5cIixyPWNvbnNvbGUuZXJyb3I7dHJ5e3ZhciBvPSEwO2NvbnNvbGUuZXJyb3I9ZnVuY3Rpb24oZSl7aWYoSWUudGVzdChlKSlvPSExLFBlLmRlbGV0ZShuKTtlbHNle2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLHM9bmV3IEFycmF5KHQ+MT90LTE6MCksaT0xO2k8dDtpKyspc1tpLTFdPWFyZ3VtZW50c1tpXTtyLmFwcGx5KHZvaWQgMCxbZV0uY29uY2F0KHMpKX19LGMoKSxvJiYhUGUuaGFzKG4pJiYoY29uc29sZS53YXJuKG4pLFBlLmFkZChuKSl9Y2F0Y2goZSl7SWUudGVzdChlLm1lc3NhZ2UpJiZQZS5kZWxldGUobil9ZmluYWxseXtjb25zb2xlLmVycm9yPXJ9fX0sUmU9ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj1FKSxlLnRoZW1lIT09bi50aGVtZSYmZS50aGVtZXx8dHx8bi50aGVtZX0sRGU9L1shXCIjJCUmJygpKissLi86Ozw9Pj9AW1xcXFxcXF1eYHt8fX4tXSsvZyxqZT0vKF4tfC0kKS9nO2Z1bmN0aW9uIFRlKGUpe3JldHVybiBlLnJlcGxhY2UoRGUsXCItXCIpLnJlcGxhY2UoamUsXCJcIil9dmFyIHhlPWZ1bmN0aW9uKGUpe3JldHVybiBlZShuZShlKT4+PjApfTtmdW5jdGlvbiBrZShlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmKFwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fGUuY2hhckF0KDApPT09ZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSl9dmFyIFZlPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGV8fFwib2JqZWN0XCI9PXR5cGVvZiBlJiZudWxsIT09ZSYmIUFycmF5LmlzQXJyYXkoZSl9LEJlPWZ1bmN0aW9uKGUpe3JldHVyblwiX19wcm90b19fXCIhPT1lJiZcImNvbnN0cnVjdG9yXCIhPT1lJiZcInByb3RvdHlwZVwiIT09ZX07ZnVuY3Rpb24gemUoZSx0LG4pe3ZhciByPWVbbl07VmUodCkmJlZlKHIpP01lKHIsdCk6ZVtuXT10fWZ1bmN0aW9uIE1lKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTtmb3IodmFyIG89MCxzPW47bzxzLmxlbmd0aDtvKyspe3ZhciBpPXNbb107aWYoVmUoaSkpZm9yKHZhciBhIGluIGkpQmUoYSkmJnplKGUsaVthXSxhKX1yZXR1cm4gZX12YXIgR2U9ci5jcmVhdGVDb250ZXh0KCksTGU9R2UuQ29uc3VtZXI7ZnVuY3Rpb24gRmUoZSl7dmFyIHQ9cyhHZSksbj1pKChmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybiBqKDE0KTtpZihiKGUpKXt2YXIgbj1lKHQpO3JldHVyblwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fG51bGwhPT1uJiYhQXJyYXkuaXNBcnJheShuKSYmXCJvYmplY3RcIj09dHlwZW9mIG4/bjpqKDcpfXJldHVybiBBcnJheS5pc0FycmF5KGUpfHxcIm9iamVjdFwiIT10eXBlb2YgZT9qKDgpOnQ/dih7fSx0LHt9LGUpOmV9KGUudGhlbWUsdCl9KSxbZS50aGVtZSx0XSk7cmV0dXJuIGUuY2hpbGRyZW4/ci5jcmVhdGVFbGVtZW50KEdlLlByb3ZpZGVyLHt2YWx1ZTpufSxlLmNoaWxkcmVuKTpudWxsfXZhciBZZT17fTtmdW5jdGlvbiBxZShlLHQsbil7dmFyIG89TihlKSxpPSFrZShlKSxhPXQuYXR0cnMsYz12b2lkIDA9PT1hP3c6YSxkPXQuY29tcG9uZW50SWQsaD12b2lkIDA9PT1kP2Z1bmN0aW9uKGUsdCl7dmFyIG49XCJzdHJpbmdcIiE9dHlwZW9mIGU/XCJzY1wiOlRlKGUpO1llW25dPShZZVtuXXx8MCkrMTt2YXIgcj1uK1wiLVwiK3hlKFwiNS4zLjVcIituK1llW25dKTtyZXR1cm4gdD90K1wiLVwiK3I6cn0odC5kaXNwbGF5TmFtZSx0LnBhcmVudENvbXBvbmVudElkKTpkLHA9dC5kaXNwbGF5TmFtZSxmPXZvaWQgMD09PXA/ZnVuY3Rpb24oZSl7cmV0dXJuIGtlKGUpP1wic3R5bGVkLlwiK2U6XCJTdHlsZWQoXCIrXyhlKStcIilcIn0oZSk6cCxnPXQuZGlzcGxheU5hbWUmJnQuY29tcG9uZW50SWQ/VGUodC5kaXNwbGF5TmFtZSkrXCItXCIrdC5jb21wb25lbnRJZDp0LmNvbXBvbmVudElkfHxoLFM9byYmZS5hdHRycz9BcnJheS5wcm90b3R5cGUuY29uY2F0KGUuYXR0cnMsYykuZmlsdGVyKEJvb2xlYW4pOmMsQT10LnNob3VsZEZvcndhcmRQcm9wO28mJmUuc2hvdWxkRm9yd2FyZFByb3AmJihBPXQuc2hvdWxkRm9yd2FyZFByb3A/ZnVuY3Rpb24obixyLG8pe3JldHVybiBlLnNob3VsZEZvcndhcmRQcm9wKG4scixvKSYmdC5zaG91bGRGb3J3YXJkUHJvcChuLHIsbyl9OmUuc2hvdWxkRm9yd2FyZFByb3ApO3ZhciBDLEk9bmV3IHNlKG4sZyxvP2UuY29tcG9uZW50U3R5bGU6dm9pZCAwKSxQPUkuaXNTdGF0aWMmJjA9PT1jLmxlbmd0aCxPPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPWUuYXR0cnMsaT1lLmNvbXBvbmVudFN0eWxlLGE9ZS5kZWZhdWx0UHJvcHMsYz1lLmZvbGRlZENvbXBvbmVudElkcyxkPWUuc2hvdWxkRm9yd2FyZFByb3AsaD1lLnN0eWxlZENvbXBvbmVudElkLHA9ZS50YXJnZXQ7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmbChoKTt2YXIgZj1mdW5jdGlvbihlLHQsbil7dm9pZCAwPT09ZSYmKGU9RSk7dmFyIHI9dih7fSx0LHt0aGVtZTplfSksbz17fTtyZXR1cm4gbi5mb3JFYWNoKChmdW5jdGlvbihlKXt2YXIgdCxuLHMsaT1lO2Zvcih0IGluIGIoaSkmJihpPWkocikpLGkpclt0XT1vW3RdPVwiY2xhc3NOYW1lXCI9PT10PyhuPW9bdF0scz1pW3RdLG4mJnM/bitcIiBcIitzOm58fHMpOmlbdF19KSksW3Isb119KFJlKHQscyhHZSksYSl8fEUsdCxvKSx5PWZbMF0sZz1mWzFdLFM9ZnVuY3Rpb24oZSx0LG4scil7dmFyIG89ZmUoKSxzPW1lKCksaT10P2UuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMoRSxvLHMpOmUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMobixvLHMpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmwoaSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmIXQmJnImJnIoaSksaX0oaSxyLHksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVj9lLndhcm5Ub29NYW55Q2xhc3Nlczp2b2lkIDApLHc9bixfPWcuJGFzfHx0LiRhc3x8Zy5hc3x8dC5hc3x8cCxOPWtlKF8pLEE9ZyE9PXQ/dih7fSx0LHt9LGcpOnQsQz17fTtmb3IodmFyIEkgaW4gQSlcIiRcIiE9PUlbMF0mJlwiYXNcIiE9PUkmJihcImZvcndhcmRlZEFzXCI9PT1JP0MuYXM9QVtJXTooZD9kKEksbSxfKTohTnx8bShJKSkmJihDW0ldPUFbSV0pKTtyZXR1cm4gdC5zdHlsZSYmZy5zdHlsZSE9PXQuc3R5bGUmJihDLnN0eWxlPXYoe30sdC5zdHlsZSx7fSxnLnN0eWxlKSksQy5jbGFzc05hbWU9QXJyYXkucHJvdG90eXBlLmNvbmNhdChjLGgsUyE9PWg/UzpudWxsLHQuY2xhc3NOYW1lLGcuY2xhc3NOYW1lKS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIiksQy5yZWY9dyx1KF8sQyl9KEMsZSx0LFApfTtyZXR1cm4gTy5kaXNwbGF5TmFtZT1mLChDPXIuZm9yd2FyZFJlZihPKSkuYXR0cnM9UyxDLmNvbXBvbmVudFN0eWxlPUksQy5kaXNwbGF5TmFtZT1mLEMuc2hvdWxkRm9yd2FyZFByb3A9QSxDLmZvbGRlZENvbXBvbmVudElkcz1vP0FycmF5LnByb3RvdHlwZS5jb25jYXQoZS5mb2xkZWRDb21wb25lbnRJZHMsZS5zdHlsZWRDb21wb25lbnRJZCk6dyxDLnN0eWxlZENvbXBvbmVudElkPWcsQy50YXJnZXQ9bz9lLnRhcmdldDplLEMud2l0aENvbXBvbmVudD1mdW5jdGlvbihlKXt2YXIgcj10LmNvbXBvbmVudElkLG89ZnVuY3Rpb24oZSx0KXtpZihudWxsPT1lKXJldHVybnt9O3ZhciBuLHIsbz17fSxzPU9iamVjdC5rZXlzKGUpO2ZvcihyPTA7cjxzLmxlbmd0aDtyKyspbj1zW3JdLHQuaW5kZXhPZihuKT49MHx8KG9bbl09ZVtuXSk7cmV0dXJuIG99KHQsW1wiY29tcG9uZW50SWRcIl0pLHM9ciYmcitcIi1cIisoa2UoZSk/ZTpUZShfKGUpKSk7cmV0dXJuIHFlKGUsdih7fSxvLHthdHRyczpTLGNvbXBvbmVudElkOnN9KSxuKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KEMsXCJkZWZhdWx0UHJvcHNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ZvbGRlZERlZmF1bHRQcm9wc30sc2V0OmZ1bmN0aW9uKHQpe3RoaXMuX2ZvbGRlZERlZmF1bHRQcm9wcz1vP01lKHt9LGUuZGVmYXVsdFByb3BzLHQpOnR9fSksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKE9lKGYsZyksQy53YXJuVG9vTWFueUNsYXNzZXM9ZnVuY3Rpb24oZSx0KXt2YXIgbj17fSxyPSExO3JldHVybiBmdW5jdGlvbihvKXtpZighciYmKG5bb109ITAsT2JqZWN0LmtleXMobikubGVuZ3RoPj0yMDApKXt2YXIgcz10Pycgd2l0aCB0aGUgaWQgb2YgXCInK3QrJ1wiJzpcIlwiO2NvbnNvbGUud2FybihcIk92ZXIgMjAwIGNsYXNzZXMgd2VyZSBnZW5lcmF0ZWQgZm9yIGNvbXBvbmVudCBcIitlK3MrXCIuXFxuQ29uc2lkZXIgdXNpbmcgdGhlIGF0dHJzIG1ldGhvZCwgdG9nZXRoZXIgd2l0aCBhIHN0eWxlIG9iamVjdCBmb3IgZnJlcXVlbnRseSBjaGFuZ2VkIHN0eWxlcy5cXG5FeGFtcGxlOlxcbiAgY29uc3QgQ29tcG9uZW50ID0gc3R5bGVkLmRpdi5hdHRycyhwcm9wcyA9PiAoe1xcbiAgICBzdHlsZToge1xcbiAgICAgIGJhY2tncm91bmQ6IHByb3BzLmJhY2tncm91bmQsXFxuICAgIH0sXFxuICB9KSlgd2lkdGg6IDEwMCU7YFxcblxcbiAgPENvbXBvbmVudCAvPlwiKSxyPSEwLG49e319fX0oZixnKSksQy50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiLlwiK0Muc3R5bGVkQ29tcG9uZW50SWR9LGkmJnkoQyxlLHthdHRyczohMCxjb21wb25lbnRTdHlsZTohMCxkaXNwbGF5TmFtZTohMCxmb2xkZWRDb21wb25lbnRJZHM6ITAsc2hvdWxkRm9yd2FyZFByb3A6ITAsc3R5bGVkQ29tcG9uZW50SWQ6ITAsdGFyZ2V0OiEwLHdpdGhDb21wb25lbnQ6ITB9KSxDfXZhciBIZT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24gZSh0LHIsbyl7aWYodm9pZCAwPT09byYmKG89RSksIW4ocikpcmV0dXJuIGooMSxTdHJpbmcocikpO3ZhciBzPWZ1bmN0aW9uKCl7cmV0dXJuIHQocixvLENlLmFwcGx5KHZvaWQgMCxhcmd1bWVudHMpKX07cmV0dXJuIHMud2l0aENvbmZpZz1mdW5jdGlvbihuKXtyZXR1cm4gZSh0LHIsdih7fSxvLHt9LG4pKX0scy5hdHRycz1mdW5jdGlvbihuKXtyZXR1cm4gZSh0LHIsdih7fSxvLHthdHRyczpBcnJheS5wcm90b3R5cGUuY29uY2F0KG8uYXR0cnMsbikuZmlsdGVyKEJvb2xlYW4pfSkpfSxzfShxZSxlKX07W1wiYVwiLFwiYWJiclwiLFwiYWRkcmVzc1wiLFwiYXJlYVwiLFwiYXJ0aWNsZVwiLFwiYXNpZGVcIixcImF1ZGlvXCIsXCJiXCIsXCJiYXNlXCIsXCJiZGlcIixcImJkb1wiLFwiYmlnXCIsXCJibG9ja3F1b3RlXCIsXCJib2R5XCIsXCJiclwiLFwiYnV0dG9uXCIsXCJjYW52YXNcIixcImNhcHRpb25cIixcImNpdGVcIixcImNvZGVcIixcImNvbFwiLFwiY29sZ3JvdXBcIixcImRhdGFcIixcImRhdGFsaXN0XCIsXCJkZFwiLFwiZGVsXCIsXCJkZXRhaWxzXCIsXCJkZm5cIixcImRpYWxvZ1wiLFwiZGl2XCIsXCJkbFwiLFwiZHRcIixcImVtXCIsXCJlbWJlZFwiLFwiZmllbGRzZXRcIixcImZpZ2NhcHRpb25cIixcImZpZ3VyZVwiLFwiZm9vdGVyXCIsXCJmb3JtXCIsXCJoMVwiLFwiaDJcIixcImgzXCIsXCJoNFwiLFwiaDVcIixcImg2XCIsXCJoZWFkXCIsXCJoZWFkZXJcIixcImhncm91cFwiLFwiaHJcIixcImh0bWxcIixcImlcIixcImlmcmFtZVwiLFwiaW1nXCIsXCJpbnB1dFwiLFwiaW5zXCIsXCJrYmRcIixcImtleWdlblwiLFwibGFiZWxcIixcImxlZ2VuZFwiLFwibGlcIixcImxpbmtcIixcIm1haW5cIixcIm1hcFwiLFwibWFya1wiLFwibWFycXVlZVwiLFwibWVudVwiLFwibWVudWl0ZW1cIixcIm1ldGFcIixcIm1ldGVyXCIsXCJuYXZcIixcIm5vc2NyaXB0XCIsXCJvYmplY3RcIixcIm9sXCIsXCJvcHRncm91cFwiLFwib3B0aW9uXCIsXCJvdXRwdXRcIixcInBcIixcInBhcmFtXCIsXCJwaWN0dXJlXCIsXCJwcmVcIixcInByb2dyZXNzXCIsXCJxXCIsXCJycFwiLFwicnRcIixcInJ1YnlcIixcInNcIixcInNhbXBcIixcInNjcmlwdFwiLFwic2VjdGlvblwiLFwic2VsZWN0XCIsXCJzbWFsbFwiLFwic291cmNlXCIsXCJzcGFuXCIsXCJzdHJvbmdcIixcInN0eWxlXCIsXCJzdWJcIixcInN1bW1hcnlcIixcInN1cFwiLFwidGFibGVcIixcInRib2R5XCIsXCJ0ZFwiLFwidGV4dGFyZWFcIixcInRmb290XCIsXCJ0aFwiLFwidGhlYWRcIixcInRpbWVcIixcInRpdGxlXCIsXCJ0clwiLFwidHJhY2tcIixcInVcIixcInVsXCIsXCJ2YXJcIixcInZpZGVvXCIsXCJ3YnJcIixcImNpcmNsZVwiLFwiY2xpcFBhdGhcIixcImRlZnNcIixcImVsbGlwc2VcIixcImZvcmVpZ25PYmplY3RcIixcImdcIixcImltYWdlXCIsXCJsaW5lXCIsXCJsaW5lYXJHcmFkaWVudFwiLFwibWFya2VyXCIsXCJtYXNrXCIsXCJwYXRoXCIsXCJwYXR0ZXJuXCIsXCJwb2x5Z29uXCIsXCJwb2x5bGluZVwiLFwicmFkaWFsR3JhZGllbnRcIixcInJlY3RcIixcInN0b3BcIixcInN2Z1wiLFwidGV4dFwiLFwidGV4dFBhdGhcIixcInRzcGFuXCJdLmZvckVhY2goKGZ1bmN0aW9uKGUpe0hlW2VdPUhlKGUpfSkpO3ZhciAkZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXt0aGlzLnJ1bGVzPWUsdGhpcy5jb21wb25lbnRJZD10LHRoaXMuaXNTdGF0aWM9cmUoZSksWi5yZWdpc3RlcklkKHRoaXMuY29tcG9uZW50SWQrMSl9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY3JlYXRlU3R5bGVzPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPXIoTmUodGhpcy5ydWxlcyx0LG4scikuam9pbihcIlwiKSxcIlwiKSxzPXRoaXMuY29tcG9uZW50SWQrZTtuLmluc2VydFJ1bGVzKHMscyxvKX0sdC5yZW1vdmVTdHlsZXM9ZnVuY3Rpb24oZSx0KXt0LmNsZWFyUnVsZXModGhpcy5jb21wb25lbnRJZCtlKX0sdC5yZW5kZXJTdHlsZXM9ZnVuY3Rpb24oZSx0LG4scil7ZT4yJiZaLnJlZ2lzdGVySWQodGhpcy5jb21wb25lbnRJZCtlKSx0aGlzLnJlbW92ZVN0eWxlcyhlLG4pLHRoaXMuY3JlYXRlU3R5bGVzKGUsdCxuLHIpfSxlfSgpO2Z1bmN0aW9uIFdlKGUpe2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCksbz0xO288dDtvKyspbltvLTFdPWFyZ3VtZW50c1tvXTt2YXIgaT1DZS5hcHBseSh2b2lkIDAsW2VdLmNvbmNhdChuKSksYT1cInNjLWdsb2JhbC1cIit4ZShKU09OLnN0cmluZ2lmeShpKSksdT1uZXcgJGUoaSxhKTtmdW5jdGlvbiBsKGUpe3ZhciB0PWZlKCksbj1tZSgpLG89cyhHZSksbD1jKHQuYWxsb2NhdGVHU0luc3RhbmNlKGEpKS5jdXJyZW50O3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnIuQ2hpbGRyZW4uY291bnQoZS5jaGlsZHJlbikmJmNvbnNvbGUud2FybihcIlRoZSBnbG9iYWwgc3R5bGUgY29tcG9uZW50IFwiK2ErXCIgd2FzIGdpdmVuIGNoaWxkIEpTWC4gY3JlYXRlR2xvYmFsU3R5bGUgZG9lcyBub3QgcmVuZGVyIGNoaWxkcmVuLlwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZpLnNvbWUoKGZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlJiYtMSE9PWUuaW5kZXhPZihcIkBpbXBvcnRcIil9KSkmJmNvbnNvbGUud2FybihcIlBsZWFzZSBkbyBub3QgdXNlIEBpbXBvcnQgQ1NTIHN5bnRheCBpbiBjcmVhdGVHbG9iYWxTdHlsZSBhdCB0aGlzIHRpbWUsIGFzIHRoZSBDU1NPTSBBUElzIHdlIHVzZSBpbiBwcm9kdWN0aW9uIGRvIG5vdCBoYW5kbGUgaXQgd2VsbC4gSW5zdGVhZCwgd2UgcmVjb21tZW5kIHVzaW5nIGEgbGlicmFyeSBzdWNoIGFzIHJlYWN0LWhlbG1ldCB0byBpbmplY3QgYSB0eXBpY2FsIDxsaW5rPiBtZXRhIHRhZyB0byB0aGUgc3R5bGVzaGVldCwgb3Igc2ltcGx5IGVtYmVkZGluZyBpdCBtYW51YWxseSBpbiB5b3VyIGluZGV4Lmh0bWwgPGhlYWQ+IHNlY3Rpb24gZm9yIGEgc2ltcGxlciBhcHAuXCIpLHQuc2VydmVyJiZoKGwsZSx0LG8sbiksZCgoZnVuY3Rpb24oKXtpZighdC5zZXJ2ZXIpcmV0dXJuIGgobCxlLHQsbyxuKSxmdW5jdGlvbigpe3JldHVybiB1LnJlbW92ZVN0eWxlcyhsLHQpfX0pLFtsLGUsdCxvLG5dKSxudWxsfWZ1bmN0aW9uIGgoZSx0LG4scixvKXtpZih1LmlzU3RhdGljKXUucmVuZGVyU3R5bGVzKGUsTyxuLG8pO2Vsc2V7dmFyIHM9dih7fSx0LHt0aGVtZTpSZSh0LHIsbC5kZWZhdWx0UHJvcHMpfSk7dS5yZW5kZXJTdHlsZXMoZSxzLG4sbyl9fXJldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJk9lKGEpLHIubWVtbyhsKX1mdW5jdGlvbiBVZShlKXtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZcIlJlYWN0TmF0aXZlXCI9PT1uYXZpZ2F0b3IucHJvZHVjdCYmY29uc29sZS53YXJuKFwiYGtleWZyYW1lc2AgY2Fubm90IGJlIHVzZWQgb24gUmVhY3ROYXRpdmUsIG9ubHkgb24gdGhlIHdlYi4gVG8gZG8gYW5pbWF0aW9uIGluIFJlYWN0TmF0aXZlIHBsZWFzZSB1c2UgQW5pbWF0ZWQuXCIpO2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLG49bmV3IEFycmF5KHQ+MT90LTE6MCkscj0xO3I8dDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTt2YXIgbz1DZS5hcHBseSh2b2lkIDAsW2VdLmNvbmNhdChuKSkuam9pbihcIlwiKSxzPXhlKG8pO3JldHVybiBuZXcgdmUocyxvKX12YXIgSmU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dmFyIGU9dGhpczt0aGlzLl9lbWl0U2hlZXRDU1M9ZnVuY3Rpb24oKXt2YXIgdD1lLmluc3RhbmNlLnRvU3RyaW5nKCk7aWYoIXQpcmV0dXJuXCJcIjt2YXIgbj1xKCk7cmV0dXJuXCI8c3R5bGUgXCIrW24mJidub25jZT1cIicrbisnXCInLEErJz1cInRydWVcIicsJ2RhdGEtc3R5bGVkLXZlcnNpb249XCI1LjMuNVwiJ10uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpK1wiPlwiK3QrXCI8L3N0eWxlPlwifSx0aGlzLmdldFN0eWxlVGFncz1mdW5jdGlvbigpe3JldHVybiBlLnNlYWxlZD9qKDIpOmUuX2VtaXRTaGVldENTUygpfSx0aGlzLmdldFN0eWxlRWxlbWVudD1mdW5jdGlvbigpe3ZhciB0O2lmKGUuc2VhbGVkKXJldHVybiBqKDIpO3ZhciBuPSgodD17fSlbQV09XCJcIix0W1wiZGF0YS1zdHlsZWQtdmVyc2lvblwiXT1cIjUuMy41XCIsdC5kYW5nZXJvdXNseVNldElubmVySFRNTD17X19odG1sOmUuaW5zdGFuY2UudG9TdHJpbmcoKX0sdCksbz1xKCk7cmV0dXJuIG8mJihuLm5vbmNlPW8pLFtyLmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiLHYoe30sbix7a2V5Olwic2MtMC0wXCJ9KSldfSx0aGlzLnNlYWw9ZnVuY3Rpb24oKXtlLnNlYWxlZD0hMH0sdGhpcy5pbnN0YW5jZT1uZXcgWih7aXNTZXJ2ZXI6ITB9KSx0aGlzLnNlYWxlZD0hMX12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5jb2xsZWN0U3R5bGVzPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnNlYWxlZD9qKDIpOnIuY3JlYXRlRWxlbWVudCh5ZSx7c2hlZXQ6dGhpcy5pbnN0YW5jZX0sZSl9LHQuaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtPWZ1bmN0aW9uKGUpe3JldHVybiBqKDMpfSxlfSgpLFhlPWZ1bmN0aW9uKGUpe3ZhciB0PXIuZm9yd2FyZFJlZigoZnVuY3Rpb24odCxuKXt2YXIgbz1zKEdlKSxpPWUuZGVmYXVsdFByb3BzLGE9UmUodCxvLGkpO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnZvaWQgMD09PWEmJmNvbnNvbGUud2FybignW3dpdGhUaGVtZV0gWW91IGFyZSBub3QgdXNpbmcgYSBUaGVtZVByb3ZpZGVyIG5vciBwYXNzaW5nIGEgdGhlbWUgcHJvcCBvciBhIHRoZW1lIGluIGRlZmF1bHRQcm9wcyBpbiBjb21wb25lbnQgY2xhc3MgXCInK18oZSkrJ1wiJyksci5jcmVhdGVFbGVtZW50KGUsdih7fSx0LHt0aGVtZTphLHJlZjpufSkpfSkpO3JldHVybiB5KHQsZSksdC5kaXNwbGF5TmFtZT1cIldpdGhUaGVtZShcIitfKGUpK1wiKVwiLHR9LFplPWZ1bmN0aW9uKCl7cmV0dXJuIHMoR2UpfSxLZT17U3R5bGVTaGVldDpaLG1hc3RlclNoZWV0OmhlfTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZcIlJlYWN0TmF0aXZlXCI9PT1uYXZpZ2F0b3IucHJvZHVjdCYmY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB5b3UndmUgaW1wb3J0ZWQgJ3N0eWxlZC1jb21wb25lbnRzJyBvbiBSZWFjdCBOYXRpdmUuXFxuUGVyaGFwcyB5b3UncmUgbG9va2luZyB0byBpbXBvcnQgJ3N0eWxlZC1jb21wb25lbnRzL25hdGl2ZSc/XFxuUmVhZCBtb3JlIGFib3V0IHRoaXMgYXQgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYmFzaWNzI3JlYWN0LW5hdGl2ZVwiKSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInRlc3RcIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiYod2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl09d2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl18fDAsMT09PXdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdJiZjb25zb2xlLndhcm4oXCJJdCBsb29rcyBsaWtlIHRoZXJlIGFyZSBzZXZlcmFsIGluc3RhbmNlcyBvZiAnc3R5bGVkLWNvbXBvbmVudHMnIGluaXRpYWxpemVkIGluIHRoaXMgYXBwbGljYXRpb24uIFRoaXMgbWF5IGNhdXNlIGR5bmFtaWMgc3R5bGVzIHRvIG5vdCByZW5kZXIgcHJvcGVybHksIGVycm9ycyBkdXJpbmcgdGhlIHJlaHlkcmF0aW9uIHByb2Nlc3MsIGEgbWlzc2luZyB0aGVtZSBwcm9wLCBhbmQgbWFrZXMgeW91ciBhcHBsaWNhdGlvbiBiaWdnZXIgd2l0aG91dCBnb29kIHJlYXNvbi5cXG5cXG5TZWUgaHR0cHM6Ly9zLWMuc2gvMkJBWHplZCBmb3IgbW9yZSBpbmZvLlwiKSx3aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXSs9MSk7ZXhwb3J0IGRlZmF1bHQgSGU7ZXhwb3J0e0plIGFzIFNlcnZlclN0eWxlU2hlZXQsbGUgYXMgU3R5bGVTaGVldENvbnN1bWVyLHVlIGFzIFN0eWxlU2hlZXRDb250ZXh0LHllIGFzIFN0eWxlU2hlZXRNYW5hZ2VyLExlIGFzIFRoZW1lQ29uc3VtZXIsR2UgYXMgVGhlbWVDb250ZXh0LEZlIGFzIFRoZW1lUHJvdmlkZXIsS2UgYXMgX19QUklWQVRFX18sV2UgYXMgY3JlYXRlR2xvYmFsU3R5bGUsQ2UgYXMgY3NzLE4gYXMgaXNTdHlsZWRDb21wb25lbnQsVWUgYXMga2V5ZnJhbWVzLFplIGFzIHVzZVRoZW1lLEMgYXMgdmVyc2lvbixYZSBhcyB3aXRoVGhlbWV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGVkLWNvbXBvbmVudHMuYnJvd3Nlci5lc20uanMubWFwXG4iLCJpbXBvcnQgeyBjcmVhdGVHbG9iYWxTdHlsZSB9IGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgR2xvYmFsU3R5bGUgPSBjcmVhdGVHbG9iYWxTdHlsZWBcbmlucHV0LCBsYWJlbCB7XG4gICAgZGlzcGxheTpibG9jaztcbn1cblxuYm9keSB7XG4gICAgbWFyZ2luOiAwO1xuICAgIGhlaWdodDogMTAwdmg7XG4gICAgZm9udC1mYW1pbHk6IFJvYm90bywgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xufVxuQGtleWZyYW1lcyBncmFkaWVudCB7XG4gICAgMCUge1xuICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAwJSA1MCU7XG4gICAgfVxuIFxuICAgIDUwJSB7XG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDEwMCUgNTAlO1xuICAgIH1cbiBcbiAgICAxMDAlIHtcbiAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCUgNTAlO1xuICAgIH1cbn1gO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuXG4vKipcclxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjYWN0aW9uXHJcbiAqL1xudmFyIEFjdGlvbjtcblxuKGZ1bmN0aW9uIChBY3Rpb24pIHtcbiAgLyoqXHJcbiAgICogQSBQT1AgaW5kaWNhdGVzIGEgY2hhbmdlIHRvIGFuIGFyYml0cmFyeSBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaFxyXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXHJcbiAgICogbmF2aWdhdGlvbiwgb25seSB0aGF0IHRoZSBjdXJyZW50IGluZGV4IGNoYW5nZWQuXHJcbiAgICpcclxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXHJcbiAgICovXG4gIEFjdGlvbltcIlBvcFwiXSA9IFwiUE9QXCI7XG4gIC8qKlxyXG4gICAqIEEgUFVTSCBpbmRpY2F0ZXMgYSBuZXcgZW50cnkgYmVpbmcgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2ggYXMgd2hlblxyXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcclxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cclxuICAgKi9cblxuICBBY3Rpb25bXCJQdXNoXCJdID0gXCJQVVNIXCI7XG4gIC8qKlxyXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXHJcbiAgICogYmVpbmcgcmVwbGFjZWQgYnkgYSBuZXcgb25lLlxyXG4gICAqL1xuXG4gIEFjdGlvbltcIlJlcGxhY2VcIl0gPSBcIlJFUExBQ0VcIjtcbn0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTtcblxudmFyIHJlYWRPbmx5ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iajtcbn07XG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cblxudmFyIEJlZm9yZVVubG9hZEV2ZW50VHlwZSA9ICdiZWZvcmV1bmxvYWQnO1xudmFyIEhhc2hDaGFuZ2VFdmVudFR5cGUgPSAnaGFzaGNoYW5nZSc7XG52YXIgUG9wU3RhdGVFdmVudFR5cGUgPSAncG9wc3RhdGUnO1xuLyoqXHJcbiAqIEJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHJlZ3VsYXIgVVJMcy4gVGhpcyBpcyB0aGUgc3RhbmRhcmQgZm9yXHJcbiAqIG1vc3Qgd2ViIGFwcHMsIGJ1dCBpdCByZXF1aXJlcyBzb21lIGNvbmZpZ3VyYXRpb24gb24gdGhlIHNlcnZlciB0byBlbnN1cmUgeW91XHJcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWJyb3dzZXJoaXN0b3J5XHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkd2luZG93ID0gX29wdGlvbnMud2luZG93LFxuICAgICAgd2luZG93ID0gX29wdGlvbnMkd2luZG93ID09PSB2b2lkIDAgPyBkb2N1bWVudC5kZWZhdWx0VmlldyA6IF9vcHRpb25zJHdpbmRvdztcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcblxuICBmdW5jdGlvbiBnZXRJbmRleEFuZExvY2F0aW9uKCkge1xuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge307XG4gICAgcmV0dXJuIFtzdGF0ZS5pZHgsIHJlYWRPbmx5KHtcbiAgICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICAgIHNlYXJjaDogc2VhcmNoLFxuICAgICAgaGFzaDogaGFzaCxcbiAgICAgIHN0YXRlOiBzdGF0ZS51c3IgfHwgbnVsbCxcbiAgICAgIGtleTogc3RhdGUua2V5IHx8ICdkZWZhdWx0J1xuICAgIH0pXTtcbiAgfVxuXG4gIHZhciBibG9ja2VkUG9wVHggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBpZiAoYmxvY2tlZFBvcFR4KSB7XG4gICAgICBibG9ja2Vycy5jYWxsKGJsb2NrZWRQb3BUeCk7XG4gICAgICBibG9ja2VkUG9wVHggPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgICAgICBuZXh0SW5kZXggPSBfZ2V0SW5kZXhBbmRMb2NhdGlvblswXSxcbiAgICAgICAgICBuZXh0TG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvblsxXTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCkge1xuICAgICAgICBpZiAobmV4dEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgZGVsdGEgPSBpbmRleCAtIG5leHRJbmRleDtcblxuICAgICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgICAgLy8gUmV2ZXJ0IHRoZSBQT1BcbiAgICAgICAgICAgIGJsb2NrZWRQb3BUeCA9IHtcbiAgICAgICAgICAgICAgYWN0aW9uOiBuZXh0QWN0aW9uLFxuICAgICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgICAgICByZXRyeTogZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICAgICAgICAgICAgZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbyhkZWx0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRyeWluZyB0byBQT1AgdG8gYSBsb2NhdGlvbiB3aXRoIG5vIGluZGV4LiBXZSBkaWQgbm90IGNyZWF0ZVxuICAgICAgICAgIC8vIHRoaXMgbG9jYXRpb24sIHNvIHdlIGNhbid0IGVmZmVjdGl2ZWx5IGJsb2NrIHRoZSBuYXZpZ2F0aW9uLlxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIC8vIFRPRE86IFdyaXRlIHVwIGEgZG9jIHRoYXQgZXhwbGFpbnMgb3VyIGJsb2NraW5nIHN0cmF0ZWd5IGluXG4gICAgICAgICAgLy8gZGV0YWlsIGFuZCBsaW5rIHRvIGl0IGhlcmUgc28gcGVvcGxlIGNhbiB1bmRlcnN0YW5kIGJldHRlciB3aGF0XG4gICAgICAgICAgLy8gaXMgZ29pbmcgb24gYW5kIGhvdyB0byBhdm9pZCBpdC5cbiAgICAgICAgICBcIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgXCIgKyBcImNyZWF0ZWQgYnkgdGhlIGhpc3RvcnkgbGlicmFyeS4gVGhlIGJsb2NrIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbiwgYnV0IGluIGdlbmVyYWwgeW91IHNob3VsZCBkbyBhbGwgbmF2aWdhdGlvbiB3aXRoIHRoZSBcIiArIFwiaGlzdG9yeSBsaWJyYXJ5IChpbnN0ZWFkIG9mIHVzaW5nIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBkaXJlY3RseSkgXCIgKyBcInRvIGF2b2lkIHRoaXMgc2l0dWF0aW9uLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgdmFyIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uMiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb24yWzBdLFxuICAgICAgbG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjJbMV07XG5cbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9IC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuXG5cbiAgZnVuY3Rpb24gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlYWRPbmx5KF9leHRlbmRzKHtcbiAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgc2VhcmNoOiAnJ1xuICAgIH0sIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGtleTogY3JlYXRlS2V5KClcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCkge1xuICAgIHJldHVybiBbe1xuICAgICAgdXNyOiBuZXh0TG9jYXRpb24uc3RhdGUsXG4gICAgICBrZXk6IG5leHRMb2NhdGlvbi5rZXksXG4gICAgICBpZHg6IGluZGV4XG4gICAgfSwgY3JlYXRlSHJlZihuZXh0TG9jYXRpb24pXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFsbG93VHgoYWN0aW9uLCBsb2NhdGlvbiwgcmV0cnkpIHtcbiAgICByZXR1cm4gIWJsb2NrZXJzLmxlbmd0aCB8fCAoYmxvY2tlcnMuY2FsbCh7XG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgIHJldHJ5OiByZXRyeVxuICAgIH0pLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseVR4KG5leHRBY3Rpb24pIHtcbiAgICBhY3Rpb24gPSBuZXh0QWN0aW9uO1xuXG4gICAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uMyA9IGdldEluZGV4QW5kTG9jYXRpb24oKTtcblxuICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb24zWzBdO1xuICAgIGxvY2F0aW9uID0gX2dldEluZGV4QW5kTG9jYXRpb24zWzFdO1xuICAgIGxpc3RlbmVycy5jYWxsKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgdmFyIG5leHRMb2NhdGlvbiA9IGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICBwdXNoKHRvLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGFsbG93VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uLCByZXRyeSkpIHtcbiAgICAgIHZhciBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIgPSBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCArIDEpLFxuICAgICAgICAgIGhpc3RvcnlTdGF0ZSA9IF9nZXRIaXN0b3J5U3RhdGVBbmRVclswXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXJbMV07IC8vIFRPRE86IFN1cHBvcnQgZm9yY2VkIHJlbG9hZGluZ1xuICAgICAgLy8gdHJ5Li4uY2F0Y2ggYmVjYXVzZSBpT1MgbGltaXRzIHVzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHMgOi9cblxuXG4gICAgICB0cnkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZShoaXN0b3J5U3RhdGUsICcnLCB1cmwpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHVybCk7XG4gICAgICB9XG5cbiAgICAgIGFwcGx5VHgobmV4dEFjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKTtcblxuICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgcmVwbGFjZSh0bywgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICB2YXIgX2dldEhpc3RvcnlTdGF0ZUFuZFVyMiA9IGdldEhpc3RvcnlTdGF0ZUFuZFVybChuZXh0TG9jYXRpb24sIGluZGV4KSxcbiAgICAgICAgICBoaXN0b3J5U3RhdGUgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIyWzBdLFxuICAgICAgICAgIHVybCA9IF9nZXRIaXN0b3J5U3RhdGVBbmRVcjJbMV07IC8vIFRPRE86IFN1cHBvcnQgZm9yY2VkIHJlbG9hZGluZ1xuXG5cbiAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgJycsIHVybCk7XG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGRlbHRhKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhkZWx0YSk7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgYmFjazogZnVuY3Rpb24gYmFjaygpIHtcbiAgICAgIGdvKC0xKTtcbiAgICB9LFxuICAgIGZvcndhcmQ6IGZ1bmN0aW9uIGZvcndhcmQoKSB7XG4gICAgICBnbygxKTtcbiAgICB9LFxuICAgIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0sXG4gICAgYmxvY2s6IGZ1bmN0aW9uIGJsb2NrKGJsb2NrZXIpIHtcbiAgICAgIHZhciB1bmJsb2NrID0gYmxvY2tlcnMucHVzaChibG9ja2VyKTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihCZWZvcmVVbmxvYWRFdmVudFR5cGUsIHByb21wdEJlZm9yZVVubG9hZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVuYmxvY2soKTsgLy8gUmVtb3ZlIHRoZSBiZWZvcmV1bmxvYWQgbGlzdGVuZXIgc28gdGhlIGRvY3VtZW50IG1heVxuICAgICAgICAvLyBzdGlsbCBiZSBzYWx2YWdlYWJsZSBpbiB0aGUgcGFnZWhpZGUgZXZlbnQuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyN1bmxvYWRpbmctZG9jdW1lbnRzXG5cbiAgICAgICAgaWYgKCFibG9ja2Vycy5sZW5ndGgpIHtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihCZWZvcmVVbmxvYWRFdmVudFR5cGUsIHByb21wdEJlZm9yZVVubG9hZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8qKlxyXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxyXG4gKiBmb3Igc2l0dWF0aW9ucyB3aGVyZSB5b3UgZG9uJ3Qgd2FudCB0byBzZW5kIHRoZSBsb2NhdGlvbiB0byB0aGUgc2VydmVyIGZvclxyXG4gKiBzb21lIHJlYXNvbiwgZWl0aGVyIGJlY2F1c2UgeW91IGRvIGNhbm5vdCBjb25maWd1cmUgaXQgb3IgdGhlIFVSTCBzcGFjZSBpc1xyXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlaGFzaGhpc3RvcnlcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9uczIgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMyJHdpbmRvdyA9IF9vcHRpb25zMi53aW5kb3csXG4gICAgICB3aW5kb3cgPSBfb3B0aW9uczIkd2luZG93ID09PSB2b2lkIDAgPyBkb2N1bWVudC5kZWZhdWx0VmlldyA6IF9vcHRpb25zMiR3aW5kb3c7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG5cbiAgZnVuY3Rpb24gZ2V0SW5kZXhBbmRMb2NhdGlvbigpIHtcbiAgICB2YXIgX3BhcnNlUGF0aCA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpLFxuICAgICAgICBfcGFyc2VQYXRoJHBhdGhuYW1lID0gX3BhcnNlUGF0aC5wYXRobmFtZSxcbiAgICAgICAgcGF0aG5hbWUgPSBfcGFyc2VQYXRoJHBhdGhuYW1lID09PSB2b2lkIDAgPyAnLycgOiBfcGFyc2VQYXRoJHBhdGhuYW1lLFxuICAgICAgICBfcGFyc2VQYXRoJHNlYXJjaCA9IF9wYXJzZVBhdGguc2VhcmNoLFxuICAgICAgICBzZWFyY2ggPSBfcGFyc2VQYXRoJHNlYXJjaCA9PT0gdm9pZCAwID8gJycgOiBfcGFyc2VQYXRoJHNlYXJjaCxcbiAgICAgICAgX3BhcnNlUGF0aCRoYXNoID0gX3BhcnNlUGF0aC5oYXNoLFxuICAgICAgICBoYXNoID0gX3BhcnNlUGF0aCRoYXNoID09PSB2b2lkIDAgPyAnJyA6IF9wYXJzZVBhdGgkaGFzaDtcblxuICAgIHZhciBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge307XG4gICAgcmV0dXJuIFtzdGF0ZS5pZHgsIHJlYWRPbmx5KHtcbiAgICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICAgIHNlYXJjaDogc2VhcmNoLFxuICAgICAgaGFzaDogaGFzaCxcbiAgICAgIHN0YXRlOiBzdGF0ZS51c3IgfHwgbnVsbCxcbiAgICAgIGtleTogc3RhdGUua2V5IHx8ICdkZWZhdWx0J1xuICAgIH0pXTtcbiAgfVxuXG4gIHZhciBibG9ja2VkUG9wVHggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBpZiAoYmxvY2tlZFBvcFR4KSB7XG4gICAgICBibG9ja2Vycy5jYWxsKGJsb2NrZWRQb3BUeCk7XG4gICAgICBibG9ja2VkUG9wVHggPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjQgPSBnZXRJbmRleEFuZExvY2F0aW9uKCksXG4gICAgICAgICAgbmV4dEluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb240WzBdLFxuICAgICAgICAgIG5leHRMb2NhdGlvbiA9IF9nZXRJbmRleEFuZExvY2F0aW9uNFsxXTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCkge1xuICAgICAgICBpZiAobmV4dEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgZGVsdGEgPSBpbmRleCAtIG5leHRJbmRleDtcblxuICAgICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgICAgLy8gUmV2ZXJ0IHRoZSBQT1BcbiAgICAgICAgICAgIGJsb2NrZWRQb3BUeCA9IHtcbiAgICAgICAgICAgICAgYWN0aW9uOiBuZXh0QWN0aW9uLFxuICAgICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgICAgICByZXRyeTogZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICAgICAgICAgICAgZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbyhkZWx0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRyeWluZyB0byBQT1AgdG8gYSBsb2NhdGlvbiB3aXRoIG5vIGluZGV4LiBXZSBkaWQgbm90IGNyZWF0ZVxuICAgICAgICAgIC8vIHRoaXMgbG9jYXRpb24sIHNvIHdlIGNhbid0IGVmZmVjdGl2ZWx5IGJsb2NrIHRoZSBuYXZpZ2F0aW9uLlxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIC8vIFRPRE86IFdyaXRlIHVwIGEgZG9jIHRoYXQgZXhwbGFpbnMgb3VyIGJsb2NraW5nIHN0cmF0ZWd5IGluXG4gICAgICAgICAgLy8gZGV0YWlsIGFuZCBsaW5rIHRvIGl0IGhlcmUgc28gcGVvcGxlIGNhbiB1bmRlcnN0YW5kIGJldHRlclxuICAgICAgICAgIC8vIHdoYXQgaXMgZ29pbmcgb24gYW5kIGhvdyB0byBhdm9pZCBpdC5cbiAgICAgICAgICBcIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgXCIgKyBcImNyZWF0ZWQgYnkgdGhlIGhpc3RvcnkgbGlicmFyeS4gVGhlIGJsb2NrIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbiwgYnV0IGluIGdlbmVyYWwgeW91IHNob3VsZCBkbyBhbGwgbmF2aWdhdGlvbiB3aXRoIHRoZSBcIiArIFwiaGlzdG9yeSBsaWJyYXJ5IChpbnN0ZWFkIG9mIHVzaW5nIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBkaXJlY3RseSkgXCIgKyBcInRvIGF2b2lkIHRoaXMgc2l0dWF0aW9uLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTsgLy8gcG9wc3RhdGUgZG9lcyBub3QgZmlyZSBvbiBoYXNoY2hhbmdlIGluIElFIDExIGFuZCBvbGQgKHRyaWRlbnQpIEVkZ2VcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZGUvZG9jcy9XZWIvQVBJL1dpbmRvdy9wb3BzdGF0ZV9ldmVudFxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudFR5cGUsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2dldEluZGV4QW5kTG9jYXRpb241ID0gZ2V0SW5kZXhBbmRMb2NhdGlvbigpLFxuICAgICAgICBuZXh0TG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjVbMV07IC8vIElnbm9yZSBleHRyYW5lb3VzIGhhc2hjaGFuZ2UgZXZlbnRzLlxuXG5cbiAgICBpZiAoY3JlYXRlUGF0aChuZXh0TG9jYXRpb24pICE9PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkge1xuICAgICAgaGFuZGxlUG9wKCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uNiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb242WzBdLFxuICAgICAgbG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjZbMV07XG5cbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCYXNlSHJlZigpIHtcbiAgICB2YXIgYmFzZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2UgJiYgYmFzZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZih0bykge1xuICAgIHJldHVybiBnZXRCYXNlSHJlZigpICsgJyMnICsgKHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZWFkT25seShfZXh0ZW5kcyh7XG4gICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBoYXNoOiAnJyxcbiAgICAgIHNlYXJjaDogJydcbiAgICB9LCB0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBrZXk6IGNyZWF0ZUtleSgpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlQW5kVXJsKG5leHRMb2NhdGlvbiwgaW5kZXgpIHtcbiAgICByZXR1cm4gW3tcbiAgICAgIHVzcjogbmV4dExvY2F0aW9uLnN0YXRlLFxuICAgICAga2V5OiBuZXh0TG9jYXRpb24ua2V5LFxuICAgICAgaWR4OiBpbmRleFxuICAgIH0sIGNyZWF0ZUhyZWYobmV4dExvY2F0aW9uKV07XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvd1R4KGFjdGlvbiwgbG9jYXRpb24sIHJldHJ5KSB7XG4gICAgcmV0dXJuICFibG9ja2Vycy5sZW5ndGggfHwgKGJsb2NrZXJzLmNhbGwoe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByZXRyeTogcmV0cnlcbiAgICB9KSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlUeChuZXh0QWN0aW9uKSB7XG4gICAgYWN0aW9uID0gbmV4dEFjdGlvbjtcblxuICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjcgPSBnZXRJbmRleEFuZExvY2F0aW9uKCk7XG5cbiAgICBpbmRleCA9IF9nZXRJbmRleEFuZExvY2F0aW9uN1swXTtcbiAgICBsb2NhdGlvbiA9IF9nZXRJbmRleEFuZExvY2F0aW9uN1sxXTtcbiAgICBsaXN0ZW5lcnMuY2FsbCh7XG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKTtcblxuICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgcHVzaCh0bywgc3RhdGUpO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobmV4dExvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLCBcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKSA6IHZvaWQgMDtcblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICB2YXIgX2dldEhpc3RvcnlTdGF0ZUFuZFVyMyA9IGdldEhpc3RvcnlTdGF0ZUFuZFVybChuZXh0TG9jYXRpb24sIGluZGV4ICsgMSksXG4gICAgICAgICAgaGlzdG9yeVN0YXRlID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyM1swXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIzWzFdOyAvLyBUT0RPOiBTdXBwb3J0IGZvcmNlZCByZWxvYWRpbmdcbiAgICAgIC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG5cblxuICAgICAgdHJ5IHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCAnJywgdXJsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIFRoZXkgYXJlIGdvaW5nIHRvIGxvc2Ugc3RhdGUgaGVyZSwgYnV0IHRoZXJlIGlzIG5vIHJlYWxcbiAgICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgICAgfVxuXG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSk7XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIHJlcGxhY2UodG8sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG5leHRMb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJywgXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnJlcGxhY2UoXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIikgOiB2b2lkIDA7XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgdmFyIF9nZXRIaXN0b3J5U3RhdGVBbmRVcjQgPSBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCksXG4gICAgICAgICAgaGlzdG9yeVN0YXRlID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyNFswXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXI0WzFdOyAvLyBUT0RPOiBTdXBwb3J0IGZvcmNlZCByZWxvYWRpbmdcblxuXG4gICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsICcnLCB1cmwpO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnbyhkZWx0YSkge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28oZGVsdGEpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICB9LFxuXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGJhY2s6IGZ1bmN0aW9uIGJhY2soKSB7XG4gICAgICBnbygtMSk7XG4gICAgfSxcbiAgICBmb3J3YXJkOiBmdW5jdGlvbiBmb3J3YXJkKCkge1xuICAgICAgZ28oMSk7XG4gICAgfSxcbiAgICBsaXN0ZW46IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIGJsb2NrOiBmdW5jdGlvbiBibG9jayhibG9ja2VyKSB7XG4gICAgICB2YXIgdW5ibG9jayA9IGJsb2NrZXJzLnB1c2goYmxvY2tlcik7XG5cbiAgICAgIGlmIChibG9ja2Vycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB1bmJsb2NrKCk7IC8vIFJlbW92ZSB0aGUgYmVmb3JldW5sb2FkIGxpc3RlbmVyIHNvIHRoZSBkb2N1bWVudCBtYXlcbiAgICAgICAgLy8gc3RpbGwgYmUgc2FsdmFnZWFibGUgaW4gdGhlIHBhZ2VoaWRlIGV2ZW50LlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jdW5sb2FkaW5nLWRvY3VtZW50c1xuXG4gICAgICAgIGlmICghYmxvY2tlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vKipcclxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxyXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZW1lbW9yeWhpc3RvcnlcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zMyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9uczMkaW5pdGlhbEVudHIgPSBfb3B0aW9uczMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9vcHRpb25zMyRpbml0aWFsRW50ciA9PT0gdm9pZCAwID8gWycvJ10gOiBfb3B0aW9uczMkaW5pdGlhbEVudHIsXG4gICAgICBpbml0aWFsSW5kZXggPSBfb3B0aW9uczMuaW5pdGlhbEluZGV4O1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICB2YXIgbG9jYXRpb24gPSByZWFkT25seShfZXh0ZW5kcyh7XG4gICAgICBwYXRobmFtZTogJy8nLFxuICAgICAgc2VhcmNoOiAnJyxcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgc3RhdGU6IG51bGwsXG4gICAgICBrZXk6IGNyZWF0ZUtleSgpXG4gICAgfSwgdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IHBhcnNlUGF0aChlbnRyeSkgOiBlbnRyeSkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycsIFwiUmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGNyZWF0ZU1lbW9yeUhpc3RvcnkoeyBpbml0aWFsRW50cmllcyB9KSAoaW52YWxpZCBlbnRyeTogXCIgKyBKU09OLnN0cmluZ2lmeShlbnRyeSkgKyBcIilcIikgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9KTtcbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4ID09IG51bGwgPyBlbnRyaWVzLmxlbmd0aCAtIDEgOiBpbml0aWFsSW5kZXgsIDAsIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICB2YXIgbG9jYXRpb24gPSBlbnRyaWVzW2luZGV4XTtcbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlYWRPbmx5KF9leHRlbmRzKHtcbiAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaDogJycsXG4gICAgICBoYXNoOiAnJ1xuICAgIH0sIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGtleTogY3JlYXRlS2V5KClcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvd1R4KGFjdGlvbiwgbG9jYXRpb24sIHJldHJ5KSB7XG4gICAgcmV0dXJuICFibG9ja2Vycy5sZW5ndGggfHwgKGJsb2NrZXJzLmNhbGwoe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByZXRyeTogcmV0cnlcbiAgICB9KSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pIHtcbiAgICBhY3Rpb24gPSBuZXh0QWN0aW9uO1xuICAgIGxvY2F0aW9uID0gbmV4dExvY2F0aW9uO1xuICAgIGxpc3RlbmVycy5jYWxsKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgdmFyIG5leHRMb2NhdGlvbiA9IGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICBwdXNoKHRvLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJywgXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKSA6IHZvaWQgMDtcblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICBpbmRleCArPSAxO1xuICAgICAgZW50cmllcy5zcGxpY2UoaW5kZXgsIGVudHJpZXMubGVuZ3RoLCBuZXh0TG9jYXRpb24pO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSk7XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIHJlcGxhY2UodG8sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLCBcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBtZW1vcnkgaGlzdG9yeS5yZXBsYWNlKFwiICsgSlNPTi5zdHJpbmdpZnkodG8pICsgXCIpXCIpIDogdm9pZCAwO1xuXG4gICAgaWYgKGFsbG93VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uLCByZXRyeSkpIHtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGRlbHRhKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGluZGV4ICsgZGVsdGEsIDAsIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBlbnRyaWVzW25leHRJbmRleF07XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgZ2V0IGluZGV4KCkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG5cbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgYmFjazogZnVuY3Rpb24gYmFjaygpIHtcbiAgICAgIGdvKC0xKTtcbiAgICB9LFxuICAgIGZvcndhcmQ6IGZ1bmN0aW9uIGZvcndhcmQoKSB7XG4gICAgICBnbygxKTtcbiAgICB9LFxuICAgIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0sXG4gICAgYmxvY2s6IGZ1bmN0aW9uIGJsb2NrKGJsb2NrZXIpIHtcbiAgICAgIHJldHVybiBibG9ja2Vycy5wdXNoKGJsb2NrZXIpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuXG5mdW5jdGlvbiBwcm9tcHRCZWZvcmVVbmxvYWQoZXZlbnQpIHtcbiAgLy8gQ2FuY2VsIHRoZSBldmVudC5cbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gQ2hyb21lIChhbmQgbGVnYWN5IElFKSByZXF1aXJlcyByZXR1cm5WYWx1ZSB0byBiZSBzZXQuXG5cbiAgZXZlbnQucmV0dXJuVmFsdWUgPSAnJztcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRzKCkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIGhhbmRsZXJzLmxlbmd0aDtcbiAgICB9LFxuXG4gICAgcHVzaDogZnVuY3Rpb24gcHVzaChmbikge1xuICAgICAgaGFuZGxlcnMucHVzaChmbik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgIHJldHVybiBoYW5kbGVyICE9PSBmbjtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY2FsbDogZnVuY3Rpb24gY2FsbChhcmcpIHtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbiAmJiBmbihhcmcpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOCk7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIHN0cmluZyBVUkwgcGF0aCBmcm9tIHRoZSBnaXZlbiBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZXBhdGhcclxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlUGF0aChfcmVmKSB7XG4gIHZhciBfcmVmJHBhdGhuYW1lID0gX3JlZi5wYXRobmFtZSxcbiAgICAgIHBhdGhuYW1lID0gX3JlZiRwYXRobmFtZSA9PT0gdm9pZCAwID8gJy8nIDogX3JlZiRwYXRobmFtZSxcbiAgICAgIF9yZWYkc2VhcmNoID0gX3JlZi5zZWFyY2gsXG4gICAgICBzZWFyY2ggPSBfcmVmJHNlYXJjaCA9PT0gdm9pZCAwID8gJycgOiBfcmVmJHNlYXJjaCxcbiAgICAgIF9yZWYkaGFzaCA9IF9yZWYuaGFzaCxcbiAgICAgIGhhc2ggPSBfcmVmJGhhc2ggPT09IHZvaWQgMCA/ICcnIDogX3JlZiRoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRobmFtZSArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aG5hbWUgKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG4vKipcclxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjcGFyc2VwYXRoXHJcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGFyc2VkUGF0aCA9IHt9O1xuXG4gIGlmIChwYXRoKSB7XG4gICAgdmFyIGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZignIycpO1xuXG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKCc/Jyk7XG5cbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cblxuZXhwb3J0IHsgQWN0aW9uLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVBhdGgsIHBhcnNlUGF0aCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciB2Ni4zLjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgcGFyc2VQYXRoLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBBY3Rpb24gfSBmcm9tICdoaXN0b3J5JztcbmV4cG9ydCB7IEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgcGFyc2VQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIGNyZWF0ZUVsZW1lbnQsIHVzZVN0YXRlLCB1c2VMYXlvdXRFZmZlY3QsIENoaWxkcmVuLCBpc1ZhbGlkRWxlbWVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IE5hdmlnYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2aWdhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIk5hdmlnYXRpb25cIjtcbn1cblxuY29uc3QgTG9jYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTG9jYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJMb2NhdGlvblwiO1xufVxuXG5jb25zdCBSb3V0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dCh7XG4gIG91dGxldDogbnVsbCxcbiAgbWF0Y2hlczogW11cbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVcIjtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG59XG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuY29uc3QgYWxyZWFkeVdhcm5lZCA9IHt9O1xuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI2dlbmVyYXRlcGF0aFxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGgucmVwbGFjZSgvOihcXHcrKS9nLCAoXywga2V5KSA9PiB7XG4gICAgIShwYXJhbXNba2V5XSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJNaXNzaW5nIFxcXCI6XCIgKyBrZXkgKyBcIlxcXCIgcGFyYW1cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBwYXJhbXNba2V5XTtcbiAgfSkucmVwbGFjZSgvXFwvKlxcKiQvLCBfID0+IHBhcmFtc1tcIipcIl0gPT0gbnVsbCA/IFwiXCIgOiBwYXJhbXNbXCIqXCJdLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpKTtcbn1cbi8qKlxuICogQSBSb3V0ZU1hdGNoIGNvbnRhaW5zIGluZm8gYWJvdXQgaG93IGEgcm91dGUgbWF0Y2hlZCBhIFVSTC5cbiAqL1xuXG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbWF0Y2hyb3V0ZXNcbiAqL1xuZnVuY3Rpb24gbWF0Y2hSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZywgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSB2b2lkIDApIHtcbiAgICBiYXNlbmFtZSA9IFwiL1wiO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uID0gdHlwZW9mIGxvY2F0aW9uQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uQXJnKSA6IGxvY2F0aW9uQXJnO1xuICBsZXQgcGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiLCBiYXNlbmFtZSk7XG5cbiAgaWYgKHBhdGhuYW1lID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBicmFuY2hlcyA9IGZsYXR0ZW5Sb3V0ZXMocm91dGVzKTtcbiAgcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpO1xuICBsZXQgbWF0Y2hlcyA9IG51bGw7XG5cbiAgZm9yIChsZXQgaSA9IDA7IG1hdGNoZXMgPT0gbnVsbCAmJiBpIDwgYnJhbmNoZXMubGVuZ3RoOyArK2kpIHtcbiAgICBtYXRjaGVzID0gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2hlc1tpXSwgcGF0aG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5Sb3V0ZXMocm91dGVzLCBicmFuY2hlcywgcGFyZW50c01ldGEsIHBhcmVudFBhdGgpIHtcbiAgaWYgKGJyYW5jaGVzID09PSB2b2lkIDApIHtcbiAgICBicmFuY2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBcIlwiO1xuICB9XG5cbiAgcm91dGVzLmZvckVhY2goKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCBtZXRhID0ge1xuICAgICAgcmVsYXRpdmVQYXRoOiByb3V0ZS5wYXRoIHx8IFwiXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSB0cnVlLFxuICAgICAgY2hpbGRyZW5JbmRleDogaW5kZXgsXG4gICAgICByb3V0ZVxuICAgIH07XG5cbiAgICBpZiAobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgICFtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKHBhcmVudFBhdGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkFic29sdXRlIHJvdXRlIHBhdGggXFxcIlwiICsgbWV0YS5yZWxhdGl2ZVBhdGggKyBcIlxcXCIgbmVzdGVkIHVuZGVyIHBhdGggXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiIGlzIG5vdCB2YWxpZC4gQW4gYWJzb2x1dGUgY2hpbGQgcm91dGUgcGF0aCBcIikgKyBcIm11c3Qgc3RhcnQgd2l0aCB0aGUgY29tYmluZWQgcGF0aCBvZiBhbGwgaXRzIHBhcmVudCByb3V0ZXMuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIG1ldGEucmVsYXRpdmVQYXRoID0gbWV0YS5yZWxhdGl2ZVBhdGguc2xpY2UocGFyZW50UGF0aC5sZW5ndGgpO1xuICAgIH1cblxuICAgIGxldCBwYXRoID0gam9pblBhdGhzKFtwYXJlbnRQYXRoLCBtZXRhLnJlbGF0aXZlUGF0aF0pO1xuICAgIGxldCByb3V0ZXNNZXRhID0gcGFyZW50c01ldGEuY29uY2F0KG1ldGEpOyAvLyBBZGQgdGhlIGNoaWxkcmVuIGJlZm9yZSBhZGRpbmcgdGhpcyByb3V0ZSB0byB0aGUgYXJyYXkgc28gd2UgdHJhdmVyc2UgdGhlXG4gICAgLy8gcm91dGUgdHJlZSBkZXB0aC1maXJzdCBhbmQgY2hpbGQgcm91dGVzIGFwcGVhciBiZWZvcmUgdGhlaXIgcGFyZW50cyBpblxuICAgIC8vIHRoZSBcImZsYXR0ZW5lZFwiIHZlcnNpb24uXG5cbiAgICBpZiAocm91dGUuY2hpbGRyZW4gJiYgcm91dGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgIShyb3V0ZS5pbmRleCAhPT0gdHJ1ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlIFwiICsgKFwiYWxsIGNoaWxkIHJvdXRlcyBmcm9tIHJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIi5cIikpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGZsYXR0ZW5Sb3V0ZXMocm91dGUuY2hpbGRyZW4sIGJyYW5jaGVzLCByb3V0ZXNNZXRhLCBwYXRoKTtcbiAgICB9IC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG5cblxuICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG5cbmZ1bmN0aW9uIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKSB7XG4gIGJyYW5jaGVzLnNvcnQoKGEsIGIpID0+IGEuc2NvcmUgIT09IGIuc2NvcmUgPyBiLnNjb3JlIC0gYS5zY29yZSAvLyBIaWdoZXIgc2NvcmUgZmlyc3RcbiAgOiBjb21wYXJlSW5kZXhlcyhhLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSwgYi5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCkpKTtcbn1cblxuY29uc3QgcGFyYW1SZSA9IC9eOlxcdyskLztcbmNvbnN0IGR5bmFtaWNTZWdtZW50VmFsdWUgPSAzO1xuY29uc3QgaW5kZXhSb3V0ZVZhbHVlID0gMjtcbmNvbnN0IGVtcHR5U2VnbWVudFZhbHVlID0gMTtcbmNvbnN0IHN0YXRpY1NlZ21lbnRWYWx1ZSA9IDEwO1xuY29uc3Qgc3BsYXRQZW5hbHR5ID0gLTI7XG5cbmNvbnN0IGlzU3BsYXQgPSBzID0+IHMgPT09IFwiKlwiO1xuXG5mdW5jdGlvbiBjb21wdXRlU2NvcmUocGF0aCwgaW5kZXgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGxldCBpbml0aWFsU2NvcmUgPSBzZWdtZW50cy5sZW5ndGg7XG5cbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG5cbiAgaWYgKGluZGV4KSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWdtZW50cy5maWx0ZXIocyA9PiAhaXNTcGxhdChzKSkucmVkdWNlKChzY29yZSwgc2VnbWVudCkgPT4gc2NvcmUgKyAocGFyYW1SZS50ZXN0KHNlZ21lbnQpID8gZHluYW1pY1NlZ21lbnRWYWx1ZSA6IHNlZ21lbnQgPT09IFwiXCIgPyBlbXB0eVNlZ21lbnRWYWx1ZSA6IHN0YXRpY1NlZ21lbnRWYWx1ZSksIGluaXRpYWxTY29yZSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVJbmRleGVzKGEsIGIpIHtcbiAgbGV0IHNpYmxpbmdzID0gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuc2xpY2UoMCwgLTEpLmV2ZXJ5KChuLCBpKSA9PiBuID09PSBiW2ldKTtcbiAgcmV0dXJuIHNpYmxpbmdzID8gLy8gSWYgdHdvIHJvdXRlcyBhcmUgc2libGluZ3MsIHdlIHNob3VsZCB0cnkgdG8gbWF0Y2ggdGhlIGVhcmxpZXIgc2libGluZ1xuICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgLy8gYmVoYXZpb3IgYnkgc2ltcGx5IHB1dHRpbmcgcm91dGVzIHdpdGggaWRlbnRpY2FsIHBhdGhzIGluIHRoZSBvcmRlciB0aGV5XG4gIC8vIHdhbnQgdGhlbSB0cmllZC5cbiAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdIDogLy8gT3RoZXJ3aXNlLCBpdCBkb2Vzbid0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHJhbmsgbm9uLXNpYmxpbmdzIGJ5IGluZGV4LFxuICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgMDtcbn1cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2gsIHBhdGhuYW1lKSB7XG4gIGxldCB7XG4gICAgcm91dGVzTWV0YVxuICB9ID0gYnJhbmNoO1xuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXNNZXRhLmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IG1ldGEgPSByb3V0ZXNNZXRhW2ldO1xuICAgIGxldCBlbmQgPSBpID09PSByb3V0ZXNNZXRhLmxlbmd0aCAtIDE7XG4gICAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gbWF0Y2hlZFBhdGhuYW1lID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UobWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCkgfHwgXCIvXCI7XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hQYXRoKHtcbiAgICAgIHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogbWV0YS5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZW5kXG4gICAgfSwgcmVtYWluaW5nUGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcbiAgICBsZXQgcm91dGUgPSBtZXRhLnJvdXRlO1xuICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICBwYXJhbXM6IG1hdGNoZWRQYXJhbXMsXG4gICAgICBwYXRobmFtZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lXSksXG4gICAgICBwYXRobmFtZUJhc2U6IG5vcm1hbGl6ZVBhdGhuYW1lKGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKSksXG4gICAgICByb3V0ZVxuICAgIH0pO1xuXG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cbi8qKlxuICogQSBQYXRoUGF0dGVybiBpcyB1c2VkIHRvIG1hdGNoIG9uIHNvbWUgcG9ydGlvbiBvZiBhIFVSTCBwYXRobmFtZS5cbiAqL1xuXG5cbi8qKlxuICogUGVyZm9ybXMgcGF0dGVybiBtYXRjaGluZyBvbiBhIFVSTCBwYXRobmFtZSBhbmQgcmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dFxuICogdGhlIG1hdGNoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbWF0Y2hwYXRoXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGxldCBbbWF0Y2hlciwgcGFyYW1OYW1lc10gPSBjb21waWxlUGF0aChwYXR0ZXJuLnBhdGgsIHBhdHRlcm4uY2FzZVNlbnNpdGl2ZSwgcGF0dGVybi5lbmQpO1xuICBsZXQgbWF0Y2ggPSBwYXRobmFtZS5tYXRjaChtYXRjaGVyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBtYXRjaFswXTtcbiAgbGV0IHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gIGxldCBjYXB0dXJlR3JvdXBzID0gbWF0Y2guc2xpY2UoMSk7XG4gIGxldCBwYXJhbXMgPSBwYXJhbU5hbWVzLnJlZHVjZSgobWVtbywgcGFyYW1OYW1lLCBpbmRleCkgPT4ge1xuICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgcGFyYW1zW1wiKlwiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgIHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5zbGljZSgwLCBtYXRjaGVkUGF0aG5hbWUubGVuZ3RoIC0gc3BsYXRWYWx1ZS5sZW5ndGgpLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgICB9XG5cbiAgICBtZW1vW3BhcmFtTmFtZV0gPSBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQoY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIiwgcGFyYW1OYW1lKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICBwYXRobmFtZTogbWF0Y2hlZFBhdGhuYW1lLFxuICAgIHBhdGhuYW1lQmFzZSxcbiAgICBwYXR0ZXJuXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgZW5kID0gdHJ1ZTtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocGF0aCA9PT0gXCIqXCIgfHwgIXBhdGguZW5kc1dpdGgoXCIqXCIpIHx8IHBhdGguZW5kc1dpdGgoXCIvKlwiKSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpIDogdm9pZCAwO1xuICBsZXQgcGFyYW1OYW1lcyA9IFtdO1xuICBsZXQgcmVnZXhwU291cmNlID0gXCJeXCIgKyBwYXRoLnJlcGxhY2UoL1xcLypcXCo/JC8sIFwiXCIpIC8vIElnbm9yZSB0cmFpbGluZyAvIGFuZCAvKiwgd2UnbGwgaGFuZGxlIGl0IGJlbG93XG4gIC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSAvLyBNYWtlIHN1cmUgaXQgaGFzIGEgbGVhZGluZyAvXG4gIC5yZXBsYWNlKC9bXFxcXC4qK14kP3t9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgLnJlcGxhY2UoLzooXFx3KykvZywgKF8sIHBhcmFtTmFtZSkgPT4ge1xuICAgIHBhcmFtTmFtZXMucHVzaChwYXJhbU5hbWUpO1xuICAgIHJldHVybiBcIihbXlxcXFwvXSspXCI7XG4gIH0pO1xuXG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSkge1xuICAgIHBhcmFtTmFtZXMucHVzaChcIipcIik7XG4gICAgcmVnZXhwU291cmNlICs9IHBhdGggPT09IFwiKlwiIHx8IHBhdGggPT09IFwiLypcIiA/IFwiKC4qKSRcIiAvLyBBbHJlYWR5IG1hdGNoZWQgdGhlIGluaXRpYWwgLywganVzdCBtYXRjaCB0aGUgcmVzdFxuICAgIDogXCIoPzpcXFxcLyguKyl8XFxcXC8qKSRcIjsgLy8gRG9uJ3QgaW5jbHVkZSB0aGUgLyBpbiBwYXJhbXNbXCIqXCJdXG4gIH0gZWxzZSB7XG4gICAgcmVnZXhwU291cmNlICs9IGVuZCA/IFwiXFxcXC8qJFwiIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICA6IC8vIE90aGVyd2lzZSwgbWF0Y2ggYSB3b3JkIGJvdW5kYXJ5IG9yIGEgcHJvY2VlZGluZyAvLiBUaGUgd29yZCBib3VuZGFyeSByZXN0cmljdHNcbiAgICAvLyBwYXJlbnQgcm91dGVzIHRvIG1hdGNoaW5nIG9ubHkgdGhlaXIgb3duIHdvcmRzIGFuZCBub3RoaW5nIG1vcmUsIGUuZy4gcGFyZW50XG4gICAgLy8gcm91dGUgXCIvaG9tZVwiIHNob3VsZCBub3QgbWF0Y2ggXCIvaG9tZTJcIi5cbiAgICAvLyBBZGRpdGlvbmFsbHksIGFsbG93IHBhdGhzIHN0YXJ0aW5nIHdpdGggYC5gLCBgLWAsIGB+YCwgYW5kIHVybC1lbmNvZGVkIGVudGl0aWVzLFxuICAgIC8vIGJ1dCBkbyBub3QgY29uc3VtZSB0aGUgY2hhcmFjdGVyIGluIHRoZSBtYXRjaGVkIHBhdGggc28gdGhleSBjYW4gbWF0Y2ggYWdhaW5zdFxuICAgIC8vIG5lc3RlZCBwYXRocy5cbiAgICBcIig/Oig/PVsufi1dfCVbMC05QS1GXXsyfSl8XFxcXGJ8XFxcXC98JClcIjtcbiAgfVxuXG4gIGxldCBtYXRjaGVyID0gbmV3IFJlZ0V4cChyZWdleHBTb3VyY2UsIGNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiBcImlcIik7XG4gIHJldHVybiBbbWF0Y2hlciwgcGFyYW1OYW1lc107XG59XG5cbmZ1bmN0aW9uIHNhZmVseURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSwgcGFyYW1OYW1lKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJUaGUgdmFsdWUgZm9yIHRoZSBVUkwgcGFyYW0gXFxcIlwiICsgcGFyYW1OYW1lICsgXCJcXFwiIHdpbGwgbm90IGJlIGRlY29kZWQgYmVjYXVzZVwiICsgKFwiIHRoZSBzdHJpbmcgXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgaXMgYSBtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHlcIikgKyAoXCIgZHVlIHRvIGEgYmFkIHBlcmNlbnQgZW5jb2RpbmcgKFwiICsgZXJyb3IgKyBcIikuXCIpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIHJlc29sdmVkIHBhdGggb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBwYXRobmFtZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3Jlc29sdmVwYXRoXG4gKi9cblxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aCh0bywgZnJvbVBhdGhuYW1lKSB7XG4gIGlmIChmcm9tUGF0aG5hbWUgPT09IHZvaWQgMCkge1xuICAgIGZyb21QYXRobmFtZSA9IFwiL1wiO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWUgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZSA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpIDogZnJvbVBhdGhuYW1lO1xuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUocmVsYXRpdmVQYXRoLCBmcm9tUGF0aG5hbWUpIHtcbiAgbGV0IHNlZ21lbnRzID0gZnJvbVBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICBsZXQgcmVsYXRpdmVTZWdtZW50cyA9IHJlbGF0aXZlUGF0aC5zcGxpdChcIi9cIik7XG4gIHJlbGF0aXZlU2VnbWVudHMuZm9yRWFjaChzZWdtZW50ID0+IHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAvLyBLZWVwIHRoZSByb290IFwiXCIgc2VnbWVudCBzbyB0aGUgcGF0aG5hbWUgc3RhcnRzIGF0IC9cbiAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSBzZWdtZW50cy5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09IFwiLlwiKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWdtZW50cy5sZW5ndGggPiAxID8gc2VnbWVudHMuam9pbihcIi9cIikgOiBcIi9cIjtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVRvKHRvQXJnLCByb3V0ZVBhdGhuYW1lcywgbG9jYXRpb25QYXRobmFtZSkge1xuICBsZXQgdG8gPSB0eXBlb2YgdG9BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG9BcmcpIDogdG9Bcmc7XG4gIGxldCB0b1BhdGhuYW1lID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHRvLnBhdGhuYW1lOyAvLyBJZiBhIHBhdGhuYW1lIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgaW4gYHRvYCwgaXQgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZVxuICAvLyByb3V0ZSBjb250ZXh0LiBUaGlzIGlzIGV4cGxhaW5lZCBpbiBgTm90ZSBvbiBgPExpbmsgdG8+YCB2YWx1ZXNgIGluIG91clxuICAvLyBtaWdyYXRpb24gZ3VpZGUgZnJvbSB2NSBhcyBhIG1lYW5zIG9mIGRpc2FtYmlndWF0aW9uIGJldHdlZW4gYHRvYCB2YWx1ZXNcbiAgLy8gdGhhdCBiZWdpbiB3aXRoIGAvYCBhbmQgdGhvc2UgdGhhdCBkbyBub3QuIEhvd2V2ZXIsIHRoaXMgaXMgcHJvYmxlbWF0aWMgZm9yXG4gIC8vIGB0b2AgdmFsdWVzIHRoYXQgZG8gbm90IHByb3ZpZGUgYSBwYXRobmFtZS4gYHRvYCBjYW4gc2ltcGx5IGJlIGEgc2VhcmNoIG9yXG4gIC8vIGhhc2ggc3RyaW5nLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBhc3N1bWUgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyByZWxhdGl2ZVxuICAvLyB0byB0aGUgY3VycmVudCBsb2NhdGlvbidzIHBhdGhuYW1lIGFuZCAqbm90KiB0aGUgcm91dGUgcGF0aG5hbWUuXG5cbiAgbGV0IGZyb207XG5cbiAgaWYgKHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuXG4gICAgaWYgKHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICBsZXQgdG9TZWdtZW50cyA9IHRvUGF0aG5hbWUuc3BsaXQoXCIvXCIpOyAvLyBFYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFucyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmVcbiAgICAgIC8vIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5IGRpZmZlcmVuY2UgZnJvbSBob3cgPGEgaHJlZj4gd29ya3MgYW5kIGFcbiAgICAgIC8vIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYSBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuXG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG5cbiAgICAgIHRvLnBhdGhuYW1lID0gdG9TZWdtZW50cy5qb2luKFwiL1wiKTtcbiAgICB9IC8vIElmIHRoZXJlIGFyZSBtb3JlIFwiLi5cIiBzZWdtZW50cyB0aGFuIHBhcmVudCByb3V0ZXMsIHJlc29sdmUgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgcm9vdCAvIFVSTC5cblxuXG4gICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6IFwiL1wiO1xuICB9XG5cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7IC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIHRvIHZhbHVlIGhhZCBvbmUuXG5cbiAgaWYgKHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIikgJiYgIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufVxuZnVuY3Rpb24gZ2V0VG9QYXRobmFtZSh0bykge1xuICAvLyBFbXB0eSBzdHJpbmdzIHNob3VsZCBiZSB0cmVhdGVkIHRoZSBzYW1lIGFzIC8gcGF0aHNcbiAgcmV0dXJuIHRvID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiID8gXCIvXCIgOiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pLnBhdGhuYW1lIDogdG8ucGF0aG5hbWU7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG5cbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBuZXh0Q2hhciA9IHBhdGhuYW1lLmNoYXJBdChiYXNlbmFtZS5sZW5ndGgpO1xuXG4gIGlmIChuZXh0Q2hhciAmJiBuZXh0Q2hhciAhPT0gXCIvXCIpIHtcbiAgICAvLyBwYXRobmFtZSBkb2VzIG5vdCBzdGFydCB3aXRoIGJhc2VuYW1lL1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKGJhc2VuYW1lLmxlbmd0aCkgfHwgXCIvXCI7XG59XG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcbmNvbnN0IG5vcm1hbGl6ZVBhdGhuYW1lID0gcGF0aG5hbWUgPT4gcGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcblxuY29uc3Qgbm9ybWFsaXplU2VhcmNoID0gc2VhcmNoID0+ICFzZWFyY2ggfHwgc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBzZWFyY2guc3RhcnRzV2l0aChcIj9cIikgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcblxuY29uc3Qgbm9ybWFsaXplSGFzaCA9IGhhc2ggPT4gIWhhc2ggfHwgaGFzaCA9PT0gXCIjXCIgPyBcIlwiIDogaGFzaC5zdGFydHNXaXRoKFwiI1wiKSA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZnVsbCBocmVmIGZvciB0aGUgZ2l2ZW4gXCJ0b1wiIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgYnVpbGRpbmdcbiAqIGN1c3RvbSBsaW5rcyB0aGF0IGFyZSBhbHNvIGFjY2Vzc2libGUgYW5kIHByZXNlcnZlIHJpZ2h0LWNsaWNrIGJlaGF2aW9yLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlaHJlZlxuICovXG5cbmZ1bmN0aW9uIHVzZUhyZWYodG8pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSB1c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBoYXNoLFxuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaFxuICB9ID0gdXNlUmVzb2x2ZWRQYXRoKHRvKTtcbiAgbGV0IGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWU7XG5cbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIGxldCB0b1BhdGhuYW1lID0gZ2V0VG9QYXRobmFtZSh0byk7XG4gICAgbGV0IGVuZHNXaXRoU2xhc2ggPSB0b1BhdGhuYW1lICE9IG51bGwgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gICAgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSArIChlbmRzV2l0aFNsYXNoID8gXCIvXCIgOiBcIlwiKSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoe1xuICAgIHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSxcbiAgICBzZWFyY2gsXG4gICAgaGFzaFxuICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBhIDxSb3V0ZXI+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlaW5yb3V0ZXJjb250ZXh0XG4gKi9cblxuZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCkge1xuICByZXR1cm4gdXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbG9jYXRpb24gb2JqZWN0LCB3aGljaCByZXByZXNlbnRzIHRoZSBjdXJyZW50IFVSTCBpbiB3ZWJcbiAqIGJyb3dzZXJzLlxuICpcbiAqIE5vdGU6IElmIHlvdSdyZSB1c2luZyB0aGlzIGl0IG1heSBtZWFuIHlvdSdyZSBkb2luZyBzb21lIG9mIHlvdXIgb3duXG4gKiBcInJvdXRpbmdcIiBpbiB5b3VyIGFwcCwgYW5kIHdlJ2QgbGlrZSB0byBrbm93IHdoYXQgeW91ciB1c2UgY2FzZSBpcy4gV2UgbWF5XG4gKiBiZSBhYmxlIHRvIHByb3ZpZGUgc29tZXRoaW5nIGhpZ2hlci1sZXZlbCB0byBiZXR0ZXIgc3VpdCB5b3VyIG5lZWRzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbG9jYXRpb25cbiAqL1xuXG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUxvY2F0aW9uKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gdXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gYWN0aW9uIHdoaWNoIGRlc2NyaWJlcyBob3cgdGhlIHJvdXRlciBjYW1lIHRvXG4gKiB0aGUgY3VycmVudCBsb2NhdGlvbiwgZWl0aGVyIGJ5IGEgcG9wLCBwdXNoLCBvciByZXBsYWNlIG9uIHRoZSBoaXN0b3J5IHN0YWNrLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbmF2aWdhdGlvbnR5cGVcbiAqL1xuXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uVHlwZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5uYXZpZ2F0aW9uVHlwZTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBVUkwgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUgbWF0Y2hlcyB0aGUgY3VycmVudCBVUkwuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyBcImFjdGl2ZVwiIHN0YXRlLCBlLmcuXG4gKiA8TmF2TGluaz4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VtYXRjaFxuICovXG5cbmZ1bmN0aW9uIHVzZU1hdGNoKHBhdHRlcm4pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIHBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpLCBbcGF0aG5hbWUsIHBhdHRlcm5dKTtcbn1cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgdGhlIG5hdmlnYXRlKCkgZnVuY3Rpb24gcmV0dXJuZWQgZnJvbSB1c2VOYXZpZ2F0ZSgpLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhbiBpbXBlcmF0aXZlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGxvY2F0aW9uLiBVc2VkIGJ5IDxMaW5rPnMsIGJ1dFxuICogbWF5IGFsc28gYmUgdXNlZCBieSBvdGhlciBlbGVtZW50cyB0byBjaGFuZ2UgdGhlIGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGUoKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VOYXZpZ2F0ZSgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IHVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KG1hdGNoZXMubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICBsZXQgYWN0aXZlUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgXCJZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBcIiArIFwieW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuXCIpIDogdm9pZCAwO1xuICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSk7XG5cbiAgICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICBwYXRoLnBhdGhuYW1lID0gam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cblxuICAgICghIW9wdGlvbnMucmVwbGFjZSA/IG5hdmlnYXRvci5yZXBsYWNlIDogbmF2aWdhdG9yLnB1c2gpKHBhdGgsIG9wdGlvbnMuc3RhdGUpO1xuICB9LCBbYmFzZW5hbWUsIG5hdmlnYXRvciwgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lXSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IE91dGxldENvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcbi8qKlxuICogUmV0dXJucyB0aGUgY29udGV4dCAoaWYgcHJvdmlkZWQpIGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS5cbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlb3V0bGV0Y29udGV4dFxuICovXG5cbmZ1bmN0aW9uIHVzZU91dGxldENvbnRleHQoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KE91dGxldENvbnRleHQpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IDxPdXRsZXQ+IHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VvdXRsZXRcbiAqL1xuXG5mdW5jdGlvbiB1c2VPdXRsZXQoY29udGV4dCkge1xuICBsZXQgb3V0bGV0ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLm91dGxldDtcblxuICBpZiAob3V0bGV0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KE91dGxldENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0XG4gICAgfSwgb3V0bGV0KTtcbiAgfVxuXG4gIHJldHVybiBvdXRsZXQ7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycyBvZiB0aGUgZHluYW1pYyBwYXJhbXMgZnJvbSB0aGUgY3VycmVudFxuICogVVJMIHRoYXQgd2VyZSBtYXRjaGVkIGJ5IHRoZSByb3V0ZSBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlcGFyYW1zXG4gKi9cblxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbn1cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGhuYW1lIG9mIHRoZSBnaXZlbiBgdG9gIHZhbHVlIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VyZXNvbHZlZHBhdGhcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8pIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSB1c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShtYXRjaGVzLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpKTtcbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZV0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSByb3V0ZSB0aGF0IG1hdGNoZWQgdGhlIGN1cnJlbnQgbG9jYXRpb24sIHByZXBhcmVkXG4gKiB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQgdG8gcmVuZGVyIHRoZSByZW1haW5kZXIgb2YgdGhlIHJvdXRlIHRyZWUuIFJvdXRlXG4gKiBlbGVtZW50cyBpbiB0aGUgdHJlZSBtdXN0IHJlbmRlciBhbiA8T3V0bGV0PiB0byByZW5kZXIgdGhlaXIgY2hpbGQgcm91dGUnc1xuICogZWxlbWVudC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZXJvdXRlc1xuICovXG5cbmZ1bmN0aW9uIHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VSb3V0ZXMoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlc1xuICB9ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgbGV0IHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xuICBsZXQgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50UGF0aG5hbWVCYXNlID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWVCYXNlIDogXCIvXCI7XG4gIGxldCBwYXJlbnRSb3V0ZSA9IHJvdXRlTWF0Y2ggJiYgcm91dGVNYXRjaC5yb3V0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gWW91IHdvbid0IGdldCBhIHdhcm5pbmcgYWJvdXQgMiBkaWZmZXJlbnQgPFJvdXRlcz4gdW5kZXIgYSA8Um91dGU+XG4gICAgLy8gd2l0aG91dCBhIHRyYWlsaW5nICosIGJ1dCB0aGlzIGlzIGEgYmVzdC1lZmZvcnQgd2FybmluZyBhbnl3YXkgc2luY2Ugd2VcbiAgICAvLyBjYW5ub3QgZXZlbiBnaXZlIHRoZSB3YXJuaW5nIHVubGVzcyB0aGV5IGxhbmQgYXQgdGhlIHBhcmVudCByb3V0ZS5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8Um91dGVzPlxuICAgIC8vICAgey8qIFRoaXMgcm91dGUgcGF0aCBNVVNUIGVuZCB3aXRoIC8qIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gICAgICAgaXQgd2lsbCBuZXZlciBtYXRjaCAvYmxvZy9wb3N0LzEyMyAqL31cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZ1wiIGVsZW1lbnQ9ezxCbG9nIC8+fSAvPlxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nL2ZlZWRcIiBlbGVtZW50PXs8QmxvZ0ZlZWQgLz59IC8+XG4gICAgLy8gPC9Sb3V0ZXM+XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBCbG9nKCkge1xuICAgIC8vICAgcmV0dXJuIChcbiAgICAvLyAgICAgPFJvdXRlcz5cbiAgICAvLyAgICAgICA8Um91dGUgcGF0aD1cInBvc3QvOmlkXCIgZWxlbWVudD17PFBvc3QgLz59IC8+XG4gICAgLy8gICAgIDwvUm91dGVzPlxuICAgIC8vICAgKTtcbiAgICAvLyB9XG4gICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UocGFyZW50UGF0aG5hbWUsICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSwgXCJZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIGB1c2VSb3V0ZXMoKWApIGF0IFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aG5hbWUgKyBcIlxcXCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+KSBidXQgdGhlIFwiKSArIFwicGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFxcXCIqXFxcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgXCIgKyBcImRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIFwiICsgXCJyb3V0ZXMgd2lsbCBuZXZlciByZW5kZXIuXFxuXFxuXCIgKyAoXCJQbGVhc2UgY2hhbmdlIHRoZSBwYXJlbnQgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4gdG8gPFJvdXRlIFwiKSArIChcInBhdGg9XFxcIlwiICsgKHBhcmVudFBhdGggPT09IFwiL1wiID8gXCIqXCIgOiBwYXJlbnRQYXRoICsgXCIvKlwiKSArIFwiXFxcIj4uXCIpKTtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuXG4gIGlmIChsb2NhdGlvbkFyZykge1xuICAgIHZhciBfcGFyc2VkTG9jYXRpb25BcmckcGE7XG5cbiAgICBsZXQgcGFyc2VkTG9jYXRpb25BcmcgPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8ICgoX3BhcnNlZExvY2F0aW9uQXJnJHBhID0gcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyc2VkTG9jYXRpb25BcmckcGEuc3RhcnRzV2l0aChwYXJlbnRQYXRobmFtZUJhc2UpKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxvY2F0aW9uID0gcGFyc2VkTG9jYXRpb25Bcmc7XG4gIH0gZWxzZSB7XG4gICAgbG9jYXRpb24gPSBsb2NhdGlvbkZyb21Db250ZXh0O1xuICB9XG5cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9IHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKHBhcmVudFBhdGhuYW1lQmFzZS5sZW5ndGgpIHx8IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywge1xuICAgIHBhdGhuYW1lOiByZW1haW5pbmdQYXRobmFtZVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsIFwiTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG1hdGNoZXMgPT0gbnVsbCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkLCBcIk1hdGNoZWQgbGVhZiByb3V0ZSBhdCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgZG9lcyBub3QgaGF2ZSBhbiBlbGVtZW50LiBcIiArIFwiVGhpcyBtZWFucyBpdCB3aWxsIHJlbmRlciBhbiA8T3V0bGV0IC8+IHdpdGggYSBudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyAmJiBtYXRjaGVzLm1hcChtYXRjaCA9PiBPYmplY3QuYXNzaWduKHt9LCBtYXRjaCwge1xuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zLCBtYXRjaC5wYXJhbXMpLFxuICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzKTtcbn1cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMpIHtcbiAgaWYgKHBhcmVudE1hdGNoZXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudE1hdGNoZXMgPSBbXTtcbiAgfVxuXG4gIGlmIChtYXRjaGVzID09IG51bGwpIHJldHVybiBudWxsO1xuICByZXR1cm4gbWF0Y2hlcy5yZWR1Y2VSaWdodCgob3V0bGV0LCBtYXRjaCwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogbWF0Y2gucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkID8gbWF0Y2gucm91dGUuZWxlbWVudCA6IG91dGxldCxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIG91dGxldCxcbiAgICAgICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlcy5jb25jYXQobWF0Y2hlcy5zbGljZSgwLCBpbmRleCArIDEpKVxuICAgICAgfVxuICAgIH0pO1xuICB9LCBudWxsKTtcbn1cblxuLyoqXG4gKiBBIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI21lbW9yeXJvdXRlclxuICovXG5mdW5jdGlvbiBNZW1vcnlSb3V0ZXIoX3JlZikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGluaXRpYWxFbnRyaWVzLFxuICAgIGluaXRpYWxJbmRleFxuICB9ID0gX3JlZjtcbiAgbGV0IGhpc3RvcnlSZWYgPSB1c2VSZWYoKTtcblxuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KHtcbiAgICAgIGluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4XG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuLyoqXG4gKiBDaGFuZ2VzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgQVBJIGlzIG1vc3RseSB1c2VmdWwgaW4gUmVhY3QuQ29tcG9uZW50IHN1YmNsYXNzZXMgdGhhdCBhcmUgbm90XG4gKiBhYmxlIHRvIHVzZSBob29rcy4gSW4gZnVuY3Rpb25hbCBjb21wb25lbnRzLCB3ZSByZWNvbW1lbmQgeW91IHVzZSB0aGVcbiAqIGB1c2VOYXZpZ2F0ZWAgaG9vayBpbnN0ZWFkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlXG4gIH0gPSBfcmVmMjtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZlxuICAvLyB0aGUgcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcIjxOYXZpZ2F0ZT4gbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF1c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbmF2aWdhdGUodG8sIHtcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNvdXRsZXRcbiAqL1xuZnVuY3Rpb24gT3V0bGV0KHByb3BzKSB7XG4gIHJldHVybiB1c2VPdXRsZXQocHJvcHMuY29udGV4dCk7XG59XG5cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNyb3V0ZVxuICovXG5mdW5jdGlvbiBSb3V0ZShfcHJvcHMpIHtcbiAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBIDxSb3V0ZT4gaXMgb25seSBldmVyIHRvIGJlIHVzZWQgYXMgdGhlIGNoaWxkIG9mIDxSb3V0ZXM+IGVsZW1lbnQsIFwiICsgXCJuZXZlciByZW5kZXJlZCBkaXJlY3RseS4gUGxlYXNlIHdyYXAgeW91ciA8Um91dGU+IGluIGEgPFJvdXRlcz4uXCIpIDogaW52YXJpYW50KGZhbHNlKSA7XG59XG5cbi8qKlxuICogUHJvdmlkZXMgbG9jYXRpb24gY29udGV4dCBmb3IgdGhlIHJlc3Qgb2YgdGhlIGFwcC5cbiAqXG4gKiBOb3RlOiBZb3UgdXN1YWxseSB3b24ndCByZW5kZXIgYSA8Um91dGVyPiBkaXJlY3RseS4gSW5zdGVhZCwgeW91J2xsIHJlbmRlciBhXG4gKiByb3V0ZXIgdGhhdCBpcyBtb3JlIHNwZWNpZmljIHRvIHlvdXIgZW52aXJvbm1lbnQgc3VjaCBhcyBhIDxCcm93c2VyUm91dGVyPlxuICogaW4gd2ViIGJyb3dzZXJzIG9yIGEgPFN0YXRpY1JvdXRlcj4gZm9yIHNlcnZlciByZW5kZXJpbmcuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNyb3V0ZXJcbiAqL1xuZnVuY3Rpb24gUm91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lUHJvcCA9IFwiL1wiLFxuICAgIGNoaWxkcmVuID0gbnVsbCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb25Qcm9wLFxuICAgIG5hdmlnYXRpb25UeXBlID0gQWN0aW9uLlBvcCxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wID0gZmFsc2VcbiAgfSA9IF9yZWYzO1xuICAhIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgcmVuZGVyIGEgPFJvdXRlcj4gaW5zaWRlIGFub3RoZXIgPFJvdXRlcj4uXCIgKyBcIiBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgbW9yZSB0aGFuIG9uZSBpbiB5b3VyIGFwcC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgYmFzZW5hbWUgPSBub3JtYWxpemVQYXRobmFtZShiYXNlbmFtZVByb3ApO1xuICBsZXQgbmF2aWdhdGlvbkNvbnRleHQgPSB1c2VNZW1vKCgpID0+ICh7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcFxuICB9KSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdKTtcblxuICBpZiAodHlwZW9mIGxvY2F0aW9uUHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGxvY2F0aW9uUHJvcCA9IHBhcnNlUGF0aChsb2NhdGlvblByb3ApO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCIsXG4gICAgc3RhdGUgPSBudWxsLFxuICAgIGtleSA9IFwiZGVmYXVsdFwiXG4gIH0gPSBsb2NhdGlvblByb3A7XG4gIGxldCBsb2NhdGlvbiA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpO1xuXG4gICAgaWYgKHRyYWlsaW5nUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhuYW1lOiB0cmFpbGluZ1BhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaCxcbiAgICAgIHN0YXRlLFxuICAgICAga2V5XG4gICAgfTtcbiAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5XSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobG9jYXRpb24gIT0gbnVsbCwgXCI8Um91dGVyIGJhc2VuYW1lPVxcXCJcIiArIGJhc2VuYW1lICsgXCJcXFwiPiBpcyBub3QgYWJsZSB0byBtYXRjaCB0aGUgVVJMIFwiICsgKFwiXFxcIlwiICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoICsgXCJcXFwiIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3RhcnQgd2l0aCB0aGUgXCIpICsgXCJiYXNlbmFtZSwgc28gdGhlIDxSb3V0ZXI+IHdvbid0IHJlbmRlciBhbnl0aGluZy5cIikgOiB2b2lkIDA7XG5cbiAgaWYgKGxvY2F0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuYXZpZ2F0aW9uQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdmFsdWU6IHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgbmF2aWdhdGlvblR5cGVcbiAgICB9XG4gIH0pKTtcbn1cblxuLyoqXG4gKiBBIGNvbnRhaW5lciBmb3IgYSBuZXN0ZWQgdHJlZSBvZiA8Um91dGU+IGVsZW1lbnRzIHRoYXQgcmVuZGVycyB0aGUgYnJhbmNoXG4gKiB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3JvdXRlc1xuICovXG5mdW5jdGlvbiBSb3V0ZXMoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBsb2NhdGlvblxuICB9ID0gX3JlZjQ7XG4gIHJldHVybiB1c2VSb3V0ZXMoY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuKSwgbG9jYXRpb24pO1xufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb3V0ZSBjb25maWcgZnJvbSBhIFJlYWN0IFwiY2hpbGRyZW5cIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHlcbiAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieVxuICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNjcmVhdGVyb3V0ZXNmcm9tY2hpbGRyZW5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgbGV0IHJvdXRlcyA9IFtdO1xuICBDaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBlbGVtZW50ID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIElnbm9yZSBub24tZWxlbWVudHMuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBtb3JlIGVhc2lseSBpbmxpbmVcbiAgICAgIC8vIGNvbmRpdGlvbmFscyBpbiB0aGVpciByb3V0ZSBjb25maWcuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gRnJhZ21lbnQpIHtcbiAgICAgIC8vIFRyYW5zcGFyZW50bHkgc3VwcG9ydCBSZWFjdC5GcmFnbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAgcm91dGVzLnB1c2guYXBwbHkocm91dGVzLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICEoZWxlbWVudC50eXBlID09PSBSb3V0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiW1wiICsgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50LnR5cGUgOiBlbGVtZW50LnR5cGUubmFtZSkgKyBcIl0gaXMgbm90IGEgPFJvdXRlPiBjb21wb25lbnQuIEFsbCBjb21wb25lbnQgY2hpbGRyZW4gb2YgPFJvdXRlcz4gbXVzdCBiZSBhIDxSb3V0ZT4gb3IgPFJlYWN0LkZyYWdtZW50PlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbGV0IHJvdXRlID0ge1xuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGhcbiAgICB9O1xuXG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgfSk7XG4gIHJldHVybiByb3V0ZXM7XG59XG4vKipcbiAqIFJlbmRlcnMgdGhlIHJlc3VsdCBvZiBgbWF0Y2hSb3V0ZXMoKWAgaW50byBhIFJlYWN0IGVsZW1lbnQuXG4gKi9cblxuZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXMsIExvY2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBOYXZpZ2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFJvdXRlQ29udGV4dCBhcyBVTlNBRkVfUm91dGVDb250ZXh0LCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJvdXRlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciBET00gdjYuMy4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCB7IHVzZVJlZiwgdXNlU3RhdGUsIHVzZUxheW91dEVmZmVjdCwgY3JlYXRlRWxlbWVudCwgZm9yd2FyZFJlZiwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnkgfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB7IFJvdXRlciwgdXNlSHJlZiwgY3JlYXRlUGF0aCwgdXNlTG9jYXRpb24sIHVzZVJlc29sdmVkUGF0aCwgdXNlTmF2aWdhdGUgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgTmF2aWdhdGlvblR5cGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVzLCBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlbmRlck1hdGNoZXMsIHJlc29sdmVQYXRoLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSb3V0ZXMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DbGlja1wiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwidGFyZ2V0XCIsIFwidG9cIl0sXG4gICAgICBfZXhjbHVkZWQyID0gW1wiYXJpYS1jdXJyZW50XCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcImVuZFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJjaGlsZHJlblwiXTtcblxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgUm91dGVyIVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn0gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENPTVBPTkVOVFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuZnVuY3Rpb24gQnJvd3NlclJvdXRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgd2luZG93XG4gIH0gPSBfcmVmO1xuICBsZXQgaGlzdG9yeVJlZiA9IHVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvd1xuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBTdG9yZXMgdGhlIGxvY2F0aW9uIGluIHRoZSBoYXNoXG4gKiBwb3J0aW9uIG9mIHRoZSBVUkwgc28gaXQgaXMgbm90IHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqL1xuZnVuY3Rpb24gSGFzaFJvdXRlcihfcmVmMikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjI7XG4gIGxldCBoaXN0b3J5UmVmID0gdXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93XG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBhY2NlcHRzIGEgcHJlLWluc3RhbnRpYXRlZCBoaXN0b3J5IG9iamVjdC4gSXQncyBpbXBvcnRhbnRcbiAqIHRvIG5vdGUgdGhhdCB1c2luZyB5b3VyIG93biBoaXN0b3J5IG9iamVjdCBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIG1heSBhZGRcbiAqIHR3byB2ZXJzaW9ucyBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRvIHlvdXIgYnVuZGxlcyB1bmxlc3MgeW91IHVzZSB0aGUgc2FtZVxuICogdmVyc2lvbiBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRoYXQgUmVhY3QgUm91dGVyIHVzZXMgaW50ZXJuYWxseS5cbiAqL1xuZnVuY3Rpb24gSGlzdG9yeVJvdXRlcihfcmVmMykge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGhpc3RvcnlcbiAgfSA9IF9yZWYzO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGlzdG9yeVJvdXRlci5kaXNwbGF5TmFtZSA9IFwidW5zdGFibGVfSGlzdG9yeVJvdXRlclwiO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuY29uc3QgTGluayA9IC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtXaXRoUmVmKF9yZWY0LCByZWYpIHtcbiAgbGV0IHtcbiAgICBvbkNsaWNrLFxuICAgIHJlbG9hZERvY3VtZW50LFxuICAgIHJlcGxhY2UgPSBmYWxzZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXQsXG4gICAgdG9cbiAgfSA9IF9yZWY0LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY0LCBfZXhjbHVkZWQpO1xuXG4gIGxldCBocmVmID0gdXNlSHJlZih0byk7XG4gIGxldCBpbnRlcm5hbE9uQ2xpY2sgPSB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCB7XG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXRcbiAgfSk7XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG5cbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgIXJlbG9hZERvY3VtZW50KSB7XG4gICAgICBpbnRlcm5hbE9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgLyojX19QVVJFX18qL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnRcbiAgICBjcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgICAgcmVmOiByZWYsXG4gICAgICB0YXJnZXQ6IHRhcmdldFxuICAgIH0pKVxuICApO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xufVxuXG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5jb25zdCBOYXZMaW5rID0gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoX3JlZjUsIHJlZikge1xuICBsZXQge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50UHJvcCA9IFwicGFnZVwiLFxuICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgIGVuZCA9IGZhbHNlLFxuICAgIHN0eWxlOiBzdHlsZVByb3AsXG4gICAgdG8sXG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY1LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY1LCBfZXhjbHVkZWQyKTtcblxuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0byk7XG4gIGxldCBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCB0b1BhdGhuYW1lID0gcGF0aC5wYXRobmFtZTtcblxuICBpZiAoIWNhc2VTZW5zaXRpdmUpIHtcbiAgICBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBsZXQgaXNBY3RpdmUgPSBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIGxvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCI7XG4gIGxldCBhcmlhQ3VycmVudCA9IGlzQWN0aXZlID8gYXJpYUN1cnJlbnRQcm9wIDogdW5kZWZpbmVkO1xuICBsZXQgY2xhc3NOYW1lO1xuXG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lUHJvcCh7XG4gICAgICBpc0FjdGl2ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBjbGFzc05hbWUgcHJvcCBpcyBub3QgYSBmdW5jdGlvbiwgd2UgdXNlIGEgZGVmYXVsdCBgYWN0aXZlYFxuICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAvLyB2YWx1ZSBmb3IgYGFjdGl2ZUNsYXNzTmFtZWAsIGJ1dCB3ZSBhcmUgcmVtb3ZpbmcgdGhhdCBBUEkgYW5kIGNhbiBzdGlsbFxuICAgIC8vIHVzZSB0aGUgb2xkIGRlZmF1bHQgYmVoYXZpb3IgZm9yIGEgY2xlYW5lciB1cGdyYWRlIHBhdGggYW5kIGtlZXAgdGhlXG4gICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICBjbGFzc05hbWUgPSBbY2xhc3NOYW1lUHJvcCwgaXNBY3RpdmUgPyBcImFjdGl2ZVwiIDogbnVsbF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICB9XG5cbiAgbGV0IHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHtcbiAgICBpc0FjdGl2ZVxuICB9KSA6IHN0eWxlUHJvcDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHRvOiB0b1xuICB9KSwgdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbih7XG4gICAgaXNBY3RpdmVcbiAgfSkgOiBjaGlsZHJlbik7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBIT09LU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBjbGljayBiZWhhdmlvciBmb3Igcm91dGVyIGA8TGluaz5gIGNvbXBvbmVudHMuIFRoaXMgaXMgdXNlZnVsIGlmXG4gKiB5b3UgbmVlZCB0byBjcmVhdGUgY3VzdG9tIGA8TGluaz5gIGNvbXBvbmVudHMgd2l0aCB0aGUgc2FtZSBjbGljayBiZWhhdmlvciB3ZVxuICogdXNlIGluIG91ciBleHBvcnRlZCBgPExpbms+YC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdGFyZ2V0LFxuICAgIHJlcGxhY2U6IHJlcGxhY2VQcm9wLFxuICAgIHN0YXRlXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8pO1xuICByZXR1cm4gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBMZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIElnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZS5cblxuICAgICAgbGV0IHJlcGxhY2UgPSAhIXJlcGxhY2VQcm9wIHx8IGNyZWF0ZVBhdGgobG9jYXRpb24pID09PSBjcmVhdGVQYXRoKHBhdGgpO1xuICAgICAgbmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZSxcbiAgICAgICAgc3RhdGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLCBuYXZpZ2F0ZSwgcGF0aCwgcmVwbGFjZVByb3AsIHN0YXRlLCB0YXJnZXQsIHRvXSk7XG59XG4vKipcbiAqIEEgY29udmVuaWVudCB3cmFwcGVyIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIHNlYXJjaCBwYXJhbWV0ZXJzIHZpYSB0aGVcbiAqIFVSTFNlYXJjaFBhcmFtcyBpbnRlcmZhY2UuXG4gKi9cblxuZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSB1c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uLnNlYXJjaCk7XG5cbiAgICBmb3IgKGxldCBrZXkgb2YgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50LmtleXMoKSkge1xuICAgICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50LmdldEFsbChrZXkpLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZWFyY2hQYXJhbXM7XG4gIH0sIFtsb2NhdGlvbi5zZWFyY2hdKTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IHNldFNlYXJjaFBhcmFtcyA9IHVzZUNhbGxiYWNrKChuZXh0SW5pdCwgbmF2aWdhdGVPcHRpb25zKSA9PiB7XG4gICAgbmF2aWdhdGUoXCI/XCIgKyBjcmVhdGVTZWFyY2hQYXJhbXMobmV4dEluaXQpLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGVdKTtcbiAgcmV0dXJuIFtzZWFyY2hQYXJhbXMsIHNldFNlYXJjaFBhcmFtc107XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFyYW1zKGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSBcIlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShpbml0KSB8fCBpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID8gaW5pdCA6IE9iamVjdC5rZXlzKGluaXQpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFtrZXldO1xuICAgIHJldHVybiBtZW1vLmNvbmNhdChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dKTtcbiAgfSwgW10pKTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluaywgY3JlYXRlU2VhcmNoUGFyYW1zLCBIaXN0b3J5Um91dGVyIGFzIHVuc3RhYmxlX0hpc3RvcnlSb3V0ZXIsIHVzZUxpbmtDbGlja0hhbmRsZXIsIHVzZVNlYXJjaFBhcmFtcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkQ2FyZCA9IHN0eWxlZCgoeyBjaGlsZHJlbiwgLi4ucmVzdCB9KSA9PiAoXG4gIDxkaXYgey4uLnJlc3R9PntjaGlsZHJlbn08L2Rpdj5cbikpYFxuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICBib3gtc2hhZG93OiAwIDhweCAzMnB4IDAgcmdiYSgzMSwgMzgsIDEzNSwgMC4zNyk7XG4gIG1pbi13aWR0aDogZml0LWNvbnRlbnQ7XG4gIHBhZGRpbmc6IDI0cHg7XG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XG4gIG1heC1oZWlnaHQ6IDcwdmg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG92ZXJmbG93OiBhdXRvO1xuICBtYXJnaW4tYm90dG9tOiAyNHB4O1xuXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICB3aWR0aDogODAlO1xuICB9XG5cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCkge1xuICAgIHdpZHRoOiA0MHZ3O1xuICAgIG1heC13aWR0aDogNTAwcHg7XG4gIH1cbmA7XG4iLCJpbXBvcnQgUmVhY3QsIHsgRkMsIFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU3R5bGVkQ2FyZCB9IGZyb20gXCIuL0NhcmQuc3R5bGVkXCI7XG5cbmludGVyZmFjZSBJQ2FyZFByb3BzIHtcbiAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbn1cblxuZXhwb3J0IGNvbnN0IENhcmQgPSAocHJvcHM6IElDYXJkUHJvcHMpID0+IHtcbiAgcmV0dXJuIDxTdHlsZWRDYXJkPntwcm9wcy5jaGlsZHJlbn08L1N0eWxlZENhcmQ+O1xufTtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICB3aWR0aDogMTAwJTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBvdXRsaW5lOiAwO1xuICBib3JkZXI6IDA7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgY29sb3I6ICNmZmY7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgaGVpZ2h0OiAzMHB4O1xuICBwYWRkaW5nOiAwcHggMTVweDtcbiAgdGV4dC1zaGFkb3c6IHJnYigwIDAgMCAvIDI1JSkgMHB4IDNweCA4cHg7XG4gIHRyYW5zaXRpb246IGFsbCAwLjVzIGVhc2UgMHM7XG4gIDpob3ZlciB7XG4gICAgYm94LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjQpIDBweCAzcHggOHB4O1xuICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UgMHM7XG4gIH1cbiAgYmFja2dyb3VuZDogIzdhNTc5ZjtcbiAgYm9yZGVyLXJhZGl1czogMTJweDtcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbiAgOmRpc2FibGVkIHtcbiAgICBvcGFjaXR5OiAwLjU7XG4gIH1cbmA7XG4iLCJpbXBvcnQgUmVhY3QsIHsgRkMgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFN0eWxlZEJ1dHRvbiB9IGZyb20gXCIuL0J1dHRvbi5zdHlsZWRcIjtcblxuaW50ZXJmYWNlIEJ1dHRvblByb3BzIGV4dGVuZHMgUmVhY3QuQnV0dG9uSFRNTEF0dHJpYnV0ZXM8SFRNTEJ1dHRvbkVsZW1lbnQ+IHtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbmNvbnN0IEJ1dHRvbjogRkM8QnV0dG9uUHJvcHM+ID0gKHsgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4ge1xuICByZXR1cm4gPFN0eWxlZEJ1dHRvbiB7Li4ucmVzdH0+e2NoaWxkcmVufTwvU3R5bGVkQnV0dG9uPjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRWYWxpZGF0aW9uRXJyb3IgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogI2E0MTUzMztcbiAgZm9udC1zaXplOiAwLjc1ZW07XG4gIHBhZGRpbmctdG9wOiAwLjI1ZW07XG5gO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgU3R5bGVkVmFsaWRhdGlvbkVycm9yIH0gZnJvbSBcIi4vVmFsaWRhdGlvbkVycm9yLnN0eWxlZFwiO1xuXG5pbnRlcmZhY2UgVmFsaWRhdGlvbkVycm9yUHJvcHMge1xuICB0ZXh0OiBzdHJpbmc7XG59XG5cbmNvbnN0IFZhbGlkYXRpb25FcnJvciA9IChwcm9wczogVmFsaWRhdGlvbkVycm9yUHJvcHMpID0+IHtcbiAgY29uc3QgeyB0ZXh0IH0gPSBwcm9wcztcbiAgcmV0dXJuIDxTdHlsZWRWYWxpZGF0aW9uRXJyb3I+e3RleHR9PC9TdHlsZWRWYWxpZGF0aW9uRXJyb3I+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVmFsaWRhdGlvbkVycm9yO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZElucHV0ID0gc3R5bGVkLmlucHV0PHsgJGhhc0Vycm9yPzogYm9vbGVhbiB9PmBcbiAgY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7XG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICR7KHsgJGhhc0Vycm9yIH0pID0+XG4gICAgJGhhc0Vycm9yID8gXCIjY2MwMDAwICFpbXBvcnRhbnRcIiA6IFwicmdiYSgwLCAwLCAwLCAwLjQyKVwifTtcbiAgZm9udC1zaXplOiAxcmVtO1xuICBmb250LXdlaWdodDogNDAwO1xuICBsZXR0ZXItc3BhY2luZzogMC4wMWVtO1xuICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQ7XG4gIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0O1xuICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDZweCAxNnB4IDZweDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO1xuICBib3JkZXI6IG5vbmU7XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZDtcbiAgYm9yZGVyLXJhZGl1czogNHB4IDRweCAwIDA7XG4gIDpob3ZlciB7XG4gICAgYm9yZGVyLWJvdHRvbS1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjg3KTtcbiAgICBiYWNrZ3JvdW5kOiAjZWNlY2VjO1xuICB9XG4gIDpmb2N1cyB7XG4gICAgYm9yZGVyLWNvbG9yOiAjN2E1NzlmO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gIH1cbmA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTdHlsZWRJbnB1dCB9IGZyb20gXCIuL0lucHV0LnN0eWxlZFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElucHV0UHJvcHMge1xuICB0eXBlOiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmcgfCBudW1iZXI7XG4gIG5hbWU6IHN0cmluZztcbiAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgJGhhc0Vycm9yPzogYm9vbGVhbjtcbiAgb25DaGFuZ2U6IChlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gdm9pZDtcbn1cblxuY29uc3QgSW5wdXQgPSAocHJvcHM6IElucHV0UHJvcHMpID0+IHtcbiAgcmV0dXJuIDxTdHlsZWRJbnB1dCB7Li4ucHJvcHN9IC8+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSW5wdXQ7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkRm9ybUlucHV0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luOiAxOHB4IDBweDtcbiAgaGVpZ2h0OiA0NXB4O1xuYDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBWYWxpZGF0aW9uRXJyb3IgZnJvbSBcIi4uL0Vycm9yL1ZhbGlkYXRpb25FcnJvclwiO1xuaW1wb3J0IElucHV0LCB7IElucHV0UHJvcHMgfSBmcm9tIFwiLi4vSW5wdXQvSW5wdXRcIjtcbmltcG9ydCB7IFN0eWxlZEZvcm1JbnB1dENvbnRhaW5lciB9IGZyb20gXCIuL0Zvcm1JbnB1dC5zdHlsZWRcIjtcblxuaW50ZXJmYWNlIEZvcm1JbnB1dFByb3BzIGV4dGVuZHMgSW5wdXRQcm9wcyB7XG4gIGVycm9yTWVzc2FnZTogc3RyaW5nO1xufVxuXG5jb25zdCBGb3JtSW5wdXQgPSAocHJvcHM6IEZvcm1JbnB1dFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgZXJyb3JNZXNzYWdlLCAuLi5pbnB1dFByb3BzIH0gPSBwcm9wcztcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkRm9ybUlucHV0Q29udGFpbmVyPlxuICAgICAgPElucHV0IHsuLi5pbnB1dFByb3BzfSAkaGFzRXJyb3I9eyEhZXJyb3JNZXNzYWdlfSAvPlxuICAgICAge2Vycm9yTWVzc2FnZSAmJiA8VmFsaWRhdGlvbkVycm9yIHRleHQ9e2Vycm9yTWVzc2FnZX0gLz59XG4gICAgPC9TdHlsZWRGb3JtSW5wdXRDb250YWluZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBGb3JtSW5wdXQ7XG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IEF1dGhDb250ZXh0ID0gY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xuXG5leHBvcnQgZGVmYXVsdCBBdXRoQ29udGV4dDtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRMb2dpbkVycm9yID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICNjYzAwMDA7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGZvbnQtc2l6ZTogMTRweDtcbmA7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uL0NvbW1vbi9CdXR0b24vQnV0dG9uXCI7XG5pbXBvcnQgRm9ybUlucHV0IGZyb20gXCIuLi9Db21tb24vRm9ybS9Gb3JtSW5wdXRcIjtcbmltcG9ydCBBdXRoQ29udGV4dCBmcm9tIFwiLi4vLi4vc3RvcmUvYXV0aC9BdXRoQ29udGV4dFwiO1xuaW1wb3J0IHsgU3R5bGVkTG9naW5FcnJvciB9IGZyb20gXCIuL0xvZ2luRm9ybS5zdHlsZWRcIjtcblxuY29uc3QgY2hlY2tJZlZhbHVlRW1wdHkgPSAodmFsdWU6IHN0cmluZykgPT4ge1xuICByZXR1cm4gIXZhbHVlIHx8IHZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDA7XG59O1xuXG5jb25zdCBMb2dpbkZvcm0gPSAoKSA9PiB7XG4gIGNvbnN0IGF1dGhDdHggPSB1c2VDb250ZXh0KEF1dGhDb250ZXh0KTtcbiAgY29uc3QgW3VzZXJuYW1lLCBzZXRVc2VybmFtZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KFwiXCIpO1xuICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IHVzZVN0YXRlPHN0cmluZz4oXCJcIik7XG4gIGNvbnN0IFt1c2VybmFtZUVycm9yLCBzZXRVc2VybmFtZUVycm9yXSA9IHVzZVN0YXRlPHN0cmluZz4oXCJcIik7XG4gIGNvbnN0IFtwYXNzd29yZEVycm9yLCBzZXRQYXNzd29yZEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZz4oXCJcIik7XG4gIGNvbnN0IFtpc0Zvcm1WYWxpZCwgc2V0SXNGb3JtVmFsaWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IHZhbGlkYXRlRm9ybSA9ICgpID0+IHtcbiAgICBjb25zdCBpc1VzZXJuYW1lRW1wdHkgPSBjaGVja0lmVmFsdWVFbXB0eSh1c2VybmFtZSk7XG4gICAgY29uc3QgaXNQYXNzd29yZEVtcHR5ID0gY2hlY2tJZlZhbHVlRW1wdHkocGFzc3dvcmQpO1xuXG4gICAgaWYgKGlzVXNlcm5hbWVFbXB0eSB8fCBpc1Bhc3N3b3JkRW1wdHkpIHtcbiAgICAgIHNldElzRm9ybVZhbGlkKGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0SXNGb3JtVmFsaWQodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHNob3dFcnJvcnMgPSAoKSA9PiB7XG4gICAgaWYgKGNoZWNrSWZWYWx1ZUVtcHR5KHVzZXJuYW1lKSkge1xuICAgICAgc2V0VXNlcm5hbWVFcnJvcihcIlVzZXJuYW1lIGlzIHJlcXVpcmVkXCIpO1xuICAgIH1cblxuICAgIGlmIChjaGVja0lmVmFsdWVFbXB0eShwYXNzd29yZCkpIHtcbiAgICAgIHNldFBhc3N3b3JkRXJyb3IoXCJQYXNzd29yZCBpcyByZXF1aXJlZFwiKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb25TdWJtaXRIYW5kbGVyID0gKGU6IFJlYWN0LkZvcm1FdmVudCkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoaXNGb3JtVmFsaWQpIHtcbiAgICAgIGF1dGhDdHgubG9naW4odXNlcm5hbWUudHJpbSgpLCBwYXNzd29yZC50cmltKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG93RXJyb3JzKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IG9uSW5wdXRDaGFuZ2VIYW5kbGVyID0gKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgY29uc3QgaW5wdXRzOiB7IFtrZXk6IHN0cmluZ106ICgpID0+IHZvaWQgfSA9IHtcbiAgICAgIHVzZXJuYW1lOiAoKSA9PiB7XG4gICAgICAgIHNldFVzZXJuYW1lRXJyb3IoXCJcIik7XG4gICAgICAgIHNldFVzZXJuYW1lKGUudGFyZ2V0LnZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBwYXNzd29yZDogKCkgPT4ge1xuICAgICAgICBzZXRQYXNzd29yZEVycm9yKFwiXCIpO1xuICAgICAgICBzZXRQYXNzd29yZChlLnRhcmdldC52YWx1ZSk7XG4gICAgICB9LFxuICAgIH07XG4gICAgaW5wdXRzW2UudGFyZ2V0Lm5hbWVdKCk7XG4gICAgdmFsaWRhdGVGb3JtKCk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAge2F1dGhDdHgubG9naW5FcnJvciAmJiAoXG4gICAgICAgIDxTdHlsZWRMb2dpbkVycm9yPkludmFsaWQgdXNlcm5hbWUgb3IgcGFzc3dvcmQ8L1N0eWxlZExvZ2luRXJyb3I+XG4gICAgICApfVxuICAgICAgPGZvcm0gb25TdWJtaXQ9e29uU3VibWl0SGFuZGxlcn0gc3R5bGU9e3sgd2lkdGg6IFwiOTAlXCIgfX0+XG4gICAgICAgIDxGb3JtSW5wdXRcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgZXJyb3JNZXNzYWdlPXt1c2VybmFtZUVycm9yfVxuICAgICAgICAgIHZhbHVlPXt1c2VybmFtZX1cbiAgICAgICAgICBuYW1lPXtcInVzZXJuYW1lXCJ9XG4gICAgICAgICAgcGxhY2Vob2xkZXI9e1wiVXNlcm5hbWVcIn1cbiAgICAgICAgICBvbkNoYW5nZT17b25JbnB1dENoYW5nZUhhbmRsZXJ9XG4gICAgICAgIC8+XG4gICAgICAgIDxGb3JtSW5wdXRcbiAgICAgICAgICB0eXBlPXtcInBhc3N3b3JkXCJ9XG4gICAgICAgICAgZXJyb3JNZXNzYWdlPXtwYXNzd29yZEVycm9yfVxuICAgICAgICAgIHZhbHVlPXtwYXNzd29yZH1cbiAgICAgICAgICBuYW1lPXtcInBhc3N3b3JkXCJ9XG4gICAgICAgICAgcGxhY2Vob2xkZXI9e1wiUGFzc3dvcmRcIn1cbiAgICAgICAgICBvbkNoYW5nZT17b25JbnB1dENoYW5nZUhhbmRsZXJ9XG4gICAgICAgIC8+XG4gICAgICAgIDxCdXR0b24gdGl0bGU9XCJMb2dpblwiIHR5cGU9XCJzdWJtaXRcIiBkaXNhYmxlZD17YXV0aEN0eC5sb2dpbkluUHJvZ3Jlc3N9PlxuICAgICAgICAgIHthdXRoQ3R4LmxvZ2luSW5Qcm9ncmVzcyA/IFwiTG9nZ2luZyBpbi4uLi5cIiA6IFwiTG9naW5cIn1cbiAgICAgICAgPC9CdXR0b24+XG4gICAgICA8L2Zvcm0+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dpbkZvcm07XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkQ2FyZENvbnRlbnRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRDYXJkQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGhlaWdodDogMTAwJTtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRMb2dpbkxvZ291dEJhY2tncm91bmQgPSBzdHlsZWQuZGl2YFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoLTQ1ZGVnLCAjZWU3NzUyLCAjZTczYzdlLCAjMjNhNmQ1LCAjMjNkNWFiKTtcbiAgYmFja2dyb3VuZC1zaXplOiA0MDAlIDQwMCU7XG4gIGFuaW1hdGlvbjogZ3JhZGllbnQgMTVzIGVhc2UgaW5maW5pdGU7XG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkSGVhZGVyID0gc3R5bGVkLmgxYFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBmb250LWZhbWlseTogXCJDb3VyaWVyXCI7XG4gIGxldHRlci1zcGFjaW5nOiAzcHg7XG4gIGZvbnQtc2l6ZTogM3JlbTtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbiAgY29sb3I6ICMwMDA7XG5gO1xuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcbmltcG9ydCB7IFN0eWxlZEhlYWRlciB9IGZyb20gXCIuLi9Db21tb25QYWdlLnN0eWxlc1wiO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkTG9naW5IZWFkZXIgPSBzdHlsZWQoU3R5bGVkSGVhZGVyKWBcbiAgYm9yZGVyLXJpZ2h0OiA0cHggc29saWQgIzAwMDsgLypUaGlzIHdpbGwgYmUgdGhlIGJsaW5raW5nIGN1cnNvciovXG4gIGFuaW1hdGlvbjogY3Vyc29yIDFzIGluZmluaXRlIHN0ZXAtZW5kO1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG5cbiAgQGtleWZyYW1lcyBjdXJzb3Ige1xuICAgIDAlLFxuICAgIDEwMCUge1xuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICB9XG4gICAgNTAlIHtcbiAgICAgIGJvcmRlci1jb2xvcjogIzAwMDtcbiAgICB9XG4gIH1cbmA7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTmF2aWdhdGUgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgQ2FyZCB9IGZyb20gXCIuLi8uLi9Db21wb25lbnRzL0NvbW1vbi9DYXJkL0NhcmRcIjtcbmltcG9ydCBMb2dpbkZvcm0gZnJvbSBcIi4uLy4uL0NvbXBvbmVudHMvTG9naW5Gb3JtL0xvZ2luRm9ybVwiO1xuaW1wb3J0IEF1dGhDb250ZXh0IGZyb20gXCIuLi8uLi9zdG9yZS9hdXRoL0F1dGhDb250ZXh0XCI7XG5pbXBvcnQge1xuICBTdHlsZWRDYXJkQ29udGFpbmVyLFxuICBTdHlsZWRDYXJkQ29udGVudENvbnRhaW5lcixcbiAgU3R5bGVkTG9naW5Mb2dvdXRCYWNrZ3JvdW5kLFxufSBmcm9tIFwiLi4vQ29tbW9uUGFnZS5zdHlsZXNcIjtcbmltcG9ydCB7IFN0eWxlZExvZ2luSGVhZGVyIH0gZnJvbSBcIi4vTG9naW5QYWdlLnN0eWxlZFwiO1xuXG5jb25zdCBMb2dpblBhZ2UgPSAoKSA9PiB7XG4gIGNvbnN0IGF1dGhDdHggPSB1c2VDb250ZXh0KEF1dGhDb250ZXh0KTtcblxuICBpZiAoYXV0aEN0eC5pc0xvZ2dlZEluKSB7XG4gICAgcmV0dXJuIDxOYXZpZ2F0ZSB0bz1cIi9zZXJ2ZXItbGlzdFwiIC8+O1xuICB9XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZExvZ2luTG9nb3V0QmFja2dyb3VuZD5cbiAgICAgIDxTdHlsZWRDYXJkQ29udGFpbmVyPlxuICAgICAgICA8Q2FyZD5cbiAgICAgICAgICA8U3R5bGVkQ2FyZENvbnRlbnRDb250YWluZXI+XG4gICAgICAgICAgICA8U3R5bGVkTG9naW5IZWFkZXI+TG9naW48L1N0eWxlZExvZ2luSGVhZGVyPlxuICAgICAgICAgICAgPExvZ2luRm9ybSAvPlxuICAgICAgICAgIDwvU3R5bGVkQ2FyZENvbnRlbnRDb250YWluZXI+XG4gICAgICAgIDwvQ2FyZD5cbiAgICAgIDwvU3R5bGVkQ2FyZENvbnRhaW5lcj5cbiAgICA8L1N0eWxlZExvZ2luTG9nb3V0QmFja2dyb3VuZD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvZ2luUGFnZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uL0NvbXBvbmVudHMvQ29tbW9uL0J1dHRvbi9CdXR0b25cIjtcbmltcG9ydCB7IENhcmQgfSBmcm9tIFwiLi4vLi4vQ29tcG9uZW50cy9Db21tb24vQ2FyZC9DYXJkXCI7XG5pbXBvcnQge1xuICBTdHlsZWRDYXJkQ29udGFpbmVyLFxuICBTdHlsZWRDYXJkQ29udGVudENvbnRhaW5lcixcbiAgU3R5bGVkSGVhZGVyLFxuICBTdHlsZWRMb2dpbkxvZ291dEJhY2tncm91bmQsXG59IGZyb20gXCIuLi9Db21tb25QYWdlLnN0eWxlc1wiO1xuXG5jb25zdCBMb2dvdXQgPSAoKSA9PiB7XG4gIGNvbnN0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkTG9naW5Mb2dvdXRCYWNrZ3JvdW5kPlxuICAgICAgPFN0eWxlZENhcmRDb250YWluZXI+XG4gICAgICAgIDxDYXJkPlxuICAgICAgICAgIDxTdHlsZWRDYXJkQ29udGVudENvbnRhaW5lcj5cbiAgICAgICAgICAgIDxTdHlsZWRIZWFkZXI+WW91J3ZlIGJlZW4gbG9nZ2VkIG91dDwvU3R5bGVkSGVhZGVyPlxuICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBuYXZpZ2F0ZShcIi9sb2dpblwiKX0+R28gdG8gbG9naW48L0J1dHRvbj5cbiAgICAgICAgICA8L1N0eWxlZENhcmRDb250ZW50Q29udGFpbmVyPlxuICAgICAgICA8L0NhcmQ+XG4gICAgICA8L1N0eWxlZENhcmRDb250YWluZXI+XG4gICAgPC9TdHlsZWRMb2dpbkxvZ291dEJhY2tncm91bmQ+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dvdXQ7XG4iLCJpbXBvcnQgeyBOYXZpZ2F0ZSwgT3V0bGV0LCB1c2VMb2NhdGlvbiB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEF1dGhDb250ZXh0IGZyb20gXCIuLi9zdG9yZS9hdXRoL0F1dGhDb250ZXh0XCI7XG5cbmNvbnN0IFByaXZhdGVSb3V0ZSA9ICgpID0+IHtcbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBjb25zdCBhdXRoQ3R4ID0gdXNlQ29udGV4dChBdXRoQ29udGV4dCk7XG4gIGNvbnN0IGlzTG9nZ2VkSW4gPSBhdXRoQ3R4LmlzTG9nZ2VkSW47XG5cbiAgaWYgKGlzTG9nZ2VkSW4pIHtcbiAgICByZXR1cm4gPE91dGxldCAvPjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gPE5hdmlnYXRlIHRvPXtcIi9sb2dpblwifSBzdGF0ZT17eyBmcm9tOiBsb2NhdGlvbiB9fSByZXBsYWNlIC8+O1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcml2YXRlUm91dGU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IE1lbnVJY29uID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIGRhdGEtdGVzdGlkPVwibWVudS1pY29uXCJcbiAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgICAgaGVpZ2h0PVwiMjRcIlxuICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICB3aWR0aD1cIjI0XCJcbiAgICA+XG4gICAgICA8cGF0aCBkPVwiTTAgMGgyNHYyNEgwelwiIGZpbGw9XCJub25lXCIgLz5cbiAgICAgIDxwYXRoIGQ9XCJNMyAxOGgxOHYtMkgzdjJ6bTAtNWgxOHYtMkgzdjJ6bTAtN3YyaDE4VjZIM3pcIiAvPlxuICAgIDwvc3ZnPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTWVudUljb247XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkUG9wb3ZlciA9IHN0eWxlZC5kaXZgXG4gIC5wb3BvdmVyX193cmFwcGVyIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIHBhZGRpbmc6IDEuNXJlbTtcbiAgfVxuXG4gIC5wb3BvdmVyX190aXRsZTpob3ZlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIC5wb3BvdmVyX190aXRsZS0tdGV4dCB7XG4gICAgICBmb250LXdlaWdodDogOTAwO1xuICAgIH1cbiAgfVxuXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAucG9wb3Zlcl9fdGl0bGUge1xuICAgICAgJi0tdGV4dCB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjlweCkge1xuICAgIC5wb3BvdmVyX190aXRsZSB7XG4gICAgICAmLS1pY29uIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAucG9wb3Zlcl9fY29udGVudCB7XG4gICAgei1pbmRleDogMTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IDEycHg7XG4gICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xuICAgIHBhZGRpbmc6IDEuNXJlbTtcbiAgICBib3gtc2hhZG93OiAwIDJweCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMjYpO1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgICAgIHdpZHRoOiA0MHZ3O1xuICAgIH1cblxuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpIHtcbiAgICAgIHdpZHRoOiBhdXRvO1xuICAgIH1cbiAgfVxuYDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHVzZU91dHNpZGVDbGljayBmcm9tIFwiLi4vLi4vLi4vaG9va3MvdXNlT3V0c2lkZUNsaWNrXCI7XG5pbXBvcnQgeyBTdHlsZWRQb3BvdmVyIH0gZnJvbSBcIi4vUG9wb3Zlck1lbnUuc3R5bGVkXCI7XG5cbmludGVyZmFjZSBJUG9wb3Zlck1lbnVQcm9wcyB7XG4gIG1lbnVCdXR0b25UZXh0OiBzdHJpbmc7XG4gIG1lbnVCdXR0b25JY29uOiBSZWFjdC5SZWFjdE5vZGU7XG4gIHBvcG92ZXJCb2R5OiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbmNvbnN0IFBvcG92ZXJNZW51ID0gKHByb3BzOiBJUG9wb3Zlck1lbnVQcm9wcykgPT4ge1xuICBjb25zdCB7IG1lbnVCdXR0b25UZXh0LCBtZW51QnV0dG9uSWNvbiwgcG9wb3ZlckJvZHkgfSA9IHByb3BzO1xuICBjb25zdCBbaXNNZW51T3Blbiwgc2V0SXNNZW51T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3Qgb3Blbk1lbnVIYW5kbGVyID0gKCkgPT4ge1xuICAgIHNldElzTWVudU9wZW4odHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgY2xvc2VNZW51SGFuZGxlciA9ICgpID0+IHtcbiAgICBzZXRJc01lbnVPcGVuKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCByZWYgPSB1c2VPdXRzaWRlQ2xpY2soY2xvc2VNZW51SGFuZGxlcik7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkUG9wb3Zlcj5cbiAgICAgIDxkaXYgcmVmPXtyZWZ9IGNsYXNzTmFtZT1cInBvcG92ZXJfX3dyYXBwZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3BvdmVyX190aXRsZVwiIG9uQ2xpY2s9e29wZW5NZW51SGFuZGxlcn0+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicG9wb3Zlcl9fdGl0bGUtLXRleHRcIj57bWVudUJ1dHRvblRleHR9PC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInBvcG92ZXJfX3RpdGxlLS1pY29uXCI+e21lbnVCdXR0b25JY29ufTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtpc01lbnVPcGVuICYmIDxkaXYgY2xhc3NOYW1lPVwicG9wb3Zlcl9fY29udGVudFwiPntwb3BvdmVyQm9keX08L2Rpdj59XG4gICAgICA8L2Rpdj5cbiAgICA8L1N0eWxlZFBvcG92ZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQb3BvdmVyTWVudTtcbiIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IHVzZU91dHNpZGVDbGljayA9IChjYWxsYmFjazogKCkgPT4gdm9pZCkgPT4ge1xuICBjb25zdCByZWYgPSB1c2VSZWY8YW55PigpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIGlmIChyZWYuY3VycmVudCAmJiAhcmVmLmN1cnJlbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlQ2xpY2ssIHRydWUpO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVDbGljaywgdHJ1ZSk7XG4gICAgfTtcbiAgfSwgW3JlZl0pO1xuXG4gIHJldHVybiByZWY7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1c2VPdXRzaWRlQ2xpY2s7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkUGFnZUhlYWRlciA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZm9udC1mYW1pbHk6IFwiQ291cmllclwiO1xuICA+ICo6Zmlyc3QtY2hpbGQge1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgZm9udC1zaXplOiAyNHB4O1xuICAgIGZsZXg6IDE7XG4gICAgcGFkZGluZy1sZWZ0OiAyNHB4O1xuICB9XG5gO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBBdXRoQ29udGV4dCBmcm9tIFwiLi4vLi4vLi4vc3RvcmUvYXV0aC9BdXRoQ29udGV4dFwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vQnV0dG9uL0J1dHRvblwiO1xuaW1wb3J0IE1lbnVJY29uIGZyb20gXCIuLi9JY29ucy9NZW51SWNvblwiO1xuaW1wb3J0IFBvcG92ZXJNZW51IGZyb20gXCIuLi9Qb3BvdmVyTWVudS9Qb3BvdmVyTWVudVwiO1xuaW1wb3J0IHsgU3R5bGVkUGFnZUhlYWRlciB9IGZyb20gXCIuL1BhZ2VIZWFkZXIuc3R5bGVkXCI7XG5cbmNvbnN0IFBhZ2VIZWFkZXIgPSAoKSA9PiB7XG4gIGNvbnN0IHsgbG9nb3V0IH0gPSB1c2VDb250ZXh0KEF1dGhDb250ZXh0KTtcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuXG4gIGNvbnN0IGxvZ291dEFuZFJlZGlyZWN0ID0gKCkgPT4ge1xuICAgIGxvZ291dCgpO1xuICAgIHJldHVybiBuYXZpZ2F0ZShcIi9sb2dvdXRcIik7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkUGFnZUhlYWRlcj5cbiAgICAgIDxkaXY+U2VydmVyIExpc3Q8L2Rpdj5cbiAgICAgIDxQb3BvdmVyTWVudVxuICAgICAgICBtZW51QnV0dG9uVGV4dD17XCJNZW51XCJ9XG4gICAgICAgIG1lbnVCdXR0b25JY29uPXs8TWVudUljb24gLz59XG4gICAgICAgIHBvcG92ZXJCb2R5PXs8QnV0dG9uIG9uQ2xpY2s9e2xvZ291dEFuZFJlZGlyZWN0fT5Mb2dvdXQ8L0J1dHRvbj59XG4gICAgICAvPlxuICAgIDwvU3R5bGVkUGFnZUhlYWRlcj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBhZ2VIZWFkZXI7XG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkU3Bpbm5lciA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDQ4cHg7XG4gIC5zcGlubmVyIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgd2lkdGg6IDgwcHg7XG4gICAgaGVpZ2h0OiA4MHB4O1xuICB9XG4gIC5zcGlubmVyOmFmdGVyIHtcbiAgICBjb250ZW50OiBcIiBcIjtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogNjRweDtcbiAgICBoZWlnaHQ6IDY0cHg7XG4gICAgbWFyZ2luOiA4cHg7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGJvcmRlcjogNnB4IHNvbGlkICNmZmY7XG4gICAgYm9yZGVyLWNvbG9yOiAjZmZmIHRyYW5zcGFyZW50ICNmZmYgdHJhbnNwYXJlbnQ7XG4gICAgYW5pbWF0aW9uOiBzcGlubmVyIDEuMnMgbGluZWFyIGluZmluaXRlO1xuICB9XG4gIEBrZXlmcmFtZXMgc3Bpbm5lciB7XG4gICAgMCUge1xuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XG4gICAgfVxuICAgIDEwMCUge1xuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcbiAgICB9XG4gIH1cbmA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBTdHlsZWRTcGlubmVyIH0gZnJvbSBcIi4vU3Bpbm5lci5zdHlsZWRcIjtcblxuY29uc3QgU3Bpbm5lciA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkU3Bpbm5lcj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Bpbm5lclwiIC8+XG4gICAgPC9TdHlsZWRTcGlubmVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU3Bpbm5lcjtcbiIsImZ1bmN0aW9uIG4obil7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShyPjE/ci0xOjApLGU9MTtlPHI7ZSsrKXRbZS0xXT1hcmd1bWVudHNbZV07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGk9WVtuXSxvPWk/XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KG51bGwsdCk6aTpcInVua25vd24gZXJyb3IgbnI6IFwiK247dGhyb3cgRXJyb3IoXCJbSW1tZXJdIFwiK28pfXRocm93IEVycm9yKFwiW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogXCIrbisodC5sZW5ndGg/XCIgXCIrdC5tYXAoKGZ1bmN0aW9uKG4pe3JldHVyblwiJ1wiK24rXCInXCJ9KSkuam9pbihcIixcIik6XCJcIikrXCIuIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vYml0Lmx5LzNjWEVLV2ZcIil9ZnVuY3Rpb24gcihuKXtyZXR1cm4hIW4mJiEhbltRXX1mdW5jdGlvbiB0KG4pe3JldHVybiEhbiYmKGZ1bmN0aW9uKG4pe2lmKCFufHxcIm9iamVjdFwiIT10eXBlb2YgbilyZXR1cm4hMTt2YXIgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7aWYobnVsbD09PXIpcmV0dXJuITA7dmFyIHQ9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocixcImNvbnN0cnVjdG9yXCIpJiZyLmNvbnN0cnVjdG9yO3JldHVybiB0PT09T2JqZWN0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZGdW5jdGlvbi50b1N0cmluZy5jYWxsKHQpPT09Wn0obil8fEFycmF5LmlzQXJyYXkobil8fCEhbltMXXx8ISFuLmNvbnN0cnVjdG9yW0xdfHxzKG4pfHx2KG4pKX1mdW5jdGlvbiBlKHQpe3JldHVybiByKHQpfHxuKDIzLHQpLHRbUV0udH1mdW5jdGlvbiBpKG4scix0KXt2b2lkIDA9PT10JiYodD0hMSksMD09PW8obik/KHQ/T2JqZWN0LmtleXM6bm4pKG4pLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QmJlwic3ltYm9sXCI9PXR5cGVvZiBlfHxyKGUsbltlXSxuKX0pKTpuLmZvckVhY2goKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHIoZSx0LG4pfSkpfWZ1bmN0aW9uIG8obil7dmFyIHI9bltRXTtyZXR1cm4gcj9yLmk+Mz9yLmktNDpyLmk6QXJyYXkuaXNBcnJheShuKT8xOnMobik/Mjp2KG4pPzM6MH1mdW5jdGlvbiB1KG4scil7cmV0dXJuIDI9PT1vKG4pP24uaGFzKHIpOk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHIpfWZ1bmN0aW9uIGEobixyKXtyZXR1cm4gMj09PW8obik/bi5nZXQocik6bltyXX1mdW5jdGlvbiBmKG4scix0KXt2YXIgZT1vKG4pOzI9PT1lP24uc2V0KHIsdCk6Mz09PWU/KG4uZGVsZXRlKHIpLG4uYWRkKHQpKTpuW3JdPXR9ZnVuY3Rpb24gYyhuLHIpe3JldHVybiBuPT09cj8wIT09bnx8MS9uPT0xL3I6biE9biYmciE9cn1mdW5jdGlvbiBzKG4pe3JldHVybiBYJiZuIGluc3RhbmNlb2YgTWFwfWZ1bmN0aW9uIHYobil7cmV0dXJuIHEmJm4gaW5zdGFuY2VvZiBTZXR9ZnVuY3Rpb24gcChuKXtyZXR1cm4gbi5vfHxuLnR9ZnVuY3Rpb24gbChuKXtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChuKTt2YXIgcj1ybihuKTtkZWxldGUgcltRXTtmb3IodmFyIHQ9bm4ociksZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgaT10W2VdLG89cltpXTshMT09PW8ud3JpdGFibGUmJihvLndyaXRhYmxlPSEwLG8uY29uZmlndXJhYmxlPSEwKSwoby5nZXR8fG8uc2V0KSYmKHJbaV09e2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCxlbnVtZXJhYmxlOm8uZW51bWVyYWJsZSx2YWx1ZTpuW2ldfSl9cmV0dXJuIE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pLHIpfWZ1bmN0aW9uIGQobixlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLHkobil8fHIobil8fCF0KG4pP246KG8obik+MSYmKG4uc2V0PW4uYWRkPW4uY2xlYXI9bi5kZWxldGU9aCksT2JqZWN0LmZyZWV6ZShuKSxlJiZpKG4sKGZ1bmN0aW9uKG4scil7cmV0dXJuIGQociwhMCl9KSwhMCksbil9ZnVuY3Rpb24gaCgpe24oMil9ZnVuY3Rpb24geShuKXtyZXR1cm4gbnVsbD09bnx8XCJvYmplY3RcIiE9dHlwZW9mIG58fE9iamVjdC5pc0Zyb3plbihuKX1mdW5jdGlvbiBiKHIpe3ZhciB0PXRuW3JdO3JldHVybiB0fHxuKDE4LHIpLHR9ZnVuY3Rpb24gbShuLHIpe3RuW25dfHwodG5bbl09cil9ZnVuY3Rpb24gXygpe3JldHVyblwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fFV8fG4oMCksVX1mdW5jdGlvbiBqKG4scil7ciYmKGIoXCJQYXRjaGVzXCIpLG4udT1bXSxuLnM9W10sbi52PXIpfWZ1bmN0aW9uIE8obil7ZyhuKSxuLnAuZm9yRWFjaChTKSxuLnA9bnVsbH1mdW5jdGlvbiBnKG4pe249PT1VJiYoVT1uLmwpfWZ1bmN0aW9uIHcobil7cmV0dXJuIFU9e3A6W10sbDpVLGg6bixtOiEwLF86MH19ZnVuY3Rpb24gUyhuKXt2YXIgcj1uW1FdOzA9PT1yLml8fDE9PT1yLmk/ci5qKCk6ci5PPSEwfWZ1bmN0aW9uIFAocixlKXtlLl89ZS5wLmxlbmd0aDt2YXIgaT1lLnBbMF0sbz12b2lkIDAhPT1yJiZyIT09aTtyZXR1cm4gZS5oLmd8fGIoXCJFUzVcIikuUyhlLHIsbyksbz8oaVtRXS5QJiYoTyhlKSxuKDQpKSx0KHIpJiYocj1NKGUsciksZS5sfHx4KGUscikpLGUudSYmYihcIlBhdGNoZXNcIikuTShpW1FdLnQscixlLnUsZS5zKSk6cj1NKGUsaSxbXSksTyhlKSxlLnUmJmUudihlLnUsZS5zKSxyIT09SD9yOnZvaWQgMH1mdW5jdGlvbiBNKG4scix0KXtpZih5KHIpKXJldHVybiByO3ZhciBlPXJbUV07aWYoIWUpcmV0dXJuIGkociwoZnVuY3Rpb24oaSxvKXtyZXR1cm4gQShuLGUscixpLG8sdCl9KSwhMCkscjtpZihlLkEhPT1uKXJldHVybiByO2lmKCFlLlApcmV0dXJuIHgobixlLnQsITApLGUudDtpZighZS5JKXtlLkk9ITAsZS5BLl8tLTt2YXIgbz00PT09ZS5pfHw1PT09ZS5pP2Uubz1sKGUuayk6ZS5vO2koMz09PWUuaT9uZXcgU2V0KG8pOm8sKGZ1bmN0aW9uKHIsaSl7cmV0dXJuIEEobixlLG8scixpLHQpfSkpLHgobixvLCExKSx0JiZuLnUmJmIoXCJQYXRjaGVzXCIpLlIoZSx0LG4udSxuLnMpfXJldHVybiBlLm99ZnVuY3Rpb24gQShlLGksbyxhLGMscyl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmYz09PW8mJm4oNSkscihjKSl7dmFyIHY9TShlLGMscyYmaSYmMyE9PWkuaSYmIXUoaS5ELGEpP3MuY29uY2F0KGEpOnZvaWQgMCk7aWYoZihvLGEsdiksIXIodikpcmV0dXJuO2UubT0hMX1pZih0KGMpJiYheShjKSl7aWYoIWUuaC5GJiZlLl88MSlyZXR1cm47TShlLGMpLGkmJmkuQS5sfHx4KGUsYyl9fWZ1bmN0aW9uIHgobixyLHQpe3ZvaWQgMD09PXQmJih0PSExKSxuLmguRiYmbi5tJiZkKHIsdCl9ZnVuY3Rpb24geihuLHIpe3ZhciB0PW5bUV07cmV0dXJuKHQ/cCh0KTpuKVtyXX1mdW5jdGlvbiBJKG4scil7aWYociBpbiBuKWZvcih2YXIgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7dDspe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZihlKXJldHVybiBlO3Q9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfX1mdW5jdGlvbiBrKG4pe24uUHx8KG4uUD0hMCxuLmwmJmsobi5sKSl9ZnVuY3Rpb24gRShuKXtuLm98fChuLm89bChuLnQpKX1mdW5jdGlvbiBSKG4scix0KXt2YXIgZT1zKHIpP2IoXCJNYXBTZXRcIikuTihyLHQpOnYocik/YihcIk1hcFNldFwiKS5UKHIsdCk6bi5nP2Z1bmN0aW9uKG4scil7dmFyIHQ9QXJyYXkuaXNBcnJheShuKSxlPXtpOnQ/MTowLEE6cj9yLkE6XygpLFA6ITEsSTohMSxEOnt9LGw6cix0Om4sazpudWxsLG86bnVsbCxqOm51bGwsQzohMX0saT1lLG89ZW47dCYmKGk9W2VdLG89b24pO3ZhciB1PVByb3h5LnJldm9jYWJsZShpLG8pLGE9dS5yZXZva2UsZj11LnByb3h5O3JldHVybiBlLms9ZixlLmo9YSxmfShyLHQpOmIoXCJFUzVcIikuSihyLHQpO3JldHVybih0P3QuQTpfKCkpLnAucHVzaChlKSxlfWZ1bmN0aW9uIEQoZSl7cmV0dXJuIHIoZSl8fG4oMjIsZSksZnVuY3Rpb24gbihyKXtpZighdChyKSlyZXR1cm4gcjt2YXIgZSx1PXJbUV0sYz1vKHIpO2lmKHUpe2lmKCF1LlAmJih1Lmk8NHx8IWIoXCJFUzVcIikuSyh1KSkpcmV0dXJuIHUudDt1Lkk9ITAsZT1GKHIsYyksdS5JPSExfWVsc2UgZT1GKHIsYyk7cmV0dXJuIGkoZSwoZnVuY3Rpb24ocix0KXt1JiZhKHUudCxyKT09PXR8fGYoZSxyLG4odCkpfSkpLDM9PT1jP25ldyBTZXQoZSk6ZX0oZSl9ZnVuY3Rpb24gRihuLHIpe3N3aXRjaChyKXtjYXNlIDI6cmV0dXJuIG5ldyBNYXAobik7Y2FzZSAzOnJldHVybiBBcnJheS5mcm9tKG4pfXJldHVybiBsKG4pfWZ1bmN0aW9uIE4oKXtmdW5jdGlvbiB0KG4scil7dmFyIHQ9c1tuXTtyZXR1cm4gdD90LmVudW1lcmFibGU9cjpzW25dPXQ9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOnIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHI9dGhpc1tRXTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHIpLGVuLmdldChyLG4pfSxzZXQ6ZnVuY3Rpb24ocil7dmFyIHQ9dGhpc1tRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHQpLGVuLnNldCh0LG4scil9fSx0fWZ1bmN0aW9uIGUobil7Zm9yKHZhciByPW4ubGVuZ3RoLTE7cj49MDtyLS0pe3ZhciB0PW5bcl1bUV07aWYoIXQuUClzd2l0Y2godC5pKXtjYXNlIDU6YSh0KSYmayh0KTticmVhaztjYXNlIDQ6byh0KSYmayh0KX19fWZ1bmN0aW9uIG8obil7Zm9yKHZhciByPW4udCx0PW4uayxlPW5uKHQpLGk9ZS5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIG89ZVtpXTtpZihvIT09USl7dmFyIGE9cltvXTtpZih2b2lkIDA9PT1hJiYhdShyLG8pKXJldHVybiEwO3ZhciBmPXRbb10scz1mJiZmW1FdO2lmKHM/cy50IT09YTohYyhmLGEpKXJldHVybiEwfX12YXIgdj0hIXJbUV07cmV0dXJuIGUubGVuZ3RoIT09bm4ocikubGVuZ3RoKyh2PzA6MSl9ZnVuY3Rpb24gYShuKXt2YXIgcj1uLms7aWYoci5sZW5ndGghPT1uLnQubGVuZ3RoKXJldHVybiEwO3ZhciB0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixyLmxlbmd0aC0xKTtpZih0JiYhdC5nZXQpcmV0dXJuITA7Zm9yKHZhciBlPTA7ZTxyLmxlbmd0aDtlKyspaWYoIXIuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZihyKXtyLk8mJm4oMyxKU09OLnN0cmluZ2lmeShwKHIpKSl9dmFyIHM9e307bShcIkVTNVwiLHtKOmZ1bmN0aW9uKG4scil7dmFyIGU9QXJyYXkuaXNBcnJheShuKSxpPWZ1bmN0aW9uKG4scil7aWYobil7Zm9yKHZhciBlPUFycmF5KHIubGVuZ3RoKSxpPTA7aTxyLmxlbmd0aDtpKyspT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJcIitpLHQoaSwhMCkpO3JldHVybiBlfXZhciBvPXJuKHIpO2RlbGV0ZSBvW1FdO2Zvcih2YXIgdT1ubihvKSxhPTA7YTx1Lmxlbmd0aDthKyspe3ZhciBmPXVbYV07b1tmXT10KGYsbnx8ISFvW2ZdLmVudW1lcmFibGUpfXJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihyKSxvKX0oZSxuKSxvPXtpOmU/NTo0LEE6cj9yLkE6XygpLFA6ITEsSTohMSxEOnt9LGw6cix0Om4sazppLG86bnVsbCxPOiExLEM6ITF9O3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoaSxRLHt2YWx1ZTpvLHdyaXRhYmxlOiEwfSksaX0sUzpmdW5jdGlvbihuLHQsbyl7bz9yKHQpJiZ0W1FdLkE9PT1uJiZlKG4ucCk6KG4udSYmZnVuY3Rpb24gbihyKXtpZihyJiZcIm9iamVjdFwiPT10eXBlb2Ygcil7dmFyIHQ9cltRXTtpZih0KXt2YXIgZT10LnQsbz10LmssZj10LkQsYz10Lmk7aWYoND09PWMpaShvLChmdW5jdGlvbihyKXtyIT09USYmKHZvaWQgMCE9PWVbcl18fHUoZSxyKT9mW3JdfHxuKG9bcl0pOihmW3JdPSEwLGsodCkpKX0pKSxpKGUsKGZ1bmN0aW9uKG4pe3ZvaWQgMCE9PW9bbl18fHUobyxuKXx8KGZbbl09ITEsayh0KSl9KSk7ZWxzZSBpZig1PT09Yyl7aWYoYSh0KSYmKGsodCksZi5sZW5ndGg9ITApLG8ubGVuZ3RoPGUubGVuZ3RoKWZvcih2YXIgcz1vLmxlbmd0aDtzPGUubGVuZ3RoO3MrKylmW3NdPSExO2Vsc2UgZm9yKHZhciB2PWUubGVuZ3RoO3Y8by5sZW5ndGg7disrKWZbdl09ITA7Zm9yKHZhciBwPU1hdGgubWluKG8ubGVuZ3RoLGUubGVuZ3RoKSxsPTA7bDxwO2wrKylvLmhhc093blByb3BlcnR5KGwpfHwoZltsXT0hMCksdm9pZCAwPT09ZltsXSYmbihvW2xdKX19fX0obi5wWzBdKSxlKG4ucCkpfSxLOmZ1bmN0aW9uKG4pe3JldHVybiA0PT09bi5pP28obik6YShuKX19KX1mdW5jdGlvbiBUKCl7ZnVuY3Rpb24gZShuKXtpZighdChuKSlyZXR1cm4gbjtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBuLm1hcChlKTtpZihzKG4pKXJldHVybiBuZXcgTWFwKEFycmF5LmZyb20obi5lbnRyaWVzKCkpLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuW25bMF0sZShuWzFdKV19KSkpO2lmKHYobikpcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbShuKS5tYXAoZSkpO3ZhciByPU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pKTtmb3IodmFyIGkgaW4gbilyW2ldPWUobltpXSk7cmV0dXJuIHUobixMKSYmKHJbTF09bltMXSkscn1mdW5jdGlvbiBmKG4pe3JldHVybiByKG4pP2Uobik6bn12YXIgYz1cImFkZFwiO20oXCJQYXRjaGVzXCIseyQ6ZnVuY3Rpb24ocix0KXtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtmb3IodmFyIGk9dC5wYXRoLHU9dC5vcCxmPXIscz0wO3M8aS5sZW5ndGgtMTtzKyspe3ZhciB2PW8oZikscD1cIlwiK2lbc107MCE9PXYmJjEhPT12fHxcIl9fcHJvdG9fX1wiIT09cCYmXCJjb25zdHJ1Y3RvclwiIT09cHx8bigyNCksXCJmdW5jdGlvblwiPT10eXBlb2YgZiYmXCJwcm90b3R5cGVcIj09PXAmJm4oMjQpLFwib2JqZWN0XCIhPXR5cGVvZihmPWEoZixwKSkmJm4oMTUsaS5qb2luKFwiL1wiKSl9dmFyIGw9byhmKSxkPWUodC52YWx1ZSksaD1pW2kubGVuZ3RoLTFdO3N3aXRjaCh1KXtjYXNlXCJyZXBsYWNlXCI6c3dpdGNoKGwpe2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6bigxNik7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2UgYzpzd2l0Y2gobCl7Y2FzZSAxOnJldHVyblwiLVwiPT09aD9mLnB1c2goZCk6Zi5zcGxpY2UoaCwwLGQpO2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6cmV0dXJuIGYuYWRkKGQpO2RlZmF1bHQ6cmV0dXJuIGZbaF09ZH1jYXNlXCJyZW1vdmVcIjpzd2l0Y2gobCl7Y2FzZSAxOnJldHVybiBmLnNwbGljZShoLDEpO2Nhc2UgMjpyZXR1cm4gZi5kZWxldGUoaCk7Y2FzZSAzOnJldHVybiBmLmRlbGV0ZSh0LnZhbHVlKTtkZWZhdWx0OnJldHVybiBkZWxldGUgZltoXX1kZWZhdWx0Om4oMTcsdSl9fSkpLHJ9LFI6ZnVuY3Rpb24obixyLHQsZSl7c3dpdGNoKG4uaSl7Y2FzZSAwOmNhc2UgNDpjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBvPW4udCxzPW4ubztpKG4uRCwoZnVuY3Rpb24obixpKXt2YXIgdj1hKG8sbikscD1hKHMsbiksbD1pP3UobyxuKT9cInJlcGxhY2VcIjpjOlwicmVtb3ZlXCI7aWYodiE9PXB8fFwicmVwbGFjZVwiIT09bCl7dmFyIGQ9ci5jb25jYXQobik7dC5wdXNoKFwicmVtb3ZlXCI9PT1sP3tvcDpsLHBhdGg6ZH06e29wOmwscGF0aDpkLHZhbHVlOnB9KSxlLnB1c2gobD09PWM/e29wOlwicmVtb3ZlXCIscGF0aDpkfTpcInJlbW92ZVwiPT09bD97b3A6YyxwYXRoOmQsdmFsdWU6Zih2KX06e29wOlwicmVwbGFjZVwiLHBhdGg6ZCx2YWx1ZTpmKHYpfSl9fSkpfShuLHIsdCxlKTtjYXNlIDU6Y2FzZSAxOnJldHVybiBmdW5jdGlvbihuLHIsdCxlKXt2YXIgaT1uLnQsbz1uLkQsdT1uLm87aWYodS5sZW5ndGg8aS5sZW5ndGgpe3ZhciBhPVt1LGldO2k9YVswXSx1PWFbMV07dmFyIHM9W2UsdF07dD1zWzBdLGU9c1sxXX1mb3IodmFyIHY9MDt2PGkubGVuZ3RoO3YrKylpZihvW3ZdJiZ1W3ZdIT09aVt2XSl7dmFyIHA9ci5jb25jYXQoW3ZdKTt0LnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKHVbdl0pfSksZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnAsdmFsdWU6ZihpW3ZdKX0pfWZvcih2YXIgbD1pLmxlbmd0aDtsPHUubGVuZ3RoO2wrKyl7dmFyIGQ9ci5jb25jYXQoW2xdKTt0LnB1c2goe29wOmMscGF0aDpkLHZhbHVlOmYodVtsXSl9KX1pLmxlbmd0aDx1Lmxlbmd0aCYmZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnIuY29uY2F0KFtcImxlbmd0aFwiXSksdmFsdWU6aS5sZW5ndGh9KX0obixyLHQsZSk7Y2FzZSAzOnJldHVybiBmdW5jdGlvbihuLHIsdCxlKXt2YXIgaT1uLnQsbz1uLm8sdT0wO2kuZm9yRWFjaCgoZnVuY3Rpb24obil7aWYoIW8uaGFzKG4pKXt2YXIgaT1yLmNvbmNhdChbdV0pO3QucHVzaCh7b3A6XCJyZW1vdmVcIixwYXRoOmksdmFsdWU6bn0pLGUudW5zaGlmdCh7b3A6YyxwYXRoOmksdmFsdWU6bn0pfXUrK30pKSx1PTAsby5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighaS5oYXMobikpe3ZhciBvPXIuY29uY2F0KFt1XSk7dC5wdXNoKHtvcDpjLHBhdGg6byx2YWx1ZTpufSksZS51bnNoaWZ0KHtvcDpcInJlbW92ZVwiLHBhdGg6byx2YWx1ZTpufSl9dSsrfSkpfShuLHIsdCxlKX19LE06ZnVuY3Rpb24obixyLHQsZSl7dC5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOltdLHZhbHVlOnI9PT1IP3ZvaWQgMDpyfSksZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOltdLHZhbHVlOm59KX19KX1mdW5jdGlvbiBDKCl7ZnVuY3Rpb24gcihuLHIpe2Z1bmN0aW9uIHQoKXt0aGlzLmNvbnN0cnVjdG9yPW59YShuLHIpLG4ucHJvdG90eXBlPSh0LnByb3RvdHlwZT1yLnByb3RvdHlwZSxuZXcgdCl9ZnVuY3Rpb24gZShuKXtuLm98fChuLkQ9bmV3IE1hcCxuLm89bmV3IE1hcChuLnQpKX1mdW5jdGlvbiBvKG4pe24ub3x8KG4ubz1uZXcgU2V0LG4udC5mb3JFYWNoKChmdW5jdGlvbihyKXtpZih0KHIpKXt2YXIgZT1SKG4uQS5oLHIsbik7bi5wLnNldChyLGUpLG4uby5hZGQoZSl9ZWxzZSBuLm8uYWRkKHIpfSkpKX1mdW5jdGlvbiB1KHIpe3IuTyYmbigzLEpTT04uc3RyaW5naWZ5KHAocikpKX12YXIgYT1mdW5jdGlvbihuLHIpe3JldHVybihhPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihuLHIpe24uX19wcm90b19fPXJ9fHxmdW5jdGlvbihuLHIpe2Zvcih2YXIgdCBpbiByKXIuaGFzT3duUHJvcGVydHkodCkmJihuW3RdPXJbdF0pfSkobixyKX0sZj1mdW5jdGlvbigpe2Z1bmN0aW9uIG4obixyKXtyZXR1cm4gdGhpc1tRXT17aToyLGw6cixBOnI/ci5BOl8oKSxQOiExLEk6ITEsbzp2b2lkIDAsRDp2b2lkIDAsdDpuLGs6dGhpcyxDOiExLE86ITF9LHRoaXN9cihuLE1hcCk7dmFyIG89bi5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLG8uaGFzPWZ1bmN0aW9uKG4pe3JldHVybiBwKHRoaXNbUV0pLmhhcyhuKX0sby5zZXQ9ZnVuY3Rpb24obixyKXt2YXIgdD10aGlzW1FdO3JldHVybiB1KHQpLHAodCkuaGFzKG4pJiZwKHQpLmdldChuKT09PXJ8fChlKHQpLGsodCksdC5ELnNldChuLCEwKSx0Lm8uc2V0KG4sciksdC5ELnNldChuLCEwKSksdGhpc30sby5kZWxldGU9ZnVuY3Rpb24obil7aWYoIXRoaXMuaGFzKG4pKXJldHVybiExO3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksZShyKSxrKHIpLHIudC5oYXMobik/ci5ELnNldChuLCExKTpyLkQuZGVsZXRlKG4pLHIuby5kZWxldGUobiksITB9LG8uY2xlYXI9ZnVuY3Rpb24oKXt2YXIgbj10aGlzW1FdO3UobikscChuKS5zaXplJiYoZShuKSxrKG4pLG4uRD1uZXcgTWFwLGkobi50LChmdW5jdGlvbihyKXtuLkQuc2V0KHIsITEpfSkpLG4uby5jbGVhcigpKX0sby5mb3JFYWNoPWZ1bmN0aW9uKG4scil7dmFyIHQ9dGhpcztwKHRoaXNbUV0pLmZvckVhY2goKGZ1bmN0aW9uKGUsaSl7bi5jYWxsKHIsdC5nZXQoaSksaSx0KX0pKX0sby5nZXQ9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTt1KHIpO3ZhciBpPXAocikuZ2V0KG4pO2lmKHIuSXx8IXQoaSkpcmV0dXJuIGk7aWYoaSE9PXIudC5nZXQobikpcmV0dXJuIGk7dmFyIG89UihyLkEuaCxpLHIpO3JldHVybiBlKHIpLHIuby5zZXQobixvKSxvfSxvLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5rZXlzKCl9LG8udmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG4scj10aGlzLHQ9dGhpcy5rZXlzKCk7cmV0dXJuKG49e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHIudmFsdWVzKCl9LG4ubmV4dD1mdW5jdGlvbigpe3ZhciBuPXQubmV4dCgpO3JldHVybiBuLmRvbmU/bjp7ZG9uZTohMSx2YWx1ZTpyLmdldChuLnZhbHVlKX19LG59LG8uZW50cmllcz1mdW5jdGlvbigpe3ZhciBuLHI9dGhpcyx0PXRoaXMua2V5cygpO3JldHVybihuPXt9KVtWXT1mdW5jdGlvbigpe3JldHVybiByLmVudHJpZXMoKX0sbi5uZXh0PWZ1bmN0aW9uKCl7dmFyIG49dC5uZXh0KCk7aWYobi5kb25lKXJldHVybiBuO3ZhciBlPXIuZ2V0KG4udmFsdWUpO3JldHVybntkb25lOiExLHZhbHVlOltuLnZhbHVlLGVdfX0sbn0sb1tWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVudHJpZXMoKX0sbn0oKSxjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHIpe3JldHVybiB0aGlzW1FdPXtpOjMsbDpyLEE6cj9yLkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCx0Om4sazp0aGlzLHA6bmV3IE1hcCxPOiExLEM6ITF9LHRoaXN9cihuLFNldCk7dmFyIHQ9bi5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLHQuaGFzPWZ1bmN0aW9uKG4pe3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksci5vPyEhci5vLmhhcyhuKXx8ISghci5wLmhhcyhuKXx8IXIuby5oYXMoci5wLmdldChuKSkpOnIudC5oYXMobil9LHQuYWRkPWZ1bmN0aW9uKG4pe3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksdGhpcy5oYXMobil8fChvKHIpLGsociksci5vLmFkZChuKSksdGhpc30sdC5kZWxldGU9ZnVuY3Rpb24obil7aWYoIXRoaXMuaGFzKG4pKXJldHVybiExO3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksbyhyKSxrKHIpLHIuby5kZWxldGUobil8fCEhci5wLmhhcyhuKSYmci5vLmRlbGV0ZShyLnAuZ2V0KG4pKX0sdC5jbGVhcj1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07dShuKSxwKG4pLnNpemUmJihvKG4pLGsobiksbi5vLmNsZWFyKCkpfSx0LnZhbHVlcz1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxuLm8udmFsdWVzKCl9LHQuZW50cmllcz1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxuLm8uZW50cmllcygpfSx0LmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZXMoKX0sdFtWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSx0LmZvckVhY2g9ZnVuY3Rpb24obixyKXtmb3IodmFyIHQ9dGhpcy52YWx1ZXMoKSxlPXQubmV4dCgpOyFlLmRvbmU7KW4uY2FsbChyLGUudmFsdWUsZS52YWx1ZSx0aGlzKSxlPXQubmV4dCgpfSxufSgpO20oXCJNYXBTZXRcIix7TjpmdW5jdGlvbihuLHIpe3JldHVybiBuZXcgZihuLHIpfSxUOmZ1bmN0aW9uKG4scil7cmV0dXJuIG5ldyBjKG4scil9fSl9ZnVuY3Rpb24gSigpe04oKSxDKCksVCgpfWZ1bmN0aW9uIEsobil7cmV0dXJuIG59ZnVuY3Rpb24gJChuKXtyZXR1cm4gbn12YXIgRyxVLFc9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbChcInhcIiksWD1cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwLHE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNldCxCPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm94eSYmdm9pZCAwIT09UHJveHkucmV2b2NhYmxlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCxIPVc/U3ltYm9sLmZvcihcImltbWVyLW5vdGhpbmdcIik6KChHPXt9KVtcImltbWVyLW5vdGhpbmdcIl09ITAsRyksTD1XP1N5bWJvbC5mb3IoXCJpbW1lci1kcmFmdGFibGVcIik6XCJfXyRpbW1lcl9kcmFmdGFibGVcIixRPVc/U3ltYm9sLmZvcihcImltbWVyLXN0YXRlXCIpOlwiX18kaW1tZXJfc3RhdGVcIixWPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsWT17MDpcIklsbGVnYWwgc3RhdGVcIiwxOlwiSW1tZXIgZHJhZnRzIGNhbm5vdCBoYXZlIGNvbXB1dGVkIHByb3BlcnRpZXNcIiwyOlwiVGhpcyBvYmplY3QgaGFzIGJlZW4gZnJvemVuIGFuZCBzaG91bGQgbm90IGJlIG11dGF0ZWRcIiwzOmZ1bmN0aW9uKG4pe3JldHVyblwiQ2Fubm90IHVzZSBhIHByb3h5IHRoYXQgaGFzIGJlZW4gcmV2b2tlZC4gRGlkIHlvdSBwYXNzIGFuIG9iamVjdCBmcm9tIGluc2lkZSBhbiBpbW1lciBmdW5jdGlvbiB0byBhbiBhc3luYyBwcm9jZXNzPyBcIitufSw0OlwiQW4gaW1tZXIgcHJvZHVjZXIgcmV0dXJuZWQgYSBuZXcgdmFsdWUgKmFuZCogbW9kaWZpZWQgaXRzIGRyYWZ0LiBFaXRoZXIgcmV0dXJuIGEgbmV3IHZhbHVlICpvciogbW9kaWZ5IHRoZSBkcmFmdC5cIiw1OlwiSW1tZXIgZm9yYmlkcyBjaXJjdWxhciByZWZlcmVuY2VzXCIsNjpcIlRoZSBmaXJzdCBvciBzZWNvbmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvblwiLDc6XCJUaGUgdGhpcmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvbiBvciB1bmRlZmluZWRcIiw4OlwiRmlyc3QgYXJndW1lbnQgdG8gYGNyZWF0ZURyYWZ0YCBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0LCBhbiBhcnJheSwgb3IgYW4gaW1tZXJhYmxlIG9iamVjdFwiLDk6XCJGaXJzdCBhcmd1bWVudCB0byBgZmluaXNoRHJhZnRgIG11c3QgYmUgYSBkcmFmdCByZXR1cm5lZCBieSBgY3JlYXRlRHJhZnRgXCIsMTA6XCJUaGUgZ2l2ZW4gZHJhZnQgaXMgYWxyZWFkeSBmaW5hbGl6ZWRcIiwxMTpcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eSgpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTI6XCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLDEzOlwiSW1tZXIgb25seSBzdXBwb3J0cyBkZWxldGluZyBhcnJheSBpbmRpY2VzXCIsMTQ6XCJJbW1lciBvbmx5IHN1cHBvcnRzIHNldHRpbmcgYXJyYXkgaW5kaWNlcyBhbmQgdGhlICdsZW5ndGgnIHByb3BlcnR5XCIsMTU6ZnVuY3Rpb24obil7cmV0dXJuXCJDYW5ub3QgYXBwbHkgcGF0Y2gsIHBhdGggZG9lc24ndCByZXNvbHZlOiBcIitufSwxNjonU2V0cyBjYW5ub3QgaGF2ZSBcInJlcGxhY2VcIiBwYXRjaGVzLicsMTc6ZnVuY3Rpb24obil7cmV0dXJuXCJVbnN1cHBvcnRlZCBwYXRjaCBvcGVyYXRpb246IFwiK259LDE4OmZ1bmN0aW9uKG4pe3JldHVyblwiVGhlIHBsdWdpbiBmb3IgJ1wiK24rXCInIGhhcyBub3QgYmVlbiBsb2FkZWQgaW50byBJbW1lci4gVG8gZW5hYmxlIHRoZSBwbHVnaW4sIGltcG9ydCBhbmQgY2FsbCBgZW5hYmxlXCIrbitcIigpYCB3aGVuIGluaXRpYWxpemluZyB5b3VyIGFwcGxpY2F0aW9uLlwifSwyMDpcIkNhbm5vdCB1c2UgcHJveGllcyBpZiBQcm94eSwgUHJveHkucmV2b2NhYmxlIG9yIFJlZmxlY3QgYXJlIG5vdCBhdmFpbGFibGVcIiwyMTpmdW5jdGlvbihuKXtyZXR1cm5cInByb2R1Y2UgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoaW5ncyB0aGF0IGFyZSBkcmFmdGFibGU6IHBsYWluIG9iamVjdHMsIGFycmF5cywgTWFwLCBTZXQgb3IgY2xhc3NlcyB0aGF0IGFyZSBtYXJrZWQgd2l0aCAnW2ltbWVyYWJsZV06IHRydWUnLiBHb3QgJ1wiK24rXCInXCJ9LDIyOmZ1bmN0aW9uKG4pe3JldHVyblwiJ2N1cnJlbnQnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiBcIitufSwyMzpmdW5jdGlvbihuKXtyZXR1cm5cIidvcmlnaW5hbCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK259LDI0OlwiUGF0Y2hpbmcgcmVzZXJ2ZWQgYXR0cmlidXRlcyBsaWtlIF9fcHJvdG9fXywgcHJvdG90eXBlIGFuZCBjb25zdHJ1Y3RvciBpcyBub3QgYWxsb3dlZFwifSxaPVwiXCIrT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcixubj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5vd25LZXlzP1JlZmxlY3Qub3duS2V5czp2b2lkIDAhPT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKG4pe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhuKSl9Ok9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLHJuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzfHxmdW5jdGlvbihuKXt2YXIgcj17fTtyZXR1cm4gbm4obikuZm9yRWFjaCgoZnVuY3Rpb24odCl7clt0XT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sdCl9KSkscn0sdG49e30sZW49e2dldDpmdW5jdGlvbihuLHIpe2lmKHI9PT1RKXJldHVybiBuO3ZhciBlPXAobik7aWYoIXUoZSxyKSlyZXR1cm4gZnVuY3Rpb24obixyLHQpe3ZhciBlLGk9SShyLHQpO3JldHVybiBpP1widmFsdWVcImluIGk/aS52YWx1ZTpudWxsPT09KGU9aS5nZXQpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmNhbGwobi5rKTp2b2lkIDB9KG4sZSxyKTt2YXIgaT1lW3JdO3JldHVybiBuLkl8fCF0KGkpP2k6aT09PXoobi50LHIpPyhFKG4pLG4ub1tyXT1SKG4uQS5oLGksbikpOml9LGhhczpmdW5jdGlvbihuLHIpe3JldHVybiByIGluIHAobil9LG93bktleXM6ZnVuY3Rpb24obil7cmV0dXJuIFJlZmxlY3Qub3duS2V5cyhwKG4pKX0sc2V0OmZ1bmN0aW9uKG4scix0KXt2YXIgZT1JKHAobikscik7aWYobnVsbD09ZT92b2lkIDA6ZS5zZXQpcmV0dXJuIGUuc2V0LmNhbGwobi5rLHQpLCEwO2lmKCFuLlApe3ZhciBpPXoocChuKSxyKSxvPW51bGw9PWk/dm9pZCAwOmlbUV07aWYobyYmby50PT09dClyZXR1cm4gbi5vW3JdPXQsbi5EW3JdPSExLCEwO2lmKGModCxpKSYmKHZvaWQgMCE9PXR8fHUobi50LHIpKSlyZXR1cm4hMDtFKG4pLGsobil9cmV0dXJuIG4ub1tyXT09PXQmJlwibnVtYmVyXCIhPXR5cGVvZiB0JiYodm9pZCAwIT09dHx8ciBpbiBuLm8pfHwobi5vW3JdPXQsbi5EW3JdPSEwLCEwKX0sZGVsZXRlUHJvcGVydHk6ZnVuY3Rpb24obixyKXtyZXR1cm4gdm9pZCAwIT09eihuLnQscil8fHIgaW4gbi50PyhuLkRbcl09ITEsRShuKSxrKG4pKTpkZWxldGUgbi5EW3JdLG4ubyYmZGVsZXRlIG4ub1tyXSwhMH0sZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOmZ1bmN0aW9uKG4scil7dmFyIHQ9cChuKSxlPVJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7cmV0dXJuIGU/e3dyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZToxIT09bi5pfHxcImxlbmd0aFwiIT09cixlbnVtZXJhYmxlOmUuZW51bWVyYWJsZSx2YWx1ZTp0W3JdfTplfSxkZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbigpe24oMTEpfSxnZXRQcm90b3R5cGVPZjpmdW5jdGlvbihuKXtyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG4udCl9LHNldFByb3RvdHlwZU9mOmZ1bmN0aW9uKCl7bigxMil9fSxvbj17fTtpKGVuLChmdW5jdGlvbihuLHIpe29uW25dPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXT1hcmd1bWVudHNbMF1bMF0sci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSkpLG9uLmRlbGV0ZVByb3BlcnR5PWZ1bmN0aW9uKHIsdCl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaXNOYU4ocGFyc2VJbnQodCkpJiZuKDEzKSxvbi5zZXQuY2FsbCh0aGlzLHIsdCx2b2lkIDApfSxvbi5zZXQ9ZnVuY3Rpb24ocix0LGUpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwibGVuZ3RoXCIhPT10JiZpc05hTihwYXJzZUludCh0KSkmJm4oMTQpLGVuLnNldC5jYWxsKHRoaXMsclswXSx0LGUsclswXSl9O3ZhciB1bj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUocil7dmFyIGU9dGhpczt0aGlzLmc9Qix0aGlzLkY9ITAsdGhpcy5wcm9kdWNlPWZ1bmN0aW9uKHIsaSxvKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBpKXt2YXIgdT1pO2k9cjt2YXIgYT1lO3JldHVybiBmdW5jdGlvbihuKXt2YXIgcj10aGlzO3ZvaWQgMD09PW4mJihuPXUpO2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGU9QXJyYXkodD4xP3QtMTowKSxvPTE7bzx0O28rKyllW28tMV09YXJndW1lbnRzW29dO3JldHVybiBhLnByb2R1Y2UobiwoZnVuY3Rpb24obil7dmFyIHQ7cmV0dXJuKHQ9aSkuY2FsbC5hcHBseSh0LFtyLG5dLmNvbmNhdChlKSl9KSl9fXZhciBmO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkmJm4oNiksdm9pZCAwIT09byYmXCJmdW5jdGlvblwiIT10eXBlb2YgbyYmbig3KSx0KHIpKXt2YXIgYz13KGUpLHM9UihlLHIsdm9pZCAwKSx2PSEwO3RyeXtmPWkocyksdj0hMX1maW5hbGx5e3Y/TyhjKTpnKGMpfXJldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlJiZmIGluc3RhbmNlb2YgUHJvbWlzZT9mLnRoZW4oKGZ1bmN0aW9uKG4pe3JldHVybiBqKGMsbyksUChuLGMpfSksKGZ1bmN0aW9uKG4pe3Rocm93IE8oYyksbn0pKTooaihjLG8pLFAoZixjKSl9aWYoIXJ8fFwib2JqZWN0XCIhPXR5cGVvZiByKXtpZih2b2lkIDA9PT0oZj1pKHIpKSYmKGY9ciksZj09PUgmJihmPXZvaWQgMCksZS5GJiZkKGYsITApLG8pe3ZhciBwPVtdLGw9W107YihcIlBhdGNoZXNcIikuTShyLGYscCxsKSxvKHAsbCl9cmV0dXJuIGZ9bigyMSxyKX0sdGhpcy5wcm9kdWNlV2l0aFBhdGNoZXM9ZnVuY3Rpb24obixyKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKXJldHVybiBmdW5jdGlvbihyKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxpPUFycmF5KHQ+MT90LTE6MCksbz0xO288dDtvKyspaVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gZS5wcm9kdWNlV2l0aFBhdGNoZXMociwoZnVuY3Rpb24ocil7cmV0dXJuIG4uYXBwbHkodm9pZCAwLFtyXS5jb25jYXQoaSkpfSkpfTt2YXIgdCxpLG89ZS5wcm9kdWNlKG4sciwoZnVuY3Rpb24obixyKXt0PW4saT1yfSkpO3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlJiZvIGluc3RhbmNlb2YgUHJvbWlzZT9vLnRoZW4oKGZ1bmN0aW9uKG4pe3JldHVybltuLHQsaV19KSk6W28sdCxpXX0sXCJib29sZWFuXCI9PXR5cGVvZihudWxsPT1yP3ZvaWQgMDpyLnVzZVByb3hpZXMpJiZ0aGlzLnNldFVzZVByb3hpZXMoci51c2VQcm94aWVzKSxcImJvb2xlYW5cIj09dHlwZW9mKG51bGw9PXI/dm9pZCAwOnIuYXV0b0ZyZWV6ZSkmJnRoaXMuc2V0QXV0b0ZyZWV6ZShyLmF1dG9GcmVlemUpfXZhciBpPWUucHJvdG90eXBlO3JldHVybiBpLmNyZWF0ZURyYWZ0PWZ1bmN0aW9uKGUpe3QoZSl8fG4oOCkscihlKSYmKGU9RChlKSk7dmFyIGk9dyh0aGlzKSxvPVIodGhpcyxlLHZvaWQgMCk7cmV0dXJuIG9bUV0uQz0hMCxnKGkpLG99LGkuZmluaXNoRHJhZnQ9ZnVuY3Rpb24ocix0KXt2YXIgZT1yJiZyW1FdO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihlJiZlLkN8fG4oOSksZS5JJiZuKDEwKSk7dmFyIGk9ZS5BO3JldHVybiBqKGksdCksUCh2b2lkIDAsaSl9LGkuc2V0QXV0b0ZyZWV6ZT1mdW5jdGlvbihuKXt0aGlzLkY9bn0saS5zZXRVc2VQcm94aWVzPWZ1bmN0aW9uKHIpe3ImJiFCJiZuKDIwKSx0aGlzLmc9cn0saS5hcHBseVBhdGNoZXM9ZnVuY3Rpb24obix0KXt2YXIgZTtmb3IoZT10Lmxlbmd0aC0xO2U+PTA7ZS0tKXt2YXIgaT10W2VdO2lmKDA9PT1pLnBhdGgubGVuZ3RoJiZcInJlcGxhY2VcIj09PWkub3Ape249aS52YWx1ZTticmVha319ZT4tMSYmKHQ9dC5zbGljZShlKzEpKTt2YXIgbz1iKFwiUGF0Y2hlc1wiKS4kO3JldHVybiByKG4pP28obix0KTp0aGlzLnByb2R1Y2UobiwoZnVuY3Rpb24obil7cmV0dXJuIG8obix0KX0pKX0sZX0oKSxhbj1uZXcgdW4sZm49YW4ucHJvZHVjZSxjbj1hbi5wcm9kdWNlV2l0aFBhdGNoZXMuYmluZChhbiksc249YW4uc2V0QXV0b0ZyZWV6ZS5iaW5kKGFuKSx2bj1hbi5zZXRVc2VQcm94aWVzLmJpbmQoYW4pLHBuPWFuLmFwcGx5UGF0Y2hlcy5iaW5kKGFuKSxsbj1hbi5jcmVhdGVEcmFmdC5iaW5kKGFuKSxkbj1hbi5maW5pc2hEcmFmdC5iaW5kKGFuKTtleHBvcnQgZGVmYXVsdCBmbjtleHBvcnR7dW4gYXMgSW1tZXIscG4gYXMgYXBwbHlQYXRjaGVzLEsgYXMgY2FzdERyYWZ0LCQgYXMgY2FzdEltbXV0YWJsZSxsbiBhcyBjcmVhdGVEcmFmdCxEIGFzIGN1cnJlbnQsSiBhcyBlbmFibGVBbGxQbHVnaW5zLE4gYXMgZW5hYmxlRVM1LEMgYXMgZW5hYmxlTWFwU2V0LFQgYXMgZW5hYmxlUGF0Y2hlcyxkbiBhcyBmaW5pc2hEcmFmdCxkIGFzIGZyZWV6ZSxMIGFzIGltbWVyYWJsZSxyIGFzIGlzRHJhZnQsdCBhcyBpc0RyYWZ0YWJsZSxIIGFzIG5vdGhpbmcsZSBhcyBvcmlnaW5hbCxmbiBhcyBwcm9kdWNlLGNuIGFzIHByb2R1Y2VXaXRoUGF0Y2hlcyxzbiBhcyBzZXRBdXRvRnJlZXplLHZuIGFzIHNldFVzZVByb3hpZXN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1tZXIuZXNtLmpzLm1hcFxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDInO1xuXG4vKipcbiAqIEFkYXB0ZWQgZnJvbSBSZWFjdDogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3NoYXJlZC9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlLmpzXG4gKlxuICogRG8gbm90IHJlcXVpcmUgdGhpcyBtb2R1bGUgZGlyZWN0bHkhIFVzZSBub3JtYWwgdGhyb3cgZXJyb3IgY2FsbHMuIFRoZXNlIG1lc3NhZ2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBlcnJvciBjb2Rlc1xuICogZHVyaW5nIGJ1aWxkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHJldHVybiBcIk1pbmlmaWVkIFJlZHV4IGVycm9yICNcIiArIGNvZGUgKyBcIjsgdmlzaXQgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvRXJyb3JzP2NvZGU9XCIgKyBjb2RlICsgXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgXCIgKyAndXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycy4gJztcbn1cblxuLy8gSW5saW5lZCB2ZXJzaW9uIG9mIHRoZSBgc3ltYm9sLW9ic2VydmFibGVgIHBvbHlmaWxsXG52YXIgJCRvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgJ0BAb2JzZXJ2YWJsZSc7XG59KSgpO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLy8gSW5saW5lZCAvIHNob3J0ZW5lZCB2ZXJzaW9uIG9mIGBraW5kT2ZgIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQva2luZC1vZlxuZnVuY3Rpb24gbWluaUtpbmRPZih2YWwpIHtcbiAgaWYgKHZhbCA9PT0gdm9pZCAwKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIGlmICh2YWwgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuICdhcnJheSc7XG4gIGlmIChpc0RhdGUodmFsKSkgcmV0dXJuICdkYXRlJztcbiAgaWYgKGlzRXJyb3IodmFsKSkgcmV0dXJuICdlcnJvcic7XG4gIHZhciBjb25zdHJ1Y3Rvck5hbWUgPSBjdG9yTmFtZSh2YWwpO1xuXG4gIHN3aXRjaCAoY29uc3RydWN0b3JOYW1lKSB7XG4gICAgY2FzZSAnU3ltYm9sJzpcbiAgICBjYXNlICdQcm9taXNlJzpcbiAgICBjYXNlICdXZWFrTWFwJzpcbiAgICBjYXNlICdXZWFrU2V0JzpcbiAgICBjYXNlICdNYXAnOlxuICAgIGNhc2UgJ1NldCc6XG4gICAgICByZXR1cm4gY29uc3RydWN0b3JOYW1lO1xuICB9IC8vIG90aGVyXG5cblxuICByZXR1cm4gdHlwZS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpO1xufVxuXG5mdW5jdGlvbiBjdG9yTmFtZSh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgPyB2YWwuY29uc3RydWN0b3IubmFtZSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgdmFsLm1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIHZhbC5jb25zdHJ1Y3RvciAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB0cnVlO1xuICByZXR1cm4gdHlwZW9mIHZhbC50b0RhdGVTdHJpbmcgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5nZXREYXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuc2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24ga2luZE9mKHZhbCkge1xuICB2YXIgdHlwZU9mVmFsID0gdHlwZW9mIHZhbDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHR5cGVPZlZhbCA9IG1pbmlLaW5kT2YodmFsKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlT2ZWYWw7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiAqKldlIHJlY29tbWVuZCB1c2luZyB0aGUgYGNvbmZpZ3VyZVN0b3JlYCBtZXRob2RcbiAqIG9mIHRoZSBgQHJlZHV4anMvdG9vbGtpdGAgcGFja2FnZSoqLCB3aGljaCByZXBsYWNlcyBgY3JlYXRlU3RvcmVgLlxuICpcbiAqIFJlZHV4IFRvb2xraXQgaXMgb3VyIHJlY29tbWVuZGVkIGFwcHJvYWNoIGZvciB3cml0aW5nIFJlZHV4IGxvZ2ljIHRvZGF5LFxuICogaW5jbHVkaW5nIHN0b3JlIHNldHVwLCByZWR1Y2VycywgZGF0YSBmZXRjaGluZywgYW5kIG1vcmUuXG4gKlxuICogKipGb3IgbW9yZSBkZXRhaWxzLCBwbGVhc2UgcmVhZCB0aGlzIFJlZHV4IGRvY3MgcGFnZToqKlxuICogKipodHRwczovL3JlZHV4LmpzLm9yZy9pbnRyb2R1Y3Rpb24vd2h5LXJ0ay1pcy1yZWR1eC10b2RheSoqXG4gKlxuICogYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIFJlZHV4IFRvb2xraXQgaXMgYW4gaW1wcm92ZWQgdmVyc2lvbiBvZiBgY3JlYXRlU3RvcmVgIHRoYXRcbiAqIHNpbXBsaWZpZXMgc2V0dXAgYW5kIGhlbHBzIGF2b2lkIGNvbW1vbiBidWdzLlxuICpcbiAqIFlvdSBzaG91bGQgbm90IGJlIHVzaW5nIHRoZSBgcmVkdXhgIGNvcmUgcGFja2FnZSBieSBpdHNlbGYgdG9kYXksIGV4Y2VwdCBmb3IgbGVhcm5pbmcgcHVycG9zZXMuXG4gKiBUaGUgYGNyZWF0ZVN0b3JlYCBtZXRob2QgZnJvbSB0aGUgY29yZSBgcmVkdXhgIHBhY2thZ2Ugd2lsbCBub3QgYmUgcmVtb3ZlZCwgYnV0IHdlIGVuY291cmFnZVxuICogYWxsIHVzZXJzIHRvIG1pZ3JhdGUgdG8gdXNpbmcgUmVkdXggVG9vbGtpdCBmb3IgYWxsIFJlZHV4IGNvZGUuXG4gKlxuICogSWYgeW91IHdhbnQgdG8gdXNlIGBjcmVhdGVTdG9yZWAgd2l0aG91dCB0aGlzIHZpc3VhbCBkZXByZWNhdGlvbiB3YXJuaW5nLCB1c2VcbiAqIHRoZSBgbGVnYWN5X2NyZWF0ZVN0b3JlYCBpbXBvcnQgaW5zdGVhZDpcbiAqXG4gKiBgaW1wb3J0IHsgbGVnYWN5X2NyZWF0ZVN0b3JlIGFzIGNyZWF0ZVN0b3JlfSBmcm9tICdyZWR1eCdgXG4gKlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgwKSA6ICdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNjcmVhdGluZy1hLXN0b3JlLXdpdGgtZW5oYW5jZXJzIGZvciBhbiBleGFtcGxlLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBcIkV4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGVuaGFuY2VyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIpIDogXCJFeHBlY3RlZCB0aGUgcm9vdCByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YocmVkdWNlcikgKyBcIidcIik7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBcIkV4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGxpc3RlbmVyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiAnWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2KSA6ICdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IFwiQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICdcIiArIGtpbmRPZihhY3Rpb24pICsgXCInLiBZb3UgbWF5IG5lZWQgdG8gYWRkIG1pZGRsZXdhcmUgdG8geW91ciBzdG9yZSBzZXR1cCB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgb3RoZXIgdmFsdWVzLCBzdWNoIGFzICdyZWR1eC10aHVuaycgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIGZ1bmN0aW9ucy4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI21pZGRsZXdhcmUgYW5kIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC02LWFzeW5jLWxvZ2ljI3VzaW5nLXRoZS1yZWR1eC10aHVuay1taWRkbGV3YXJlIGZvciBleGFtcGxlcy5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDgpIDogJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYW4gYWN0aW9uIHR5cGUgc3RyaW5nIGNvbnN0YW50LicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5KSA6ICdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTApIDogXCJFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihuZXh0UmVkdWNlcikpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMSkgOiBcIkV4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2Yob2JzZXJ2ZXIpICsgXCInXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKlxuICogKipXZSByZWNvbW1lbmQgdXNpbmcgYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIHRoZVxuICogYEByZWR1eGpzL3Rvb2xraXRgIHBhY2thZ2UqKiwgd2hpY2ggcmVwbGFjZXMgYGNyZWF0ZVN0b3JlYDpcbiAqICoqaHR0cHM6Ly9yZWR1eC5qcy5vcmcvaW50cm9kdWN0aW9uL3doeS1ydGstaXMtcmVkdXgtdG9kYXkqKlxuICpcbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG52YXIgbGVnYWN5X2NyZWF0ZVN0b3JlID0gY3JlYXRlU3RvcmU7XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIGtpbmRPZihpbnB1dFN0YXRlKSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlICdcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIicgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlIFwiICsgKGFjdGlvblR5cGUgPyBcIlxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIDogJyh1bmtub3duIHR5cGUpJykgKyBcIiwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBfa2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJ1wiICsga2luZE9mKGFjdGlvbkNyZWF0b3JzKSArIFwiJy4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiAnRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpLCB7fSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlLCBsZWdhY3lfY3JlYXRlU3RvcmUgfTtcbiIsIi8qKiBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIHBvdGVudGlhbCBcImV4dHJhIGFyZ3VtZW50XCIgdmFsdWUgdG8gYmUgaW5qZWN0ZWQgbGF0ZXIsXHJcbiAqIGFuZCByZXR1cm5zIGFuIGluc3RhbmNlIG9mIHRoZSB0aHVuayBtaWRkbGV3YXJlIHRoYXQgdXNlcyB0aGF0IHZhbHVlXHJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgLy8gU3RhbmRhcmQgUmVkdXggbWlkZGxld2FyZSBkZWZpbml0aW9uIHBhdHRlcm46XG4gIC8vIFNlZTogaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjd3JpdGluZy1jdXN0b20tbWlkZGxld2FyZVxuICB2YXIgbWlkZGxld2FyZSA9IGZ1bmN0aW9uIG1pZGRsZXdhcmUoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIC8vIFRoZSB0aHVuayBtaWRkbGV3YXJlIGxvb2tzIGZvciBhbnkgZnVuY3Rpb25zIHRoYXQgd2VyZSBwYXNzZWQgdG8gYHN0b3JlLmRpc3BhdGNoYC5cbiAgICAgICAgLy8gSWYgdGhpcyBcImFjdGlvblwiIGlzIHJlYWxseSBhIGZ1bmN0aW9uLCBjYWxsIGl0IGFuZCByZXR1cm4gdGhlIHJlc3VsdC5cbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBJbmplY3QgdGhlIHN0b3JlJ3MgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBtZXRob2RzLCBhcyB3ZWxsIGFzIGFueSBcImV4dHJhIGFyZ1wiXG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcGFzcyB0aGUgYWN0aW9uIGRvd24gdGhlIG1pZGRsZXdhcmUgY2hhaW4gYXMgdXN1YWxcblxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIG1pZGRsZXdhcmU7XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpOyAvLyBBdHRhY2ggdGhlIGZhY3RvcnkgZnVuY3Rpb24gc28gdXNlcnMgY2FuIGNyZWF0ZSBhIGN1c3RvbWl6ZWQgdmVyc2lvblxuLy8gd2l0aCB3aGF0ZXZlciBcImV4dHJhIGFyZ1wiIHRoZXkgd2FudCB0byBpbmplY3QgaW50byB0aGVpciB0aHVua3NcblxudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcclxuICAgICAgICB0b1tqXSA9IGZyb21baV07XHJcbiAgICByZXR1cm4gdG87XHJcbn07XHJcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XHJcbnZhciBfX2RlZlByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XHJcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xyXG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XHJcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcclxudmFyIF9fZGVmTm9ybWFsUHJvcCA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHsgcmV0dXJuIGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTsgfTtcclxudmFyIF9fc3ByZWFkVmFsdWVzID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcclxuICAgICAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXHJcbiAgICAgICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcclxuICAgIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2MgPSBfX2dldE93blByb3BTeW1ib2xzKGIpOyBfaSA8IF9jLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcHJvcCA9IF9jW19pXTtcclxuICAgICAgICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxyXG4gICAgICAgICAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiBhO1xyXG59O1xyXG52YXIgX19zcHJlYWRQcm9wcyA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTsgfTtcclxudmFyIF9fYXN5bmMgPSBmdW5jdGlvbiAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHZhciBmdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHN0ZXAgPSBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9O1xyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG4vLyBzcmMvaW5kZXgudHNcclxuaW1wb3J0IHsgZW5hYmxlRVM1IH0gZnJvbSBcImltbWVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBkZWZhdWx0IGFzIGRlZmF1bHQyLCBjdXJyZW50IGFzIGN1cnJlbnQyLCBmcmVlemUsIG9yaWdpbmFsLCBpc0RyYWZ0IGFzIGlzRHJhZnQ0IH0gZnJvbSBcImltbWVyXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIGFzIGNyZWF0ZVNlbGVjdG9yMiB9IGZyb20gXCJyZXNlbGVjdFwiO1xyXG4vLyBzcmMvY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IudHNcclxuaW1wb3J0IHsgY3VycmVudCwgaXNEcmFmdCB9IGZyb20gXCJpbW1lclwiO1xyXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gXCJyZXNlbGVjdFwiO1xyXG52YXIgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICB2YXIgc2VsZWN0b3IgPSBjcmVhdGVTZWxlY3Rvci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xyXG4gICAgdmFyIHdyYXBwZWRTZWxlY3RvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhciByZXN0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgcmVzdFtfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaXNEcmFmdCh2YWx1ZSkgPyBjdXJyZW50KHZhbHVlKSA6IHZhbHVlXSwgcmVzdCkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiB3cmFwcGVkU2VsZWN0b3I7XHJcbn07XHJcbi8vIHNyYy9jb25maWd1cmVTdG9yZS50c1xyXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgY29tcG9zZSBhcyBjb21wb3NlMiwgYXBwbHlNaWRkbGV3YXJlLCBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwicmVkdXhcIjtcclxuLy8gc3JjL2RldnRvb2xzRXh0ZW5zaW9uLnRzXHJcbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tIFwicmVkdXhcIjtcclxudmFyIGNvbXBvc2VXaXRoRGV2VG9vbHMgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIDogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcclxuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgIHJldHVybiBjb21wb3NlO1xyXG4gICAgcmV0dXJuIGNvbXBvc2UuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxufTtcclxudmFyIGRldlRvb2xzRW5oYW5jZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fID8gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vb3AyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vb3AyO1xyXG4gICAgfTtcclxufTtcclxuLy8gc3JjL2lzUGxhaW5PYmplY3QudHNcclxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xyXG4gICAgaWYgKHByb3RvID09PSBudWxsKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgdmFyIGJhc2VQcm90byA9IHByb3RvO1xyXG4gICAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihiYXNlUHJvdG8pICE9PSBudWxsKSB7XHJcbiAgICAgICAgYmFzZVByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGJhc2VQcm90byk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJvdG8gPT09IGJhc2VQcm90bztcclxufVxyXG4vLyBzcmMvZ2V0RGVmYXVsdE1pZGRsZXdhcmUudHNcclxuaW1wb3J0IHRodW5rTWlkZGxld2FyZSBmcm9tIFwicmVkdXgtdGh1bmtcIjtcclxuLy8gc3JjL3V0aWxzLnRzXHJcbmltcG9ydCBjcmVhdGVOZXh0U3RhdGUsIHsgaXNEcmFmdGFibGUgfSBmcm9tIFwiaW1tZXJcIjtcclxuZnVuY3Rpb24gZ2V0VGltZU1lYXN1cmVVdGlscyhtYXhEZWxheSwgZm5OYW1lKSB7XHJcbiAgICB2YXIgZWxhcHNlZCA9IDA7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1lYXN1cmVUaW1lOiBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0ZWQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmluaXNoZWQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgZWxhcHNlZCArPSBmaW5pc2hlZCAtIHN0YXJ0ZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHdhcm5JZkV4Y2VlZGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChlbGFwc2VkID4gbWF4RGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybihmbk5hbWUgKyBcIiB0b29rIFwiICsgZWxhcHNlZCArIFwibXMsIHdoaWNoIGlzIG1vcmUgdGhhbiB0aGUgd2FybmluZyB0aHJlc2hvbGQgb2YgXCIgKyBtYXhEZWxheSArIFwibXMuIFxcbklmIHlvdXIgc3RhdGUgb3IgYWN0aW9ucyBhcmUgdmVyeSBsYXJnZSwgeW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhlIG1pZGRsZXdhcmUgYXMgaXQgbWlnaHQgY2F1c2UgdG9vIG11Y2ggb2YgYSBzbG93ZG93biBpbiBkZXZlbG9wbWVudCBtb2RlLiBTZWUgaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvZ2V0RGVmYXVsdE1pZGRsZXdhcmUgZm9yIGluc3RydWN0aW9ucy5cXG5JdCBpcyBkaXNhYmxlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcywgc28geW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhhdC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbnZhciBNaWRkbGV3YXJlQXJyYXkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTWlkZGxld2FyZUFycmF5LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTWlkZGxld2FyZUFycmF5KCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuYXBwbHkodGhpcywgYXJncykgfHwgdGhpcztcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIE1pZGRsZXdhcmVBcnJheS5wcm90b3R5cGUpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNaWRkbGV3YXJlQXJyYXksIFN5bWJvbC5zcGVjaWVzLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNaWRkbGV3YXJlQXJyYXk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5jb25jYXQuYXBwbHkodGhpcywgYXJyKTtcclxuICAgIH07XHJcbiAgICBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyclswXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoTWlkZGxld2FyZUFycmF5LmJpbmQuYXBwbHkoTWlkZGxld2FyZUFycmF5LCBfX3NwcmVhZEFycmF5KFt2b2lkIDBdLCBhcnJbMF0uY29uY2F0KHRoaXMpKSkpKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgKE1pZGRsZXdhcmVBcnJheS5iaW5kLmFwcGx5KE1pZGRsZXdhcmVBcnJheSwgX19zcHJlYWRBcnJheShbdm9pZCAwXSwgYXJyLmNvbmNhdCh0aGlzKSkpKSgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNaWRkbGV3YXJlQXJyYXk7XHJcbn0oQXJyYXkpKTtcclxuZnVuY3Rpb24gZnJlZXplRHJhZnRhYmxlKHZhbCkge1xyXG4gICAgcmV0dXJuIGlzRHJhZnRhYmxlKHZhbCkgPyBjcmVhdGVOZXh0U3RhdGUodmFsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB9KSA6IHZhbDtcclxufVxyXG4vLyBzcmMvaW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLnRzXHJcbnZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCI7XHJcbnZhciBwcmVmaXggPSBcIkludmFyaWFudCBmYWlsZWRcIjtcclxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKGNvbmRpdGlvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCBcIlwiKSk7XHJcbn1cclxuZnVuY3Rpb24gc3RyaW5naWZ5KG9iaiwgc2VyaWFsaXplciwgaW5kZW50LCBkZWN5Y2xlcikge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSwgaW5kZW50KTtcclxufVxyXG5mdW5jdGlvbiBnZXRTZXJpYWxpemUoc2VyaWFsaXplciwgZGVjeWNsZXIpIHtcclxuICAgIHZhciBzdGFjayA9IFtdLCBrZXlzID0gW107XHJcbiAgICBpZiAoIWRlY3ljbGVyKVxyXG4gICAgICAgIGRlY3ljbGVyID0gZnVuY3Rpb24gKF8sIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChzdGFja1swXSA9PT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbQ2lyY3VsYXIgfl1cIjtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW0NpcmN1bGFyIH4uXCIgKyBrZXlzLnNsaWNlKDAsIHN0YWNrLmluZGV4T2YodmFsdWUpKS5qb2luKFwiLlwiKSArIFwiXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgdGhpc1BvcyA9IHN0YWNrLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgIH50aGlzUG9zID8gc3RhY2suc3BsaWNlKHRoaXNQb3MgKyAxKSA6IHN0YWNrLnB1c2godGhpcyk7XHJcbiAgICAgICAgICAgIH50aGlzUG9zID8ga2V5cy5zcGxpY2UodGhpc1BvcywgSW5maW5pdHksIGtleSkgOiBrZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgaWYgKH5zdGFjay5pbmRleE9mKHZhbHVlKSlcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZGVjeWNsZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBzdGFjay5wdXNoKHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gc2VyaWFsaXplciA9PSBudWxsID8gdmFsdWUgOiBzZXJpYWxpemVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzSW1tdXRhYmxlRGVmYXVsdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PSBudWxsIHx8IE9iamVjdC5pc0Zyb3plbih2YWx1ZSk7XHJcbn1cclxuZnVuY3Rpb24gdHJhY2tGb3JNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmopIHtcclxuICAgIHZhciB0cmFja2VkUHJvcGVydGllcyA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRldGVjdE11dGF0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgdHJhY2tlZFByb3BlcnRpZXMsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmosIHBhdGgpIHtcclxuICAgIGlmIChpZ25vcmVQYXRocyA9PT0gdm9pZCAwKSB7IGlnbm9yZVBhdGhzID0gW107IH1cclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIHZhciB0cmFja2VkID0geyB2YWx1ZTogb2JqIH07XHJcbiAgICBpZiAoIWlzSW1tdXRhYmxlKG9iaikpIHtcclxuICAgICAgICB0cmFja2VkLmNoaWxkcmVuID0ge307XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICAgICAgaWYgKGlnbm9yZVBhdGhzLmxlbmd0aCAmJiBpZ25vcmVQYXRocy5pbmRleE9mKGNoaWxkUGF0aCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0cmFja2VkLmNoaWxkcmVuW2tleV0gPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmpba2V5XSwgY2hpbGRQYXRoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJhY2tlZDtcclxufVxyXG5mdW5jdGlvbiBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydHksIG9iaiwgc2FtZVBhcmVudFJlZiwgcGF0aCkge1xyXG4gICAgaWYgKGlnbm9yZVBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlUGF0aHMgPSBbXTsgfVxyXG4gICAgaWYgKHNhbWVQYXJlbnRSZWYgPT09IHZvaWQgMCkgeyBzYW1lUGFyZW50UmVmID0gZmFsc2U7IH1cclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIHZhciBwcmV2T2JqID0gdHJhY2tlZFByb3BlcnR5ID8gdHJhY2tlZFByb3BlcnR5LnZhbHVlIDogdm9pZCAwO1xyXG4gICAgdmFyIHNhbWVSZWYgPSBwcmV2T2JqID09PSBvYmo7XHJcbiAgICBpZiAoc2FtZVBhcmVudFJlZiAmJiAhc2FtZVJlZiAmJiAhTnVtYmVyLmlzTmFOKG9iaikpIHtcclxuICAgICAgICByZXR1cm4geyB3YXNNdXRhdGVkOiB0cnVlLCBwYXRoOiBwYXRoIH07XHJcbiAgICB9XHJcbiAgICBpZiAoaXNJbW11dGFibGUocHJldk9iaikgfHwgaXNJbW11dGFibGUob2JqKSkge1xyXG4gICAgICAgIHJldHVybiB7IHdhc011dGF0ZWQ6IGZhbHNlIH07XHJcbiAgICB9XHJcbiAgICB2YXIga2V5c1RvRGV0ZWN0ID0ge307XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuKSB7XHJcbiAgICAgICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIGtleSBpbiBrZXlzVG9EZXRlY3QpIHtcclxuICAgICAgICB2YXIgY2hpbGRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICBpZiAoaWdub3JlUGF0aHMubGVuZ3RoICYmIGlnbm9yZVBhdGhzLmluZGV4T2YoY2hpbGRQYXRoKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydHkuY2hpbGRyZW5ba2V5XSwgb2JqW2tleV0sIHNhbWVSZWYsIGNoaWxkUGF0aCk7XHJcbiAgICAgICAgaWYgKHJlc3VsdC53YXNNdXRhdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogZmFsc2UgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIG5leHQoYWN0aW9uKTsgfTsgfTsgfTtcclxuICAgIH1cclxuICAgIHZhciBfYyA9IG9wdGlvbnMuaXNJbW11dGFibGUsIGlzSW1tdXRhYmxlID0gX2MgPT09IHZvaWQgMCA/IGlzSW1tdXRhYmxlRGVmYXVsdCA6IF9jLCBpZ25vcmVkUGF0aHMgPSBvcHRpb25zLmlnbm9yZWRQYXRocywgX2QgPSBvcHRpb25zLndhcm5BZnRlciwgd2FybkFmdGVyID0gX2QgPT09IHZvaWQgMCA/IDMyIDogX2QsIGlnbm9yZSA9IG9wdGlvbnMuaWdub3JlO1xyXG4gICAgaWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzIHx8IGlnbm9yZTtcclxuICAgIHZhciB0cmFjayA9IHRyYWNrRm9yTXV0YXRpb25zLmJpbmQobnVsbCwgaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocyk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgdmFyIGdldFN0YXRlID0gX2MuZ2V0U3RhdGU7XHJcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICB2YXIgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsIFwiSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlXCIpO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnQoIXJlc3VsdC53YXNNdXRhdGVkLCBcIkEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGJldHdlZW4gZGlzcGF0Y2hlcywgaW4gdGhlIHBhdGggJ1wiICsgKHJlc3VsdC5wYXRoIHx8IFwiXCIpICsgXCInLiAgVGhpcyBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgZGlzcGF0Y2hlZEFjdGlvbiA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Lndhc011dGF0ZWQgJiYgaW52YXJpYW50KCFyZXN1bHQud2FzTXV0YXRlZCwgXCJBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBpbnNpZGUgYSBkaXNwYXRjaCwgaW4gdGhlIHBhdGg6IFwiICsgKHJlc3VsdC5wYXRoIHx8IFwiXCIpICsgXCIuIFRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoZSBhY3Rpb24gXCIgKyBzdHJpbmdpZnkoYWN0aW9uKSArIFwiLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoZWRBY3Rpb247XHJcbiAgICAgICAgfTsgfTtcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL3NlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZS50c1xyXG5mdW5jdGlvbiBpc1BsYWluKHZhbCkge1xyXG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xyXG4gICAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgfHwgdHlwZSA9PT0gXCJudW1iZXJcIiB8fCBBcnJheS5pc0FycmF5KHZhbCkgfHwgaXNQbGFpbk9iamVjdCh2YWwpO1xyXG59XHJcbmZ1bmN0aW9uIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZSh2YWx1ZSwgcGF0aCwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocykge1xyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgaWYgKGlzU2VyaWFsaXphYmxlID09PSB2b2lkIDApIHsgaXNTZXJpYWxpemFibGUgPSBpc1BsYWluOyB9XHJcbiAgICBpZiAoaWdub3JlZFBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlZFBhdGhzID0gW107IH1cclxuICAgIHZhciBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcclxuICAgIGlmICghaXNTZXJpYWxpemFibGUodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAga2V5UGF0aDogcGF0aCB8fCBcIjxyb290PlwiLFxyXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHZhciBlbnRyaWVzID0gZ2V0RW50cmllcyAhPSBudWxsID8gZ2V0RW50cmllcyh2YWx1ZSkgOiBPYmplY3QuZW50cmllcyh2YWx1ZSk7XHJcbiAgICB2YXIgaGFzSWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzLmxlbmd0aCA+IDA7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGVudHJpZXNfMSA9IGVudHJpZXM7IF9pIDwgZW50cmllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBfYyA9IGVudHJpZXNfMVtfaV0sIGtleSA9IF9jWzBdLCBuZXN0ZWRWYWx1ZSA9IF9jWzFdO1xyXG4gICAgICAgIHZhciBuZXN0ZWRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICBpZiAoaGFzSWdub3JlZFBhdGhzICYmIGlnbm9yZWRQYXRocy5pbmRleE9mKG5lc3RlZFBhdGgpID49IDApIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNTZXJpYWxpemFibGUobmVzdGVkVmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBrZXlQYXRoOiBuZXN0ZWRQYXRoLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IG5lc3RlZFZhbHVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgbmVzdGVkVmFsdWUgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgZm91bmROZXN0ZWRTZXJpYWxpemFibGUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUobmVzdGVkVmFsdWUsIG5lc3RlZFBhdGgsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMpO1xyXG4gICAgICAgICAgICBpZiAoZm91bmROZXN0ZWRTZXJpYWxpemFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIG5leHQoYWN0aW9uKTsgfTsgfTsgfTtcclxuICAgIH1cclxuICAgIHZhciBfYyA9IG9wdGlvbnMuaXNTZXJpYWxpemFibGUsIGlzU2VyaWFsaXphYmxlID0gX2MgPT09IHZvaWQgMCA/IGlzUGxhaW4gOiBfYywgZ2V0RW50cmllcyA9IG9wdGlvbnMuZ2V0RW50cmllcywgX2QgPSBvcHRpb25zLmlnbm9yZWRBY3Rpb25zLCBpZ25vcmVkQWN0aW9ucyA9IF9kID09PSB2b2lkIDAgPyBbXSA6IF9kLCBfZSA9IG9wdGlvbnMuaWdub3JlZEFjdGlvblBhdGhzLCBpZ25vcmVkQWN0aW9uUGF0aHMgPSBfZSA9PT0gdm9pZCAwID8gW1wibWV0YS5hcmdcIiwgXCJtZXRhLmJhc2VRdWVyeU1ldGFcIl0gOiBfZSwgX2YgPSBvcHRpb25zLmlnbm9yZWRQYXRocywgaWdub3JlZFBhdGhzID0gX2YgPT09IHZvaWQgMCA/IFtdIDogX2YsIF9nID0gb3B0aW9ucy53YXJuQWZ0ZXIsIHdhcm5BZnRlciA9IF9nID09PSB2b2lkIDAgPyAzMiA6IF9nLCBfaCA9IG9wdGlvbnMuaWdub3JlU3RhdGUsIGlnbm9yZVN0YXRlID0gX2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX2gsIF9qID0gb3B0aW9ucy5pZ25vcmVBY3Rpb25zLCBpZ25vcmVBY3Rpb25zID0gX2ogPT09IHZvaWQgMCA/IGZhbHNlIDogX2o7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlQVBJKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBuZXh0KGFjdGlvbik7XHJcbiAgICAgICAgdmFyIG1lYXN1cmVVdGlscyA9IGdldFRpbWVNZWFzdXJlVXRpbHMod2FybkFmdGVyLCBcIlNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZVwiKTtcclxuICAgICAgICBpZiAoIWlnbm9yZUFjdGlvbnMgJiYgIShpZ25vcmVkQWN0aW9ucy5sZW5ndGggJiYgaWdub3JlZEFjdGlvbnMuaW5kZXhPZihhY3Rpb24udHlwZSkgIT09IC0xKSkge1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUoYWN0aW9uLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZEFjdGlvblBhdGhzKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleVBhdGggPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlLmtleVBhdGgsIHZhbHVlID0gZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiBhbiBhY3Rpb24sIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsIFwiXFxuVGFrZSBhIGxvb2sgYXQgdGhlIGxvZ2ljIHRoYXQgZGlzcGF0Y2hlZCB0aGlzIGFjdGlvbjogXCIsIGFjdGlvbiwgXCJcXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9hY3Rpb25zI3doeS1zaG91bGQtdHlwZS1iZS1hLXN0cmluZy1vci1hdC1sZWFzdC1zZXJpYWxpemFibGUtd2h5LXNob3VsZC1teS1hY3Rpb24tdHlwZXMtYmUtY29uc3RhbnRzKVwiLCBcIlxcbihUbyBhbGxvdyBub24tc2VyaWFsaXphYmxlIHZhbHVlcyBzZWU6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvdXNhZ2UvdXNhZ2UtZ3VpZGUjd29ya2luZy13aXRoLW5vbi1zZXJpYWxpemFibGUtZGF0YSlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlnbm9yZVN0YXRlKSB7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBzdG9yZUFQSS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShzdGF0ZSwgXCJcIiwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleVBhdGggPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCwgdmFsdWUgPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gdGhlIHN0YXRlLCBpbiB0aGUgcGF0aDogYFwiICsga2V5UGF0aCArIFwiYC4gVmFsdWU6XCIsIHZhbHVlLCBcIlxcblRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoaXMgYWN0aW9uIHR5cGU6IFwiICsgYWN0aW9uLnR5cGUgKyBcIi5cXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9vcmdhbml6aW5nLXN0YXRlI2Nhbi1pLXB1dC1mdW5jdGlvbnMtcHJvbWlzZXMtb3Itb3RoZXItbm9uLXNlcmlhbGl6YWJsZS1pdGVtcy1pbi1teS1zdG9yZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07IH07IH07XHJcbn1cclxuLy8gc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzXHJcbmZ1bmN0aW9uIGlzQm9vbGVhbih4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiYm9vbGVhblwiO1xyXG59XHJcbmZ1bmN0aW9uIGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucyk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICB2YXIgX2MgPSBvcHRpb25zLnRodW5rLCB0aHVuayA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIF9kID0gb3B0aW9ucy5pbW11dGFibGVDaGVjaywgaW1tdXRhYmxlQ2hlY2sgPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kLCBfZSA9IG9wdGlvbnMuc2VyaWFsaXphYmxlQ2hlY2ssIHNlcmlhbGl6YWJsZUNoZWNrID0gX2UgPT09IHZvaWQgMCA/IHRydWUgOiBfZTtcclxuICAgIHZhciBtaWRkbGV3YXJlQXJyYXkgPSBuZXcgTWlkZGxld2FyZUFycmF5KCk7XHJcbiAgICBpZiAodGh1bmspIHtcclxuICAgICAgICBpZiAoaXNCb29sZWFuKHRodW5rKSkge1xyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2godGh1bmtNaWRkbGV3YXJlLndpdGhFeHRyYUFyZ3VtZW50KHRodW5rLmV4dHJhQXJndW1lbnQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaWYgKGltbXV0YWJsZUNoZWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBpbW11dGFibGVPcHRpb25zID0ge307XHJcbiAgICAgICAgICAgIGlmICghaXNCb29sZWFuKGltbXV0YWJsZUNoZWNrKSkge1xyXG4gICAgICAgICAgICAgICAgaW1tdXRhYmxlT3B0aW9ucyA9IGltbXV0YWJsZUNoZWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS51bnNoaWZ0KGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShpbW11dGFibGVPcHRpb25zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzZXJpYWxpemFibGVDaGVjaykge1xyXG4gICAgICAgICAgICB2YXIgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICBpZiAoIWlzQm9vbGVhbihzZXJpYWxpemFibGVDaGVjaykpIHtcclxuICAgICAgICAgICAgICAgIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSBzZXJpYWxpemFibGVDaGVjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoc2VyaWFsaXphYmxlT3B0aW9ucykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBtaWRkbGV3YXJlQXJyYXk7XHJcbn1cclxuLy8gc3JjL2NvbmZpZ3VyZVN0b3JlLnRzXHJcbnZhciBJU19QUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiO1xyXG5mdW5jdGlvbiBjb25maWd1cmVTdG9yZShvcHRpb25zKSB7XHJcbiAgICB2YXIgY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlID0gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpO1xyXG4gICAgdmFyIF9jID0gb3B0aW9ucyB8fCB7fSwgX2QgPSBfYy5yZWR1Y2VyLCByZWR1Y2VyID0gX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLCBfZSA9IF9jLm1pZGRsZXdhcmUsIG1pZGRsZXdhcmUgPSBfZSA9PT0gdm9pZCAwID8gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKCkgOiBfZSwgX2YgPSBfYy5kZXZUb29scywgZGV2VG9vbHMgPSBfZiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9mLCBfZyA9IF9jLnByZWxvYWRlZFN0YXRlLCBwcmVsb2FkZWRTdGF0ZSA9IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZywgX2ggPSBfYy5lbmhhbmNlcnMsIGVuaGFuY2VycyA9IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaDtcclxuICAgIHZhciByb290UmVkdWNlcjtcclxuICAgIGlmICh0eXBlb2YgcmVkdWNlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgcm9vdFJlZHVjZXIgPSByZWR1Y2VyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZWR1Y2VyKSkge1xyXG4gICAgICAgIHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHJlZHVjZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcInJlZHVjZXJcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LCBhbmQgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCBvZiBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGNvbWJpbmVSZWR1Y2VycycpO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpbmFsTWlkZGxld2FyZSA9IG1pZGRsZXdhcmU7XHJcbiAgICBpZiAodHlwZW9mIGZpbmFsTWlkZGxld2FyZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgZmluYWxNaWRkbGV3YXJlID0gZmluYWxNaWRkbGV3YXJlKGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSk7XHJcbiAgICAgICAgaWYgKCFJU19QUk9EVUNUSU9OICYmICFBcnJheS5pc0FycmF5KGZpbmFsTWlkZGxld2FyZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2hlbiB1c2luZyBhIG1pZGRsZXdhcmUgYnVpbGRlciBmdW5jdGlvbiwgYW4gYXJyYXkgb2YgbWlkZGxld2FyZSBtdXN0IGJlIHJldHVybmVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghSVNfUFJPRFVDVElPTiAmJiBmaW5hbE1pZGRsZXdhcmUuc29tZShmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gdHlwZW9mIGl0ZW0gIT09IFwiZnVuY3Rpb25cIjsgfSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlYWNoIG1pZGRsZXdhcmUgcHJvdmlkZWQgdG8gY29uZmlndXJlU3RvcmUgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIG1pZGRsZXdhcmVFbmhhbmNlciA9IGFwcGx5TWlkZGxld2FyZS5hcHBseSh2b2lkIDAsIGZpbmFsTWlkZGxld2FyZSk7XHJcbiAgICB2YXIgZmluYWxDb21wb3NlID0gY29tcG9zZTI7XHJcbiAgICBpZiAoZGV2VG9vbHMpIHtcclxuICAgICAgICBmaW5hbENvbXBvc2UgPSBjb21wb3NlV2l0aERldlRvb2xzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICAgICAgdHJhY2U6ICFJU19QUk9EVUNUSU9OXHJcbiAgICAgICAgfSwgdHlwZW9mIGRldlRvb2xzID09PSBcIm9iamVjdFwiICYmIGRldlRvb2xzKSk7XHJcbiAgICB9XHJcbiAgICB2YXIgc3RvcmVFbmhhbmNlcnMgPSBbbWlkZGxld2FyZUVuaGFuY2VyXTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGVuaGFuY2VycykpIHtcclxuICAgICAgICBzdG9yZUVuaGFuY2VycyA9IF9fc3ByZWFkQXJyYXkoW21pZGRsZXdhcmVFbmhhbmNlcl0sIGVuaGFuY2Vycyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgZW5oYW5jZXJzID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBzdG9yZUVuaGFuY2VycyA9IGVuaGFuY2VycyhzdG9yZUVuaGFuY2Vycyk7XHJcbiAgICB9XHJcbiAgICB2YXIgY29tcG9zZWRFbmhhbmNlciA9IGZpbmFsQ29tcG9zZS5hcHBseSh2b2lkIDAsIHN0b3JlRW5oYW5jZXJzKTtcclxuICAgIHJldHVybiBjcmVhdGVTdG9yZShyb290UmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGNvbXBvc2VkRW5oYW5jZXIpO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVBY3Rpb24udHNcclxuZnVuY3Rpb24gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVBY3Rpb24pIHtcclxuICAgIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcmVwYXJlQWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBwcmVwYXJlZCA9IHByZXBhcmVBY3Rpb24uYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgICAgICAgICAgaWYgKCFwcmVwYXJlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJlcGFyZUFjdGlvbiBkaWQgbm90IHJldHVybiBhbiBvYmplY3RcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBwcmVwYXJlZC5wYXlsb2FkXHJcbiAgICAgICAgICAgIH0sIFwibWV0YVwiIGluIHByZXBhcmVkICYmIHsgbWV0YTogcHJlcGFyZWQubWV0YSB9KSwgXCJlcnJvclwiIGluIHByZXBhcmVkICYmIHsgZXJyb3I6IHByZXBhcmVkLmVycm9yIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBhcmdzWzBdIH07XHJcbiAgICB9XHJcbiAgICBhY3Rpb25DcmVhdG9yLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJcIiArIHR5cGU7IH07XHJcbiAgICBhY3Rpb25DcmVhdG9yLnR5cGUgPSB0eXBlO1xyXG4gICAgYWN0aW9uQ3JlYXRvci5tYXRjaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi50eXBlID09PSB0eXBlOyB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbkNyZWF0b3I7XHJcbn1cclxuZnVuY3Rpb24gaXNGU0EoYWN0aW9uKSB7XHJcbiAgICByZXR1cm4gaXNQbGFpbk9iamVjdChhY3Rpb24pICYmIHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBPYmplY3Qua2V5cyhhY3Rpb24pLmV2ZXJ5KGlzVmFsaWRLZXkpO1xyXG59XHJcbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XHJcbiAgICByZXR1cm4gW1widHlwZVwiLCBcInBheWxvYWRcIiwgXCJlcnJvclwiLCBcIm1ldGFcIl0uaW5kZXhPZihrZXkpID4gLTE7XHJcbn1cclxuZnVuY3Rpb24gZ2V0VHlwZShhY3Rpb25DcmVhdG9yKSB7XHJcbiAgICByZXR1cm4gXCJcIiArIGFjdGlvbkNyZWF0b3I7XHJcbn1cclxuLy8gc3JjL2NyZWF0ZVJlZHVjZXIudHNcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZTIsIHsgaXNEcmFmdCBhcyBpc0RyYWZ0MiwgaXNEcmFmdGFibGUgYXMgaXNEcmFmdGFibGUyIH0gZnJvbSBcImltbWVyXCI7XHJcbi8vIHNyYy9tYXBCdWlsZGVycy50c1xyXG5mdW5jdGlvbiBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhidWlsZGVyQ2FsbGJhY2spIHtcclxuICAgIHZhciBhY3Rpb25zTWFwID0ge307XHJcbiAgICB2YXIgYWN0aW9uTWF0Y2hlcnMgPSBbXTtcclxuICAgIHZhciBkZWZhdWx0Q2FzZVJlZHVjZXI7XHJcbiAgICB2YXIgYnVpbGRlciA9IHtcclxuICAgICAgICBhZGRDYXNlOiBmdW5jdGlvbiAodHlwZU9yQWN0aW9uQ3JlYXRvciwgcmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uTWF0Y2hlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGRNYXRjaGVyYFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09IFwic3RyaW5nXCIgPyB0eXBlT3JBY3Rpb25DcmVhdG9yIDogdHlwZU9yQWN0aW9uQ3JlYXRvci50eXBlO1xyXG4gICAgICAgICAgICBpZiAodHlwZSBpbiBhY3Rpb25zTWFwKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhZGRDYXNlIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbnNNYXBbdHlwZV0gPSByZWR1Y2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZE1hdGNoZXI6IGZ1bmN0aW9uIChtYXRjaGVyLCByZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRNYXRjaGVyYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbk1hdGNoZXJzLnB1c2goeyBtYXRjaGVyOiBtYXRjaGVyLCByZWR1Y2VyOiByZWR1Y2VyIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZERlZmF1bHRDYXNlOiBmdW5jdGlvbiAocmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHRDYXNlUmVkdWNlciA9IHJlZHVjZXI7XHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBidWlsZGVyQ2FsbGJhY2soYnVpbGRlcik7XHJcbiAgICByZXR1cm4gW2FjdGlvbnNNYXAsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXHJcbmZ1bmN0aW9uIGlzU3RhdGVGdW5jdGlvbih4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgbWFwT3JCdWlsZGVyQ2FsbGJhY2ssIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgIGlmIChhY3Rpb25NYXRjaGVycyA9PT0gdm9pZCAwKSB7IGFjdGlvbk1hdGNoZXJzID0gW107IH1cclxuICAgIHZhciBfYyA9IHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sobWFwT3JCdWlsZGVyQ2FsbGJhY2spIDogW21hcE9yQnVpbGRlckNhbGxiYWNrLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXSwgYWN0aW9uc01hcCA9IF9jWzBdLCBmaW5hbEFjdGlvbk1hdGNoZXJzID0gX2NbMV0sIGZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyID0gX2NbMl07XHJcbiAgICB2YXIgZ2V0SW5pdGlhbFN0YXRlO1xyXG4gICAgaWYgKGlzU3RhdGVGdW5jdGlvbihpbml0aWFsU3RhdGUpKSB7XHJcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJlZXplRHJhZnRhYmxlKGluaXRpYWxTdGF0ZSgpKTsgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBmcm96ZW5Jbml0aWFsU3RhdGVfMSA9IGZyZWV6ZURyYWZ0YWJsZShpbml0aWFsU3RhdGUpO1xyXG4gICAgICAgIGdldEluaXRpYWxTdGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb3plbkluaXRpYWxTdGF0ZV8xOyB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSBnZXRJbml0aWFsU3RhdGUoKTsgfVxyXG4gICAgICAgIHZhciBjYXNlUmVkdWNlcnMgPSBfX3NwcmVhZEFycmF5KFtcclxuICAgICAgICAgICAgYWN0aW9uc01hcFthY3Rpb24udHlwZV1cclxuICAgICAgICBdLCBmaW5hbEFjdGlvbk1hdGNoZXJzLmZpbHRlcihmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSBfYy5tYXRjaGVyO1xyXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgdmFyIHJlZHVjZXIyID0gX2MucmVkdWNlcjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZHVjZXIyO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBpZiAoY2FzZVJlZHVjZXJzLmZpbHRlcihmdW5jdGlvbiAoY3IpIHsgcmV0dXJuICEhY3I7IH0pLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlcnMgPSBbZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXJzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNTdGF0ZSwgY2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKGNhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNEcmFmdDIocHJldmlvdXNTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHJhZnQgPSBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghaXNEcmFmdGFibGUyKHByZXZpb3VzU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhc2VSZWR1Y2VyKHByZXZpb3VzU3RhdGUsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2aW91c1N0YXRlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkEgY2FzZSByZWR1Y2VyIG9uIGEgbm9uLWRyYWZ0YWJsZSB2YWx1ZSBtdXN0IG5vdCByZXR1cm4gdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZTIocHJldmlvdXNTdGF0ZSwgZnVuY3Rpb24gKGRyYWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICB9LCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICByZWR1Y2VyLmdldEluaXRpYWxTdGF0ZSA9IGdldEluaXRpYWxTdGF0ZTtcclxuICAgIHJldHVybiByZWR1Y2VyO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVTbGljZS50c1xyXG5mdW5jdGlvbiBnZXRUeXBlMihzbGljZSwgYWN0aW9uS2V5KSB7XHJcbiAgICByZXR1cm4gc2xpY2UgKyBcIi9cIiArIGFjdGlvbktleTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTbGljZShvcHRpb25zKSB7XHJcbiAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZTtcclxuICAgIGlmICghbmFtZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImBuYW1lYCBpcyBhIHJlcXVpcmVkIG9wdGlvbiBmb3IgY3JlYXRlU2xpY2VcIik7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xyXG4gICAgICAgIGlmIChvcHRpb25zLmluaXRpYWxTdGF0ZSA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJZb3UgbXVzdCBwcm92aWRlIGFuIGBpbml0aWFsU3RhdGVgIHZhbHVlIHRoYXQgaXMgbm90IGB1bmRlZmluZWRgLiBZb3UgbWF5IGhhdmUgbWlzc3BlbGxlZCBgaW5pdGlhbFN0YXRlYFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gdHlwZW9mIG9wdGlvbnMuaW5pdGlhbFN0YXRlID09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnMuaW5pdGlhbFN0YXRlIDogZnJlZXplRHJhZnRhYmxlKG9wdGlvbnMuaW5pdGlhbFN0YXRlKTtcclxuICAgIHZhciByZWR1Y2VycyA9IG9wdGlvbnMucmVkdWNlcnMgfHwge307XHJcbiAgICB2YXIgcmVkdWNlck5hbWVzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xyXG4gICAgdmFyIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lID0ge307XHJcbiAgICB2YXIgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUgPSB7fTtcclxuICAgIHZhciBhY3Rpb25DcmVhdG9ycyA9IHt9O1xyXG4gICAgcmVkdWNlck5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHJlZHVjZXJOYW1lKSB7XHJcbiAgICAgICAgdmFyIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlID0gcmVkdWNlcnNbcmVkdWNlck5hbWVdO1xyXG4gICAgICAgIHZhciB0eXBlID0gZ2V0VHlwZTIobmFtZSwgcmVkdWNlck5hbWUpO1xyXG4gICAgICAgIHZhciBjYXNlUmVkdWNlcjtcclxuICAgICAgICB2YXIgcHJlcGFyZUNhbGxiYWNrO1xyXG4gICAgICAgIGlmIChcInJlZHVjZXJcIiBpbiBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSkge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlciA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLnJlZHVjZXI7XHJcbiAgICAgICAgICAgIHByZXBhcmVDYWxsYmFjayA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLnByZXBhcmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlciA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZVtyZWR1Y2VyTmFtZV0gPSBjYXNlUmVkdWNlcjtcclxuICAgICAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZVt0eXBlXSA9IGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIGFjdGlvbkNyZWF0b3JzW3JlZHVjZXJOYW1lXSA9IHByZXBhcmVDYWxsYmFjayA/IGNyZWF0ZUFjdGlvbih0eXBlLCBwcmVwYXJlQ2FsbGJhY2spIDogY3JlYXRlQWN0aW9uKHR5cGUpO1xyXG4gICAgfSk7XHJcbiAgICBmdW5jdGlvbiBidWlsZFJlZHVjZXIoKSB7XHJcbiAgICAgICAgdmFyIF9jID0gdHlwZW9mIG9wdGlvbnMuZXh0cmFSZWR1Y2VycyA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sob3B0aW9ucy5leHRyYVJlZHVjZXJzKSA6IFtvcHRpb25zLmV4dHJhUmVkdWNlcnNdLCBfZCA9IF9jWzBdLCBleHRyYVJlZHVjZXJzID0gX2QgPT09IHZvaWQgMCA/IHt9IDogX2QsIF9lID0gX2NbMV0sIGFjdGlvbk1hdGNoZXJzID0gX2UgPT09IHZvaWQgMCA/IFtdIDogX2UsIF9mID0gX2NbMl0sIGRlZmF1bHRDYXNlUmVkdWNlciA9IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZjtcclxuICAgICAgICB2YXIgZmluYWxDYXNlUmVkdWNlcnMgPSBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgZXh0cmFSZWR1Y2VycyksIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlKTtcclxuICAgICAgICByZXR1cm4gY3JlYXRlUmVkdWNlcihpbml0aWFsU3RhdGUsIGZpbmFsQ2FzZVJlZHVjZXJzLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyKTtcclxuICAgIH1cclxuICAgIHZhciBfcmVkdWNlcjtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICByZWR1Y2VyOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoIV9yZWR1Y2VyKVxyXG4gICAgICAgICAgICAgICAgX3JlZHVjZXIgPSBidWlsZFJlZHVjZXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuIF9yZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWN0aW9uczogYWN0aW9uQ3JlYXRvcnMsXHJcbiAgICAgICAgY2FzZVJlZHVjZXJzOiBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSxcclxuICAgICAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFfcmVkdWNlcilcclxuICAgICAgICAgICAgICAgIF9yZWR1Y2VyID0gYnVpbGRSZWR1Y2VyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfcmVkdWNlci5nZXRJbml0aWFsU3RhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9lbnRpdHlfc3RhdGUudHNcclxuZnVuY3Rpb24gZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpZHM6IFtdLFxyXG4gICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KCkge1xyXG4gICAgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKGFkZGl0aW9uYWxTdGF0ZSkge1xyXG4gICAgICAgIGlmIChhZGRpdGlvbmFsU3RhdGUgPT09IHZvaWQgMCkgeyBhZGRpdGlvbmFsU3RhdGUgPSB7fTsgfVxyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpLCBhZGRpdGlvbmFsU3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgZ2V0SW5pdGlhbFN0YXRlOiBnZXRJbml0aWFsU3RhdGUgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvc3RhdGVfc2VsZWN0b3JzLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKSB7XHJcbiAgICBmdW5jdGlvbiBnZXRTZWxlY3RvcnMoc2VsZWN0U3RhdGUpIHtcclxuICAgICAgICB2YXIgc2VsZWN0SWRzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5pZHM7IH07XHJcbiAgICAgICAgdmFyIHNlbGVjdEVudGl0aWVzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5lbnRpdGllczsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0QWxsID0gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0SWRzLCBzZWxlY3RFbnRpdGllcywgZnVuY3Rpb24gKGlkcywgZW50aXRpZXMpIHsgcmV0dXJuIGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiBlbnRpdGllc1tpZF07IH0pOyB9KTtcclxuICAgICAgICB2YXIgc2VsZWN0SWQgPSBmdW5jdGlvbiAoXywgaWQpIHsgcmV0dXJuIGlkOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RCeUlkID0gZnVuY3Rpb24gKGVudGl0aWVzLCBpZCkgeyByZXR1cm4gZW50aXRpZXNbaWRdOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RUb3RhbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgZnVuY3Rpb24gKGlkcykgeyByZXR1cm4gaWRzLmxlbmd0aDsgfSk7XHJcbiAgICAgICAgaWYgKCFzZWxlY3RTdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0SWRzOiBzZWxlY3RJZHMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RFbnRpdGllczogc2VsZWN0RW50aXRpZXMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RBbGw6IHNlbGVjdEFsbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdFRvdGFsOiBzZWxlY3RUb3RhbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RFbnRpdGllcyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2VsZWN0SWRzOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0SWRzKSxcclxuICAgICAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyxcclxuICAgICAgICAgICAgc2VsZWN0QWxsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0QWxsKSxcclxuICAgICAgICAgICAgc2VsZWN0VG90YWw6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RUb3RhbCksXHJcbiAgICAgICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGdldFNlbGVjdG9yczogZ2V0U2VsZWN0b3JzIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3N0YXRlX2FkYXB0ZXIudHNcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZTMsIHsgaXNEcmFmdCBhcyBpc0RyYWZ0MyB9IGZyb20gXCJpbW1lclwiO1xyXG5mdW5jdGlvbiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgdmFyIG9wZXJhdG9yID0gY3JlYXRlU3RhdGVPcGVyYXRvcihmdW5jdGlvbiAoXywgc3RhdGUpIHsgcmV0dXJuIG11dGF0b3Ioc3RhdGUpOyB9KTtcclxuICAgIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gb3BlcmF0b3Ioc3RhdGUsIHZvaWQgMCk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9wZXJhdGlvbihzdGF0ZSwgYXJnKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnMikge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNGU0EoYXJnMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBydW5NdXRhdG9yID0gZnVuY3Rpb24gKGRyYWZ0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc1BheWxvYWRBY3Rpb25Bcmd1bWVudChhcmcpKSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZy5wYXlsb2FkLCBkcmFmdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZywgZHJhZnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoaXNEcmFmdDMoc3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHJ1bk11dGF0b3Ioc3RhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlMyhzdGF0ZSwgcnVuTXV0YXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvdXRpbHMudHNcclxuZnVuY3Rpb24gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKSB7XHJcbiAgICB2YXIga2V5ID0gc2VsZWN0SWQoZW50aXR5KTtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYga2V5ID09PSB2b2lkIDApIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgZW50aXR5IHBhc3NlZCB0byB0aGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbiByZXR1cm5lZCB1bmRlZmluZWQuXCIsIFwiWW91IHNob3VsZCBwcm9iYWJseSBwcm92aWRlIHlvdXIgb3duIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24uXCIsIFwiVGhlIGVudGl0eSB0aGF0IHdhcyBwYXNzZWQ6XCIsIGVudGl0eSwgXCJUaGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbjpcIiwgc2VsZWN0SWQudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ga2V5O1xyXG59XHJcbmZ1bmN0aW9uIGVuc3VyZUVudGl0aWVzQXJyYXkoZW50aXRpZXMpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcclxuICAgICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVudGl0aWVzO1xyXG59XHJcbmZ1bmN0aW9uIHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSkge1xyXG4gICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgIHZhciBhZGRlZCA9IFtdO1xyXG4gICAgdmFyIHVwZGF0ZWQgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgbmV3RW50aXRpZXNfMSA9IG5ld0VudGl0aWVzOyBfaSA8IG5ld0VudGl0aWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzFbX2ldO1xyXG4gICAgICAgIHZhciBpZCA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKGlkIGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZWQucHVzaCh7IGlkOiBpZCwgY2hhbmdlczogZW50aXR5IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBbYWRkZWQsIHVwZGF0ZWRdO1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy91bnNvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKSB7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICB2YXIga2V5ID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKTtcclxuICAgICAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzIgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18yLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfMltfaV07XHJcbiAgICAgICAgICAgIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIHN0YXRlLmVudGl0aWVzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzMgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18zLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfM1tfaV07XHJcbiAgICAgICAgICAgIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIHN0YXRlLmlkcyA9IFtdO1xyXG4gICAgICAgIHN0YXRlLmVudGl0aWVzID0ge307XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZU9uZU11dGFibHkoa2V5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiByZW1vdmVNYW55TXV0YWJseShba2V5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlTWFueU11dGFibHkoa2V5cywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgZGlkTXV0YXRlID0gZmFsc2U7XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW2tleV07XHJcbiAgICAgICAgICAgICAgICBkaWRNdXRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGRpZE11dGF0ZSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMuZmlsdGVyKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gaWQgaW4gc3RhdGUuZW50aXRpZXM7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbE11dGFibHkoc3RhdGUpIHtcclxuICAgICAgICBPYmplY3QuYXNzaWduKHN0YXRlLCB7XHJcbiAgICAgICAgICAgIGlkczogW10sXHJcbiAgICAgICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdGFrZU5ld0tleShrZXlzLCB1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsMiA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbDIsIHVwZGF0ZS5jaGFuZ2VzKTtcclxuICAgICAgICB2YXIgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGhhc05ld0tleSA9IG5ld0tleSAhPT0gdXBkYXRlLmlkO1xyXG4gICAgICAgIGlmIChoYXNOZXdLZXkpIHtcclxuICAgICAgICAgICAga2V5c1t1cGRhdGUuaWRdID0gbmV3S2V5O1xyXG4gICAgICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNbbmV3S2V5XSA9IHVwZGF0ZWQ7XHJcbiAgICAgICAgcmV0dXJuIGhhc05ld0tleTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU9uZU11dGFibHkodXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVNYW55TXV0YWJseShbdXBkYXRlXSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgbmV3S2V5cyA9IHt9O1xyXG4gICAgICAgIHZhciB1cGRhdGVzUGVyRW50aXR5ID0ge307XHJcbiAgICAgICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1cGRhdGUuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlczogX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA/IHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXS5jaGFuZ2VzIDogbnVsbCksIHVwZGF0ZS5jaGFuZ2VzKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHVwZGF0ZXMgPSBPYmplY3QudmFsdWVzKHVwZGF0ZXNQZXJFbnRpdHkpO1xyXG4gICAgICAgIHZhciBkaWRNdXRhdGVFbnRpdGllcyA9IHVwZGF0ZXMubGVuZ3RoID4gMDtcclxuICAgICAgICBpZiAoZGlkTXV0YXRlRW50aXRpZXMpIHtcclxuICAgICAgICAgICAgdmFyIGRpZE11dGF0ZUlkcyA9IHVwZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uICh1cGRhdGUpIHsgcmV0dXJuIHRha2VOZXdLZXkobmV3S2V5cywgdXBkYXRlLCBzdGF0ZSk7IH0pLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIGlmIChkaWRNdXRhdGVJZHMpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmlkcyA9IE9iamVjdC5rZXlzKHN0YXRlLmVudGl0aWVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB1cHNlcnRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBzZXJ0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIF9jID0gc3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllcyhuZXdFbnRpdGllcywgc2VsZWN0SWQsIHN0YXRlKSwgYWRkZWQgPSBfY1swXSwgdXBkYXRlZCA9IF9jWzFdO1xyXG4gICAgICAgIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZWQsIHN0YXRlKTtcclxuICAgICAgICBhZGRNYW55TXV0YWJseShhZGRlZCwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW1vdmVBbGw6IGNyZWF0ZVNpbmdsZUFyZ3VtZW50U3RhdGVPcGVyYXRvcihyZW1vdmVBbGxNdXRhYmx5KSxcclxuICAgICAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXHJcbiAgICAgICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXHJcbiAgICAgICAgc2V0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0TWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldEFsbDogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRBbGxNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlT25lTXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwc2VydE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0TWFueU11dGFibHkpLFxyXG4gICAgICAgIHJlbW92ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVPbmVNdXRhYmx5KSxcclxuICAgICAgICByZW1vdmVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHJlbW92ZU1hbnlNdXRhYmx5KVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvc29ydGVkX3N0YXRlX2FkYXB0ZXIudHNcclxuZnVuY3Rpb24gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0KSB7XHJcbiAgICB2YXIgX2MgPSBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCksIHJlbW92ZU9uZSA9IF9jLnJlbW92ZU9uZSwgcmVtb3ZlTWFueSA9IF9jLnJlbW92ZU1hbnksIHJlbW92ZUFsbCA9IF9jLnJlbW92ZUFsbDtcclxuICAgIGZ1bmN0aW9uIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBhZGRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICB2YXIgbW9kZWxzID0gbmV3RW50aXRpZXMuZmlsdGVyKGZ1bmN0aW9uIChtb2RlbCkgeyByZXR1cm4gIShzZWxlY3RJZFZhbHVlKG1vZGVsLCBzZWxlY3RJZCkgaW4gc3RhdGUuZW50aXRpZXMpOyB9KTtcclxuICAgICAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBtZXJnZShtb2RlbHMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gc2V0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgaWYgKG5ld0VudGl0aWVzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBtZXJnZShuZXdFbnRpdGllcywgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldEFsbE11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xyXG4gICAgICAgIHN0YXRlLmlkcyA9IFtdO1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGFwcGxpZWRVcGRhdGVzID0gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB1cGRhdGVzXzEgPSB1cGRhdGVzOyBfaSA8IHVwZGF0ZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IHVwZGF0ZXNfMVtfaV07XHJcbiAgICAgICAgICAgIHZhciBlbnRpdHkgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xyXG4gICAgICAgICAgICBpZiAoIWVudGl0eSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXBwbGllZFVwZGF0ZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGVudGl0eSwgdXBkYXRlLmNoYW5nZXMpO1xyXG4gICAgICAgICAgICB2YXIgbmV3SWQgPSBzZWxlY3RJZChlbnRpdHkpO1xyXG4gICAgICAgICAgICBpZiAodXBkYXRlLmlkICE9PSBuZXdJZCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5lbnRpdGllc1tuZXdJZF0gPSBlbnRpdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFwcGxpZWRVcGRhdGVzKSB7XHJcbiAgICAgICAgICAgIHJlc29ydEVudGl0aWVzKHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYyA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2NbMF0sIHVwZGF0ZWQgPSBfY1sxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFyZUFycmF5c0VxdWFsKGEsIGIpIHtcclxuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aCAmJiBpIDwgYi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYVtpXSA9PT0gYltpXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG1lcmdlKG1vZGVscywgc3RhdGUpIHtcclxuICAgICAgICBtb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcclxuICAgICAgICAgICAgc3RhdGUuZW50aXRpZXNbc2VsZWN0SWQobW9kZWwpXSA9IG1vZGVsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJlc29ydEVudGl0aWVzKHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlc29ydEVudGl0aWVzKHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGFsbEVudGl0aWVzID0gT2JqZWN0LnZhbHVlcyhzdGF0ZS5lbnRpdGllcyk7XHJcbiAgICAgICAgYWxsRW50aXRpZXMuc29ydChzb3J0KTtcclxuICAgICAgICB2YXIgbmV3U29ydGVkSWRzID0gYWxsRW50aXRpZXMubWFwKHNlbGVjdElkKTtcclxuICAgICAgICB2YXIgaWRzID0gc3RhdGUuaWRzO1xyXG4gICAgICAgIGlmICghYXJlQXJyYXlzRXF1YWwoaWRzLCBuZXdTb3J0ZWRJZHMpKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmlkcyA9IG5ld1NvcnRlZElkcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlbW92ZU9uZTogcmVtb3ZlT25lLFxyXG4gICAgICAgIHJlbW92ZU1hbnk6IHJlbW92ZU1hbnksXHJcbiAgICAgICAgcmVtb3ZlQWxsOiByZW1vdmVBbGwsXHJcbiAgICAgICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXHJcbiAgICAgICAgc2V0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0TWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldEFsbDogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRBbGxNdXRhYmx5KSxcclxuICAgICAgICBhZGRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE1hbnlNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU1hbnlNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvY3JlYXRlX2FkYXB0ZXIudHNcclxuZnVuY3Rpb24gY3JlYXRlRW50aXR5QWRhcHRlcihvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgdmFyIF9jID0gX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgIHNvcnRDb21wYXJlcjogZmFsc2UsXHJcbiAgICAgICAgc2VsZWN0SWQ6IGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gaW5zdGFuY2UuaWQ7IH1cclxuICAgIH0sIG9wdGlvbnMpLCBzZWxlY3RJZCA9IF9jLnNlbGVjdElkLCBzb3J0Q29tcGFyZXIgPSBfYy5zb3J0Q29tcGFyZXI7XHJcbiAgICB2YXIgc3RhdGVGYWN0b3J5ID0gY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSgpO1xyXG4gICAgdmFyIHNlbGVjdG9yc0ZhY3RvcnkgPSBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5KCk7XHJcbiAgICB2YXIgc3RhdGVBZGFwdGVyID0gc29ydENvbXBhcmVyID8gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0Q29tcGFyZXIpIDogY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpO1xyXG4gICAgcmV0dXJuIF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICBzZWxlY3RJZDogc2VsZWN0SWQsXHJcbiAgICAgICAgc29ydENvbXBhcmVyOiBzb3J0Q29tcGFyZXJcclxuICAgIH0sIHN0YXRlRmFjdG9yeSksIHNlbGVjdG9yc0ZhY3RvcnkpLCBzdGF0ZUFkYXB0ZXIpO1xyXG59XHJcbi8vIHNyYy9uYW5vaWQudHNcclxudmFyIHVybEFscGhhYmV0ID0gXCJNb2R1bGVTeW1iaGFzT3duUHItMDEyMzQ1Njc4OUFCQ0RFRkdITlJWZmdjdGlVdnpfS3FZVEprTHhwWlhJalFXXCI7XHJcbnZhciBuYW5vaWQgPSBmdW5jdGlvbiAoc2l6ZSkge1xyXG4gICAgaWYgKHNpemUgPT09IHZvaWQgMCkgeyBzaXplID0gMjE7IH1cclxuICAgIHZhciBpZCA9IFwiXCI7XHJcbiAgICB2YXIgaSA9IHNpemU7XHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgaWQgKz0gdXJsQWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIDY0IHwgMF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWQ7XHJcbn07XHJcbi8vIHNyYy9jcmVhdGVBc3luY1RodW5rLnRzXHJcbnZhciBjb21tb25Qcm9wZXJ0aWVzID0gW1xyXG4gICAgXCJuYW1lXCIsXHJcbiAgICBcIm1lc3NhZ2VcIixcclxuICAgIFwic3RhY2tcIixcclxuICAgIFwiY29kZVwiXHJcbl07XHJcbnZhciBSZWplY3RXaXRoVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZWplY3RXaXRoVmFsdWUocGF5bG9hZCwgbWV0YSkge1xyXG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuICAgIH1cclxuICAgIHJldHVybiBSZWplY3RXaXRoVmFsdWU7XHJcbn0oKSk7XHJcbnZhciBGdWxmaWxsV2l0aE1ldGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGdWxmaWxsV2l0aE1ldGEocGF5bG9hZCwgbWV0YSkge1xyXG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuICAgIH1cclxuICAgIHJldHVybiBGdWxmaWxsV2l0aE1ldGE7XHJcbn0oKSk7XHJcbnZhciBtaW5pU2VyaWFsaXplRXJyb3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICB2YXIgc2ltcGxlRXJyb3IgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvbW1vblByb3BlcnRpZXNfMSA9IGNvbW1vblByb3BlcnRpZXM7IF9pIDwgY29tbW9uUHJvcGVydGllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcHJvcGVydHkgPSBjb21tb25Qcm9wZXJ0aWVzXzFbX2ldO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlW3Byb3BlcnR5XSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgc2ltcGxlRXJyb3JbcHJvcGVydHldID0gdmFsdWVbcHJvcGVydHldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzaW1wbGVFcnJvcjtcclxuICAgIH1cclxuICAgIHJldHVybiB7IG1lc3NhZ2U6IFN0cmluZyh2YWx1ZSkgfTtcclxufTtcclxuZnVuY3Rpb24gY3JlYXRlQXN5bmNUaHVuayh0eXBlUHJlZml4LCBwYXlsb2FkQ3JlYXRvciwgb3B0aW9ucykge1xyXG4gICAgdmFyIGZ1bGZpbGxlZCA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvZnVsZmlsbGVkXCIsIGZ1bmN0aW9uIChwYXlsb2FkLCByZXF1ZXN0SWQsIGFyZywgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxyXG4gICAgICAgIG1ldGE6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1ldGEgfHwge30pLCB7XHJcbiAgICAgICAgICAgIGFyZzogYXJnLFxyXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgcmVxdWVzdFN0YXR1czogXCJmdWxmaWxsZWRcIlxyXG4gICAgICAgIH0pXHJcbiAgICB9KTsgfSk7XHJcbiAgICB2YXIgcGVuZGluZyA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvcGVuZGluZ1wiLCBmdW5jdGlvbiAocmVxdWVzdElkLCBhcmcsIG1ldGEpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgcGF5bG9hZDogdm9pZCAwLFxyXG4gICAgICAgIG1ldGE6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1ldGEgfHwge30pLCB7XHJcbiAgICAgICAgICAgIGFyZzogYXJnLFxyXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgcmVxdWVzdFN0YXR1czogXCJwZW5kaW5nXCJcclxuICAgICAgICB9KVxyXG4gICAgfSk7IH0pO1xyXG4gICAgdmFyIHJlamVjdGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9yZWplY3RlZFwiLCBmdW5jdGlvbiAoZXJyb3IsIHJlcXVlc3RJZCwgYXJnLCBwYXlsb2FkLCBtZXRhKSB7IHJldHVybiAoe1xyXG4gICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXHJcbiAgICAgICAgZXJyb3I6IChvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplRXJyb3IgfHwgbWluaVNlcmlhbGl6ZUVycm9yKShlcnJvciB8fCBcIlJlamVjdGVkXCIpLFxyXG4gICAgICAgIG1ldGE6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1ldGEgfHwge30pLCB7XHJcbiAgICAgICAgICAgIGFyZzogYXJnLFxyXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgcmVqZWN0ZWRXaXRoVmFsdWU6ICEhcGF5bG9hZCxcclxuICAgICAgICAgICAgcmVxdWVzdFN0YXR1czogXCJyZWplY3RlZFwiLFxyXG4gICAgICAgICAgICBhYm9ydGVkOiAoZXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yLm5hbWUpID09PSBcIkFib3J0RXJyb3JcIixcclxuICAgICAgICAgICAgY29uZGl0aW9uOiAoZXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yLm5hbWUpID09PSBcIkNvbmRpdGlvbkVycm9yXCJcclxuICAgICAgICB9KVxyXG4gICAgfSk7IH0pO1xyXG4gICAgdmFyIGRpc3BsYXllZFdhcm5pbmcgPSBmYWxzZTtcclxuICAgIHZhciBBQyA9IHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgIT09IFwidW5kZWZpbmVkXCIgPyBBYm9ydENvbnRyb2xsZXIgOiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gY2xhc3NfMSgpIHtcclxuICAgICAgICAgICAgdGhpcy5zaWduYWwgPSB7XHJcbiAgICAgICAgICAgICAgICBhYm9ydGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaEV2ZW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uYWJvcnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVhc29uOiB2b2lkIDAsXHJcbiAgICAgICAgICAgICAgICB0aHJvd0lmQWJvcnRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkaXNwbGF5ZWRXYXJuaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheWVkV2FybmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiVGhpcyBwbGF0Zm9ybSBkb2VzIG5vdCBpbXBsZW1lbnQgQWJvcnRDb250cm9sbGVyLiBcXG5JZiB5b3Ugd2FudCB0byB1c2UgdGhlIEFib3J0Q29udHJvbGxlciB0byByZWFjdCB0byBgYWJvcnRgIGV2ZW50cywgcGxlYXNlIGNvbnNpZGVyIGltcG9ydGluZyBhIHBvbHlmaWxsIGxpa2UgJ2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC9kaXN0L2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC1vbmx5Jy5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBjbGFzc18xO1xyXG4gICAgfSgpKTtcclxuICAgIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoYXJnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhKSB7XHJcbiAgICAgICAgICAgIHZhciByZXF1ZXN0SWQgPSAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5pZEdlbmVyYXRvcikgPyBvcHRpb25zLmlkR2VuZXJhdG9yKGFyZykgOiBuYW5vaWQoKTtcclxuICAgICAgICAgICAgdmFyIGFib3J0Q29udHJvbGxlciA9IG5ldyBBQygpO1xyXG4gICAgICAgICAgICB2YXIgYWJvcnRSZWFzb247XHJcbiAgICAgICAgICAgIHZhciBhYm9ydGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChfLCByZWplY3QpIHsgcmV0dXJuIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlamVjdCh7IG5hbWU6IFwiQWJvcnRFcnJvclwiLCBtZXNzYWdlOiBhYm9ydFJlYXNvbiB8fCBcIkFib3J0ZWRcIiB9KTsgfSk7IH0pO1xyXG4gICAgICAgICAgICB2YXIgc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBhYm9ydChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGFydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRSZWFzb24gPSByZWFzb247XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHByb21pc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgZmluYWxBY3Rpb24sIGNvbmRpdGlvblJlc3VsdCwgZXJyXzEsIHNraXBEaXNwYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzAsIDQsICwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvblJlc3VsdCA9IChfYSA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuY29uZGl0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChvcHRpb25zLCBhcmcsIHsgZ2V0U3RhdGU6IGdldFN0YXRlLCBleHRyYTogZXh0cmEgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RoZW5hYmxlKGNvbmRpdGlvblJlc3VsdCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNvbmRpdGlvblJlc3VsdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uUmVzdWx0ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbmRpdGlvbkVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkFib3J0ZWQgZHVlIHRvIGNvbmRpdGlvbiBjYWxsYmFjayByZXR1cm5pbmcgZmFsc2UuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gocGVuZGluZyhyZXF1ZXN0SWQsIGFyZywgKF9iID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5nZXRQZW5kaW5nTWV0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwob3B0aW9ucywgeyByZXF1ZXN0SWQ6IHJlcXVlc3RJZCwgYXJnOiBhcmcgfSwgeyBnZXRTdGF0ZTogZ2V0U3RhdGUsIGV4dHJhOiBleHRyYSB9KSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmFjZShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydGVkUHJvbWlzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShwYXlsb2FkQ3JlYXRvcihhcmcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0V2l0aFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIG1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWplY3RXaXRoVmFsdWUodmFsdWUsIG1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbFdpdGhWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBtZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRnVsZmlsbFdpdGhNZXRhKHZhbHVlLCBtZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBGdWxmaWxsV2l0aE1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQucGF5bG9hZCwgcmVxdWVzdElkLCBhcmcsIHJlc3VsdC5tZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJfMSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IGVycl8xIGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlID8gcmVqZWN0ZWQobnVsbCwgcmVxdWVzdElkLCBhcmcsIGVycl8xLnBheWxvYWQsIGVycl8xLm1ldGEpIDogcmVqZWN0ZWQoZXJyXzEsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwRGlzcGF0Y2ggPSBvcHRpb25zICYmICFvcHRpb25zLmRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uICYmIHJlamVjdGVkLm1hdGNoKGZpbmFsQWN0aW9uKSAmJiBmaW5hbEFjdGlvbi5tZXRhLmNvbmRpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXBEaXNwYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChmaW5hbEFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmaW5hbEFjdGlvbl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb21pc2UsIHtcclxuICAgICAgICAgICAgICAgIGFib3J0OiBhYm9ydCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICB1bndyYXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHVud3JhcFJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY3Rpb25DcmVhdG9yLCB7XHJcbiAgICAgICAgcGVuZGluZzogcGVuZGluZyxcclxuICAgICAgICByZWplY3RlZDogcmVqZWN0ZWQsXHJcbiAgICAgICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXHJcbiAgICAgICAgdHlwZVByZWZpeDogdHlwZVByZWZpeFxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gdW53cmFwUmVzdWx0KGFjdGlvbikge1xyXG4gICAgaWYgKGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLnJlamVjdGVkV2l0aFZhbHVlKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLnBheWxvYWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoYWN0aW9uLmVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLmVycm9yO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xyXG59XHJcbmZ1bmN0aW9uIGlzVGhlbmFibGUodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG4vLyBzcmMvdHNIZWxwZXJzLnRzXHJcbnZhciBoYXNNYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gKHYpIHtcclxuICAgIHJldHVybiB2ICYmIHR5cGVvZiB2Lm1hdGNoID09PSBcImZ1bmN0aW9uXCI7XHJcbn07XHJcbi8vIHNyYy9tYXRjaGVycy50c1xyXG52YXIgbWF0Y2hlcyA9IGZ1bmN0aW9uIChtYXRjaGVyLCBhY3Rpb24pIHtcclxuICAgIGlmIChoYXNNYXRjaEZ1bmN0aW9uKG1hdGNoZXIpKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIubWF0Y2goYWN0aW9uKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGlzQW55T2YoKSB7XHJcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbWF0Y2hlcnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzLnNvbWUoZnVuY3Rpb24gKG1hdGNoZXIpIHsgcmV0dXJuIG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKTsgfSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzQWxsT2YoKSB7XHJcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbWF0Y2hlcnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzLmV2ZXJ5KGZ1bmN0aW9uIChtYXRjaGVyKSB7IHJldHVybiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbik7IH0pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIHZhbGlkU3RhdHVzKSB7XHJcbiAgICBpZiAoIWFjdGlvbiB8fCAhYWN0aW9uLm1ldGEpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGhhc1ZhbGlkUmVxdWVzdElkID0gdHlwZW9mIGFjdGlvbi5tZXRhLnJlcXVlc3RJZCA9PT0gXCJzdHJpbmdcIjtcclxuICAgIHZhciBoYXNWYWxpZFJlcXVlc3RTdGF0dXMgPSB2YWxpZFN0YXR1cy5pbmRleE9mKGFjdGlvbi5tZXRhLnJlcXVlc3RTdGF0dXMpID4gLTE7XHJcbiAgICByZXR1cm4gaGFzVmFsaWRSZXF1ZXN0SWQgJiYgaGFzVmFsaWRSZXF1ZXN0U3RhdHVzO1xyXG59XHJcbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FycmF5KGEpIHtcclxuICAgIHJldHVybiB0eXBlb2YgYVswXSA9PT0gXCJmdW5jdGlvblwiICYmIFwicGVuZGluZ1wiIGluIGFbMF0gJiYgXCJmdWxmaWxsZWRcIiBpbiBhWzBdICYmIFwicmVqZWN0ZWRcIiBpbiBhWzBdO1xyXG59XHJcbmZ1bmN0aW9uIGlzUGVuZGluZygpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcInBlbmRpbmdcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNQZW5kaW5nKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHsgcmV0dXJuIGFzeW5jVGh1bmsucGVuZGluZzsgfSk7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc1JlamVjdGVkKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicmVqZWN0ZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWplY3RlZCgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7IHJldHVybiBhc3luY1RodW5rLnJlamVjdGVkOyB9KTtcclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBoYXNGbGFnID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiBhY3Rpb24gJiYgYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWU7XHJcbiAgICB9O1xyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xyXG4gICAgICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNGdWxmaWxsZWQoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJmdWxmaWxsZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNGdWxmaWxsZWQoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykgeyByZXR1cm4gYXN5bmNUaHVuay5mdWxmaWxsZWQ7IH0pO1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNBc3luY1RodW5rQWN0aW9uKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicGVuZGluZ1wiLCBcImZ1bGZpbGxlZFwiLCBcInJlamVjdGVkXCJdKTsgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzQXN5bmNUaHVua0FjdGlvbigpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhc3luY1RodW5rc18xID0gYXN5bmNUaHVua3M7IF9pIDwgYXN5bmNUaHVua3NfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGFzeW5jVGh1bmsgPSBhc3luY1RodW5rc18xW19pXTtcclxuICAgICAgICAgICAgbWF0Y2hlcnMucHVzaChhc3luY1RodW5rLnBlbmRpbmcsIGFzeW5jVGh1bmsucmVqZWN0ZWQsIGFzeW5jVGh1bmsuZnVsZmlsbGVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL3V0aWxzLnRzXHJcbnZhciBhc3NlcnRGdW5jdGlvbiA9IGZ1bmN0aW9uIChmdW5jLCBleHBlY3RlZCkge1xyXG4gICAgaWYgKHR5cGVvZiBmdW5jICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGV4cGVjdGVkICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbn07XHJcbnZhciBub29wID0gZnVuY3Rpb24gKCkge1xyXG59O1xyXG52YXIgY2F0Y2hSZWplY3Rpb24gPSBmdW5jdGlvbiAocHJvbWlzZSwgb25FcnJvcikge1xyXG4gICAgaWYgKG9uRXJyb3IgPT09IHZvaWQgMCkgeyBvbkVycm9yID0gbm9vcDsgfVxyXG4gICAgcHJvbWlzZS5jYXRjaChvbkVycm9yKTtcclxuICAgIHJldHVybiBwcm9taXNlO1xyXG59O1xyXG52YXIgYWRkQWJvcnRTaWduYWxMaXN0ZW5lciA9IGZ1bmN0aW9uIChhYm9ydFNpZ25hbCwgY2FsbGJhY2spIHtcclxuICAgIGFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBjYWxsYmFjaywgeyBvbmNlOiB0cnVlIH0pO1xyXG59O1xyXG52YXIgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbiA9IGZ1bmN0aW9uIChhYm9ydENvbnRyb2xsZXIsIHJlYXNvbikge1xyXG4gICAgdmFyIHNpZ25hbCA9IGFib3J0Q29udHJvbGxlci5zaWduYWw7XHJcbiAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIShcInJlYXNvblwiIGluIHNpZ25hbCkpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2lnbmFsLCBcInJlYXNvblwiLCB7XHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHZhbHVlOiByZWFzb24sXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIDtcclxuICAgIGFib3J0Q29udHJvbGxlci5hYm9ydChyZWFzb24pO1xyXG59O1xyXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL2V4Y2VwdGlvbnMudHNcclxudmFyIHRhc2sgPSBcInRhc2tcIjtcclxudmFyIGxpc3RlbmVyID0gXCJsaXN0ZW5lclwiO1xyXG52YXIgY29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcclxudmFyIGNhbmNlbGxlZCA9IFwiY2FuY2VsbGVkXCI7XHJcbnZhciB0YXNrQ2FuY2VsbGVkID0gXCJ0YXNrLVwiICsgY2FuY2VsbGVkO1xyXG52YXIgdGFza0NvbXBsZXRlZCA9IFwidGFzay1cIiArIGNvbXBsZXRlZDtcclxudmFyIGxpc3RlbmVyQ2FuY2VsbGVkID0gbGlzdGVuZXIgKyBcIi1cIiArIGNhbmNlbGxlZDtcclxudmFyIGxpc3RlbmVyQ29tcGxldGVkID0gbGlzdGVuZXIgKyBcIi1cIiArIGNvbXBsZXRlZDtcclxudmFyIFRhc2tBYm9ydEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGFza0Fib3J0RXJyb3IoY29kZSkge1xyXG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJUYXNrQWJvcnRFcnJvclwiO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IHRhc2sgKyBcIiBcIiArIGNhbmNlbGxlZCArIFwiIChyZWFzb246IFwiICsgY29kZSArIFwiKVwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFRhc2tBYm9ydEVycm9yO1xyXG59KCkpO1xyXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL3Rhc2sudHNcclxudmFyIHZhbGlkYXRlQWN0aXZlID0gZnVuY3Rpb24gKHNpZ25hbCkge1xyXG4gICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFRhc2tBYm9ydEVycm9yKHNpZ25hbC5yZWFzb24pO1xyXG4gICAgfVxyXG59O1xyXG52YXIgcHJvbWlzaWZ5QWJvcnRTaWduYWwgPSBmdW5jdGlvbiAoc2lnbmFsKSB7XHJcbiAgICByZXR1cm4gY2F0Y2hSZWplY3Rpb24obmV3IFByb21pc2UoZnVuY3Rpb24gKF8sIHJlamVjdCkge1xyXG4gICAgICAgIHZhciBub3RpZnlSZWplY3Rpb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QobmV3IFRhc2tBYm9ydEVycm9yKHNpZ25hbC5yZWFzb24pKTsgfTtcclxuICAgICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICAgICAgbm90aWZ5UmVqZWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhZGRBYm9ydFNpZ25hbExpc3RlbmVyKHNpZ25hbCwgbm90aWZ5UmVqZWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9KSk7XHJcbn07XHJcbnZhciBydW5UYXNrID0gZnVuY3Rpb24gKHRhc2syLCBjbGVhblVwKSB7IHJldHVybiBfX2FzeW5jKHZvaWQgMCwgbnVsbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHZhbHVlLCBlcnJvcl8xO1xyXG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFswLCAzLCA0LCA1XSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRhc2syKCldO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogXCJva1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgZXJyb3JfMSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogZXJyb3JfMSBpbnN0YW5jZW9mIFRhc2tBYm9ydEVycm9yID8gXCJjYW5jZWxsZWRcIiA6IFwicmVqZWN0ZWRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXzFcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgY2xlYW5VcCA9PSBudWxsID8gdm9pZCAwIDogY2xlYW5VcCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcclxuICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pOyB9O1xyXG52YXIgY3JlYXRlUGF1c2UgPSBmdW5jdGlvbiAoc2lnbmFsKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByb21pc2UpIHtcclxuICAgICAgICByZXR1cm4gY2F0Y2hSZWplY3Rpb24oUHJvbWlzZS5yYWNlKFtwcm9taXNpZnlBYm9ydFNpZ25hbChzaWduYWwpLCBwcm9taXNlXSkudGhlbihmdW5jdGlvbiAob3V0cHV0KSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxufTtcclxudmFyIGNyZWF0ZURlbGF5ID0gZnVuY3Rpb24gKHNpZ25hbCkge1xyXG4gICAgdmFyIHBhdXNlID0gY3JlYXRlUGF1c2Uoc2lnbmFsKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGltZW91dE1zKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdXNlKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXRNcyk7IH0pKTtcclxuICAgIH07XHJcbn07XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvaW5kZXgudHNcclxudmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XHJcbnZhciBJTlRFUk5BTF9OSUxfVE9LRU4gPSB7fTtcclxudmFyIGFsbSA9IFwibGlzdGVuZXJNaWRkbGV3YXJlXCI7XHJcbnZhciBjcmVhdGVGb3JrID0gZnVuY3Rpb24gKHBhcmVudEFib3J0U2lnbmFsKSB7XHJcbiAgICB2YXIgbGlua0NvbnRyb2xsZXJzID0gZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHsgcmV0dXJuIGFkZEFib3J0U2lnbmFsTGlzdGVuZXIocGFyZW50QWJvcnRTaWduYWwsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgcGFyZW50QWJvcnRTaWduYWwucmVhc29uKTsgfSk7IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhc2tFeGVjdXRvcikge1xyXG4gICAgICAgIGFzc2VydEZ1bmN0aW9uKHRhc2tFeGVjdXRvciwgXCJ0YXNrRXhlY3V0b3JcIik7XHJcbiAgICAgICAgdmFyIGNoaWxkQWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgIGxpbmtDb250cm9sbGVycyhjaGlsZEFib3J0Q29udHJvbGxlcik7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJ1blRhc2soZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdDI7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHBhcmVudEFib3J0U2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGFza0V4ZWN1dG9yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2UoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogY3JlYXRlRGVsYXkoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0MiA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdDJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NvbXBsZXRlZCk7IH0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3VsdDogY3JlYXRlUGF1c2UocGFyZW50QWJvcnRTaWduYWwpKHJlc3VsdCksXHJcbiAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NhbmNlbGxlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufTtcclxudmFyIGNyZWF0ZVRha2VQYXR0ZXJuID0gZnVuY3Rpb24gKHN0YXJ0TGlzdGVuaW5nLCBzaWduYWwpIHtcclxuICAgIHZhciB0YWtlID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGltZW91dCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdW5zdWJzY3JpYmUsIHR1cGxlUHJvbWlzZSwgcHJvbWlzZXMsIG91dHB1dDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdHVwbGVQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUgPSBzdGFydExpc3RlbmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWNhdGU6IHByZWRpY2F0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdDogZnVuY3Rpb24gKGFjdGlvbiwgbGlzdGVuZXJBcGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lckFwaS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyQXBpLmdldFN0YXRlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyQXBpLmdldE9yaWdpbmFsU3RhdGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzaWZ5QWJvcnRTaWduYWwoc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHVwbGVQcm9taXNlXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCwgbnVsbCk7IH0pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMSwgLCAzLCA0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5yYWNlKHByb21pc2VzKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG91dHB1dF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcmVkaWNhdGUsIHRpbWVvdXQpIHsgcmV0dXJuIGNhdGNoUmVqZWN0aW9uKHRha2UocHJlZGljYXRlLCB0aW1lb3V0KSk7IH07XHJcbn07XHJcbnZhciBnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciB0eXBlID0gb3B0aW9ucy50eXBlLCBhY3Rpb25DcmVhdG9yID0gb3B0aW9ucy5hY3Rpb25DcmVhdG9yLCBtYXRjaGVyID0gb3B0aW9ucy5tYXRjaGVyLCBwcmVkaWNhdGUgPSBvcHRpb25zLnByZWRpY2F0ZSwgZWZmZWN0ID0gb3B0aW9ucy5lZmZlY3Q7XHJcbiAgICBpZiAodHlwZSkge1xyXG4gICAgICAgIHByZWRpY2F0ZSA9IGNyZWF0ZUFjdGlvbih0eXBlKS5tYXRjaDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGFjdGlvbkNyZWF0b3IpIHtcclxuICAgICAgICB0eXBlID0gYWN0aW9uQ3JlYXRvci50eXBlO1xyXG4gICAgICAgIHByZWRpY2F0ZSA9IGFjdGlvbkNyZWF0b3IubWF0Y2g7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChtYXRjaGVyKSB7XHJcbiAgICAgICAgcHJlZGljYXRlID0gbWF0Y2hlcjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHByZWRpY2F0ZSkge1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ3JlYXRpbmcgb3IgcmVtb3ZpbmcgYSBsaXN0ZW5lciByZXF1aXJlcyBvbmUgb2YgdGhlIGtub3duIGZpZWxkcyBmb3IgbWF0Y2hpbmcgYW4gYWN0aW9uXCIpO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0RnVuY3Rpb24oZWZmZWN0LCBcIm9wdGlvbnMubGlzdGVuZXJcIik7XHJcbiAgICByZXR1cm4geyBwcmVkaWNhdGU6IHByZWRpY2F0ZSwgdHlwZTogdHlwZSwgZWZmZWN0OiBlZmZlY3QgfTtcclxufTtcclxudmFyIGNyZWF0ZUxpc3RlbmVyRW50cnkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgdmFyIF9jID0gZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbShvcHRpb25zKSwgdHlwZSA9IF9jLnR5cGUsIHByZWRpY2F0ZSA9IF9jLnByZWRpY2F0ZSwgZWZmZWN0ID0gX2MuZWZmZWN0O1xyXG4gICAgdmFyIGlkID0gbmFub2lkKCk7XHJcbiAgICB2YXIgZW50cnkgPSB7XHJcbiAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgIGVmZmVjdDogZWZmZWN0LFxyXG4gICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgcHJlZGljYXRlOiBwcmVkaWNhdGUsXHJcbiAgICAgICAgcGVuZGluZzogbmV3IFNldCgpLFxyXG4gICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3Vic2NyaWJlIG5vdCBpbml0aWFsaXplZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGVudHJ5O1xyXG59O1xyXG52YXIgY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUgPSBmdW5jdGlvbiAobGlzdGVuZXJNYXApIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGlzdGVuZXJNYXAuZm9yRWFjaChjYW5jZWxBY3RpdmVMaXN0ZW5lcnMpO1xyXG4gICAgICAgIGxpc3RlbmVyTWFwLmNsZWFyKCk7XHJcbiAgICB9O1xyXG59O1xyXG52YXIgc2FmZWx5Tm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3JIYW5kbGVyLCBlcnJvclRvTm90aWZ5LCBlcnJvckluZm8pIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZXJyb3JIYW5kbGVyKGVycm9yVG9Ob3RpZnksIGVycm9ySW5mbyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3JIYW5kbGVyRXJyb3IpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3JIYW5kbGVyRXJyb3I7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBhZGRMaXN0ZW5lciA9IGNyZWF0ZUFjdGlvbihhbG0gKyBcIi9hZGRcIik7XHJcbnZhciBjbGVhckFsbExpc3RlbmVycyA9IGNyZWF0ZUFjdGlvbihhbG0gKyBcIi9yZW1vdmVBbGxcIik7XHJcbnZhciByZW1vdmVMaXN0ZW5lciA9IGNyZWF0ZUFjdGlvbihhbG0gKyBcIi9yZW1vdmVcIik7XHJcbnZhciBkZWZhdWx0RXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBfX3NwcmVhZEFycmF5KFthbG0gKyBcIi9lcnJvclwiXSwgYXJncykpO1xyXG59O1xyXG52YXIgY2FuY2VsQWN0aXZlTGlzdGVuZXJzID0gZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICBlbnRyeS5wZW5kaW5nLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcclxuICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNvbnRyb2xsZXIsIGxpc3RlbmVyQ2FuY2VsbGVkKTtcclxuICAgIH0pO1xyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lck1pZGRsZXdhcmUobWlkZGxld2FyZU9wdGlvbnMpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICBpZiAobWlkZGxld2FyZU9wdGlvbnMgPT09IHZvaWQgMCkgeyBtaWRkbGV3YXJlT3B0aW9ucyA9IHt9OyB9XHJcbiAgICB2YXIgbGlzdGVuZXJNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICB2YXIgZXh0cmEgPSBtaWRkbGV3YXJlT3B0aW9ucy5leHRyYSwgX2MgPSBtaWRkbGV3YXJlT3B0aW9ucy5vbkVycm9yLCBvbkVycm9yID0gX2MgPT09IHZvaWQgMCA/IGRlZmF1bHRFcnJvckhhbmRsZXIgOiBfYztcclxuICAgIGFzc2VydEZ1bmN0aW9uKG9uRXJyb3IsIFwib25FcnJvclwiKTtcclxuICAgIHZhciBpbnNlcnRFbnRyeSA9IGZ1bmN0aW9uIChlbnRyeSkge1xyXG4gICAgICAgIGVudHJ5LnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbGlzdGVuZXJNYXAuZGVsZXRlKGVudHJ5LmlkKTsgfTtcclxuICAgICAgICBsaXN0ZW5lck1hcC5zZXQoZW50cnkuaWQsIGVudHJ5KTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNhbmNlbE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgZW50cnkudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgaWYgKGNhbmNlbE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IGNhbmNlbE9wdGlvbnMuY2FuY2VsQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMoZW50cnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICB2YXIgZmluZExpc3RlbmVyRW50cnkgPSBmdW5jdGlvbiAoY29tcGFyYXRvcikge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2MgPSBBcnJheS5mcm9tKGxpc3RlbmVyTWFwLnZhbHVlcygpKTsgX2kgPCBfYy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVudHJ5ID0gX2NbX2ldO1xyXG4gICAgICAgICAgICBpZiAoY29tcGFyYXRvcihlbnRyeSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdm9pZCAwO1xyXG4gICAgfTtcclxuICAgIHZhciBzdGFydExpc3RlbmluZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGVudHJ5ID0gZmluZExpc3RlbmVyRW50cnkoZnVuY3Rpb24gKGV4aXN0aW5nRW50cnkpIHsgcmV0dXJuIGV4aXN0aW5nRW50cnkuZWZmZWN0ID09PSBvcHRpb25zLmVmZmVjdDsgfSk7XHJcbiAgICAgICAgaWYgKCFlbnRyeSkge1xyXG4gICAgICAgICAgICBlbnRyeSA9IGNyZWF0ZUxpc3RlbmVyRW50cnkob3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbnNlcnRFbnRyeShlbnRyeSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIHN0b3BMaXN0ZW5pbmcgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfYyA9IGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20ob3B0aW9ucyksIHR5cGUgPSBfYy50eXBlLCBlZmZlY3QgPSBfYy5lZmZlY3QsIHByZWRpY2F0ZSA9IF9jLnByZWRpY2F0ZTtcclxuICAgICAgICB2YXIgZW50cnkgPSBmaW5kTGlzdGVuZXJFbnRyeShmdW5jdGlvbiAoZW50cnkyKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaFByZWRpY2F0ZU9yVHlwZSA9IHR5cGVvZiB0eXBlID09PSBcInN0cmluZ1wiID8gZW50cnkyLnR5cGUgPT09IHR5cGUgOiBlbnRyeTIucHJlZGljYXRlID09PSBwcmVkaWNhdGU7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaFByZWRpY2F0ZU9yVHlwZSAmJiBlbnRyeTIuZWZmZWN0ID09PSBlZmZlY3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGVudHJ5KSB7XHJcbiAgICAgICAgICAgIGVudHJ5LnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNhbmNlbEFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzKGVudHJ5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gISFlbnRyeTtcclxuICAgIH07XHJcbiAgICB2YXIgbm90aWZ5TGlzdGVuZXIgPSBmdW5jdGlvbiAoZW50cnksIGFjdGlvbiwgYXBpLCBnZXRPcmlnaW5hbFN0YXRlKSB7IHJldHVybiBfX2FzeW5jKF90aGlzLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGludGVybmFsVGFza0NvbnRyb2xsZXIsIHRha2UsIGxpc3RlbmVyRXJyb3JfMTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFRhc2tDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRha2UgPSBjcmVhdGVUYWtlUGF0dGVybihzdGFydExpc3RlbmluZywgaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzEsIDMsIDQsIDVdKTtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wZW5kaW5nLmFkZChpbnRlcm5hbFRhc2tDb250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLnJlc29sdmUoZW50cnkuZWZmZWN0KGFjdGlvbiwgYXNzaWduKHt9LCBhcGksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE9yaWdpbmFsU3RhdGU6IGdldE9yaWdpbmFsU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb246IGZ1bmN0aW9uIChwcmVkaWNhdGUsIHRpbWVvdXQpIHsgcmV0dXJuIHRha2UocHJlZGljYXRlLCB0aW1lb3V0KS50aGVuKEJvb2xlYW4pOyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFrZTogdGFrZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiBjcmVhdGVEZWxheShpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2UoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcms6IGNyZWF0ZUZvcmsoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGVudHJ5LnVuc3Vic2NyaWJlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJNYXAuc2V0KGVudHJ5LmlkLCBlbnRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkucGVuZGluZy5mb3JFYWNoKGZ1bmN0aW9uIChjb250cm9sbGVyLCBfLCBzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIgIT09IGludGVybmFsVGFza0NvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0LmRlbGV0ZShjb250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJFcnJvcl8xID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGxpc3RlbmVyRXJyb3JfMSBpbnN0YW5jZW9mIFRhc2tBYm9ydEVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWZlbHlOb3RpZnlFcnJvcihvbkVycm9yLCBsaXN0ZW5lckVycm9yXzEsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlZEJ5OiBcImVmZmVjdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGludGVybmFsVGFza0NvbnRyb2xsZXIsIGxpc3RlbmVyQ29tcGxldGVkKTtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wZW5kaW5nLmRlbGV0ZShpbnRlcm5hbFRhc2tDb250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pOyB9O1xyXG4gICAgdmFyIGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlID0gY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUobGlzdGVuZXJNYXApO1xyXG4gICAgdmFyIG1pZGRsZXdhcmUgPSBmdW5jdGlvbiAoYXBpKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIGlmIChhZGRMaXN0ZW5lci5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGFydExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGVhckFsbExpc3RlbmVycy5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbW92ZUxpc3RlbmVyLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0b3BMaXN0ZW5pbmcoYWN0aW9uLnBheWxvYWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3JpZ2luYWxTdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgIHZhciBnZXRPcmlnaW5hbFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAob3JpZ2luYWxTdGF0ZSA9PT0gSU5URVJOQUxfTklMX1RPS0VOKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYWxtICsgXCI6IGdldE9yaWdpbmFsU3RhdGUgY2FuIG9ubHkgYmUgY2FsbGVkIHN5bmNocm9ub3VzbHlcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsU3RhdGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICAgICAgaWYgKGxpc3RlbmVyTWFwLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFN0YXRlID0gYXBpLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJFbnRyaWVzID0gQXJyYXkuZnJvbShsaXN0ZW5lck1hcC52YWx1ZXMoKSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGxpc3RlbmVyRW50cmllc18xID0gbGlzdGVuZXJFbnRyaWVzOyBfaSA8IGxpc3RlbmVyRW50cmllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGxpc3RlbmVyRW50cmllc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcnVuTGlzdGVuZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGVudHJ5LnByZWRpY2F0ZShhY3Rpb24sIGN1cnJlbnRTdGF0ZSwgb3JpZ2luYWxTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChwcmVkaWNhdGVFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWZlbHlOb3RpZnlFcnJvcihvbkVycm9yLCBwcmVkaWNhdGVFcnJvciwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2VkQnk6IFwicHJlZGljYXRlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcnVuTGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVyKGVudHJ5LCBhY3Rpb24sIGFwaSwgZ2V0T3JpZ2luYWxTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsU3RhdGUgPSBJTlRFUk5BTF9OSUxfVE9LRU47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9OyB9OyB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtaWRkbGV3YXJlOiBtaWRkbGV3YXJlLFxyXG4gICAgICAgIHN0YXJ0TGlzdGVuaW5nOiBzdGFydExpc3RlbmluZyxcclxuICAgICAgICBzdG9wTGlzdGVuaW5nOiBzdG9wTGlzdGVuaW5nLFxyXG4gICAgICAgIGNsZWFyTGlzdGVuZXJzOiBjbGVhckxpc3RlbmVyTWlkZGxld2FyZVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvaW5kZXgudHNcclxuZW5hYmxlRVM1KCk7XHJcbmV4cG9ydCB7IE1pZGRsZXdhcmVBcnJheSwgVGFza0Fib3J0RXJyb3IsIGFkZExpc3RlbmVyLCBjbGVhckFsbExpc3RlbmVycywgY29uZmlndXJlU3RvcmUsIGNyZWF0ZUFjdGlvbiwgY3JlYXRlQXN5bmNUaHVuaywgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IsIGNyZWF0ZUVudGl0eUFkYXB0ZXIsIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSwgY3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlLCBkZWZhdWx0MiBhcyBjcmVhdGVOZXh0U3RhdGUsIGNyZWF0ZVJlZHVjZXIsIGNyZWF0ZVNlbGVjdG9yMiBhcyBjcmVhdGVTZWxlY3RvciwgY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVTbGljZSwgY3VycmVudDIgYXMgY3VycmVudCwgZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlLCBmcmVlemUsIGdldERlZmF1bHRNaWRkbGV3YXJlLCBnZXRUeXBlLCBpc0FsbE9mLCBpc0FueU9mLCBpc0FzeW5jVGh1bmtBY3Rpb24sIGlzRHJhZnQ0IGFzIGlzRHJhZnQsIGlzRnVsZmlsbGVkLCBpc0ltbXV0YWJsZURlZmF1bHQsIGlzUGVuZGluZywgaXNQbGFpbiwgaXNQbGFpbk9iamVjdCwgaXNSZWplY3RlZCwgaXNSZWplY3RlZFdpdGhWYWx1ZSwgbWluaVNlcmlhbGl6ZUVycm9yLCBuYW5vaWQsIG9yaWdpbmFsLCByZW1vdmVMaXN0ZW5lciwgdW53cmFwUmVzdWx0IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHV4LXRvb2xraXQuZXNtLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVNsaWNlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcblxuY29uc3QgaW5pdGlhbFNvcnRTdGF0ZSA9IHtcbiAgc29ydFBhcmFtczogeyBvcmRlcjogXCJcIiwgb3JkZXJCeTogXCJcIiB9LFxufTtcblxuY29uc3Qgc29ydFNsaWNlID0gY3JlYXRlU2xpY2Uoe1xuICBuYW1lOiBcInNvcnRcIixcbiAgaW5pdGlhbFN0YXRlOiBpbml0aWFsU29ydFN0YXRlLFxuICByZWR1Y2Vyczoge1xuICAgIHNvcnQoc3RhdGUsIGFjdGlvbikge1xuICAgICAgY29uc3QgeyBjb2x1bW4gfSA9IGFjdGlvbi5wYXlsb2FkO1xuICAgICAgY29uc3QgeyBzb3J0UGFyYW1zIH0gPSBzdGF0ZTtcbiAgICAgIGlmIChcbiAgICAgICAgKHNvcnRQYXJhbXMub3JkZXJCeSA9PT0gXCJcIiAmJiBzb3J0UGFyYW1zLm9yZGVyID09PSBcIlwiKSB8fFxuICAgICAgICBjb2x1bW4gIT09IHNvcnRQYXJhbXMub3JkZXJCeVxuICAgICAgKSB7XG4gICAgICAgIHN0YXRlLnNvcnRQYXJhbXMgPSB7IG9yZGVyQnk6IGNvbHVtbiwgb3JkZXI6IFwiYXNjXCIgfTtcbiAgICAgIH0gZWxzZSBpZiAoc29ydFBhcmFtcy5vcmRlckJ5ID09PSBjb2x1bW4gJiYgc29ydFBhcmFtcy5vcmRlciA9PT0gXCJhc2NcIikge1xuICAgICAgICBzdGF0ZS5zb3J0UGFyYW1zID0geyBvcmRlckJ5OiBjb2x1bW4sIG9yZGVyOiBcImRlc2NcIiB9O1xuICAgICAgfSBlbHNlIGlmIChzb3J0UGFyYW1zLm9yZGVyQnkgPT09IGNvbHVtbiAmJiBzb3J0UGFyYW1zLm9yZGVyID09PSBcImRlc2NcIikge1xuICAgICAgICBzdGF0ZS5zb3J0UGFyYW1zID0geyBvcmRlckJ5OiBcIlwiLCBvcmRlcjogXCJcIiB9O1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IHNvcnRBY3Rpb25zID0gc29ydFNsaWNlLmFjdGlvbnM7XG5leHBvcnQgZGVmYXVsdCBzb3J0U2xpY2UucmVkdWNlcjtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5pbXBvcnQgQXJyb3dVcEljb24gZnJvbSBcIi4uL0NvbW1vbi9JY29ucy9BcnJvd1VwSWNvblwiO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkVGFibGVIZWFkZXIgPSBzdHlsZWQudGhgYDtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEFycm93Q29udGFpbmVyID0gc3R5bGVkLmRpdjx7XG4gICRpc0FzY2VuZGluZz86IGJvb2xlYW47XG4gICRpc1Zpc2libGU/OiBib29sZWFuO1xufT5gXG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjJzIGVhc2UtaW47XG4gIHRyYW5zZm9ybTogJHsoeyAkaXNBc2NlbmRpbmcgfSkgPT4gKCRpc0FzY2VuZGluZyA/IFwiXCIgOiBcInJvdGF0ZSgxODBkZWcpXCIpfTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHZpc2liaWxpdHk6ICR7KHsgJGlzVmlzaWJsZSB9KSA9PiAoJGlzVmlzaWJsZSA/IFwidmlzaWJsZVwiIDogXCJoaWRkZW5cIil9OyA7XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkQXJyb3dVcCA9IHN0eWxlZChBcnJvd1VwSWNvbik8eyAkaXNBc2NlbmRpbmc/OiBib29sZWFuIH0+YFxuICBmb250LXNpemU6IDFlbTtcbiAgaGVpZ2h0OiAxZW07XG4gIHdpZHRoOiAxZW07XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkVGFibGUgPSBzdHlsZWQudGFibGVgXG4gIG1hcmdpbi10b3A6IDI0cHg7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBvdmVyZmxvdy15OiBhdXRvO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBtaW4taGVpZ2h0OiAyMDBweDtcbiAgb3BhY2l0eTogMC43O1xuICBoZWlnaHQ6IDgwdmg7XG5cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIHdpZHRoOiA4MCU7XG4gIH1cblxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSB7XG4gICAgd2lkdGg6IDQwdnc7XG4gICAgbWF4LXdpZHRoOiA1MDBweDtcbiAgfVxuXG4gIHRib2R5IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBkaXNwbGF5OiB0YWJsZTtcbiAgfVxuXG4gIHRyOmxhc3QtY2hpbGQgdGQ6Zmlyc3QtY2hpbGQge1xuICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDhweDtcbiAgfVxuICB0cjpsYXN0LWNoaWxkIHRkOmxhc3QtY2hpbGQge1xuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA4cHg7XG4gIH1cblxuICB0cjpmaXJzdC1jaGlsZCB0aDpmaXJzdC1jaGlsZCB7XG4gICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogOHB4O1xuICB9XG4gIHRyOmZpcnN0LWNoaWxkIHRoOmxhc3QtY2hpbGQge1xuICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA4cHg7XG4gIH1cbiAgdGgge1xuICAgIHBvc2l0aW9uOiBzdGlja3k7XG4gICAgdG9wOiAwO1xuICAgIHBhZGRpbmc6IDAuNWVtO1xuICAgIGJhY2tncm91bmQ6ICNhYWFhYWE7XG4gICAgbGluZS1oZWlnaHQ6IDEuNWVtO1xuICAgIGRpdiB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgIH1cbiAgfVxuICB0ciB7XG4gICAgYmFja2dyb3VuZDogI2RiZGJkYjtcbiAgICAmOmhvdmVyIHtcbiAgICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Q3ZjBmZDtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB9XG4gICAgJjpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpIHtcbiAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjY2NjY2NjO1xuICAgIH1cbiAgfVxuXG4gIHRkIHtcbiAgICBwYWRkaW5nOiAwLjI1ZW07XG4gIH1cbmA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmNvbnN0IEFycm93VXBJY29uID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxzdmdcbiAgICAgIGRhdGEtdGVzdGlkPVwiYXJyb3ctaWNvblwiXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIGhlaWdodD1cIjI0XCJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgICAgd2lkdGg9XCIyNFwiXG4gICAgICBzdHlsZT17e1xuICAgICAgICBmb250U2l6ZTogXCIxZW1cIixcbiAgICAgICAgd2lkdGg6IFwiMWVtXCIsXG4gICAgICAgIGhlaWdodDogXCIxZW1cIixcbiAgICAgIH19XG4gICAgPlxuICAgICAgPHBhdGggZD1cIk0wIDBoMjR2MjRIMFYwelwiIGZpbGw9XCJub25lXCIgLz5cbiAgICAgIDxwYXRoIGQ9XCJNNCAxMmwxLjQxIDEuNDFMMTEgNy44M1YyMGgyVjcuODNsNS41OCA1LjU5TDIwIDEybC04LTgtOCA4elwiIC8+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBcnJvd1VwSWNvbjtcbiIsImltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcblxuY29uc3QgY2xpZW50ID0gYXhpb3MuY3JlYXRlKHsgYmFzZVVSTDogXCJodHRwczovL3BsYXlncm91bmQudGVzb25ldC5sdC92MVwiIH0pO1xuXG5jb25zdCByZXF1ZXN0ID0gYXN5bmMgKHsgLi4ub3B0aW9ucyB9KSA9PiB7XG4gIGNsaWVudC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gYEJlYXJlciAke3Nlc3Npb25TdG9yYWdlLmdldEl0ZW0oXG4gICAgXCJ0b2tlblwiXG4gICl9YDtcblxuICBjb25zdCBvblN1Y2Nlc3MgPSAocmVzcG9uc2U6IGFueSkgPT4gcmVzcG9uc2U7XG5cbiAgcmV0dXJuIGF3YWl0IGNsaWVudChvcHRpb25zKS50aGVuKG9uU3VjY2Vzcyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCByZXF1ZXN0O1xuIiwiaW1wb3J0IHsgdXNlUXVlcnkgfSBmcm9tIFwicmVhY3QtcXVlcnlcIjtcbmltcG9ydCByZXF1ZXN0IGZyb20gXCIuLi8uLi91dGlscy9heGlvcy51dGlsc1wiO1xuXG5pbnRlcmZhY2UgSVNlcnZlckxpc3RSZXNwb25zZSB7XG4gIG5hbWU6IHN0cmluZztcbiAgZGlzdGFuY2U6IG51bWJlcjtcbn1cblxuY29uc3QgZ2V0U2VydmVyTGlzdCA9IGFzeW5jICgpID0+IHtcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KHsgbWV0aG9kOiBcIkdFVFwiLCB1cmw6IFwiL3NlcnZlcnNcIiB9KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmRhdGEgYXMgSVNlcnZlckxpc3RSZXNwb25zZVtdO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUdldFNlcnZlckxpc3QgPSAoKSA9PiB7XG4gIHJldHVybiB1c2VRdWVyeShbXCJzZXJ2ZXItbGlzdFwiXSwgKCkgPT4gZ2V0U2VydmVyTGlzdCgpKTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3IgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBTcGlubmVyIGZyb20gXCIuLi9Db21tb24vU3Bpbm5lci9TcGlubmVyXCI7XG5pbXBvcnQgeyBJUm9vdFN0YXRlLCBJU29ydFBhcmFtcyB9IGZyb20gXCIuLi8uLi9zdG9yZS9yZWR1eFwiO1xuaW1wb3J0IHsgc29ydEFjdGlvbnMgfSBmcm9tIFwiLi4vLi4vc3RvcmUvcmVkdXgvc29ydFwiO1xuaW1wb3J0IHtcbiAgU3R5bGVkQXJyb3dDb250YWluZXIsXG4gIFN0eWxlZEFycm93VXAsXG4gIFN0eWxlZFRhYmxlLFxuICBTdHlsZWRUYWJsZUhlYWRlcixcbn0gZnJvbSBcIi4vU2VydmVyTGlzdC5zdHlsZWRcIjtcbmltcG9ydCB7IHVzZUdldFNlcnZlckxpc3QgfSBmcm9tIFwiLi9TZXJ2ZXJMaXN0U2VydmljZVwiO1xuXG5lbnVtIENvbHVtbnMge1xuICBOYW1lID0gXCJuYW1lXCIsXG4gIERpc3RhbmNlID0gXCJkaXN0YW5jZVwiLFxufVxuXG5jb25zdCBzb3J0ID0gKG9yZGVyOiBJU29ydFBhcmFtcywgZGF0YTogYW55KSA9PiB7XG4gIGlmIChvcmRlci5vcmRlckJ5ID09PSBDb2x1bW5zLk5hbWUpIHtcbiAgICByZXR1cm4gWy4uLmRhdGFdLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGlmIChvcmRlci5vcmRlciA9PT0gXCJhc2NcIikge1xuICAgICAgICByZXR1cm4gYS5uYW1lID4gYi5uYW1lID8gMSA6IC0xO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGEubmFtZSA+IGIubmFtZSA/IC0xIDogMTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChvcmRlci5vcmRlckJ5ID09PSBDb2x1bW5zLkRpc3RhbmNlKSB7XG4gICAgcmV0dXJuIFsuLi5kYXRhXS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBpZiAob3JkZXIub3JkZXIgPT09IFwiYXNjXCIpIHtcbiAgICAgICAgcmV0dXJuIGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGIuZGlzdGFuY2UgLSBhLmRpc3RhbmNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBkYXRhO1xufTtcblxuY29uc3QgU2VydmVyTGlzdCA9ICgpID0+IHtcbiAgY29uc3QgeyBpc0xvYWRpbmcsIGRhdGEsIGlzRXJyb3IgfSA9IHVzZUdldFNlcnZlckxpc3QoKTtcbiAgY29uc3Qgc29ydE9yZGVyID0gdXNlU2VsZWN0b3IoKHN0YXRlOiBJUm9vdFN0YXRlKSA9PiBzdGF0ZS5zb3J0LnNvcnRQYXJhbXMpO1xuICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKCk7XG5cbiAgaWYgKGlzTG9hZGluZykge1xuICAgIHJldHVybiA8U3Bpbm5lciAvPjtcbiAgfVxuXG4gIGlmIChpc0Vycm9yKSB7XG4gICAgcmV0dXJuIDxkaXY+RXJyb3Igb2NjdXJyZWQ8L2Rpdj47XG4gIH1cblxuICBjb25zdCB0b2dnbGVTb3J0SGFuZGxlciA9IChjb2x1bW46IHN0cmluZykgPT4ge1xuICAgIGRpc3BhdGNoKHNvcnRBY3Rpb25zLnNvcnQoeyBjb2x1bW4gfSkpO1xuICB9O1xuXG4gIGNvbnN0IHNvcnRlZERhdGEgPSBzb3J0KHNvcnRPcmRlciwgZGF0YSk7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZFRhYmxlPlxuICAgICAgPHRib2R5PlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPFN0eWxlZFRhYmxlSGVhZGVyIG9uQ2xpY2s9eygpID0+IHRvZ2dsZVNvcnRIYW5kbGVyKENvbHVtbnMuTmFtZSl9PlxuICAgICAgICAgICAgPGRpdiBkYXRhLXRlc3RpZD1cIm5hbWUtaGVhZGVyXCI+XG4gICAgICAgICAgICAgIDxzcGFuPk5hbWU8L3NwYW4+XG4gICAgICAgICAgICAgIDxTdHlsZWRBcnJvd0NvbnRhaW5lclxuICAgICAgICAgICAgICAgICRpc0FzY2VuZGluZz17c29ydE9yZGVyLm9yZGVyID09PSBcImFzY1wiID8gdHJ1ZSA6IGZhbHNlfVxuICAgICAgICAgICAgICAgICRpc1Zpc2libGU9e3NvcnRPcmRlci5vcmRlckJ5ID09PSBDb2x1bW5zLk5hbWV9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8U3R5bGVkQXJyb3dVcCAvPlxuICAgICAgICAgICAgICA8L1N0eWxlZEFycm93Q29udGFpbmVyPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9TdHlsZWRUYWJsZUhlYWRlcj5cbiAgICAgICAgICA8U3R5bGVkVGFibGVIZWFkZXJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRvZ2dsZVNvcnRIYW5kbGVyKENvbHVtbnMuRGlzdGFuY2UpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXYgZGF0YS10ZXN0aWQ9XCJkaXN0YW5jZS1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgPHNwYW4+RGlzdGFuY2U8L3NwYW4+XG4gICAgICAgICAgICAgIDxTdHlsZWRBcnJvd0NvbnRhaW5lclxuICAgICAgICAgICAgICAgICRpc0FzY2VuZGluZz17c29ydE9yZGVyLm9yZGVyID09PSBcImFzY1wiID8gdHJ1ZSA6IGZhbHNlfVxuICAgICAgICAgICAgICAgICRpc1Zpc2libGU9e3NvcnRPcmRlci5vcmRlckJ5ID09PSBDb2x1bW5zLkRpc3RhbmNlfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPFN0eWxlZEFycm93VXAgLz5cbiAgICAgICAgICAgICAgPC9TdHlsZWRBcnJvd0NvbnRhaW5lcj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvU3R5bGVkVGFibGVIZWFkZXI+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIHtzb3J0ZWREYXRhLm1hcCgoc2VydmVyOiBhbnkpID0+IHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHRyIGRhdGEtdGVzdGlkPXtcImRhdGEtcm93XCJ9IGtleT17c2VydmVyLm5hbWUgKyBzZXJ2ZXIuZGlzdGFuY2V9PlxuICAgICAgICAgICAgICA8dGQ+e3NlcnZlci5uYW1lfTwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD57c2VydmVyLmRpc3RhbmNlfTwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICk7XG4gICAgICAgIH0pfVxuICAgICAgPC90Ym9keT5cbiAgICA8L1N0eWxlZFRhYmxlPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VydmVyTGlzdDtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRCYWNrZ3JvdW5kID0gc3R5bGVkLmRpdmBcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KC00NWRlZywgI2VlNzc1MiwgI2U3M2M3ZSwgIzIzYTZkNSwgIzIzZDVhYik7XG4gIGhlaWdodDogMTAwJTtcbiAgb3ZlcmZsb3c6IGF1dG87XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkU2VydmVyTGlzdEhlYWRlciA9IHN0eWxlZC5oMWBcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgZm9udC1mYW1pbHk6IFwiQ291cmllclwiO1xuICBmb250LXNpemU6IDJyZW07XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiAjNWU4N2I4O1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkU2VydmVyTGlzdENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIC8vanVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGhlaWdodDogMTAwJTtcbmA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBDYXJkIH0gZnJvbSBcIi4uLy4uL0NvbXBvbmVudHMvQ29tbW9uL0NhcmQvQ2FyZFwiO1xuaW1wb3J0IFBhZ2VIZWFkZXIgZnJvbSBcIi4uLy4uL0NvbXBvbmVudHMvQ29tbW9uL1BhZ2VIZWFkZXIvUGFnZUhlYWRlclwiO1xuaW1wb3J0IFNlcnZlckxpc3QgZnJvbSBcIi4uLy4uL0NvbXBvbmVudHMvU2VydmVyTGlzdC9TZXJ2ZXJMaXN0XCI7XG5pbXBvcnQge1xuICBTdHlsZWRCYWNrZ3JvdW5kLFxuICBTdHlsZWRTZXJ2ZXJMaXN0Q29udGFpbmVyLFxuICBTdHlsZWRTZXJ2ZXJMaXN0SGVhZGVyLFxufSBmcm9tIFwiLi9TZXJ2ZXJMaXN0UGFnZS5zdHlsZWRcIjtcblxuY29uc3QgU2VydmVyTGlzdFBhZ2UgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZEJhY2tncm91bmQ+XG4gICAgICA8UGFnZUhlYWRlciAvPlxuICAgICAgPFN0eWxlZFNlcnZlckxpc3RDb250YWluZXI+XG4gICAgICAgIDxTZXJ2ZXJMaXN0IC8+XG4gICAgICA8L1N0eWxlZFNlcnZlckxpc3RDb250YWluZXI+XG4gICAgPC9TdHlsZWRCYWNrZ3JvdW5kPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VydmVyTGlzdFBhZ2U7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQge1xuICBSb3V0ZSxcbiAgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsXG4gIFJvdXRlcyxcbiAgTmF2aWdhdGUsXG59IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgTG9naW5QYWdlIGZyb20gXCIuLi9QYWdlcy9Mb2dpbi9Mb2dpblBhZ2VcIjtcbmltcG9ydCBMb2dvdXQgZnJvbSBcIi4uL1BhZ2VzL0xvZ291dC9Mb2dvdXRcIjtcbmltcG9ydCBQcml2YXRlUm91dGUgZnJvbSBcIi4vUHJpdmF0ZVJvdXRlXCI7XG5pbXBvcnQgU2VydmVyTGlzdFBhZ2UgZnJvbSBcIi4uL1BhZ2VzL1NlcnZlckxpc3QvU2VydmVyTGlzdFBhZ2VcIjtcblxuZXhwb3J0IGNvbnN0IEFwcFJvdXRlciA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Um91dGVyIGJhc2VuYW1lPVwiL1wiPlxuICAgICAgPFJvdXRlcz5cbiAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgZWxlbWVudD17PE5hdmlnYXRlIHRvPVwiL3NlcnZlci1saXN0XCIgcmVwbGFjZSAvPn0gLz5cbiAgICAgICAgPFJvdXRlIHBhdGg9XCIvbG9naW5cIiBlbGVtZW50PXs8TG9naW5QYWdlIC8+fSAvPlxuICAgICAgICA8Um91dGUgZWxlbWVudD17PFByaXZhdGVSb3V0ZSAvPn0+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvc2VydmVyLWxpc3RcIiBlbGVtZW50PXs8U2VydmVyTGlzdFBhZ2UgLz59IC8+XG4gICAgICAgIDwvUm91dGU+XG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL2xvZ291dFwiIGVsZW1lbnQ9ezxMb2dvdXQgLz59IC8+XG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiKlwiIGVsZW1lbnQ9ezxOYXZpZ2F0ZSB0bz1cIi9cIiByZXBsYWNlIC8+fSAvPlxuICAgICAgPC9Sb3V0ZXM+XG4gICAgPC9Sb3V0ZXI+XG4gICk7XG59O1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xuaW1wb3J0IFJlYWN0LCB7IFJlYWN0Tm9kZSwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBBdXRoQ29udGV4dCBmcm9tIFwiLi9BdXRoQ29udGV4dFwiO1xuXG5pbnRlcmZhY2UgSUF1dGhDb250ZXh0UHJvdmlkZXJQcm9wcyB7XG4gIGNoaWxkcmVuOiBSZWFjdE5vZGU7XG59XG5cbmV4cG9ydCBjb25zdCBBdXRoQ29udGV4dFByb3ZpZGVyID0gKHByb3BzOiBJQXV0aENvbnRleHRQcm92aWRlclByb3BzKSA9PiB7XG4gIGNvbnN0IFt0b2tlbiwgc2V0VG9rZW5dID0gdXNlU3RhdGU8c3RyaW5nPihzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwidG9rZW5cIikpO1xuICBjb25zdCBbbG9naW5JblByb2dyZXNzLCBzZXRMb2dpbkluUHJvZ3Jlc3NdID0gdXNlU3RhdGU8Ym9vbGVhbj4oKTtcbiAgY29uc3QgW2xvZ2luRXJyb3IsIHNldExvZ2luRXJyb3JdID0gdXNlU3RhdGUoKTtcbiAgY29uc3QgaXNMb2dnZWRJbiA9ICEhdG9rZW47XG5cbiAgY29uc3QgbG9naW4gPSBhc3luYyAodXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4ge1xuICAgIHNldExvZ2luSW5Qcm9ncmVzcyh0cnVlKTtcbiAgICBzZXRMb2dpbkVycm9yKHVuZGVmaW5lZCk7XG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHVzZXJuYW1lLFxuICAgICAgcGFzc3dvcmQsXG4gICAgfTtcbiAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04XCIsXG4gICAgICB9LFxuICAgIH07XG4gICAgYXdhaXQgYXhpb3NcbiAgICAgIC5wb3N0KFwiaHR0cHM6Ly9wbGF5Z3JvdW5kLnRlc29uZXQubHQvdjEvdG9rZW5zXCIsIGRhdGEsIGNvbmZpZylcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInRva2VuXCIsIHJlcy5kYXRhLnRva2VuKTtcbiAgICAgICAgc2V0VG9rZW4ocmVzLmRhdGEudG9rZW4pO1xuICAgICAgICBzZXRMb2dpbkluUHJvZ3Jlc3MoZmFsc2UpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgc2V0TG9naW5FcnJvcihlcnJvcik7XG4gICAgICAgIHNldExvZ2luSW5Qcm9ncmVzcyhmYWxzZSk7XG4gICAgICB9KTtcbiAgfTtcblxuICBjb25zdCBsb2dvdXQgPSAoKSA9PiB7XG4gICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShcInRva2VuXCIpO1xuICAgIHNldFRva2VuKHVuZGVmaW5lZCk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8QXV0aENvbnRleHQuUHJvdmlkZXJcbiAgICAgIHZhbHVlPXt7IGlzTG9nZ2VkSW4sIGxvZ2luLCBsb2dvdXQsIGxvZ2luRXJyb3IsIGxvZ2luSW5Qcm9ncmVzcyB9fVxuICAgID5cbiAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICA8L0F1dGhDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXF1ZXJ5XCI7XG5pbXBvcnQgeyBHbG9iYWxTdHlsZSB9IGZyb20gXCIuL0FwcC5zdHlsZWRcIjtcbmltcG9ydCB7IEFwcFJvdXRlciB9IGZyb20gXCIuL1JvdXRpbmcvQXBwUm91dGVyXCI7XG5pbXBvcnQgeyBBdXRoQ29udGV4dFByb3ZpZGVyIH0gZnJvbSBcIi4vc3RvcmUvYXV0aC9BdXRoQ29udGV4dFByb3ZpZGVyXCI7XG5cbmNvbnN0IHF1ZXJ5Q2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KHtcbiAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICBxdWVyaWVzOiB7XG4gICAgICByZWZldGNoT25XaW5kb3dGb2N1czogdHJ1ZSxcbiAgICAgIHJlZmV0Y2hPbk1vdW50OiBmYWxzZSxcbiAgICAgIHJlZmV0Y2hPblJlY29ubmVjdDogdHJ1ZSxcbiAgICAgIHJldHJ5OiAxLFxuICAgICAgc3RhbGVUaW1lOiAzMDAwMCxcbiAgICB9LFxuICB9LFxufSk7XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8QXV0aENvbnRleHRQcm92aWRlcj5cbiAgICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PlxuICAgICAgICA8R2xvYmFsU3R5bGUgLz5cbiAgICAgICAgPEFwcFJvdXRlciAvPlxuICAgICAgPC9RdWVyeUNsaWVudFByb3ZpZGVyPlxuICAgIDwvQXV0aENvbnRleHRQcm92aWRlcj5cbiAgKTtcbn07XG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCJpbXBvcnQgeyBjb25maWd1cmVTdG9yZSB9IGZyb20gXCJAcmVkdXhqcy90b29sa2l0XCI7XG5pbXBvcnQgc29ydFJlZHVjZXIgZnJvbSBcIi4vc29ydFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElTb3J0UGFyYW1zIHtcbiAgb3JkZXJCeTogc3RyaW5nO1xuICBvcmRlcjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElSb290U3RhdGUge1xuICBzb3J0OiB7XG4gICAgc29ydFBhcmFtczogSVNvcnRQYXJhbXM7XG4gIH07XG59XG5cbmNvbnN0IHN0b3JlID0gY29uZmlndXJlU3RvcmUoeyByZWR1Y2VyOiB7IHNvcnQ6IHNvcnRSZWR1Y2VyIH0gfSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0b3JlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHBcIjtcbmltcG9ydCBzdG9yZSBmcm9tIFwiLi9zdG9yZS9yZWR1eFwiO1xuXG5jb25zdCByb290ID0gY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikhKTtcbnJvb3QucmVuZGVyKFxuICA8UmVhY3QuU3RyaWN0TW9kZT5cbiAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgIDxBcHAgLz5cbiAgICA8L1Byb3ZpZGVyPlxuICA8L1JlYWN0LlN0cmljdE1vZGU+XG4pO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuXG5mdW5jdGlvbiBQcm92aWRlcih7XG4gIHN0b3JlLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgc2VydmVyU3RhdGVcbn0pIHtcbiAgY29uc3QgY29udGV4dFZhbHVlID0gdXNlTWVtbygoKSA9PiB7XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb24sXG4gICAgICBnZXRTZXJ2ZXJTdGF0ZTogc2VydmVyU3RhdGUgPyAoKSA9PiBzZXJ2ZXJTdGF0ZSA6IHVuZGVmaW5lZFxuICAgIH07XG4gIH0sIFtzdG9yZSwgc2VydmVyU3RhdGVdKTtcbiAgY29uc3QgcHJldmlvdXNTdGF0ZSA9IHVzZU1lbW8oKCkgPT4gc3RvcmUuZ2V0U3RhdGUoKSwgW3N0b3JlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHN1YnNjcmlwdGlvblxuICAgIH0gPSBjb250ZXh0VmFsdWU7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHVuZGVmaW5lZDtcbiAgICB9O1xuICB9LCBbY29udGV4dFZhbHVlLCBwcmV2aW91c1N0YXRlXSk7XG4gIGNvbnN0IENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0OyAvLyBAdHMtaWdub3JlICdBbnlBY3Rpb24nIGlzIGFzc2lnbmFibGUgdG8gdGhlIGNvbnN0cmFpbnQgb2YgdHlwZSAnQScsIGJ1dCAnQScgY291bGQgYmUgaW5zdGFudGlhdGVkIHdpdGggYSBkaWZmZXJlbnQgc3VidHlwZVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidXRpbHMiLCJzZXR0bGUiLCJjb29raWVzIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwidHJhbnNpdGlvbmFsRGVmYXVsdHMiLCJBeGlvc0Vycm9yIiwiQ2FuY2VsZWRFcnJvciIsInBhcnNlUHJvdG9jb2wiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uQ2FuY2VsZWQiLCJyZXF1ZXN0RGF0YSIsImRhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJkb25lIiwiY2FuY2VsVG9rZW4iLCJ1bnN1YnNjcmliZSIsInNpZ25hbCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0Zvcm1EYXRhIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJ1cmwiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJ2YWx1ZSIsImVyciIsIm9wZW4iLCJtZXRob2QiLCJ0b1VwcGVyQ2FzZSIsInBhcmFtcyIsInBhcmFtc1NlcmlhbGl6ZXIiLCJ0aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwiaW5kZXhPZiIsInNldFRpbWVvdXQiLCJvbmFib3J0IiwiRUNPTk5BQk9SVEVEIiwib25lcnJvciIsIkVSUl9ORVRXT1JLIiwib250aW1lb3V0IiwidGltZW91dEVycm9yTWVzc2FnZSIsInRyYW5zaXRpb25hbCIsImNsYXJpZnlUaW1lb3V0RXJyb3IiLCJFVElNRURPVVQiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4c3JmQ29va2llTmFtZSIsInJlYWQiLCJ1bmRlZmluZWQiLCJ4c3JmSGVhZGVyTmFtZSIsImZvckVhY2giLCJ2YWwiLCJrZXkiLCJ0b0xvd2VyQ2FzZSIsInNldFJlcXVlc3RIZWFkZXIiLCJpc1VuZGVmaW5lZCIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsIiwidHlwZSIsImFib3J0Iiwic3Vic2NyaWJlIiwiYWJvcnRlZCIsInByb3RvY29sIiwiRVJSX0JBRF9SRVFVRVNUIiwic2VuZCIsImJpbmQiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiYXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJjb250ZXh0IiwiaW5zdGFuY2UiLCJwcm90b3R5cGUiLCJleHRlbmQiLCJjcmVhdGUiLCJpbnN0YW5jZUNvbmZpZyIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJWRVJTSU9OIiwidG9Gb3JtRGF0YSIsIkNhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwiZXhlY3V0b3IiLCJUeXBlRXJyb3IiLCJyZXNvbHZlUHJvbWlzZSIsInRoaXMiLCJwcm9taXNlIiwidG9rZW4iLCJ0aGVuIiwiX2xpc3RlbmVycyIsImkiLCJsIiwibGVuZ3RoIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsIm1lc3NhZ2UiLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwibGlzdGVuZXIiLCJwdXNoIiwiaW5kZXgiLCJzcGxpY2UiLCJzb3VyY2UiLCJjIiwiY2FsbCIsIkVSUl9DQU5DRUxFRCIsIm5hbWUiLCJpbmhlcml0cyIsIl9fQ0FOQ0VMX18iLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJ2YWxpZGF0b3IiLCJ2YWxpZGF0b3JzIiwiZGVmYXVsdHMiLCJpbnRlcmNlcHRvcnMiLCJjb25maWdPclVybCIsImFzc2VydE9wdGlvbnMiLCJzaWxlbnRKU09OUGFyc2luZyIsImJvb2xlYW4iLCJmb3JjZWRKU09OUGFyc2luZyIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJydW5XaGVuIiwic3luY2hyb25vdXMiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJjaGFpbiIsIkFycmF5IiwiYXBwbHkiLCJjb25jYXQiLCJzaGlmdCIsIm5ld0NvbmZpZyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImVycm9yIiwiZ2V0VXJpIiwiZ2VuZXJhdGVIVFRQTWV0aG9kIiwiaXNGb3JtIiwiY29kZSIsIkVycm9yIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJudW1iZXIiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJzdGFjayIsImRlc2NyaXB0b3JzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiZnJvbSIsImN1c3RvbVByb3BzIiwiYXhpb3NFcnJvciIsInRvRmxhdE9iamVjdCIsIm9iaiIsImFzc2lnbiIsImhhbmRsZXJzIiwidXNlIiwib3B0aW9ucyIsImVqZWN0IiwiaWQiLCJmbiIsImgiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRyYW5zZm9ybVJlcXVlc3QiLCJtZXJnZSIsImNvbW1vbiIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsImNvbmZpZzEiLCJjb25maWcyIiwiZ2V0TWVyZ2VkVmFsdWUiLCJ0YXJnZXQiLCJpc1BsYWluT2JqZWN0IiwiaXNBcnJheSIsInNsaWNlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInByb3AiLCJ2YWx1ZUZyb21Db25maWcyIiwiZGVmYXVsdFRvQ29uZmlnMiIsIm1lcmdlRGlyZWN0S2V5cyIsIm1lcmdlTWFwIiwia2V5cyIsImNvbmZpZ1ZhbHVlIiwidmFsaWRhdGVTdGF0dXMiLCJFUlJfQkFEX1JFU1BPTlNFIiwiTWF0aCIsImZsb29yIiwiZm5zIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwicHJvY2VzcyIsInRvU3RyaW5nIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNGaWxlTGlzdCIsImlzT2JqZWN0UGF5bG9hZCIsImlzT2JqZWN0IiwiY29udGVudFR5cGUiLCJfRm9ybURhdGEiLCJlbnYiLCJGb3JtRGF0YSIsInJhd1ZhbHVlIiwicGFyc2VyIiwiZW5jb2RlciIsImlzU3RyaW5nIiwiSlNPTiIsInBhcnNlIiwidHJpbSIsImUiLCJzdHJpbmdpZnkiLCJzdHJpbmdpZnlTYWZlbHkiLCJzdHJpY3RKU09OUGFyc2luZyIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidGhpc0FyZyIsImFyZ3MiLCJhcmd1bWVudHMiLCJlbmNvZGUiLCJyZXBsYWNlIiwic2VyaWFsaXplZFBhcmFtcyIsInBhcnRzIiwidiIsImlzRGF0ZSIsInRvSVNPU3RyaW5nIiwiam9pbiIsImhhc2htYXJrSW5kZXgiLCJyZWxhdGl2ZVVSTCIsIndyaXRlIiwiZXhwaXJlcyIsInBhdGgiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImRvY3VtZW50IiwibWF0Y2giLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJ0ZXN0IiwicGF5bG9hZCIsIm9yaWdpblVSTCIsIm1zaWUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ1cmxQYXJzaW5nTm9kZSIsImNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlVVJMIiwiaHJlZiIsInNldEF0dHJpYnV0ZSIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCJub3JtYWxpemVkTmFtZSIsImlnbm9yZUR1cGxpY2F0ZU9mIiwic3BsaXQiLCJsaW5lIiwic3Vic3RyIiwiZXhlYyIsImNhbGxiYWNrIiwiYXJyIiwiZm9ybURhdGEiLCJjb252ZXJ0VmFsdWUiLCJpc1R5cGVkQXJyYXkiLCJCbG9iIiwiQnVmZmVyIiwiYnVpbGQiLCJwYXJlbnRLZXkiLCJmdWxsS2V5IiwiZW5kc1dpdGgiLCJ0b0FycmF5IiwiZWwiLCJhcHBlbmQiLCJwb3AiLCJ0aGluZyIsImRlcHJlY2F0ZWRXYXJuaW5ncyIsInZlcnNpb24iLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiZGVzYyIsIm9wdHMiLCJFUlJfREVQUkVDQVRFRCIsImNvbnNvbGUiLCJ3YXJuIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiRVJSX0JBRF9PUFRJT05fVkFMVUUiLCJyZXN1bHQiLCJFUlJfQkFEX09QVElPTiIsImNhY2hlIiwia2luZE9mIiwic3RyIiwia2luZE9mVGVzdCIsImdldFByb3RvdHlwZU9mIiwiaXNGdW5jdGlvbiIsImhhc093blByb3BlcnR5IiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJjb25zdHJ1Y3RvciIsInBhdHRlcm4iLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsInBpcGUiLCJwcm9kdWN0IiwiYXNzaWduVmFsdWUiLCJhIiwiYiIsInN0cmlwQk9NIiwiY29udGVudCIsImNoYXJDb2RlQXQiLCJzdXBlckNvbnN0cnVjdG9yIiwicHJvcHMiLCJzb3VyY2VPYmoiLCJkZXN0T2JqIiwiZmlsdGVyIiwibWVyZ2VkIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNlYXJjaFN0cmluZyIsInBvc2l0aW9uIiwiU3RyaW5nIiwibGFzdEluZGV4IiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJTeW1ib2wiLCJmb3IiLCJkIiwiZiIsImciLCJrIiwibSIsIm4iLCJwIiwicSIsInIiLCJ0IiwidyIsIngiLCJ5IiwieiIsInUiLCIkJHR5cGVvZiIsIkEiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsImFhIiwiY2EiLCJkYSIsIlNldCIsImVhIiwiZmEiLCJoYSIsImFkZCIsImlhIiwiamEiLCJrYSIsImxhIiwibWEiLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInJhIiwic2EiLCJ0YSIsInBhIiwiaXNOYU4iLCJxYSIsIm9hIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJ1YSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwidmEiLCJ3YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIml0ZXJhdG9yIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJPYSIsInByZXBhcmVTdGFja1RyYWNlIiwic2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImluY2x1ZGVzIiwiUGEiLCJ0YWciLCJRYSIsIl9jb250ZXh0IiwiX3BheWxvYWQiLCJfaW5pdCIsIlJhIiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJVYSIsIldhIiwiY2hlY2tlZCIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJvd25lckRvY3VtZW50IiwiZWIiLCJmYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiY2hpbGRyZW4iLCJoYiIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwidmFsdWVPZiIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm9iIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJwYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJxYiIsInJiIiwic2IiLCJzdHlsZSIsInNldFByb3BlcnR5Iiwic3Vic3RyaW5nIiwidGIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ1YiIsInZiIiwiaXMiLCJ3YiIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk5iIiwib25FcnJvciIsIk9iIiwiUGIiLCJRYiIsIlJiIiwiU2IiLCJUYiIsIlZiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCJXYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiWGIiLCJaYiIsImNoaWxkIiwic2libGluZyIsImN1cnJlbnQiLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiY2x6MzIiLCJwYyIsInFjIiwibG9nIiwiTE4yIiwicmMiLCJzYyIsInRjIiwidWMiLCJwZW5kaW5nTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwidmMiLCJ4YyIsInljIiwiemMiLCJBYyIsImV2ZW50VGltZXMiLCJDYyIsIkMiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJNYXAiLCJQYyIsIlFjIiwiUmMiLCJTYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIlRjIiwibmF0aXZlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlZjIiwiV2MiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJYYyIsIlljIiwiZGlzcGF0Y2hFdmVudCIsIlpjIiwiJGMiLCJhZCIsImJkIiwiY2QiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsImRkIiwiZWQiLCJ0cmFuc2l0aW9uIiwiZmQiLCJnZCIsImhkIiwiVWMiLCJzdG9wUHJvcGFnYXRpb24iLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwZCIsInFkIiwicmQiLCJfcmVhY3ROYW1lIiwiX3RhcmdldEluc3QiLCJjdXJyZW50VGFyZ2V0IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJwcmV2ZW50RGVmYXVsdCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJpc1BlcnNpc3RlbnQiLCJ3ZCIsInhkIiwieWQiLCJzZCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsImlzVHJ1c3RlZCIsInRkIiwidWQiLCJ2aWV3IiwiZGV0YWlsIiwidmQiLCJBZCIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwiY3RybEtleSIsInNoaWZ0S2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJJZCIsImNsaXBib2FyZERhdGEiLCJKZCIsIkxkIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlFkIiwiZnJvbUNoYXJDb2RlIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJSZCIsIlRkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicmFuZ2UiLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJOZSIsImNvbnRlbnRFZGl0YWJsZSIsIk9lIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsImRvY3VtZW50RWxlbWVudCIsInN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJtaW4iLCJkZWZhdWx0VmlldyIsImdldFNlbGVjdGlvbiIsInJhbmdlQ291bnQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJlbGVtZW50IiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsIlBlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwiV2UiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJYZSIsIlllIiwiWmUiLCJhbmltYXRpb24iLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJsZiIsIm1mIiwibmYiLCJVYiIsIkQiLCJvZiIsImhhcyIsInBmIiwicWYiLCJyZiIsInJhbmRvbSIsInNmIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJKIiwiRiIsInRmIiwidWYiLCJwYXJlbnRXaW5kb3ciLCJ2ZiIsIndmIiwibmEiLCJ4YSIsIiRhIiwiYmEiLCJqZSIsImNoYXIiLCJrZSIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX2h0bWwiLCJGZiIsIkdmIiwiY2xlYXJUaW1lb3V0IiwiSGYiLCJKZiIsInF1ZXVlTWljcm90YXNrIiwiY2F0Y2giLCJJZiIsIktmIiwiTGYiLCJNZiIsInByZXZpb3VzU2libGluZyIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJFIiwiRyIsIlZmIiwiSCIsIldmIiwiWGYiLCJZZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIlpmIiwiJGYiLCJhZyIsImJnIiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2ciLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJzZyIsInRnIiwidWciLCJ2ZyIsIndnIiwieGciLCJ5ZyIsIkkiLCJ6ZyIsIkFnIiwiQmciLCJlbGVtZW50VHlwZSIsImRlbGV0aW9ucyIsIkNnIiwicGVuZGluZ1Byb3BzIiwib3ZlcmZsb3ciLCJ0cmVlQ29udGV4dCIsInJldHJ5TGFuZSIsIkRnIiwibW9kZSIsIkVnIiwiRmciLCJHZyIsIm1lbW9pemVkUHJvcHMiLCJIZyIsIklnIiwiSmciLCJLZyIsIkxnIiwiTWciLCJOZyIsIk9nIiwiUGciLCJRZyIsIlJnIiwiX2N1cnJlbnRWYWx1ZSIsIlNnIiwiY2hpbGRMYW5lcyIsIlRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJVZyIsIlZnIiwibWVtb2l6ZWRWYWx1ZSIsIm5leHQiLCJXZyIsIlhnIiwiWWciLCJpbnRlcmxlYXZlZCIsIlpnIiwiJGciLCJhaCIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsImJoIiwiY2giLCJldmVudFRpbWUiLCJsYW5lIiwiZGgiLCJLIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJpaCIsImpoIiwiQ29tcG9uZW50IiwicmVmcyIsImtoIiwibmgiLCJpc01vdW50ZWQiLCJfcmVhY3RJbnRlcm5hbHMiLCJlbnF1ZXVlU2V0U3RhdGUiLCJMIiwibGgiLCJtaCIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJvaCIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwicGgiLCJzdGF0ZSIsInVwZGF0ZXIiLCJxaCIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsInJoIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJzaCIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJpbXBsZW1lbnRhdGlvbiIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwidGFnTmFtZSIsIkpoIiwiS2giLCJMaCIsIk0iLCJNaCIsInJldmVhbE9yZGVyIiwiTmgiLCJPaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiUGgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUWgiLCJSaCIsIk4iLCJPIiwiUCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiUSIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJiYXNlUXVldWUiLCJxdWV1ZSIsImRpIiwiZWkiLCJmaSIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwiZ2V0U25hcHNob3QiLCJsaSIsIm1pIiwiUiIsIm5pIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsIm9pIiwicGkiLCJxaSIsInJpIiwiZGVzdHJveSIsImRlcHMiLCJzaSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJCaSIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiS2kiLCJkaWdlc3QiLCJMaSIsIk1pIiwiTmkiLCJXZWFrTWFwIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJjb21wb25lbnREaWRDYXRjaCIsIlNpIiwiY29tcG9uZW50U3RhY2siLCJUaSIsInBpbmdDYWNoZSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZaSIsIlppIiwiJGkiLCJhaiIsImJqIiwiY2oiLCJkaiIsImVqIiwiYmFzZUxhbmVzIiwiY2FjaGVQb29sIiwidHJhbnNpdGlvbnMiLCJmaiIsImdqIiwiaGoiLCJpaiIsImpqIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwia2oiLCJsaiIsInBlbmRpbmdDb250ZXh0IiwibWoiLCJBaiIsIkNqIiwiRGoiLCJuaiIsIm9qIiwicGoiLCJmYWxsYmFjayIsInFqIiwicmoiLCJ0aiIsImRhdGFzZXQiLCJkZ3N0IiwidWoiLCJ2aiIsIl9yZWFjdFJldHJ5Iiwic2oiLCJzdWJ0cmVlRmxhZ3MiLCJ3aiIsInhqIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxNb2RlIiwieWoiLCJFaiIsIlMiLCJGaiIsIkdqIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsInN1cHByZXNzSHlkcmF0aW9uV2FybmluZyIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImF1dG9Gb2N1cyIsImNyZWF0ZVRleHROb2RlIiwiVCIsIkhqIiwiSWoiLCJKaiIsIktqIiwiVSIsIkxqIiwiV2Vha1NldCIsIlYiLCJNaiIsIlciLCJOaiIsIk9qIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiV2oiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiWGoiLCJYIiwiWWoiLCJaaiIsImFrIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJpc0hpZGRlbiIsImdrIiwiaGsiLCJkaXNwbGF5IiwiaWsiLCJqayIsImtrIiwibGsiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInNyYyIsIldrIiwibWsiLCJjZWlsIiwibmsiLCJvayIsInBrIiwiWSIsIloiLCJxayIsInJrIiwic2siLCJ0ayIsInVrIiwiSW5maW5pdHkiLCJ2ayIsIndrIiwieGsiLCJ5ayIsInprIiwiQWsiLCJCayIsIkNrIiwiRGsiLCJFayIsImNhbGxiYWNrTm9kZSIsImV4cGlyYXRpb25UaW1lcyIsImV4cGlyZWRMYW5lcyIsIndjIiwiY2FsbGJhY2tQcmlvcml0eSIsImlnIiwiRmsiLCJHayIsIkhrIiwiSWsiLCJKayIsIktrIiwiTGsiLCJNayIsIk5rIiwiT2siLCJQayIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJRayIsInRpbWVvdXRIYW5kbGUiLCJSayIsIlNrIiwiVGsiLCJVayIsIlZrIiwibXV0YWJsZVJlYWRMYW5lcyIsIkJjIiwiUGoiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm1jIiwib25SZWNvdmVyYWJsZUVycm9yIiwiWGsiLCJvblBvc3RDb21taXRGaWJlclJvb3QiLCJZayIsIlprIiwiYWwiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiYmwiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiY2wiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiZGwiLCJmbCIsImdsIiwiaGwiLCJpbCIsImpsIiwiemoiLCIkayIsImxsIiwicmVwb3J0RXJyb3IiLCJtbCIsIl9pbnRlcm5hbFJvb3QiLCJubCIsIm9sIiwicGwiLCJxbCIsInNsIiwicmwiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsInRsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidWwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwidmwiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRFcnJvckhhbmRsZXIiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsInJlY29uY2lsZXJWZXJzaW9uIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwid2wiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiZ2V0TW9kdWxlSWQiLCJmb2N1c01hbmFnZXIiLCJfU3Vic2NyaWJhYmxlIiwiRm9jdXNNYW5hZ2VyIiwiX3RoaXMiLCJzZXR1cCIsIm9uRm9jdXMiLCJfd2luZG93IiwiX3Byb3RvIiwib25TdWJzY3JpYmUiLCJjbGVhbnVwIiwic2V0RXZlbnRMaXN0ZW5lciIsIm9uVW5zdWJzY3JpYmUiLCJfdGhpcyRjbGVhbnVwIiwiaGFzTGlzdGVuZXJzIiwiX3RoaXMkY2xlYW51cDIiLCJfdGhpczIiLCJmb2N1c2VkIiwic2V0Rm9jdXNlZCIsImlzRm9jdXNlZCIsInZpc2liaWxpdHlTdGF0ZSIsImxvZ2dlciIsImdldExvZ2dlciIsInNldExvZ2dlciIsIm5ld0xvZ2dlciIsIm5vdGlmeU1hbmFnZXIiLCJOb3RpZnlNYW5hZ2VyIiwidHJhbnNhY3Rpb25zIiwibm90aWZ5Rm4iLCJiYXRjaE5vdGlmeUZuIiwiYmF0Y2giLCJmbHVzaCIsInNjaGVkdWxlIiwiYmF0Y2hDYWxscyIsIl9sZW4iLCJfa2V5IiwiX3RoaXMzIiwic2V0Tm90aWZ5RnVuY3Rpb24iLCJzZXRCYXRjaE5vdGlmeUZ1bmN0aW9uIiwib25saW5lTWFuYWdlciIsIk9ubGluZU1hbmFnZXIiLCJvbk9ubGluZSIsIm9ubGluZSIsInNldE9ubGluZSIsImlzT25saW5lIiwib25MaW5lIiwiUXVlcnkiLCJhYm9ydFNpZ25hbENvbnN1bWVkIiwiaGFkT2JzZXJ2ZXJzIiwiZGVmYXVsdE9wdGlvbnMiLCJzZXRPcHRpb25zIiwib2JzZXJ2ZXJzIiwicXVlcnlLZXkiLCJxdWVyeUhhc2giLCJpbml0aWFsU3RhdGUiLCJnZXREZWZhdWx0U3RhdGUiLCJzY2hlZHVsZUdjIiwiX3RoaXMkb3B0aW9ucyRjYWNoZVRpIiwiY2FjaGVUaW1lIiwibWF4Iiwic2V0RGVmYXVsdE9wdGlvbnMiLCJjbGVhckdjVGltZW91dCIsImdjVGltZW91dCIsIm9wdGlvbmFsUmVtb3ZlIiwiaXNGZXRjaGluZyIsInNldERhdGEiLCJfdGhpcyRvcHRpb25zJGlzRGF0YUUiLCJfdGhpcyRvcHRpb25zIiwicHJldkRhdGEiLCJpc0RhdGFFcXVhbCIsInN0cnVjdHVyYWxTaGFyaW5nIiwiZGF0YVVwZGF0ZWRBdCIsInVwZGF0ZWRBdCIsInNldFN0YXRlIiwic2V0U3RhdGVPcHRpb25zIiwiX3RoaXMkcmV0cnllciIsInJldHJ5ZXIiLCJzaWxlbnQiLCJyZXNldCIsImlzQWN0aXZlIiwic29tZSIsIm9ic2VydmVyIiwiZW5hYmxlZCIsImlzU3RhbGUiLCJpc0ludmFsaWRhdGVkIiwiZ2V0Q3VycmVudFJlc3VsdCIsImlzU3RhbGVCeVRpbWUiLCJzdGFsZVRpbWUiLCJfdGhpcyRyZXRyeWVyMiIsImZpbmQiLCJzaG91bGRGZXRjaE9uV2luZG93Rm9jdXMiLCJyZWZldGNoIiwiY29udGludWUiLCJfdGhpcyRyZXRyeWVyMyIsInNob3VsZEZldGNoT25SZWNvbm5lY3QiLCJhZGRPYnNlcnZlciIsIm5vdGlmeSIsInF1ZXJ5IiwicmVtb3ZlT2JzZXJ2ZXIiLCJpc1RyYW5zcG9ydENhbmNlbGFibGUiLCJyZXZlcnQiLCJjYW5jZWxSZXRyeSIsImdldE9ic2VydmVyc0NvdW50IiwiaW52YWxpZGF0ZSIsImZldGNoIiwiZmV0Y2hPcHRpb25zIiwiX3RoaXMkb3B0aW9ucyRiZWhhdmlvIiwiX2NvbnRleHQkZmV0Y2hPcHRpb25zIiwiX2Fib3J0Q29udHJvbGxlciRhYm9yIiwiY2FuY2VsUmVmZXRjaCIsIl90aGlzJHJldHJ5ZXI0IiwiY29udGludWVSZXRyeSIsInF1ZXJ5Rm4iLCJhYm9ydENvbnRyb2xsZXIiLCJxdWVyeUZuQ29udGV4dCIsInBhZ2VQYXJhbSIsIl90aGlzJG9wdGlvbnMkYmVoYXZpbzIiLCJfY29udGV4dCRmZXRjaE9wdGlvbnMyIiwiZmV0Y2hGbiIsImJlaGF2aW9yIiwib25GZXRjaCIsInJldmVydFN0YXRlIiwiZmV0Y2hNZXRhIiwib25TdWNjZXNzIiwib25GYWlsIiwib25QYXVzZSIsIm9uQ29udGludWUiLCJyZXRyeSIsInJldHJ5RGVsYXkiLCJyZWR1Y2VyIiwib25RdWVyeVVwZGF0ZSIsImluaXRpYWxEYXRhIiwiaW5pdGlhbERhdGFVcGRhdGVkQXQiLCJoYXNEYXRhIiwiZGF0YVVwZGF0ZUNvdW50IiwiZXJyb3JVcGRhdGVDb3VudCIsImVycm9yVXBkYXRlZEF0IiwiZmV0Y2hGYWlsdXJlQ291bnQiLCJpc1BhdXNlZCIsIl9hY3Rpb24kbWV0YSIsIl9hY3Rpb24kZGF0YVVwZGF0ZWRBdCIsIlF1ZXJ5Q2FjaGUiLCJxdWVyaWVzIiwicXVlcmllc01hcCIsImNsaWVudCIsIl9vcHRpb25zJHF1ZXJ5SGFzaCIsImRlZmF1bHRRdWVyeU9wdGlvbnMiLCJnZXRRdWVyeURlZmF1bHRzIiwicXVlcnlJbk1hcCIsImNsZWFyIiwiZ2V0QWxsIiwiYXJnMSIsImFyZzIiLCJmaWx0ZXJzIiwiZXhhY3QiLCJmaW5kQWxsIiwiX3RoaXM0IiwiX3RoaXM1IiwiTXV0YXRpb24iLCJtdXRhdGlvbklkIiwibXV0YXRpb25DYWNoZSIsImZhaWx1cmVDb3VudCIsInZhcmlhYmxlcyIsImV4ZWN1dGUiLCJyZXN0b3JlZCIsIm9uTXV0YXRlIiwiZXhlY3V0ZU11dGF0aW9uIiwib25TZXR0bGVkIiwiX3RoaXMkb3B0aW9ucyRyZXRyeSIsIm11dGF0aW9uRm4iLCJvbk11dGF0aW9uVXBkYXRlIiwiTXV0YXRpb25DYWNoZSIsIm11dGF0aW9ucyIsIm11dGF0aW9uIiwiZGVmYXVsdE11dGF0aW9uT3B0aW9ucyIsIm11dGF0aW9uS2V5IiwiZ2V0TXV0YXRpb25EZWZhdWx0cyIsInJlc3VtZVBhdXNlZE11dGF0aW9ucyIsInBhdXNlZE11dGF0aW9ucyIsInJlZHVjZSIsImdldE5leHRQYWdlUGFyYW0iLCJwYWdlcyIsIlF1ZXJ5Q2xpZW50IiwicXVlcnlDYWNoZSIsInF1ZXJ5RGVmYXVsdHMiLCJtdXRhdGlvbkRlZmF1bHRzIiwibW91bnQiLCJ1bnN1YnNjcmliZUZvY3VzIiwidW5zdWJzY3JpYmVPbmxpbmUiLCJfdGhpcyR1bnN1YnNjcmliZUZvY3UiLCJfdGhpcyR1bnN1YnNjcmliZU9ubGkiLCJmZXRjaGluZyIsImlzTXV0YXRpbmciLCJnZXRRdWVyeURhdGEiLCJfdGhpcyRxdWVyeUNhY2hlJGZpbmQiLCJnZXRRdWVyaWVzRGF0YSIsInF1ZXJ5S2V5T3JGaWx0ZXJzIiwiZ2V0UXVlcnlDYWNoZSIsIm1hcCIsIl9yZWYiLCJzZXRRdWVyeURhdGEiLCJwYXJzZWRPcHRpb25zIiwiZGVmYXVsdGVkT3B0aW9ucyIsInNldFF1ZXJpZXNEYXRhIiwiX3JlZjIiLCJnZXRRdWVyeVN0YXRlIiwiX3RoaXMkcXVlcnlDYWNoZSRmaW5kMiIsInJlbW92ZVF1ZXJpZXMiLCJyZXNldFF1ZXJpZXMiLCJhcmczIiwiX3BhcnNlRmlsdGVyQXJnczMiLCJyZWZldGNoRmlsdGVycyIsImFjdGl2ZSIsInJlZmV0Y2hRdWVyaWVzIiwiY2FuY2VsUXVlcmllcyIsIl9wYXJzZUZpbHRlckFyZ3M0IiwiX3BhcnNlRmlsdGVyQXJnczQkIiwiY2FuY2VsT3B0aW9ucyIsImludmFsaWRhdGVRdWVyaWVzIiwiX3JlZjMiLCJfZmlsdGVycyRyZWZldGNoQWN0aXYiLCJfZmlsdGVycyRyZWZldGNoSW5hY3QiLCJfcGFyc2VGaWx0ZXJBcmdzNSIsInJlZmV0Y2hBY3RpdmUiLCJpbmFjdGl2ZSIsInJlZmV0Y2hJbmFjdGl2ZSIsIl90aGlzNiIsIl9wYXJzZUZpbHRlckFyZ3M2IiwicmVmZXRjaFBhZ2UiLCJ0aHJvd09uRXJyb3IiLCJmZXRjaFF1ZXJ5IiwicHJlZmV0Y2hRdWVyeSIsImZldGNoSW5maW5pdGVRdWVyeSIsIl9jb250ZXh0JGZldGNoT3B0aW9uczMiLCJfY29udGV4dCRmZXRjaE9wdGlvbnM0IiwiX2NvbnRleHQkc3RhdGUkZGF0YSIsIl9jb250ZXh0JHN0YXRlJGRhdGEyIiwiZmV0Y2hNb3JlIiwiaXNGZXRjaGluZ05leHRQYWdlIiwiZGlyZWN0aW9uIiwiaXNGZXRjaGluZ1ByZXZpb3VzUGFnZSIsIm9sZFBhZ2VzIiwib2xkUGFnZVBhcmFtcyIsInBhZ2VQYXJhbXMiLCJhYm9ydFNpZ25hbCIsIm5ld1BhZ2VQYXJhbXMiLCJjYW5jZWxsZWQiLCJidWlsZE5ld1BhZ2VzIiwicGFnZSIsInByZXZpb3VzIiwiZmV0Y2hQYWdlIiwibWFudWFsIiwicXVlcnlGblJlc3VsdCIsIl9tYW51YWwiLCJfcGFyYW0iLCJnZXRQcmV2aW91c1BhZ2VQYXJhbSIsInNob3VsZEZldGNoRmlyc3RQYWdlIiwiX2xvb3AiLCJfcGFyYW0yIiwiZmluYWxQcm9taXNlIiwicHJlZmV0Y2hJbmZpbml0ZVF1ZXJ5IiwiY2FuY2VsTXV0YXRpb25zIiwiX3RoaXM3IiwiZ2V0TXV0YXRpb25DYWNoZSIsImdldERlZmF1bHRPcHRpb25zIiwic2V0UXVlcnlEZWZhdWx0cyIsIl90aGlzJHF1ZXJ5RGVmYXVsdHMkZiIsInNldE11dGF0aW9uRGVmYXVsdHMiLCJfdGhpcyRtdXRhdGlvbkRlZmF1bHQiLCJfZGVmYXVsdGVkIiwiZGVmYXVsdFF1ZXJ5T2JzZXJ2ZXJPcHRpb25zIiwiZGVmYXVsdFJldHJ5RGVsYXkiLCJwb3ciLCJpc0NhbmNlbGFibGUiLCJDYW5jZWxsZWRFcnJvciIsImlzQ2FuY2VsbGVkRXJyb3IiLCJSZXRyeWVyIiwiY2FuY2VsRm4iLCJjb250aW51ZUZuIiwicHJvbWlzZVJlc29sdmUiLCJwcm9taXNlUmVqZWN0IiwiaXNSZXNvbHZlZCIsIm91dGVyUmVzb2x2ZSIsIm91dGVyUmVqZWN0IiwicnVuIiwicHJvbWlzZU9yVmFsdWUiLCJfdW51c2VkIiwiX2NvbmZpZyRyZXRyeSIsIl9jb25maWckcmV0cnlEZWxheSIsImRlbGF5Iiwic2hvdWxkUmV0cnkiLCJjb250aW51ZVJlc29sdmUiLCJTdWJzY3JpYmFibGUiLCJpc1NlcnZlciIsIm5vb3AiLCJmdW5jdGlvbmFsVXBkYXRlIiwiaXNWYWxpZFRpbWVvdXQiLCJlbnN1cmVRdWVyeUtleUFycmF5IiwidGltZVVudGlsU3RhbGUiLCJwYXJzZVF1ZXJ5QXJncyIsImlzUXVlcnlLZXkiLCJwYXJzZUZpbHRlckFyZ3MiLCJtYXRjaFF1ZXJ5IiwicHJlZGljYXRlIiwic3RhbGUiLCJoYXNoUXVlcnlLZXlCeU9wdGlvbnMiLCJwYXJ0aWFsTWF0Y2hLZXkiLCJxdWVyeVN0YXR1c0ZpbHRlciIsIm1hcFF1ZXJ5U3RhdHVzRmlsdGVyIiwibWF0Y2hNdXRhdGlvbiIsImhhc2hRdWVyeUtleSIsInF1ZXJ5S2V5SGFzaEZuIiwiXyIsInNvcnQiLCJwYXJ0aWFsRGVlcEVxdWFsIiwicmVwbGFjZUVxdWFsRGVlcCIsImFycmF5IiwiYVNpemUiLCJiSXRlbXMiLCJiU2l6ZSIsImNvcHkiLCJlcXVhbEl0ZW1zIiwic2hhbGxvd0VxdWFsT2JqZWN0cyIsIm8iLCJoYXNPYmplY3RQcm90b3R5cGUiLCJjdG9yIiwicHJvdCIsInNsZWVwIiwic2NoZWR1bGVNaWNyb3Rhc2siLCJnZXRBYm9ydENvbnRyb2xsZXIiLCJBYm9ydENvbnRyb2xsZXIiLCJkZWZhdWx0Q29udGV4dCIsIlF1ZXJ5Q2xpZW50U2hhcmluZ0NvbnRleHQiLCJnZXRRdWVyeUNsaWVudENvbnRleHQiLCJjb250ZXh0U2hhcmluZyIsIlJlYWN0UXVlcnlDbGllbnRDb250ZXh0IiwiUXVlcnlDbGllbnRQcm92aWRlciIsIl9yZWYkY29udGV4dFNoYXJpbmciLCJDb250ZXh0IiwiUHJvdmlkZXIiLCJRdWVyeU9ic2VydmVyIiwidHJhY2tlZFByb3BzIiwic2VsZWN0RXJyb3IiLCJiaW5kTWV0aG9kcyIsImN1cnJlbnRRdWVyeSIsInNob3VsZEZldGNoT25Nb3VudCIsImV4ZWN1dGVGZXRjaCIsInVwZGF0ZVRpbWVycyIsInNob3VsZEZldGNoT24iLCJyZWZldGNoT25SZWNvbm5lY3QiLCJyZWZldGNoT25XaW5kb3dGb2N1cyIsImNsZWFyVGltZXJzIiwibm90aWZ5T3B0aW9ucyIsInByZXZPcHRpb25zIiwicHJldlF1ZXJ5IiwidXBkYXRlUXVlcnkiLCJtb3VudGVkIiwic2hvdWxkRmV0Y2hPcHRpb25hbGx5IiwidXBkYXRlUmVzdWx0IiwidXBkYXRlU3RhbGVUaW1lb3V0IiwibmV4dFJlZmV0Y2hJbnRlcnZhbCIsImNvbXB1dGVSZWZldGNoSW50ZXJ2YWwiLCJjdXJyZW50UmVmZXRjaEludGVydmFsIiwidXBkYXRlUmVmZXRjaEludGVydmFsIiwiZ2V0T3B0aW1pc3RpY1Jlc3VsdCIsImNyZWF0ZVJlc3VsdCIsImN1cnJlbnRSZXN1bHQiLCJ0cmFja1Jlc3VsdCIsInRyYWNrZWRSZXN1bHQiLCJ0cmFja1Byb3AiLCJ1c2VFcnJvckJvdW5kYXJ5Iiwic3VzcGVuc2UiLCJnZXROZXh0UmVzdWx0IiwiaXNFcnJvciIsImdldEN1cnJlbnRRdWVyeSIsImZldGNoT3B0aW1pc3RpYyIsImNsZWFyU3RhbGVUaW1lb3V0Iiwic3RhbGVUaW1lb3V0SWQiLCJfdGhpcyRvcHRpb25zJHJlZmV0Y2giLCJyZWZldGNoSW50ZXJ2YWwiLCJuZXh0SW50ZXJ2YWwiLCJjbGVhclJlZmV0Y2hJbnRlcnZhbCIsInJlZmV0Y2hJbnRlcnZhbElkIiwic2V0SW50ZXJ2YWwiLCJyZWZldGNoSW50ZXJ2YWxJbkJhY2tncm91bmQiLCJjbGVhckludGVydmFsIiwicHJldlJlc3VsdCIsInByZXZSZXN1bHRTdGF0ZSIsImN1cnJlbnRSZXN1bHRTdGF0ZSIsInByZXZSZXN1bHRPcHRpb25zIiwiY3VycmVudFJlc3VsdE9wdGlvbnMiLCJxdWVyeUNoYW5nZSIsInF1ZXJ5SW5pdGlhbFN0YXRlIiwiY3VycmVudFF1ZXJ5SW5pdGlhbFN0YXRlIiwicHJldlF1ZXJ5UmVzdWx0IiwicHJldmlvdXNRdWVyeVJlc3VsdCIsImlzUHJldmlvdXNEYXRhIiwiaXNQbGFjZWhvbGRlckRhdGEiLCJvcHRpbWlzdGljUmVzdWx0cyIsImZldGNoT25Nb3VudCIsImZldGNoT3B0aW9uYWxseSIsImtlZXBQcmV2aW91c0RhdGEiLCJpc1N1Y2Nlc3MiLCJzZWxlY3QiLCJzZWxlY3RGbiIsInNlbGVjdFJlc3VsdCIsInBsYWNlaG9sZGVyRGF0YSIsImlzTG9hZGluZyIsImlzSWRsZSIsImlzRmV0Y2hlZCIsImlzRmV0Y2hlZEFmdGVyTW91bnQiLCJpc1JlZmV0Y2hpbmciLCJpc0xvYWRpbmdFcnJvciIsImlzUmVmZXRjaEVycm9yIiwic2hvdWxkTm90aWZ5TGlzdGVuZXJzIiwibm90aWZ5T25DaGFuZ2VQcm9wcyIsIm5vdGlmeU9uQ2hhbmdlUHJvcHNFeGNsdXNpb25zIiwiaW5jbHVkZWRQcm9wcyIsInR5cGVkS2V5IiwiY2hhbmdlZCIsImlzSW5jbHVkZWQiLCJpc0V4Y2x1ZGVkIiwiZGVmYXVsdE5vdGlmeU9wdGlvbnMiLCJfdGhpczgiLCJyZXRyeU9uTW91bnQiLCJzaG91bGRMb2FkT25Nb3VudCIsInJlZmV0Y2hPbk1vdW50IiwiZmllbGQiLCJfaXNSZXNldCIsIlF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5Q29udGV4dCIsImNsZWFyUmVzZXQiLCJpc1Jlc2V0IiwidXNlUXVlcnkiLCJPYnNlcnZlciIsIm1vdW50ZWRSZWYiLCJmb3JjZVVwZGF0ZSIsInF1ZXJ5Q2xpZW50IiwidXNlUXVlcnlDbGllbnQiLCJlcnJvclJlc2V0Qm91bmRhcnkiLCJfdXNlRXJyb3JCb3VuZGFyeSIsInVzZUJhc2VRdWVyeSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiQ2hpbGRyZW4iLCJjb3VudCIsIm9ubHkiLCJQdXJlQ29tcG9uZW50IiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiQ29uc3VtZXIiLCJfZGVmYXVsdFZhbHVlIiwiX2dsb2JhbE5hbWUiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJzdGFydFRyYW5zaXRpb24iLCJ1bnN0YWJsZV9hY3QiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwidW5zdGFibGVfd3JhcENhbGxiYWNrIiwib2JqQSIsIm9iakIiLCJjb21wYXJlQ29udGV4dCIsInJldCIsImtleXNBIiwia2V5c0IiLCJiSGFzT3duUHJvcGVydHkiLCJpZHgiLCJ2YWx1ZUEiLCJ2YWx1ZUIiLCJpbnN0IiwidXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IiLCJoYXNWYWx1ZSIsIl9leHRlbmRzIiwiX3NldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZGVmaW5pdGlvbiIsImdldEJhdGNoIiwicmVmRXF1YWxpdHkiLCJjcmVhdGVTZWxlY3Rvckhvb2siLCJ1c2VSZWR1eENvbnRleHQiLCJzZWxlY3RvciIsImVxdWFsaXR5Rm4iLCJzdG9yZSIsInN1YnNjcmlwdGlvbiIsImdldFNlcnZlclN0YXRlIiwic2VsZWN0ZWRTdGF0ZSIsImFkZE5lc3RlZFN1YiIsImdldFN0YXRlIiwidXNlU2VsZWN0b3IiLCJudWxsTGlzdGVuZXJzIiwiY3JlYXRlU3RvcmVIb29rIiwiY3JlYXRlRGlzcGF0Y2hIb29rIiwidXNlU3RvcmUiLCJ1c2VEaXNwYXRjaCIsIm5ld0JhdGNoIiwiaW5pdGlhbGl6ZVVzZVNlbGVjdG9yIiwiaW5pdGlhbGl6ZUNvbm5lY3QiLCJwcmVmaXgiLCJtc0dyaWRSb3ciLCJtc0dyaWRSb3dTcGFuIiwibXNHcmlkQ29sdW1uIiwibXNHcmlkQ29sdW1uU3BhbiIsIldlYmtpdExpbmVDbGFtcCIsImFyZyIsInJlYWN0UHJvcHNSZWdleCIsImZyZWV6ZSIsInN0eWxlZENvbXBvbmVudElkIiwiUkVBQ1RfQVBQX1NDX0FUVFIiLCJTQ19BVFRSIiwiQm9vbGVhbiIsIlNDX0RJU0FCTEVfU1BFRURZIiwiUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZIiwiaiIsImdyb3VwU2l6ZXMiLCJVaW50MzJBcnJheSIsImluZGV4T2ZHcm91cCIsImluc2VydFJ1bGVzIiwicyIsImluc2VydFJ1bGUiLCJjbGVhckdyb3VwIiwiZGVsZXRlUnVsZSIsImdldEdyb3VwIiwiZ2V0UnVsZSIsInJlZ2lzdGVyTmFtZSIsInBhcnNlSW50IiwiZ2V0VGFnIiwiX193ZWJwYWNrX25vbmNlX18iLCJoZWFkIiwiY2hpbGROb2RlcyIsImhhc0F0dHJpYnV0ZSIsIiQiLCJzaGVldCIsInN0eWxlU2hlZXRzIiwib3duZXJOb2RlIiwiY3NzUnVsZXMiLCJjc3NUZXh0Iiwibm9kZXMiLCJydWxlcyIsInVzZUNTU09NSW5qZWN0aW9uIiwiZ3MiLCJuYW1lcyIsInNlcnZlciIsImdldEF0dHJpYnV0ZSIsInJlZ2lzdGVySWQiLCJyZWNvbnN0cnVjdFdpdGhPcHRpb25zIiwiYWxsb2NhdGVHU0luc3RhbmNlIiwiaGFzTmFtZUZvcklkIiwiY2xlYXJOYW1lcyIsImNsZWFyUnVsZXMiLCJjbGVhclRhZyIsImFicyIsInN0YXRpY1J1bGVzSWQiLCJpc1N0YXRpYyIsImNvbXBvbmVudElkIiwiYmFzZUhhc2giLCJiYXNlU3R5bGUiLCJnZW5lcmF0ZUFuZEluamVjdFN0eWxlcyIsInBsdWdpbnMiLCJsYXN0SW5kZXhPZiIsInN0eWxpc1BsdWdpbnMiLCJkaXNhYmxlQ1NTT01JbmplY3Rpb24iLCJkaXNhYmxlVmVuZG9yUHJlZml4ZXMiLCJnZXROYW1lIiwiX2UiLCJpc0NzcyIsInRoZW1lIiwiR2UiLCJhdHRycyIsInBhcmVudENvbXBvbmVudElkIiwic2hvdWxkRm9yd2FyZFByb3AiLCJjb21wb25lbnRTdHlsZSIsImZvbGRlZENvbXBvbmVudElkcyIsIiRhcyIsImFzIiwiY2xhc3NOYW1lIiwid2l0aENvbXBvbmVudCIsIl9mb2xkZWREZWZhdWx0UHJvcHMiLCJ3aXRoQ29uZmlnIiwiY3JlYXRlU3R5bGVzIiwicmVtb3ZlU3R5bGVzIiwicmVuZGVyU3R5bGVzIiwiX2VtaXRTaGVldENTUyIsImdldFN0eWxlVGFncyIsInNlYWxlZCIsImdldFN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2VhbCIsImNvbGxlY3RTdHlsZXMiLCJpbnRlcmxlYXZlV2l0aE5vZGVTdHJlYW0iLCJHbG9iYWxTdHlsZSIsIkFjdGlvbiIsIkJlZm9yZVVubG9hZEV2ZW50VHlwZSIsInByb21wdEJlZm9yZVVubG9hZCIsImNyZWF0ZUV2ZW50cyIsImhhbmRsZXIiLCJwYXJzZWRQYXRoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsIm1hdGNoZXMiLCJpbnZhcmlhbnQiLCJjb25kIiwibWF0Y2hSb3V0ZXMiLCJyb3V0ZXMiLCJsb2NhdGlvbkFyZyIsImJhc2VuYW1lIiwic3RyaXBCYXNlbmFtZSIsImJyYW5jaGVzIiwiZmxhdHRlblJvdXRlcyIsInNjb3JlIiwic2libGluZ3MiLCJldmVyeSIsImNvbXBhcmVJbmRleGVzIiwicm91dGVzTWV0YSIsImNoaWxkcmVuSW5kZXgiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoUm91dGVCcmFuY2giLCJwYXJlbnRzTWV0YSIsInBhcmVudFBhdGgiLCJyb3V0ZSIsInJlbGF0aXZlUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJzdGFydHNXaXRoIiwiam9pblBhdGhzIiwiY29tcHV0ZVNjb3JlIiwicGFyYW1SZSIsImlzU3BsYXQiLCJzZWdtZW50cyIsImluaXRpYWxTY29yZSIsInNlZ21lbnQiLCJicmFuY2giLCJtYXRjaGVkUGFyYW1zIiwibWF0Y2hlZFBhdGhuYW1lIiwicmVtYWluaW5nUGF0aG5hbWUiLCJtYXRjaFBhdGgiLCJwYXRobmFtZUJhc2UiLCJub3JtYWxpemVQYXRobmFtZSIsIm1hdGNoZXIiLCJwYXJhbU5hbWVzIiwicmVnZXhwU291cmNlIiwicGFyYW1OYW1lIiwiY29tcGlsZVBhdGgiLCJjYXB0dXJlR3JvdXBzIiwic3BsYXRWYWx1ZSIsInNhZmVseURlY29kZVVSSUNvbXBvbmVudCIsIm5leHRDaGFyIiwicGF0aHMiLCJub3JtYWxpemVTZWFyY2giLCJub3JtYWxpemVIYXNoIiwidXNlSW5Sb3V0ZXJDb250ZXh0IiwibG9jYXRpb25QYXRobmFtZSIsInJvdXRlUGF0aG5hbWVzSnNvbiIsImFjdGl2ZVJlZiIsInRvIiwiZ28iLCJ0b0FyZyIsInJvdXRlUGF0aG5hbWVzIiwidG9QYXRobmFtZSIsInJvdXRlUGF0aG5hbWVJbmRleCIsInRvU2VnbWVudHMiLCJmcm9tUGF0aG5hbWUiLCJyZXNvbHZlUGF0aG5hbWUiLCJyZXNvbHZlUGF0aCIsInJlc29sdmVUbyIsIk91dGxldENvbnRleHQiLCJOYXZpZ2F0ZSIsIm5hdmlnYXRlIiwiT3V0bGV0IiwidXNlT3V0bGV0IiwiUm91dGUiLCJfcHJvcHMiLCJiYXNlbmFtZVByb3AiLCJsb2NhdGlvblByb3AiLCJuYXZpZ2F0aW9uVHlwZSIsIlBvcCIsInN0YXRpYyIsInN0YXRpY1Byb3AiLCJuYXZpZ2F0aW9uQ29udGV4dCIsInRyYWlsaW5nUGF0aG5hbWUiLCJSb3V0ZXMiLCJfcmVmNCIsInBhcmVudE1hdGNoZXMiLCJyb3V0ZU1hdGNoIiwicGFyZW50UGFyYW1zIiwicGFyZW50UGF0aG5hbWVCYXNlIiwibG9jYXRpb25Gcm9tQ29udGV4dCIsIl9wYXJzZWRMb2NhdGlvbkFyZyRwYSIsInBhcnNlZExvY2F0aW9uQXJnIiwicmVkdWNlUmlnaHQiLCJfcmVuZGVyTWF0Y2hlcyIsInVzZVJvdXRlcyIsImNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiIsIkJyb3dzZXJSb3V0ZXIiLCJoaXN0b3J5UmVmIiwiX29wdGlvbnMkd2luZG93IiwiZ2xvYmFsSGlzdG9yeSIsImhpc3RvcnkiLCJnZXRJbmRleEFuZExvY2F0aW9uIiwiX3dpbmRvdyRsb2NhdGlvbiIsInVzciIsImJsb2NrZWRQb3BUeCIsImJsb2NrZXJzIiwibmV4dEFjdGlvbiIsIl9nZXRJbmRleEFuZExvY2F0aW9uIiwibmV4dEluZGV4IiwibmV4dExvY2F0aW9uIiwiZGVsdGEiLCJhcHBseVR4IiwiX2dldEluZGV4QW5kTG9jYXRpb24yIiwiY3JlYXRlSHJlZiIsIl9yZWYkcGF0aG5hbWUiLCJfcmVmJHNlYXJjaCIsIl9yZWYkaGFzaCIsImdldE5leHRMb2NhdGlvbiIsImdldEhpc3RvcnlTdGF0ZUFuZFVybCIsImFsbG93VHgiLCJfZ2V0SW5kZXhBbmRMb2NhdGlvbjMiLCJyZXBsYWNlU3RhdGUiLCJQdXNoIiwiX2dldEhpc3RvcnlTdGF0ZUFuZFVyIiwiaGlzdG9yeVN0YXRlIiwicHVzaFN0YXRlIiwiUmVwbGFjZSIsIl9nZXRIaXN0b3J5U3RhdGVBbmRVcjIiLCJiYWNrIiwiZm9yd2FyZCIsImxpc3RlbiIsImJsb2NrIiwiYmxvY2tlciIsInVuYmxvY2siLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsIlN0eWxlZENhcmQiLCJyZXN0IiwiQ2FyZCIsIlN0eWxlZEJ1dHRvbiIsIlN0eWxlZFZhbGlkYXRpb25FcnJvciIsIlN0eWxlZElucHV0IiwiJGhhc0Vycm9yIiwiU3R5bGVkRm9ybUlucHV0Q29udGFpbmVyIiwiZXJyb3JNZXNzYWdlIiwiaW5wdXRQcm9wcyIsIlN0eWxlZExvZ2luRXJyb3IiLCJjaGVja0lmVmFsdWVFbXB0eSIsImF1dGhDdHgiLCJzZXRVc2VybmFtZSIsInNldFBhc3N3b3JkIiwidXNlcm5hbWVFcnJvciIsInNldFVzZXJuYW1lRXJyb3IiLCJwYXNzd29yZEVycm9yIiwic2V0UGFzc3dvcmRFcnJvciIsImlzRm9ybVZhbGlkIiwic2V0SXNGb3JtVmFsaWQiLCJvbklucHV0Q2hhbmdlSGFuZGxlciIsImlzVXNlcm5hbWVFbXB0eSIsImlzUGFzc3dvcmRFbXB0eSIsInZhbGlkYXRlRm9ybSIsImxvZ2luRXJyb3IiLCJvblN1Ym1pdCIsImxvZ2luIiwicGxhY2Vob2xkZXIiLCJvbkNoYW5nZSIsInRpdGxlIiwibG9naW5JblByb2dyZXNzIiwiU3R5bGVkQ2FyZENvbnRlbnRDb250YWluZXIiLCJTdHlsZWRDYXJkQ29udGFpbmVyIiwiU3R5bGVkTG9naW5Mb2dvdXRCYWNrZ3JvdW5kIiwiU3R5bGVkSGVhZGVyIiwiU3R5bGVkTG9naW5IZWFkZXIiLCJpc0xvZ2dlZEluIiwieG1sbnMiLCJ2aWV3Qm94IiwiZmlsbCIsIlN0eWxlZFBvcG92ZXIiLCJtZW51QnV0dG9uVGV4dCIsIm1lbnVCdXR0b25JY29uIiwicG9wb3ZlckJvZHkiLCJpc01lbnVPcGVuIiwic2V0SXNNZW51T3BlbiIsImhhbmRsZUNsaWNrIiwiU3R5bGVkUGFnZUhlYWRlciIsImxvZ291dCIsIlN0eWxlZFNwaW5uZXIiLCJGdW5jdGlvbiIsIm5uIiwicm4iLCJ3cml0YWJsZSIsImlzRnJvemVuIiwidG4iLCJlbiIsIm9uIiwiUHJveHkiLCJyZXZvY2FibGUiLCJyZXZva2UiLCJwcm94eSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVsZXRlUHJvcGVydHkiLCJ1biIsInByb2R1Y2UiLCJwcm9kdWNlV2l0aFBhdGNoZXMiLCJ1c2VQcm94aWVzIiwic2V0VXNlUHJveGllcyIsImF1dG9GcmVlemUiLCJzZXRBdXRvRnJlZXplIiwiY3JlYXRlRHJhZnQiLCJmaW5pc2hEcmFmdCIsImFwcGx5UGF0Y2hlcyIsIm9wIiwiYW4iLCJfZGVmaW5lUHJvcGVydHkiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCIkJG9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwicmFuZG9tU3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJpc1N1YnNjcmliZWQiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlU3RhdGUiLCJjb21wb3NlIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJtaWRkbGV3YXJlIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiX18iLCJfX3NwcmVhZEFycmF5IiwiX19kZWZQcm9wIiwiX19nZXRPd25Qcm9wU3ltYm9scyIsIl9faGFzT3duUHJvcCIsIl9fcHJvcElzRW51bSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19kZWZOb3JtYWxQcm9wIiwiX19zcHJlYWRWYWx1ZXMiLCJfaSIsIl9jIiwiY29tcG9zZVdpdGhEZXZUb29scyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18iLCJNaWRkbGV3YXJlQXJyYXkiLCJfc3VwZXIiLCJzcGVjaWVzIiwicHJlcGVuZCIsImZyZWV6ZURyYWZ0YWJsZSIsImNyZWF0ZUFjdGlvbiIsInByZXBhcmVBY3Rpb24iLCJhY3Rpb25DcmVhdG9yIiwicHJlcGFyZWQiLCJleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayIsImJ1aWxkZXJDYWxsYmFjayIsImRlZmF1bHRDYXNlUmVkdWNlciIsImFjdGlvbnNNYXAiLCJhY3Rpb25NYXRjaGVycyIsImJ1aWxkZXIiLCJhZGRDYXNlIiwidHlwZU9yQWN0aW9uQ3JlYXRvciIsImFkZE1hdGNoZXIiLCJhZGREZWZhdWx0Q2FzZSIsImFsbSIsInNvcnRTbGljZSIsIl9yZWR1Y2VyIiwicmVkdWNlcnMiLCJyZWR1Y2VyTmFtZXMiLCJzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSIsInNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlIiwiYWN0aW9uQ3JlYXRvcnMiLCJidWlsZFJlZHVjZXIiLCJleHRyYVJlZHVjZXJzIiwiX2QiLCJfZiIsImZpbmFsQ2FzZVJlZHVjZXJzIiwibWFwT3JCdWlsZGVyQ2FsbGJhY2siLCJnZXRJbml0aWFsU3RhdGUiLCJmaW5hbEFjdGlvbk1hdGNoZXJzIiwiZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXIiLCJpc1N0YXRlRnVuY3Rpb24iLCJmcm96ZW5Jbml0aWFsU3RhdGVfMSIsImNhc2VSZWR1Y2VycyIsImNyIiwicHJldmlvdXNTdGF0ZSIsImNhc2VSZWR1Y2VyIiwiZHJhZnQiLCJjcmVhdGVSZWR1Y2VyIiwicmVkdWNlck5hbWUiLCJwcmVwYXJlQ2FsbGJhY2siLCJtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSIsInByZXBhcmUiLCJhY3Rpb25zIiwiY3JlYXRlU2xpY2UiLCJzb3J0UGFyYW1zIiwib3JkZXJCeSIsImNvbHVtbiIsInNvcnRBY3Rpb25zIiwiU3R5bGVkVGFibGVIZWFkZXIiLCJTdHlsZWRBcnJvd0NvbnRhaW5lciIsIiRpc0FzY2VuZGluZyIsIiRpc1Zpc2libGUiLCJTdHlsZWRBcnJvd1VwIiwiZm9udFNpemUiLCJTdHlsZWRUYWJsZSIsInVzZUdldFNlcnZlckxpc3QiLCJhc3luYyIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsImdldFNlcnZlckxpc3QiLCJDb2x1bW5zIiwic29ydE9yZGVyIiwidG9nZ2xlU29ydEhhbmRsZXIiLCJzb3J0ZWREYXRhIiwiTmFtZSIsIkRpc3RhbmNlIiwiZGlzdGFuY2UiLCJTdHlsZWRCYWNrZ3JvdW5kIiwiU3R5bGVkU2VydmVyTGlzdENvbnRhaW5lciIsIkFwcFJvdXRlciIsIkF1dGhDb250ZXh0UHJvdmlkZXIiLCJzZXRUb2tlbiIsInNldExvZ2luSW5Qcm9ncmVzcyIsInNldExvZ2luRXJyb3IiLCJyZXMiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsInJvb3RSZWR1Y2VyIiwiY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlIiwibWlkZGxld2FyZUFycmF5IiwiaW1tdXRhYmxlQ2hlY2siLCJzZXJpYWxpemFibGVDaGVjayIsImlzQm9vbGVhbiIsImdldERlZmF1bHRNaWRkbGV3YXJlIiwiZGV2VG9vbHMiLCJfZyIsIl9oIiwiZW5oYW5jZXJzIiwiYmFzZVByb3RvIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwibmV4dFN0YXRlIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImNvbWJpbmVSZWR1Y2VycyIsImZpbmFsTWlkZGxld2FyZSIsIm1pZGRsZXdhcmVFbmhhbmNlciIsImZpbmFsQ29tcG9zZSIsInRyYWNlIiwic3RvcmVFbmhhbmNlcnMiLCJjb25maWd1cmVTdG9yZSIsImdldEVsZW1lbnRCeUlkIiwic2VydmVyU3RhdGUiLCJjb250ZXh0VmFsdWUiLCJwYXJlbnRTdWIiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwib25TdGF0ZUNoYW5nZSIsInRyeVN1YnNjcmliZSIsImZpcnN0IiwicHJldiIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsIm5vdGlmeU5lc3RlZFN1YnMiLCJ0cnlVbnN1YnNjcmliZSIsImdldExpc3RlbmVycyJdLCJzb3VyY2VSb290IjoiIn0=