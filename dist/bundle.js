/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),o=n(6026),i=n(4372),a=n(5327),u=n(4097),l=n(4109),s=n(7985),c=n(7874),f=n(2648),d=n(644),p=n(205);e.exports=function(e){return new Promise((function(t,n){var h,m=e.data,v=e.headers,y=e.responseType;function g(){e.cancelToken&&e.cancelToken.unsubscribe(h),e.signal&&e.signal.removeEventListener("abort",h)}r.isFormData(m)&&r.isStandardBrowserEnv()&&delete v["Content-Type"];var b=new XMLHttpRequest;if(e.auth){var w=e.auth.username||"",S=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";v.Authorization="Basic "+btoa(w+":"+S)}var k=u(e.baseURL,e.url);function E(){if(b){var r="getAllResponseHeaders"in b?l(b.getAllResponseHeaders()):null,i={data:y&&"text"!==y&&"json"!==y?b.response:b.responseText,status:b.status,statusText:b.statusText,headers:r,config:e,request:b};o((function(e){t(e),g()}),(function(e){n(e),g()}),i),b=null}}if(b.open(e.method.toUpperCase(),a(k,e.params,e.paramsSerializer),!0),b.timeout=e.timeout,"onloadend"in b?b.onloadend=E:b.onreadystatechange=function(){b&&4===b.readyState&&(0!==b.status||b.responseURL&&0===b.responseURL.indexOf("file:"))&&setTimeout(E)},b.onabort=function(){b&&(n(new f("Request aborted",f.ECONNABORTED,e,b)),b=null)},b.onerror=function(){n(new f("Network Error",f.ERR_NETWORK,e,b,b)),b=null},b.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||c;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new f(t,r.clarifyTimeoutError?f.ETIMEDOUT:f.ECONNABORTED,e,b)),b=null},r.isStandardBrowserEnv()){var x=(e.withCredentials||s(k))&&e.xsrfCookieName?i.read(e.xsrfCookieName):void 0;x&&(v[e.xsrfHeaderName]=x)}"setRequestHeader"in b&&r.forEach(v,(function(e,t){void 0===m&&"content-type"===t.toLowerCase()?delete v[t]:b.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(b.withCredentials=!!e.withCredentials),y&&"json"!==y&&(b.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&b.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&b.upload&&b.upload.addEventListener("progress",e.onUploadProgress),(e.cancelToken||e.signal)&&(h=function(e){b&&(n(!e||e&&e.type?new d:e),b.abort(),b=null)},e.cancelToken&&e.cancelToken.subscribe(h),e.signal&&(e.signal.aborted?h():e.signal.addEventListener("abort",h))),m||(m=null);var C=p(k);C&&-1===["http","https","file"].indexOf(C)?n(new f("Unsupported protocol "+C+":",f.ERR_BAD_REQUEST,e)):b.send(m)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),o=n(1849),i=n(321),a=n(7185),u=function e(t){var n=new i(t),u=o(i.prototype.request,n);return r.extend(u,i.prototype,n),r.extend(u,n),u.create=function(n){return e(a(t,n))},u}(n(5546));u.Axios=i,u.CanceledError=n(644),u.CancelToken=n(4972),u.isCancel=n(6502),u.VERSION=n(7288).version,u.toFormData=n(7675),u.AxiosError=n(2648),u.Cancel=u.CanceledError,u.all=function(e){return Promise.all(e)},u.spread=n(8713),u.isAxiosError=n(6268),e.exports=u,e.exports.default=u},4972:(e,t,n)=>{"use strict";var r=n(644);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;this.promise.then((function(e){if(n._listeners){var t,r=n._listeners.length;for(t=0;t<r;t++)n._listeners[t](e);n._listeners=null}})),this.promise.then=function(e){var t,r=new Promise((function(e){n.subscribe(e),t=e})).then(e);return r.cancel=function(){n.unsubscribe(t)},r},e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.prototype.subscribe=function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]},o.prototype.unsubscribe=function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},644:(e,t,n)=>{"use strict";var r=n(2648);function o(e){r.call(this,null==e?"canceled":e,r.ERR_CANCELED),this.name="CanceledError"}n(4867).inherits(o,r,{__CANCEL__:!0}),e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),o=n(5327),i=n(782),a=n(3572),u=n(7185),l=n(4097),s=n(4875),c=s.validators;function f(e){this.defaults=e,this.interceptors={request:new i,response:new i}}f.prototype.request=function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},(t=u(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var n=t.transitional;void 0!==n&&s.assertOptions(n,{silentJSONParsing:c.transitional(c.boolean),forcedJSONParsing:c.transitional(c.boolean),clarifyTimeoutError:c.transitional(c.boolean)},!1);var r=[],o=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(o=o&&e.synchronous,r.unshift(e.fulfilled,e.rejected))}));var i,l=[];if(this.interceptors.response.forEach((function(e){l.push(e.fulfilled,e.rejected)})),!o){var f=[a,void 0];for(Array.prototype.unshift.apply(f,r),f=f.concat(l),i=Promise.resolve(t);f.length;)i=i.then(f.shift(),f.shift());return i}for(var d=t;r.length;){var p=r.shift(),h=r.shift();try{d=p(d)}catch(e){h(e);break}}try{i=a(d)}catch(e){return Promise.reject(e)}for(;l.length;)i=i.then(l.shift(),l.shift());return i},f.prototype.getUri=function(e){e=u(this.defaults,e);var t=l(e.baseURL,e.url);return o(t,e.params,e.paramsSerializer)},r.forEach(["delete","get","head","options"],(function(e){f.prototype[e]=function(t,n){return this.request(u(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(u(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}f.prototype[e]=t(),f.prototype[e+"Form"]=t(!0)})),e.exports=f},2648:(e,t,n)=>{"use strict";var r=n(4867);function o(e,t,n,r,o){Error.call(this),this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}r.inherits(o,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var i=o.prototype,a={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED"].forEach((function(e){a[e]={value:e}})),Object.defineProperties(o,a),Object.defineProperty(i,"isAxiosError",{value:!0}),o.from=function(e,t,n,a,u,l){var s=Object.create(i);return r.toFlatObject(e,s,(function(e){return e!==Error.prototype})),o.call(s,e.message,t,n,a,u),s.name=e.name,l&&Object.assign(s,l),s},e.exports=o},782:(e,t,n)=>{"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,n)=>{"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},3572:(e,t,n)=>{"use strict";var r=n(4867),o=n(8527),i=n(6502),a=n(5546),u=n(644);function l(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new u}e.exports=function(e){return l(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return l(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(l(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={};function o(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function i(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(e[n],t[n])}function a(e){if(!r.isUndefined(t[e]))return o(void 0,t[e])}function u(n){return r.isUndefined(t[n])?r.isUndefined(e[n])?void 0:o(void 0,e[n]):o(void 0,t[n])}function l(n){return n in t?o(e[n],t[n]):n in e?o(void 0,e[n]):void 0}var s={url:a,method:a,data:a,baseURL:u,transformRequest:u,transformResponse:u,paramsSerializer:u,timeout:u,timeoutMessage:u,withCredentials:u,adapter:u,responseType:u,xsrfCookieName:u,xsrfHeaderName:u,onUploadProgress:u,onDownloadProgress:u,decompress:u,maxContentLength:u,maxBodyLength:u,beforeRedirect:u,transport:u,httpAgent:u,httpsAgent:u,cancelToken:u,socketPath:u,responseEncoding:u,validateStatus:l};return r.forEach(Object.keys(e).concat(Object.keys(t)),(function(e){var t=s[e]||i,o=t(e);r.isUndefined(o)&&t!==l||(n[e]=o)})),n}},6026:(e,t,n)=>{"use strict";var r=n(2648);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(new r("Request failed with status code "+n.status,[r.ERR_BAD_REQUEST,r.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867),o=n(5546);e.exports=function(e,t,n){var i=this||o;return r.forEach(n,(function(n){e=n.call(i,e,t)})),e}},5546:(e,t,n)=>{"use strict";var r=n(4867),o=n(6016),i=n(2648),a=n(7874),u=n(7675),l={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var c,f={transitional:a,adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(c=n(5448)),c),transformRequest:[function(e,t){if(o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e))return e;if(r.isArrayBufferView(e))return e.buffer;if(r.isURLSearchParams(e))return s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString();var n,i=r.isObject(e),a=t&&t["Content-Type"];if((n=r.isFileList(e))||i&&"multipart/form-data"===a){var l=this.env&&this.env.FormData;return u(n?{"files[]":e}:e,l&&new l)}return i||"application/json"===a?(s(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||f.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,a=!n&&"json"===this.responseType;if(a||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(a){if("SyntaxError"===e.name)throw i.from(e,i.ERR_BAD_RESPONSE,this,null,this.response);throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:n(1623)},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){f.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){f.headers[e]=r.merge(l)})),e.exports=f},7874:e=>{"use strict";e.exports={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},7288:e=>{e.exports={version:"0.27.2"}},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}},6268:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e){return r.isObject(e)&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},1623:e=>{e.exports=null},4109:(e,t,n)=>{"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}})),a):a}},205:e=>{"use strict";e.exports=function(e){var t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},7675:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||new FormData;var n=[];function o(e){return null===e?"":r.isDate(e)?e.toISOString():r.isArrayBuffer(e)||r.isTypedArray(e)?"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}return function e(i,a){if(r.isPlainObject(i)||r.isArray(i)){if(-1!==n.indexOf(i))throw Error("Circular reference detected in "+a);n.push(i),r.forEach(i,(function(n,i){if(!r.isUndefined(n)){var u,l=a?a+"."+i:i;if(n&&!a&&"object"==typeof n)if(r.endsWith(i,"{}"))n=JSON.stringify(n);else if(r.endsWith(i,"[]")&&(u=r.toArray(n)))return void u.forEach((function(e){!r.isUndefined(e)&&t.append(l,o(e))}));e(n,l)}})),n.pop()}else t.append(a,o(i))}(e),t}},4875:(e,t,n)=>{"use strict";var r=n(7288).version,o=n(2648),i={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){i[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var a={};i.transitional=function(e,t,n){function i(e,t){return"[Axios v"+r+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,u){if(!1===e)throw new o(i(r," has been removed"+(t?" in "+t:"")),o.ERR_DEPRECATED);return t&&!a[r]&&(a[r]=!0,console.warn(i(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,u)}},e.exports={assertOptions:function(e,t,n){if("object"!=typeof e)throw new o("options must be an object",o.ERR_BAD_OPTION_VALUE);for(var r=Object.keys(e),i=r.length;i-- >0;){var a=r[i],u=t[a];if(u){var l=e[a],s=void 0===l||u(l,a,e);if(!0!==s)throw new o("option "+a+" must be "+s,o.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new o("Unknown option "+a,o.ERR_BAD_OPTION)}},validators:i}},4867:(e,t,n)=>{"use strict";var r,o=n(1849),i=Object.prototype.toString,a=(r=Object.create(null),function(e){var t=i.call(e);return r[t]||(r[t]=t.slice(8,-1).toLowerCase())});function u(e){return e=e.toLowerCase(),function(t){return a(t)===e}}function l(e){return Array.isArray(e)}function s(e){return void 0===e}var c=u("ArrayBuffer");function f(e){return null!==e&&"object"==typeof e}function d(e){if("object"!==a(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}var p=u("Date"),h=u("File"),m=u("Blob"),v=u("FileList");function y(e){return"[object Function]"===i.call(e)}var g=u("URLSearchParams");function b(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),l(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}var w,S=(w="undefined"!=typeof Uint8Array&&Object.getPrototypeOf(Uint8Array),function(e){return w&&e instanceof w});e.exports={isArray:l,isArrayBuffer:c,isBuffer:function(e){return null!==e&&!s(e)&&null!==e.constructor&&!s(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){var t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||i.call(e)===t||y(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&c(e.buffer)},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:f,isPlainObject:d,isUndefined:s,isDate:p,isFile:h,isBlob:m,isFunction:y,isStream:function(e){return f(e)&&y(e.pipe)},isURLSearchParams:g,isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:b,merge:function e(){var t={};function n(n,r){d(t[r])&&d(n)?t[r]=e(t[r],n):d(n)?t[r]=e({},n):l(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)b(arguments[r],n);return t},extend:function(e,t,n){return b(t,(function(t,r){e[r]=n&&"function"==typeof t?o(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,t,n,r){e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,n&&Object.assign(e.prototype,n)},toFlatObject:function(e,t,n){var r,o,i,a={};t=t||{};do{for(o=(r=Object.getOwnPropertyNames(e)).length;o-- >0;)a[i=r[o]]||(t[i]=e[i],a[i]=!0);e=Object.getPrototypeOf(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:a,kindOfTest:u,endsWith:function(e,t,n){e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;var r=e.indexOf(t,n);return-1!==r&&r===n},toArray:function(e){if(!e)return null;var t=e.length;if(s(t))return null;for(var n=new Array(t);t-- >0;)n[t]=e[t];return n},isTypedArray:S,isFileList:v}},8679:(e,t,n)=>{"use strict";var r=n(1296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||u&&u[y])){var g=d(n,y);try{s(t,y,g)}catch(e){}}}}return t}},6103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case u:case a:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case v:case m:case l:return e;default:return t}}case o:return t}}}function k(e){return S(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=l,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=u,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return k(e)||S(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return S(e)===s},t.isContextProvider=function(e){return S(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===d},t.isFragment=function(e){return S(e)===i},t.isLazy=function(e){return S(e)===v},t.isMemo=function(e){return S(e)===m},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===u},t.isStrictMode=function(e){return S(e)===a},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===l||e.$$typeof===s||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=S},1296:(e,t,n)=>{"use strict";e.exports=n(6103)},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,u={};function l(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,g);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),k=Symbol.for("react.portal"),E=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),C=Symbol.for("react.profiler"),P=Symbol.for("react.provider"),O=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),R=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),A=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var I=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var L=Symbol.iterator;function D(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=L&&e[L]||e["@@iterator"])?e:null}var F,j=Object.assign;function z(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var M=!1;function U(e,t){if(!e||M)return"";M=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,u=i.length-1;1<=a&&0<=u&&o[a]!==i[u];)u--;for(;1<=a&&0<=u;a--,u--)if(o[a]!==i[u]){if(1!==a||1!==u)do{if(a--,0>--u||o[a]!==i[u]){var l="\n"+o[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=u);break}}}finally{M=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?z(e):""}function $(e){switch(e.tag){case 5:return z(e.type);case 16:return z("Lazy");case 13:return z("Suspense");case 19:return z("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function B(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case k:return"Portal";case C:return"Profiler";case x:return"StrictMode";case R:return"Suspense";case T:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case A:return null!==(t=e.displayName||null)?t:B(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return B(e(t))}catch(e){}}return null}function Q(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return B(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function q(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function W(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function K(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return j({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function G(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function Y(e,t){X(e,t);var n=q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&K(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return j({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:q(n)}}function ie(e,t){var n=q(t.value),r=q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ve(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ye=j({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,Ee=null,xe=null;function Ce(e){if(e=wo(e)){if("function"!=typeof ke)throw Error(i(280));var t=e.stateNode;t&&(t=ko(t),ke(e.stateNode,e.type,t))}}function Pe(e){Ee?xe?xe.push(e):xe=[e]:Ee=e}function Oe(){if(Ee){var e=Ee,t=xe;if(xe=Ee=null,Ce(e),t)for(e=0;e<t.length;e++)Ce(t[e])}}function _e(e,t){return e(t)}function Re(){}var Te=!1;function Ae(e,t,n){if(Te)return e(t,n);Te=!0;try{return _e(e,t,n)}finally{Te=!1,(null!==Ee||null!==xe)&&(Re(),Oe())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var r=ko(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Ie=!1;if(c)try{var Le={};Object.defineProperty(Le,"passive",{get:function(){Ie=!0}}),window.addEventListener("test",Le,Le),window.removeEventListener("test",Le,Le)}catch(ce){Ie=!1}function De(e,t,n,r,o,i,a,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Fe=!1,je=null,ze=!1,Me=null,Ue={onError:function(e){Fe=!0,je=e}};function $e(e,t,n,r,o,i,a,u,l){Fe=!1,je=null,De.apply(Ue,arguments)}function Be(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function qe(e){if(Be(e)!==e)throw Error(i(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Be(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return qe(o),e;if(a===r)return qe(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=a;break}if(l===r){u=!0,r=o,n=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===n){u=!0,n=a,r=o;break}if(l===r){u=!0,r=a,n=o;break}l=l.sibling}if(!u)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var We=o.unstable_scheduleCallback,Ke=o.unstable_cancelCallback,Ze=o.unstable_shouldYield,Ge=o.unstable_requestPaint,Xe=o.unstable_now,Ye=o.unstable_getCurrentPriorityLevel,Je=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,it=null,at=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(ut(e)/lt|0)|0},ut=Math.log,lt=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var u=a&~o;0!==u?r=ft(u):0!=(i&=a)&&(r=ft(i))}else 0!=(a=n&~o)?r=ft(a):0!==i&&(r=ft(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-at(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var St,kt,Et,xt,Ct,Pt=!1,Ot=[],_t=null,Rt=null,Tt=null,At=new Map,Nt=new Map,It=[],Lt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Dt(e,t){switch(e){case"focusin":case"focusout":_t=null;break;case"dragenter":case"dragleave":Rt=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":At.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function Ft(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function jt(e){var t=bo(e.target);if(null!==t){var n=Be(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void Ct(e.priority,(function(){Et(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function zt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Mt(e,t,n){zt(e)&&n.delete(t)}function Ut(){Pt=!1,null!==_t&&zt(_t)&&(_t=null),null!==Rt&&zt(Rt)&&(Rt=null),null!==Tt&&zt(Tt)&&(Tt=null),At.forEach(Mt),Nt.forEach(Mt)}function $t(e,t){e.blockedOn===t&&(e.blockedOn=null,Pt||(Pt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ut)))}function Bt(e){function t(t){return $t(t,e)}if(0<Ot.length){$t(Ot[0],e);for(var n=1;n<Ot.length;n++){var r=Ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&$t(_t,e),null!==Rt&&$t(Rt,e),null!==Tt&&$t(Tt,e),At.forEach(t),Nt.forEach(t),n=0;n<It.length;n++)(r=It[n]).blockedOn===e&&(r.blockedOn=null);for(;0<It.length&&null===(n=It[0]).blockedOn;)jt(n),null===n.blockedOn&&It.shift()}var Qt=w.ReactCurrentBatchConfig,qt=!0;function Vt(e,t,n,r){var o=bt,i=Qt.transition;Qt.transition=null;try{bt=1,Wt(e,t,n,r)}finally{bt=o,Qt.transition=i}}function Ht(e,t,n,r){var o=bt,i=Qt.transition;Qt.transition=null;try{bt=4,Wt(e,t,n,r)}finally{bt=o,Qt.transition=i}}function Wt(e,t,n,r){if(qt){var o=Zt(e,t,n,r);if(null===o)qr(e,t,r,Kt,n),Dt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return _t=Ft(_t,e,t,n,r,o),!0;case"dragenter":return Rt=Ft(Rt,e,t,n,r,o),!0;case"mouseover":return Tt=Ft(Tt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return At.set(i,Ft(At.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Nt.set(i,Ft(Nt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Dt(e,r),4&t&&-1<Lt.indexOf(e)){for(;null!==o;){var i=wo(o);if(null!==i&&St(i),null===(i=Zt(e,t,n,r))&&qr(e,t,r,Kt,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else qr(e,t,r,null,n)}}var Kt=null;function Zt(e,t,n,r){if(Kt=null,null!==(e=bo(e=Se(r))))if(null===(t=Be(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Qe(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Kt=e,null}function Gt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ye()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Yt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Yt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Jt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return j(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,un,ln,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(sn),fn=j({},sn,{view:0,detail:0}),dn=on(fn),pn=j({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Cn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,un=e.screenY-ln.screenY):un=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:un}}),hn=on(pn),mn=on(j({},pn,{dataTransfer:0})),vn=on(j({},fn,{relatedTarget:0})),yn=on(j({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=j({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),wn=on(j({},sn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function Cn(){return xn}var Pn=j({},fn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Cn,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),On=on(Pn),_n=on(j({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Rn=on(j({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Cn})),Tn=on(j({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),An=j({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=on(An),In=[9,13,27,32],Ln=c&&"CompositionEvent"in window,Dn=null;c&&"documentMode"in document&&(Dn=document.documentMode);var Fn=c&&"TextEvent"in window&&!Dn,jn=c&&(!Ln||Dn&&8<Dn&&11>=Dn),zn=String.fromCharCode(32),Mn=!1;function Un(e,t){switch(e){case"keyup":return-1!==In.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function $n(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,Qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Qn[e.type]:"textarea"===t}function Vn(e,t,n,r){Pe(r),0<(t=Hr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Wn=null;function Kn(e){zr(e,0)}function Zn(e){if(W(So(e)))return e}function Gn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Yn;if(c){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Yn=Jn}else Yn=!1;Xn=Yn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),Wn=Hn=null)}function nr(e){if("value"===e.propertyName&&Zn(Wn)){var t=[];Vn(t,Wn,e,Se(e)),Ae(Kn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Wn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Zn(Wn)}function ir(e,t){if("click"===e)return Zn(t)}function ar(e,t){if("input"===e||"change"===e)return Zn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!ur(e[o],t[o]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=K();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=K((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=cr(n,i);var a=cr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==K(r)||(r="selectionStart"in(r=vr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&lr(gr,r)||(gr=r,0<(r=Hr(yr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}function Sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},Er={},xr={};function Cr(e){if(Er[e])return Er[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in xr)return Er[e]=n[t];return e}c&&(xr=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var Pr=Cr("animationend"),Or=Cr("animationiteration"),_r=Cr("animationstart"),Rr=Cr("transitionend"),Tr=new Map,Ar="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Nr(e,t){Tr.set(e,t),l(t,[e])}for(var Ir=0;Ir<Ar.length;Ir++){var Lr=Ar[Ir];Nr(Lr.toLowerCase(),"on"+(Lr[0].toUpperCase()+Lr.slice(1)))}Nr(Pr,"onAnimationEnd"),Nr(Or,"onAnimationIteration"),Nr(_r,"onAnimationStart"),Nr("dblclick","onDoubleClick"),Nr("focusin","onFocus"),Nr("focusout","onBlur"),Nr(Rr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Dr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Dr));function jr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,u,l,s){if($e.apply(this,arguments),Fe){if(!Fe)throw Error(i(198));var c=je;Fe=!1,je=null,ze||(ze=!0,Me=c)}}(r,t,void 0,e),e.currentTarget=null}function zr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var u=r[a],l=u.instance,s=u.currentTarget;if(u=u.listener,l!==i&&o.isPropagationStopped())break e;jr(o,u,s),i=l}else for(a=0;a<r.length;a++){if(l=(u=r[a]).instance,s=u.currentTarget,u=u.listener,l!==i&&o.isPropagationStopped())break e;jr(o,u,s),i=l}}}if(ze)throw e=Me,ze=!1,Me=null,e}function Mr(e,t){var n=t[vo];void 0===n&&(n=t[vo]=new Set);var r=e+"__bubble";n.has(r)||(Qr(t,e,2,!1),n.add(r))}function Ur(e,t,n){var r=0;t&&(r|=4),Qr(n,e,r,t)}var $r="_reactListening"+Math.random().toString(36).slice(2);function Br(e){if(!e[$r]){e[$r]=!0,a.forEach((function(t){"selectionchange"!==t&&(Fr.has(t)||Ur(t,!1,e),Ur(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[$r]||(t[$r]=!0,Ur("selectionchange",!1,t))}}function Qr(e,t,n,r){switch(Gt(t)){case 1:var o=Vt;break;case 4:o=Ht;break;default:o=Wt}n=o.bind(null,t,n,e),o=void 0,!Ie||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function qr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==u;){if(null===(a=bo(u)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}u=u.parentNode}}r=r.return}Ae((function(){var r=i,o=Se(n),a=[];e:{var u=Tr.get(e);if(void 0!==u){var l=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=On;break;case"focusin":s="focus",l=vn;break;case"focusout":s="blur",l=vn;break;case"beforeblur":case"afterblur":l=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Rn;break;case Pr:case Or:case _r:l=yn;break;case Rr:l=Tn;break;case"scroll":l=dn;break;case"wheel":l=Nn;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=_n}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==u?u+"Capture":null:u;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Ne(h,d))&&c.push(Vr(h,m,p))),f)break;h=h.return}0<c.length&&(u=new l(u,s,null,n,o),a.push({event:u,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!bo(s)&&!s[mo])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(s=(s=n.relatedTarget||n.toElement)?bo(s):null)&&(s!==(f=Be(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(l=null,s=r),l!==s)){if(c=hn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=_n,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:So(l),p=null==s?u:So(s),(u=new c(m,h+"leave",l,n,o)).target=f,u.relatedTarget=p,m=null,bo(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,l&&s)e:{for(d=s,h=0,p=c=l;p;p=Wr(p))h++;for(p=0,m=d;m;m=Wr(m))p++;for(;0<h-p;)c=Wr(c),h--;for(;0<p-h;)d=Wr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Wr(c),d=Wr(d)}c=null}else c=null;null!==l&&Kr(a,u,l,c,!1),null!==s&&null!==f&&Kr(a,f,s,c,!0)}if("select"===(l=(u=r?So(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var v=Gn;else if(qn(u))if(Xn)v=ar;else{v=or;var y=rr}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(v=ir);switch(v&&(v=v(e,r))?Vn(a,v,n,o):(y&&y(e,u,r),"focusout"===e&&(y=u._wrapperState)&&y.controlled&&"number"===u.type&&ee(u,"number",u.value)),y=r?So(r):window,e){case"focusin":(qn(y)||"true"===y.contentEditable)&&(vr=y,yr=r,gr=null);break;case"focusout":gr=yr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(a,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(a,n,o)}var g;if(Ln)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Bn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(jn&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Bn&&(g=en()):(Yt="value"in(Xt=o)?Xt.value:Xt.textContent,Bn=!0)),0<(y=Hr(r,b)).length&&(b=new wn(b,e,null,n,o),a.push({event:b,listeners:y}),(g||null!==(g=$n(n)))&&(b.data=g))),(g=Fn?function(e,t){switch(e){case"compositionend":return $n(t);case"keypress":return 32!==t.which?null:(Mn=!0,zn);case"textInput":return(e=t.data)===zn&&Mn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!Ln&&Un(e,t)?(e=en(),Jt=Yt=Xt=null,Bn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g)}zr(a,t)}))}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Ne(e,n))&&r.unshift(Vr(e,i,o)),null!=(i=Ne(e,t))&&r.push(Vr(e,i,o))),e=e.return}return r}function Wr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Kr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var u=n,l=u.alternate,s=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==s&&(u=s,o?null!=(l=Ne(n,i))&&a.unshift(Vr(n,l,u)):o||null!=(l=Ne(n,i))&&a.push(Vr(n,l,u))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Zr=/\r\n?/g,Gr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Zr,"\n").replace(Gr,"")}function Yr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(i(425))}function Jr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(e){return io.resolve(null).then(e).catch(uo)}:ro;function uo(e){setTimeout((function(){throw e}))}function lo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Bt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Bt(t)}function so(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,vo="__reactEvents$"+fo,yo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function So(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function ko(e){return e[ho]||null}var Eo=[],xo=-1;function Co(e){return{current:e}}function Po(e){0>xo||(e.current=Eo[xo],Eo[xo]=null,xo--)}function Oo(e,t){xo++,Eo[xo]=e.current,e.current=t}var _o={},Ro=Co(_o),To=Co(!1),Ao=_o;function No(e,t){var n=e.type.contextTypes;if(!n)return _o;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Io(e){return null!=e.childContextTypes}function Lo(){Po(To),Po(Ro)}function Do(e,t,n){if(Ro.current!==_o)throw Error(i(168));Oo(Ro,t),Oo(To,n)}function Fo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(i(108,Q(e)||"Unknown",o));return j({},n,r)}function jo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_o,Ao=Ro.current,Oo(Ro,e),Oo(To,To.current),!0}function zo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Fo(e,t,Ao),r.__reactInternalMemoizedMergedChildContext=e,Po(To),Po(Ro),Oo(Ro,e)):Po(To),Oo(To,n)}var Mo=null,Uo=!1,$o=!1;function Bo(e){null===Mo?Mo=[e]:Mo.push(e)}function Qo(){if(!$o&&null!==Mo){$o=!0;var e=0,t=bt;try{var n=Mo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Mo=null,Uo=!1}catch(t){throw null!==Mo&&(Mo=Mo.slice(e+1)),We(Je,Qo),t}finally{bt=t,$o=!1}}return null}var qo=[],Vo=0,Ho=null,Wo=0,Ko=[],Zo=0,Go=null,Xo=1,Yo="";function Jo(e,t){qo[Vo++]=Wo,qo[Vo++]=Ho,Ho=e,Wo=t}function ei(e,t,n){Ko[Zo++]=Xo,Ko[Zo++]=Yo,Ko[Zo++]=Go,Go=e;var r=Xo;e=Yo;var o=32-at(r)-1;r&=~(1<<o),n+=1;var i=32-at(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Xo=1<<32-at(t)+o|n<<o|r,Yo=i+e}else Xo=1<<i|n<<o|r,Yo=e}function ti(e){null!==e.return&&(Jo(e,1),ei(e,1,0))}function ni(e){for(;e===Ho;)Ho=qo[--Vo],qo[Vo]=null,Wo=qo[--Vo],qo[Vo]=null;for(;e===Go;)Go=Ko[--Zo],Ko[Zo]=null,Yo=Ko[--Zo],Ko[Zo]=null,Xo=Ko[--Zo],Ko[Zo]=null}var ri=null,oi=null,ii=!1,ai=null;function ui(e,t){var n=As(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function li(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ri=e,oi=so(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ri=e,oi=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Go?{id:Xo,overflow:Yo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=As(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ri=e,oi=null,!0);default:return!1}}function si(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ci(e){if(ii){var t=oi;if(t){var n=t;if(!li(e,t)){if(si(e))throw Error(i(418));t=so(n.nextSibling);var r=ri;t&&li(e,t)?ui(r,n):(e.flags=-4097&e.flags|2,ii=!1,ri=e)}}else{if(si(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,ri=e}}}function fi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function di(e){if(e!==ri)return!1;if(!ii)return fi(e),ii=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oi)){if(si(e))throw pi(),Error(i(418));for(;t;)ui(e,t),t=so(t.nextSibling)}if(fi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oi=so(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oi=null}}else oi=ri?so(e.stateNode.nextSibling):null;return!0}function pi(){for(var e=oi;e;)e=so(e.nextSibling)}function hi(){oi=ri=null,ii=!1}function mi(e){null===ai?ai=[e]:ai.push(e)}var vi=w.ReactCurrentBatchConfig;function yi(e,t){if(e&&e.defaultProps){for(var n in t=j({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var gi=Co(null),bi=null,wi=null,Si=null;function ki(){Si=wi=bi=null}function Ei(e){var t=gi.current;Po(gi),e._currentValue=t}function xi(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ci(e,t){bi=e,Si=wi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wu=!0),e.firstContext=null)}function Pi(e){var t=e._currentValue;if(Si!==e)if(e={context:e,memoizedValue:t,next:null},null===wi){if(null===bi)throw Error(i(308));wi=e,bi.dependencies={lanes:0,firstContext:e}}else wi=wi.next=e;return t}var Oi=null;function _i(e){null===Oi?Oi=[e]:Oi.push(e)}function Ri(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,_i(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ti(e,r)}function Ti(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ai=!1;function Ni(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ii(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Li(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Di(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&_l)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ti(e,n)}return null===(o=r.interleaved)?(t.next=t,_i(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ti(e,n)}function Fi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function ji(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function zi(e,t,n,r){var o=e.updateQueue;Ai=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var l=u,s=l.next;l.next=null,null===a?i=s:a.next=s,a=l;var c=e.alternate;null!==c&&(u=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===u?c.firstBaseUpdate=s:u.next=s,c.lastBaseUpdate=l)}if(null!==i){var f=o.baseState;for(a=0,c=s=l=null,u=i;;){var d=u.lane,p=u.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var h=e,m=u;switch(d=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=m.payload)?h.call(p,f,d):h))break e;f=j({},f,d);break e;case 2:Ai=!0}}null!==u.callback&&0!==u.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[u]:d.push(u))}else p={eventTime:p,lane:d,tag:u.tag,payload:u.payload,callback:u.callback,next:null},null===c?(s=c=p,l=f):c=c.next=p,a|=d;if(null===(u=u.next)){if(null===(u=o.shared.pending))break;u=(d=u).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===c&&(l=f),o.baseState=l,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);Fl|=a,e.lanes=a,e.memoizedState=f}}function Mi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Ui=(new r.Component).refs;function $i(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:j({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Bi={isMounted:function(e){return!!(e=e._reactInternals)&&Be(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),i=Li(r,o);i.payload=t,null!=n&&(i.callback=n),null!==(t=Di(e,i,o))&&(ns(t,e,o,r),Fi(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),i=Li(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Di(e,i,o))&&(ns(t,e,o,r),Fi(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),o=Li(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Di(e,o,r))&&(ns(t,e,r,n),Fi(t,e,r))}};function Qi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,i))}function qi(e,t,n){var r=!1,o=_o,i=t.contextType;return"object"==typeof i&&null!==i?i=Pi(i):(o=Io(t)?Ao:Ro.current,i=(r=null!=(r=t.contextTypes))?No(e,o):_o),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Bi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Vi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Bi.enqueueReplaceState(t,t.state,null)}function Hi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Ui,Ni(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=Pi(i):(i=Io(t)?Ao:Ro.current,o.context=No(e,i)),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&($i(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Bi.enqueueReplaceState(o,o.state,null),zi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function Wi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;t===Ui&&(t=o.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Ki(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Zi(e){return(0,e._init)(e._payload)}function Gi(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Is(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function u(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=js(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){var i=n.type;return i===E?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===N&&Zi(i)===t.type)?((r=o(t,n.props)).ref=Wi(e,t,n),r.return=e,r):((r=Ls(n.type,n.key,n.props,null,e.mode,r)).ref=Wi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zs(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Ds(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=js(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Ls(t.type,t.key,t.props,null,e.mode,n)).ref=Wi(e,null,t),n.return=e,n;case k:return(t=zs(t,e.mode,n)).return=e,t;case N:return d(e,(0,t._init)(t._payload),n)}if(te(t)||D(t))return(t=Ds(t,e.mode,n,null)).return=e,t;Ki(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?s(e,t,n,r):null;case k:return n.key===o?c(e,t,n,r):null;case N:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||D(n))return null!==o?null:f(e,t,n,r,null);Ki(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case N:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||D(r))return f(t,e=e.get(n)||null,r,o,null);Ki(t,r)}return null}function m(o,i,u,l){for(var s=null,c=null,f=i,m=i=0,v=null;null!==f&&m<u.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,u[m],l);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),i=a(y,i,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===u.length)return n(o,f),ii&&Jo(o,m),s;if(null===f){for(;m<u.length;m++)null!==(f=d(o,u[m],l))&&(i=a(f,i,m),null===c?s=f:c.sibling=f,c=f);return ii&&Jo(o,m),s}for(f=r(o,f);m<u.length;m++)null!==(v=h(f,o,m,u[m],l))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),i=a(v,i,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),ii&&Jo(o,m),s}function v(o,u,l,s){var c=D(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var f=c=null,m=u,v=u=0,y=null,g=l.next();null!==m&&!g.done;v++,g=l.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),u=a(b,u,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),ii&&Jo(o,v),c;if(null===m){for(;!g.done;v++,g=l.next())null!==(g=d(o,g.value,s))&&(u=a(g,u,v),null===f?c=g:f.sibling=g,f=g);return ii&&Jo(o,v),c}for(m=r(o,m);!g.done;v++,g=l.next())null!==(g=h(m,o,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),u=a(g,u,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),ii&&Jo(o,v),c}return function e(r,i,a,l){if("object"==typeof a&&null!==a&&a.type===E&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case S:e:{for(var s=a.key,c=i;null!==c;){if(c.key===s){if((s=a.type)===E){if(7===c.tag){n(r,c.sibling),(i=o(c,a.props.children)).return=r,r=i;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===N&&Zi(s)===c.type){n(r,c.sibling),(i=o(c,a.props)).ref=Wi(r,c,a),i.return=r,r=i;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===E?((i=Ds(a.props.children,r.mode,l,a.key)).return=r,r=i):((l=Ls(a.type,a.key,a.props,null,r.mode,l)).ref=Wi(r,i,a),l.return=r,r=l)}return u(r);case k:e:{for(c=a.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=zs(a,r.mode,l)).return=r,r=i}return u(r);case N:return e(r,i,(c=a._init)(a._payload),l)}if(te(a))return m(r,i,a,l);if(D(a))return v(r,i,a,l);Ki(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(n(r,i.sibling),(i=o(i,a)).return=r,r=i):(n(r,i),(i=js(a,r.mode,l)).return=r,r=i),u(r)):n(r,i)}}var Xi=Gi(!0),Yi=Gi(!1),Ji={},ea=Co(Ji),ta=Co(Ji),na=Co(Ji);function ra(e){if(e===Ji)throw Error(i(174));return e}function oa(e,t){switch(Oo(na,t),Oo(ta,e),Oo(ea,Ji),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Po(ea),Oo(ea,t)}function ia(){Po(ea),Po(ta),Po(na)}function aa(e){ra(na.current);var t=ra(ea.current),n=le(t,e.type);t!==n&&(Oo(ta,e),Oo(ea,n))}function ua(e){ta.current===e&&(Po(ea),Po(ta))}var la=Co(0);function sa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ca=[];function fa(){for(var e=0;e<ca.length;e++)ca[e]._workInProgressVersionPrimary=null;ca.length=0}var da=w.ReactCurrentDispatcher,pa=w.ReactCurrentBatchConfig,ha=0,ma=null,va=null,ya=null,ga=!1,ba=!1,wa=0,Sa=0;function ka(){throw Error(i(321))}function Ea(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function xa(e,t,n,r,o,a){if(ha=a,ma=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,da.current=null===e||null===e.memoizedState?uu:lu,e=n(r,o),ba){a=0;do{if(ba=!1,wa=0,25<=a)throw Error(i(301));a+=1,ya=va=null,t.updateQueue=null,da.current=su,e=n(r,o)}while(ba)}if(da.current=au,t=null!==va&&null!==va.next,ha=0,ya=va=ma=null,ga=!1,t)throw Error(i(300));return e}function Ca(){var e=0!==wa;return wa=0,e}function Pa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ya?ma.memoizedState=ya=e:ya=ya.next=e,ya}function Oa(){if(null===va){var e=ma.alternate;e=null!==e?e.memoizedState:null}else e=va.next;var t=null===ya?ma.memoizedState:ya.next;if(null!==t)ya=t,va=e;else{if(null===e)throw Error(i(310));e={memoizedState:(va=e).memoizedState,baseState:va.baseState,baseQueue:va.baseQueue,queue:va.queue,next:null},null===ya?ma.memoizedState=ya=e:ya=ya.next=e}return ya}function _a(e,t){return"function"==typeof t?t(e):t}function Ra(e){var t=Oa(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=va,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var u=o.next;o.next=a.next,a.next=u}r.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,r=r.baseState;var l=u=null,s=null,c=a;do{var f=c.lane;if((ha&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(l=s=d,u=r):s=s.next=d,ma.lanes|=f,Fl|=f}c=c.next}while(null!==c&&c!==a);null===s?u=r:s.next=l,ur(r,t.memoizedState)||(wu=!0),t.memoizedState=r,t.baseState=u,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,ma.lanes|=a,Fl|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ta(e){var t=Oa(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{a=e(a,u.action),u=u.next}while(u!==o);ur(a,t.memoizedState)||(wu=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function Aa(){}function Na(e,t){var n=ma,r=Oa(),o=t(),a=!ur(r.memoizedState,o);if(a&&(r.memoizedState=o,wu=!0),r=r.queue,qa(Da.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==ya&&1&ya.memoizedState.tag){if(n.flags|=2048,Ma(9,La.bind(null,n,r,o,t),void 0,null),null===Rl)throw Error(i(349));0!=(30&ha)||Ia(n,t,o)}return o}function Ia(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function La(e,t,n,r){t.value=n,t.getSnapshot=r,Fa(t)&&ja(e)}function Da(e,t,n){return n((function(){Fa(t)&&ja(e)}))}function Fa(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ur(e,n)}catch(e){return!0}}function ja(e){var t=Ti(e,1);null!==t&&ns(t,e,1,-1)}function za(e){var t=Pa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_a,lastRenderedState:e},t.queue=e,e=e.dispatch=nu.bind(null,ma,e),[t.memoizedState,e]}function Ma(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ma.updateQueue)?(t={lastEffect:null,stores:null},ma.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ua(){return Oa().memoizedState}function $a(e,t,n,r){var o=Pa();ma.flags|=e,o.memoizedState=Ma(1|t,n,void 0,void 0===r?null:r)}function Ba(e,t,n,r){var o=Oa();r=void 0===r?null:r;var i=void 0;if(null!==va){var a=va.memoizedState;if(i=a.destroy,null!==r&&Ea(r,a.deps))return void(o.memoizedState=Ma(t,n,i,r))}ma.flags|=e,o.memoizedState=Ma(1|t,n,i,r)}function Qa(e,t){return $a(8390656,8,e,t)}function qa(e,t){return Ba(2048,8,e,t)}function Va(e,t){return Ba(4,2,e,t)}function Ha(e,t){return Ba(4,4,e,t)}function Wa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ka(e,t,n){return n=null!=n?n.concat([e]):null,Ba(4,4,Wa.bind(null,t,e),n)}function Za(){}function Ga(e,t){var n=Oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ea(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xa(e,t){var n=Oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Ea(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ya(e,t,n){return 0==(21&ha)?(e.baseState&&(e.baseState=!1,wu=!0),e.memoizedState=n):(ur(n,t)||(n=mt(),ma.lanes|=n,Fl|=n,e.baseState=!0),t)}function Ja(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pa.transition;pa.transition={};try{e(!1),t()}finally{bt=n,pa.transition=r}}function eu(){return Oa().memoizedState}function tu(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},ru(e)?ou(t,n):null!==(n=Ri(e,t,n,r))&&(ns(n,e,r,es()),iu(n,t,r))}function nu(e,t,n){var r=ts(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(ru(e))ou(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=i(a,n);if(o.hasEagerState=!0,o.eagerState=u,ur(u,a)){var l=t.interleaved;return null===l?(o.next=o,_i(t)):(o.next=l.next,l.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ri(e,t,o,r))&&(ns(n,e,r,o=es()),iu(n,t,r))}}function ru(e){var t=e.alternate;return e===ma||null!==t&&t===ma}function ou(e,t){ba=ga=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function iu(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var au={readContext:Pi,useCallback:ka,useContext:ka,useEffect:ka,useImperativeHandle:ka,useInsertionEffect:ka,useLayoutEffect:ka,useMemo:ka,useReducer:ka,useRef:ka,useState:ka,useDebugValue:ka,useDeferredValue:ka,useTransition:ka,useMutableSource:ka,useSyncExternalStore:ka,useId:ka,unstable_isNewReconciler:!1},uu={readContext:Pi,useCallback:function(e,t){return Pa().memoizedState=[e,void 0===t?null:t],e},useContext:Pi,useEffect:Qa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,$a(4194308,4,Wa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return $a(4194308,4,e,t)},useInsertionEffect:function(e,t){return $a(4,2,e,t)},useMemo:function(e,t){var n=Pa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Pa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tu.bind(null,ma,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Pa().memoizedState=e},useState:za,useDebugValue:Za,useDeferredValue:function(e){return Pa().memoizedState=e},useTransition:function(){var e=za(!1),t=e[0];return e=Ja.bind(null,e[1]),Pa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ma,o=Pa();if(ii){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===Rl)throw Error(i(349));0!=(30&ha)||Ia(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,Qa(Da.bind(null,r,a,e),[e]),r.flags|=2048,Ma(9,La.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=Pa(),t=Rl.identifierPrefix;if(ii){var n=Yo;t=":"+t+"R"+(n=(Xo&~(1<<32-at(Xo)-1)).toString(32)+n),0<(n=wa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Sa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},lu={readContext:Pi,useCallback:Ga,useContext:Pi,useEffect:qa,useImperativeHandle:Ka,useInsertionEffect:Va,useLayoutEffect:Ha,useMemo:Xa,useReducer:Ra,useRef:Ua,useState:function(){return Ra(_a)},useDebugValue:Za,useDeferredValue:function(e){return Ya(Oa(),va.memoizedState,e)},useTransition:function(){return[Ra(_a)[0],Oa().memoizedState]},useMutableSource:Aa,useSyncExternalStore:Na,useId:eu,unstable_isNewReconciler:!1},su={readContext:Pi,useCallback:Ga,useContext:Pi,useEffect:qa,useImperativeHandle:Ka,useInsertionEffect:Va,useLayoutEffect:Ha,useMemo:Xa,useReducer:Ta,useRef:Ua,useState:function(){return Ta(_a)},useDebugValue:Za,useDeferredValue:function(e){var t=Oa();return null===va?t.memoizedState=e:Ya(t,va.memoizedState,e)},useTransition:function(){return[Ta(_a)[0],Oa().memoizedState]},useMutableSource:Aa,useSyncExternalStore:Na,useId:eu,unstable_isNewReconciler:!1};function cu(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function fu(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function du(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pu="function"==typeof WeakMap?WeakMap:Map;function hu(e,t,n){(n=Li(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ql||(ql=!0,Vl=r),du(0,t)},n}function mu(e,t,n){(n=Li(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){du(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){du(0,t),"function"!=typeof r&&(null===Hl?Hl=new Set([this]):Hl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function vu(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pu;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Cs.bind(null,e,t,n),t.then(e,e))}function yu(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function gu(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Li(-1,1)).tag=2,Di(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bu=w.ReactCurrentOwner,wu=!1;function Su(e,t,n,r){t.child=null===e?Yi(t,null,n,r):Xi(t,e.child,n,r)}function ku(e,t,n,r,o){n=n.render;var i=t.ref;return Ci(t,o),r=xa(e,t,n,r,i,o),n=Ca(),null===e||wu?(ii&&n&&ti(t),t.flags|=1,Su(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,qu(e,t,o))}function Eu(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||Ns(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ls(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,xu(e,t,i,r,o))}if(i=e.child,0==(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(a,r)&&e.ref===t.ref)return qu(e,t,o)}return t.flags|=1,(e=Is(i,r)).ref=t.ref,e.return=t,t.child=e}function xu(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(lr(i,r)&&e.ref===t.ref){if(wu=!1,t.pendingProps=r=i,0==(e.lanes&o))return t.lanes=e.lanes,qu(e,t,o);0!=(131072&e.flags)&&(wu=!0)}}return Ou(e,t,n,r,o)}function Cu(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Oo(Il,Nl),Nl|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Oo(Il,Nl),Nl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,Oo(Il,Nl),Nl|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,Oo(Il,Nl),Nl|=r;return Su(e,t,o,n),t.child}function Pu(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ou(e,t,n,r,o){var i=Io(n)?Ao:Ro.current;return i=No(t,i),Ci(t,o),n=xa(e,t,n,r,i,o),r=Ca(),null===e||wu?(ii&&r&&ti(t),t.flags|=1,Su(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,qu(e,t,o))}function _u(e,t,n,r,o){if(Io(n)){var i=!0;jo(t)}else i=!1;if(Ci(t,o),null===t.stateNode)Qu(e,t),qi(t,n,r),Hi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,s=n.contextType;s="object"==typeof s&&null!==s?Pi(s):No(t,s=Io(n)?Ao:Ro.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==s)&&Vi(t,a,r,s),Ai=!1;var d=t.memoizedState;a.state=d,zi(t,r,a,o),l=t.memoizedState,u!==r||d!==l||To.current||Ai?("function"==typeof c&&($i(t,n,c,r),l=t.memoizedState),(u=Ai||Qi(t,n,u,r,d,l,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=s,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Ii(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:yi(t.type,u),a.props=s,f=t.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?Pi(l):No(t,l=Io(n)?Ao:Ro.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==f||d!==l)&&Vi(t,a,r,l),Ai=!1,d=t.memoizedState,a.state=d,zi(t,r,a,o);var h=t.memoizedState;u!==f||d!==h||To.current||Ai?("function"==typeof p&&($i(t,n,p,r),h=t.memoizedState),(s=Ai||Qi(t,n,s,r,d,h,l)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Ru(e,t,n,r,i,o)}function Ru(e,t,n,r,o,i){Pu(e,t);var a=0!=(128&t.flags);if(!r&&!a)return o&&zo(t,n,!1),qu(e,t,i);r=t.stateNode,bu.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Xi(t,e.child,null,i),t.child=Xi(t,null,u,i)):Su(e,t,u,i),t.memoizedState=r.state,o&&zo(t,n,!0),t.child}function Tu(e){var t=e.stateNode;t.pendingContext?Do(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Do(0,t.context,!1),oa(e,t.containerInfo)}function Au(e,t,n,r,o){return hi(),mi(o),t.flags|=256,Su(e,t,n,r),t.child}var Nu,Iu,Lu,Du={dehydrated:null,treeContext:null,retryLane:0};function Fu(e){return{baseLanes:e,cachePool:null,transitions:null}}function ju(e,t,n){var r,o=t.pendingProps,a=la.current,u=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(u=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Oo(la,1&a),null===e)return ci(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=o.children,e=o.fallback,u?(o=t.mode,u=t.child,l={mode:"hidden",children:l},0==(1&o)&&null!==u?(u.childLanes=0,u.pendingProps=l):u=Fs(l,o,0,null),e=Ds(e,o,n,null),u.return=t,e.return=t,u.sibling=e,t.child=u,t.child.memoizedState=Fu(n),t.memoizedState=Du,e):zu(t,l));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,o,a,u){if(n)return 256&t.flags?(t.flags&=-257,Mu(e,t,u,r=fu(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,o=t.mode,r=Fs({mode:"visible",children:r.children},o,0,null),(a=Ds(a,o,u,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,0!=(1&t.mode)&&Xi(t,e.child,null,u),t.child.memoizedState=Fu(u),t.memoizedState=Du,a);if(0==(1&t.mode))return Mu(e,t,u,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var l=r.dgst;return r=l,Mu(e,t,u,r=fu(a=Error(i(419)),r,void 0))}if(l=0!=(u&e.childLanes),wu||l){if(null!==(r=Rl)){switch(u&-u){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|u))?0:o)&&o!==a.retryLane&&(a.retryLane=o,Ti(e,o),ns(r,e,o,-1))}return ms(),Mu(e,t,u,r=fu(Error(i(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Os.bind(null,e),o._reactRetry=t,null):(e=a.treeContext,oi=so(o.nextSibling),ri=t,ii=!0,ai=null,null!==e&&(Ko[Zo++]=Xo,Ko[Zo++]=Yo,Ko[Zo++]=Go,Xo=e.id,Yo=e.overflow,Go=t),(t=zu(t,r.children)).flags|=4096,t)}(e,t,l,o,r,a,n);if(u){u=o.fallback,l=t.mode,r=(a=e.child).sibling;var s={mode:"hidden",children:o.children};return 0==(1&l)&&t.child!==a?((o=t.child).childLanes=0,o.pendingProps=s,t.deletions=null):(o=Is(a,s)).subtreeFlags=14680064&a.subtreeFlags,null!==r?u=Is(r,u):(u=Ds(u,l,n,null)).flags|=2,u.return=t,o.return=t,o.sibling=u,t.child=o,o=u,u=t.child,l=null===(l=e.child.memoizedState)?Fu(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},u.memoizedState=l,u.childLanes=e.childLanes&~n,t.memoizedState=Du,o}return e=(u=e.child).sibling,o=Is(u,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function zu(e,t){return(t=Fs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Mu(e,t,n,r){return null!==r&&mi(r),Xi(t,e.child,null,n),(e=zu(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Uu(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),xi(e.return,t,n)}function $u(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function Bu(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Su(e,t,r.children,n),0!=(2&(r=la.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Uu(e,n,t);else if(19===e.tag)Uu(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Oo(la,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===sa(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),$u(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===sa(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}$u(t,!0,n,null,i);break;case"together":$u(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Qu(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function qu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fl|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Is(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Is(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vu(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Hu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Wu(e,t,n){var r=t.pendingProps;switch(ni(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Hu(t),null;case 1:case 17:return Io(t.type)&&Lo(),Hu(t),null;case 3:return r=t.stateNode,ia(),Po(To),Po(Ro),fa(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(di(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ai&&(as(ai),ai=null))),Hu(t),null;case 5:ua(t);var o=ra(na.current);if(n=t.type,null!==e&&null!=t.stateNode)Iu(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Hu(t),null}if(e=ra(ea.current),di(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[po]=t,r[ho]=a,e=0!=(1&t.mode),n){case"dialog":Mr("cancel",r),Mr("close",r);break;case"iframe":case"object":case"embed":Mr("load",r);break;case"video":case"audio":for(o=0;o<Dr.length;o++)Mr(Dr[o],r);break;case"source":Mr("error",r);break;case"img":case"image":case"link":Mr("error",r),Mr("load",r);break;case"details":Mr("toggle",r);break;case"input":G(r,a),Mr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Mr("invalid",r);break;case"textarea":oe(r,a),Mr("invalid",r)}for(var l in ge(n,a),o=null,a)if(a.hasOwnProperty(l)){var s=a[l];"children"===l?"string"==typeof s?r.textContent!==s&&(!0!==a.suppressHydrationWarning&&Yr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==a.suppressHydrationWarning&&Yr(r.textContent,s,e),o=["children",""+s]):u.hasOwnProperty(l)&&null!=s&&"onScroll"===l&&Mr("scroll",r)}switch(n){case"input":H(r),J(r,a,!0);break;case"textarea":H(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Jr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ue(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[po]=t,e[ho]=r,Nu(e,t),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":Mr("cancel",e),Mr("close",e),o=r;break;case"iframe":case"object":case"embed":Mr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Dr.length;o++)Mr(Dr[o],e);o=r;break;case"source":Mr("error",e),o=r;break;case"img":case"image":case"link":Mr("error",e),Mr("load",e),o=r;break;case"details":Mr("toggle",e),o=r;break;case"input":G(e,r),o=Z(e,r),Mr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=j({},r,{value:void 0}),Mr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Mr("invalid",e)}for(a in ge(n,o),s=o)if(s.hasOwnProperty(a)){var c=s[a];"style"===a?ve(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(u.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Mr("scroll",e):null!=c&&b(e,a,c,l))}switch(n){case"input":H(e),J(e,r,!1);break;case"textarea":H(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Hu(t),null;case 6:if(e&&null!=t.stateNode)Lu(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=ra(na.current),ra(ea.current),di(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(a=r.nodeValue!==n)&&null!==(e=ri))switch(e.tag){case 3:Yr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Yr(r.nodeValue,n,0!=(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Hu(t),null;case 13:if(Po(la),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==oi&&0!=(1&t.mode)&&0==(128&t.flags))pi(),hi(),t.flags|=98560,a=!1;else if(a=di(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[po]=t}else hi(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Hu(t),a=!1}else null!==ai&&(as(ai),ai=null),a=!0;if(!a)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&la.current)?0===Ll&&(Ll=3):ms())),null!==t.updateQueue&&(t.flags|=4),Hu(t),null);case 4:return ia(),null===e&&Br(t.stateNode.containerInfo),Hu(t),null;case 10:return Ei(t.type._context),Hu(t),null;case 19:if(Po(la),null===(a=t.memoizedState))return Hu(t),null;if(r=0!=(128&t.flags),null===(l=a.rendering))if(r)Vu(a,!1);else{if(0!==Ll||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=sa(e))){for(t.flags|=128,Vu(a,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Oo(la,1&la.current|2),t.child}e=e.sibling}null!==a.tail&&Xe()>Bl&&(t.flags|=128,r=!0,Vu(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=sa(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vu(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!ii)return Hu(t),null}else 2*Xe()-a.renderingStartTime>Bl&&1073741824!==n&&(t.flags|=128,r=!0,Vu(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=a.last)?n.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Xe(),t.sibling=null,n=la.current,Oo(la,r?1&n|2:1&n),t):(Hu(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Nl)&&(Hu(t),6&t.subtreeFlags&&(t.flags|=8192)):Hu(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function Ku(e,t){switch(ni(t),t.tag){case 1:return Io(t.type)&&Lo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ia(),Po(To),Po(Ro),fa(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ua(t),null;case 13:if(Po(la),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));hi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Po(la),null;case 4:return ia(),null;case 10:return Ei(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Nu=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Iu=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ra(ea.current);var i,a=null;switch(n){case"input":o=Z(e,o),r=Z(e,r),a=[];break;case"select":o=j({},o,{value:void 0}),r=j({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(c in ge(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var l=o[c];for(i in l)l.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(u.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var s=r[c];if(l=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==l&&(null!=s||null!=l))if("style"===c)if(l){for(i in l)!l.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&l[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(a||(a=[]),a.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,l=l?l.__html:void 0,null!=s&&l!==s&&(a=a||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(a=a||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(u.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Mr("scroll",e),a||l===s||(a=[])):(a=a||[]).push(c,s))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Lu=function(e,t,n,r){n!==r&&(t.flags|=4)};var Zu=!1,Gu=!1,Xu="function"==typeof WeakSet?WeakSet:Set,Yu=null;function Ju(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){xs(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){xs(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&el(t,n,i)}o=o.next}while(o!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ol(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function il(e){var t=e.alternate;null!==t&&(e.alternate=null,il(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[vo],delete t[yo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function ul(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function sl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(sl(e,t,n),e=e.sibling;null!==e;)sl(e,t,n),e=e.sibling}var cl=null,fl=!1;function dl(e,t,n){for(n=n.child;null!==n;)pl(e,t,n),n=n.sibling}function pl(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Gu||Ju(n,t);case 6:var r=cl,o=fl;cl=null,dl(e,t,n),fl=o,null!==(cl=r)&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?lo(e.parentNode,n):1===e.nodeType&&lo(e,n),Bt(e)):lo(cl,n.stateNode));break;case 4:r=cl,o=fl,cl=n.stateNode.containerInfo,fl=!0,dl(e,t,n),cl=r,fl=o;break;case 0:case 11:case 14:case 15:if(!Gu&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(0!=(2&i)||0!=(4&i))&&el(n,t,a),o=o.next}while(o!==r)}dl(e,t,n);break;case 1:if(!Gu&&(Ju(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){xs(n,t,e)}dl(e,t,n);break;case 21:dl(e,t,n);break;case 22:1&n.mode?(Gu=(r=Gu)||null!==n.memoizedState,dl(e,t,n),Gu=r):dl(e,t,n);break;default:dl(e,t,n)}}function hl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xu),t.forEach((function(t){var r=_s.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ml(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var a=e,u=t,l=u;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,fl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,fl=!0;break e}l=l.return}if(null===cl)throw Error(i(160));pl(a,u,o),cl=null,fl=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){xs(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vl(t,e),t=t.sibling}function vl(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ml(t,e),yl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){xs(e,e.return,t)}try{nl(5,e,e.return)}catch(t){xs(e,e.return,t)}}break;case 1:ml(t,e),yl(e),512&r&&null!==n&&Ju(n,n.return);break;case 5:if(ml(t,e),yl(e),512&r&&null!==n&&Ju(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){xs(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,u=null!==n?n.memoizedProps:a,l=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===l&&"radio"===a.type&&null!=a.name&&X(o,a),be(l,u);var c=be(l,a);for(u=0;u<s.length;u+=2){var f=s[u],d=s[u+1];"style"===f?ve(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,c)}switch(l){case"input":Y(o,a);break;case"textarea":ie(o,a);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(o,!!a.multiple,h,!1):p!==!!a.multiple&&(null!=a.defaultValue?ne(o,!!a.multiple,a.defaultValue,!0):ne(o,!!a.multiple,a.multiple?[]:"",!1))}o[ho]=a}catch(t){xs(e,e.return,t)}}break;case 6:if(ml(t,e),yl(e),4&r){if(null===e.stateNode)throw Error(i(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(t){xs(e,e.return,t)}}break;case 3:if(ml(t,e),yl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Bt(t.containerInfo)}catch(t){xs(e,e.return,t)}break;case 4:default:ml(t,e),yl(e);break;case 13:ml(t,e),yl(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||($l=Xe())),4&r&&hl(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Gu=(c=Gu)||f,ml(t,e),Gu=c):ml(t,e),yl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(Yu=e,f=e.child;null!==f;){for(d=Yu=f;null!==Yu;){switch(h=(p=Yu).child,p.tag){case 0:case 11:case 14:case 15:nl(4,p,p.return);break;case 1:Ju(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){xs(r,n,e)}}break;case 5:Ju(p,p.return);break;case 22:if(null!==p.memoizedState){Sl(d);continue}}null!==h?(h.return=p,Yu=h):Sl(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,c?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=d.stateNode,u=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,l.style.display=me("display",u))}catch(t){xs(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){xs(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:ml(t,e),yl(e),4&r&&hl(e);case 21:}}function yl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(al(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),sl(e,ul(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;ll(e,ul(e),a);break;default:throw Error(i(161))}}catch(t){xs(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gl(e,t,n){Yu=e,bl(e,t,n)}function bl(e,t,n){for(var r=0!=(1&e.mode);null!==Yu;){var o=Yu,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Zu;if(!a){var u=o.alternate,l=null!==u&&null!==u.memoizedState||Gu;u=Zu;var s=Gu;if(Zu=a,(Gu=l)&&!s)for(Yu=o;null!==Yu;)l=(a=Yu).child,22===a.tag&&null!==a.memoizedState?kl(o):null!==l?(l.return=a,Yu=l):kl(o);for(;null!==i;)Yu=i,bl(i,t,n),i=i.sibling;Yu=o,Zu=u,Gu=s}wl(e)}else 0!=(8772&o.subtreeFlags)&&null!==i?(i.return=o,Yu=i):wl(e)}}function wl(e){for(;null!==Yu;){var t=Yu;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Gu||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Gu)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:yi(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&Mi(t,a,r);break;case 3:var u=t.updateQueue;if(null!==u){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Mi(t,u,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Bt(d)}}}break;default:throw Error(i(163))}Gu||512&t.flags&&ol(t)}catch(e){xs(t,t.return,e)}}if(t===e){Yu=null;break}if(null!==(n=t.sibling)){n.return=t.return,Yu=n;break}Yu=t.return}}function Sl(e){for(;null!==Yu;){var t=Yu;if(t===e){Yu=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Yu=n;break}Yu=t.return}}function kl(e){for(;null!==Yu;){var t=Yu;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){xs(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){xs(t,o,e)}}var i=t.return;try{ol(t)}catch(e){xs(t,i,e)}break;case 5:var a=t.return;try{ol(t)}catch(e){xs(t,a,e)}}}catch(e){xs(t,t.return,e)}if(t===e){Yu=null;break}var u=t.sibling;if(null!==u){u.return=t.return,Yu=u;break}Yu=t.return}}var El,xl=Math.ceil,Cl=w.ReactCurrentDispatcher,Pl=w.ReactCurrentOwner,Ol=w.ReactCurrentBatchConfig,_l=0,Rl=null,Tl=null,Al=0,Nl=0,Il=Co(0),Ll=0,Dl=null,Fl=0,jl=0,zl=0,Ml=null,Ul=null,$l=0,Bl=1/0,Ql=null,ql=!1,Vl=null,Hl=null,Wl=!1,Kl=null,Zl=0,Gl=0,Xl=null,Yl=-1,Jl=0;function es(){return 0!=(6&_l)?Xe():-1!==Yl?Yl:Yl=Xe()}function ts(e){return 0==(1&e.mode)?1:0!=(2&_l)&&0!==Al?Al&-Al:null!==vi.transition?(0===Jl&&(Jl=mt()),Jl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Gt(e.type)}function ns(e,t,n,r){if(50<Gl)throw Gl=0,Xl=null,Error(i(185));yt(e,n,r),0!=(2&_l)&&e===Rl||(e===Rl&&(0==(2&_l)&&(jl|=n),4===Ll&&us(e,Al)),rs(e,r),1===n&&0===_l&&0==(1&t.mode)&&(Bl=Xe()+500,Uo&&Qo()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-at(i),u=1<<a,l=o[a];-1===l?0!=(u&n)&&0==(u&r)||(o[a]=pt(u,t)):l<=t&&(e.expiredLanes|=u),i&=~u}}(e,t);var r=dt(e,e===Rl?Al:0);if(0===r)null!==n&&Ke(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ke(n),1===t)0===e.tag?function(e){Uo=!0,Bo(e)}(ls.bind(null,e)):Bo(ls.bind(null,e)),ao((function(){0==(6&_l)&&Qo()})),n=null;else{switch(wt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Rs(n,os.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function os(e,t){if(Yl=-1,Jl=0,0!=(6&_l))throw Error(i(327));var n=e.callbackNode;if(ks()&&e.callbackNode!==n)return null;var r=dt(e,e===Rl?Al:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vs(e,r);else{t=r;var o=_l;_l|=2;var a=hs();for(Rl===e&&Al===t||(Ql=null,Bl=Xe()+500,ds(e,t));;)try{gs();break}catch(t){ps(e,t)}ki(),Cl.current=a,_l=o,null!==Tl?t=0:(Rl=null,Al=0,t=Ll)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=is(e,o)),1===t)throw n=Dl,ds(e,0),us(e,r),rs(e,Xe()),n;if(6===t)us(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!ur(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=vs(e,r))&&0!==(a=ht(e))&&(r=a,t=is(e,a)),1===t))throw n=Dl,ds(e,0),us(e,r),rs(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:Ss(e,Ul,Ql);break;case 3:if(us(e,r),(130023424&r)===r&&10<(t=$l+500-Xe())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(Ss.bind(null,e,Ul,Ql),t);break}Ss(e,Ul,Ql);break;case 4:if(us(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var u=31-at(r);a=1<<u,(u=t[u])>o&&(o=u),r&=~a}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*xl(r/1960))-r)){e.timeoutHandle=ro(Ss.bind(null,e,Ul,Ql),r);break}Ss(e,Ul,Ql);break;default:throw Error(i(329))}}}return rs(e,Xe()),e.callbackNode===n?os.bind(null,e):null}function is(e,t){var n=Ml;return e.current.memoizedState.isDehydrated&&(ds(e,t).flags|=256),2!==(e=vs(e,t))&&(t=Ul,Ul=n,null!==t&&as(t)),e}function as(e){null===Ul?Ul=e:Ul.push.apply(Ul,e)}function us(e,t){for(t&=~zl,t&=~jl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function ls(e){if(0!=(6&_l))throw Error(i(327));ks();var t=dt(e,0);if(0==(1&t))return rs(e,Xe()),null;var n=vs(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=is(e,r))}if(1===n)throw n=Dl,ds(e,0),us(e,t),rs(e,Xe()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ss(e,Ul,Ql),rs(e,Xe()),null}function ss(e,t){var n=_l;_l|=1;try{return e(t)}finally{0===(_l=n)&&(Bl=Xe()+500,Uo&&Qo())}}function cs(e){null!==Kl&&0===Kl.tag&&0==(6&_l)&&ks();var t=_l;_l|=1;var n=Ol.transition,r=bt;try{if(Ol.transition=null,bt=1,e)return e()}finally{bt=r,Ol.transition=n,0==(6&(_l=t))&&Qo()}}function fs(){Nl=Il.current,Po(Il)}function ds(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Tl)for(n=Tl.return;null!==n;){var r=n;switch(ni(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Lo();break;case 3:ia(),Po(To),Po(Ro),fa();break;case 5:ua(r);break;case 4:ia();break;case 13:case 19:Po(la);break;case 10:Ei(r.type._context);break;case 22:case 23:fs()}n=n.return}if(Rl=e,Tl=e=Is(e.current,null),Al=Nl=t,Ll=0,Dl=null,zl=jl=Fl=0,Ul=Ml=null,null!==Oi){for(t=0;t<Oi.length;t++)if(null!==(r=(n=Oi[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}Oi=null}return e}function ps(e,t){for(;;){var n=Tl;try{if(ki(),da.current=au,ga){for(var r=ma.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ga=!1}if(ha=0,ya=va=ma=null,ba=!1,wa=0,Pl.current=null,null===n||null===n.return){Ll=1,Dl=t,Tl=null;break}e:{var a=e,u=n.return,l=n,s=t;if(t=Al,l.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=l,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=yu(u);if(null!==h){h.flags&=-257,gu(h,u,l,0,t),1&h.mode&&vu(a,c,t),s=c;var m=(t=h).updateQueue;if(null===m){var v=new Set;v.add(s),t.updateQueue=v}else m.add(s);break e}if(0==(1&t)){vu(a,c,t),ms();break e}s=Error(i(426))}else if(ii&&1&l.mode){var y=yu(u);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),gu(y,u,l,0,t),mi(cu(s,l));break e}}a=s=cu(s,l),4!==Ll&&(Ll=2),null===Ml?Ml=[a]:Ml.push(a),a=u;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,ji(a,hu(0,s,t));break e;case 1:l=s;var g=a.type,b=a.stateNode;if(0==(128&a.flags)&&("function"==typeof g.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===Hl||!Hl.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,ji(a,mu(a,l,t));break e}}a=a.return}while(null!==a)}ws(n)}catch(e){t=e,Tl===n&&null!==n&&(Tl=n=n.return);continue}break}}function hs(){var e=Cl.current;return Cl.current=au,null===e?au:e}function ms(){0!==Ll&&3!==Ll&&2!==Ll||(Ll=4),null===Rl||0==(268435455&Fl)&&0==(268435455&jl)||us(Rl,Al)}function vs(e,t){var n=_l;_l|=2;var r=hs();for(Rl===e&&Al===t||(Ql=null,ds(e,t));;)try{ys();break}catch(t){ps(e,t)}if(ki(),_l=n,Cl.current=r,null!==Tl)throw Error(i(261));return Rl=null,Al=0,Ll}function ys(){for(;null!==Tl;)bs(Tl)}function gs(){for(;null!==Tl&&!Ze();)bs(Tl)}function bs(e){var t=El(e.alternate,e,Nl);e.memoizedProps=e.pendingProps,null===t?ws(e):Tl=t,Pl.current=null}function ws(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Wu(n,t,Nl)))return void(Tl=n)}else{if(null!==(n=Ku(n,t)))return n.flags&=32767,void(Tl=n);if(null===e)return Ll=6,void(Tl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Tl=t);Tl=t=e}while(null!==t);0===Ll&&(Ll=5)}function Ss(e,t,n){var r=bt,o=Ol.transition;try{Ol.transition=null,bt=1,function(e,t,n,r){do{ks()}while(null!==Kl);if(0!=(6&_l))throw Error(i(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-at(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,a),e===Rl&&(Tl=Rl=null,Al=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Wl||(Wl=!0,Rs(tt,(function(){return ks(),null}))),a=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||a){a=Ol.transition,Ol.transition=null;var u=bt;bt=1;var l=_l;_l|=4,Pl.current=null,function(e,t){if(eo=qt,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var u=0,l=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(l=u+o),d!==a||0!==r&&3!==d.nodeType||(s=u+r),3===d.nodeType&&(u+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===o&&(l=u),p===a&&++f===r&&(s=u),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===l||-1===s?null:{start:l,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},qt=!1,Yu=t;null!==Yu;)if(e=(t=Yu).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Yu=e;else for(;null!==Yu;){t=Yu;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var v=m.memoizedProps,y=m.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:yi(t.type,v),y);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(i(163))}}catch(e){xs(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Yu=e;break}Yu=t.return}m=tl,tl=!1}(e,n),vl(n,e),hr(to),qt=!!eo,to=eo=null,e.current=n,gl(n,e,o),Ge(),_l=l,bt=u,Ol.transition=a}else e.current=n;if(Wl&&(Wl=!1,Kl=e,Zl=o),0===(a=e.pendingLanes)&&(Hl=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),rs(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(ql)throw ql=!1,e=Vl,Vl=null,e;0!=(1&Zl)&&0!==e.tag&&ks(),0!=(1&(a=e.pendingLanes))?e===Xl?Gl++:(Gl=0,Xl=e):Gl=0,Qo()}(e,t,n,r)}finally{Ol.transition=o,bt=r}return null}function ks(){if(null!==Kl){var e=wt(Zl),t=Ol.transition,n=bt;try{if(Ol.transition=null,bt=16>e?16:e,null===Kl)var r=!1;else{if(e=Kl,Kl=null,Zl=0,0!=(6&_l))throw Error(i(331));var o=_l;for(_l|=4,Yu=e.current;null!==Yu;){var a=Yu,u=a.child;if(0!=(16&Yu.flags)){var l=a.deletions;if(null!==l){for(var s=0;s<l.length;s++){var c=l[s];for(Yu=c;null!==Yu;){var f=Yu;switch(f.tag){case 0:case 11:case 15:nl(8,f,a)}var d=f.child;if(null!==d)d.return=f,Yu=d;else for(;null!==Yu;){var p=(f=Yu).sibling,h=f.return;if(il(f),f===c){Yu=null;break}if(null!==p){p.return=h,Yu=p;break}Yu=h}}}var m=a.alternate;if(null!==m){var v=m.child;if(null!==v){m.child=null;do{var y=v.sibling;v.sibling=null,v=y}while(null!==v)}}Yu=a}}if(0!=(2064&a.subtreeFlags)&&null!==u)u.return=a,Yu=u;else e:for(;null!==Yu;){if(0!=(2048&(a=Yu).flags))switch(a.tag){case 0:case 11:case 15:nl(9,a,a.return)}var g=a.sibling;if(null!==g){g.return=a.return,Yu=g;break e}Yu=a.return}}var b=e.current;for(Yu=b;null!==Yu;){var w=(u=Yu).child;if(0!=(2064&u.subtreeFlags)&&null!==w)w.return=u,Yu=w;else e:for(u=b;null!==Yu;){if(0!=(2048&(l=Yu).flags))try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){xs(l,l.return,e)}if(l===u){Yu=null;break e}var S=l.sibling;if(null!==S){S.return=l.return,Yu=S;break e}Yu=l.return}}if(_l=o,Qo(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Ol.transition=t}}return!1}function Es(e,t,n){e=Di(e,t=hu(0,t=cu(n,t),1),1),t=es(),null!==e&&(yt(e,1,t),rs(e,t))}function xs(e,t,n){if(3===e.tag)Es(e,e,n);else for(;null!==t;){if(3===t.tag){Es(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r))){t=Di(t,e=mu(t,e=cu(n,e),1),1),e=es(),null!==t&&(yt(t,1,e),rs(t,e));break}}t=t.return}}function Cs(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,Rl===e&&(Al&n)===n&&(4===Ll||3===Ll&&(130023424&Al)===Al&&500>Xe()-$l?ds(e,0):zl|=n),rs(e,t)}function Ps(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=es();null!==(e=Ti(e,t))&&(yt(e,t,n),rs(e,n))}function Os(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Ps(e,n)}function _s(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),Ps(e,n)}function Rs(e,t){return We(e,t)}function Ts(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function As(e,t,n,r){return new Ts(e,t,n,r)}function Ns(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Is(e,t){var n=e.alternate;return null===n?((n=As(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ls(e,t,n,r,o,a){var u=2;if(r=e,"function"==typeof e)Ns(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case E:return Ds(n.children,o,a,t);case x:u=8,o|=8;break;case C:return(e=As(12,n,t,2|o)).elementType=C,e.lanes=a,e;case R:return(e=As(13,n,t,o)).elementType=R,e.lanes=a,e;case T:return(e=As(19,n,t,o)).elementType=T,e.lanes=a,e;case I:return Fs(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:u=10;break e;case O:u=9;break e;case _:u=11;break e;case A:u=14;break e;case N:u=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=As(u,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Ds(e,t,n,r){return(e=As(7,e,r,t)).lanes=n,e}function Fs(e,t,n,r){return(e=As(22,e,r,t)).elementType=I,e.lanes=n,e.stateNode={isHidden:!1},e}function js(e,t,n){return(e=As(6,e,null,t)).lanes=n,e}function zs(e,t,n){return(t=As(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ms(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vt(0),this.expirationTimes=vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Us(e,t,n,r,o,i,a,u,l){return e=new Ms(e,t,n,u,l),1===t?(t=1,!0===i&&(t|=8)):t=0,i=As(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ni(i),e}function $s(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Bs(e){if(!e)return _o;e:{if(Be(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Io(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(Io(n))return Fo(e,n,t)}return t}function Qs(e,t,n,r,o,i,a,u,l){return(e=Us(n,r,!0,e,0,i,0,u,l)).context=Bs(null),n=e.current,(i=Li(r=es(),o=ts(n))).callback=null!=t?t:null,Di(n,i,o),e.current.lanes=o,yt(e,o,r),rs(e,r),e}function qs(e,t,n,r){var o=t.current,i=es(),a=ts(o);return n=Bs(n),null===t.context?t.context=n:t.pendingContext=n,(t=Li(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Di(o,t,a))&&(ns(e,o,a,i),Fi(e,o,a)),a}function Vs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Hs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ws(e,t){Hs(e,t),(e=e.alternate)&&Hs(e,t)}El=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||To.current)wu=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wu=!1,function(e,t,n){switch(t.tag){case 3:Tu(t),hi();break;case 5:aa(t);break;case 1:Io(t.type)&&jo(t);break;case 4:oa(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Oo(gi,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Oo(la,1&la.current),t.flags|=128,null):0!=(n&t.child.childLanes)?ju(e,t,n):(Oo(la,1&la.current),null!==(e=qu(e,t,n))?e.sibling:null);Oo(la,1&la.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Bu(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Oo(la,la.current),r)break;return null;case 22:case 23:return t.lanes=0,Cu(e,t,n)}return qu(e,t,n)}(e,t,n);wu=0!=(131072&e.flags)}else wu=!1,ii&&0!=(1048576&t.flags)&&ei(t,Wo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Qu(e,t),e=t.pendingProps;var o=No(t,Ro.current);Ci(t,n),o=xa(null,t,r,e,o,n);var a=Ca();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Io(r)?(a=!0,jo(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ni(t),o.updater=Bi,t.stateNode=o,o._reactInternals=t,Hi(t,r,e,n),t=Ru(null,t,r,!0,a,n)):(t.tag=0,ii&&a&&ti(t),Su(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Qu(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Ns(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===A)return 14}return 2}(r),e=yi(r,e),o){case 0:t=Ou(null,t,r,e,n);break e;case 1:t=_u(null,t,r,e,n);break e;case 11:t=ku(null,t,r,e,n);break e;case 14:t=Eu(null,t,r,yi(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ou(e,t,r,o=t.elementType===r?o:yi(r,o),n);case 1:return r=t.type,o=t.pendingProps,_u(e,t,r,o=t.elementType===r?o:yi(r,o),n);case 3:e:{if(Tu(t),null===e)throw Error(i(387));r=t.pendingProps,o=(a=t.memoizedState).element,Ii(e,t),zi(t,r,null,n);var u=t.memoizedState;if(r=u.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:u.cache,pendingSuspenseBoundaries:u.pendingSuspenseBoundaries,transitions:u.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=Au(e,t,r,n,o=cu(Error(i(423)),t));break e}if(r!==o){t=Au(e,t,r,n,o=cu(Error(i(424)),t));break e}for(oi=so(t.stateNode.containerInfo.firstChild),ri=t,ii=!0,ai=null,n=Yi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(hi(),r===o){t=qu(e,t,n);break e}Su(e,t,r,n)}t=t.child}return t;case 5:return aa(t),null===e&&ci(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,no(r,o)?u=null:null!==a&&no(r,a)&&(t.flags|=32),Pu(e,t),Su(e,t,u,n),t.child;case 6:return null===e&&ci(t),null;case 13:return ju(e,t,n);case 4:return oa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xi(t,null,r,n):Su(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ku(e,t,r,o=t.elementType===r?o:yi(r,o),n);case 7:return Su(e,t,t.pendingProps,n),t.child;case 8:case 12:return Su(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,u=o.value,Oo(gi,r._currentValue),r._currentValue=u,null!==a)if(ur(a.value,u)){if(a.children===o.children&&!To.current){t=qu(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var l=a.dependencies;if(null!==l){u=a.child;for(var s=l.firstContext;null!==s;){if(s.context===r){if(1===a.tag){(s=Li(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}a.lanes|=n,null!==(s=a.alternate)&&(s.lanes|=n),xi(a.return,n,t),l.lanes|=n;break}s=s.next}}else if(10===a.tag)u=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(u=a.return))throw Error(i(341));u.lanes|=n,null!==(l=u.alternate)&&(l.lanes|=n),xi(u,n,t),u=a.sibling}else u=a.child;if(null!==u)u.return=a;else for(u=a;null!==u;){if(u===t){u=null;break}if(null!==(a=u.sibling)){a.return=u.return,u=a;break}u=u.return}a=u}Su(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ci(t,n),r=r(o=Pi(o)),t.flags|=1,Su(e,t,r,n),t.child;case 14:return o=yi(r=t.type,t.pendingProps),Eu(e,t,r,o=yi(r.type,o),n);case 15:return xu(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:yi(r,o),Qu(e,t),t.tag=1,Io(r)?(e=!0,jo(t)):e=!1,Ci(t,n),qi(t,r,o),Hi(t,r,o,n),Ru(null,t,r,!0,e,n);case 19:return Bu(e,t,n);case 22:return Cu(e,t,n)}throw Error(i(156,t.tag))};var Ks="function"==typeof reportError?reportError:function(e){console.error(e)};function Zs(e){this._internalRoot=e}function Gs(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Ys(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Js(){}function ec(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var u=o;o=function(){var e=Vs(a);u.call(e)}}qs(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=Vs(a);i.call(e)}}var a=Qs(t,r,e,0,null,!1,0,"",Js);return e._reactRootContainer=a,e[mo]=a.current,Br(8===e.nodeType?e.parentNode:e),cs(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var u=r;r=function(){var e=Vs(l);u.call(e)}}var l=Us(e,0,!1,null,0,!1,0,"",Js);return e._reactRootContainer=l,e[mo]=l.current,Br(8===e.nodeType?e.parentNode:e),cs((function(){qs(t,l,n,r)})),l}(n,t,e,o,r);return Vs(a)}Gs.prototype.render=Zs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));qs(e,t,null,null)},Gs.prototype.unmount=Zs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs((function(){qs(null,e,null,null)})),t[mo]=null}},Gs.prototype.unstable_scheduleHydration=function(e){if(e){var t=xt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<It.length&&0!==t&&t<It[n].priority;n++);It.splice(n,0,e),0===n&&jt(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),rs(t,Xe()),0==(6&_l)&&(Bl=Xe()+500,Qo()))}break;case 13:cs((function(){var t=Ti(e,1);if(null!==t){var n=es();ns(t,e,1,n)}})),Ws(e,1)}},kt=function(e){if(13===e.tag){var t=Ti(e,134217728);null!==t&&ns(t,e,134217728,es()),Ws(e,134217728)}},Et=function(e){if(13===e.tag){var t=ts(e),n=Ti(e,t);null!==n&&ns(n,e,t,es()),Ws(e,t)}},xt=function(){return bt},Ct=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},ke=function(e,t,n){switch(t){case"input":if(Y(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=ko(r);if(!o)throw Error(i(90));W(r),Y(r,o)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},_e=ss,Re=cs;var tc={usingClientEntryPoint:!1,Events:[wo,So,ko,Pe,Oe,ss]},nc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{ot=oc.inject(rc),it=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(i(200));return $s(e,t,null,n)},t.createRoot=function(e,t){if(!Xs(e))throw Error(i(299));var n=!1,r="",o=Ks;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Us(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Br(8===e.nodeType?e.parentNode:e),new Zs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Ys(t))throw Error(i(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xs(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,o=!1,a="",u=Ks;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(u=n.onRecoverableError)),t=Qs(t,null,e,1,null!=n?n:null,o,0,a,u),e[mo]=t.current,Br(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Gs(t)},t.render=function(e,t,n){if(!Ys(t))throw Error(i(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ys(e))throw Error(i(40));return!!e._reactRootContainer&&(cs((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ys(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{"use strict";var r=n(3935);t.s=r.createRoot,r.hydrateRoot},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n,r=Symbol.for("react.element"),o=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),u=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.server_context"),f=Symbol.for("react.forward_ref"),d=Symbol.for("react.suspense"),p=Symbol.for("react.suspense_list"),h=Symbol.for("react.memo"),m=Symbol.for("react.lazy"),v=Symbol.for("react.offscreen");n=Symbol.for("react.module.reference"),t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===u||e===a||e===d||e===p||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===h||e.$$typeof===l||e.$$typeof===s||e.$$typeof===f||e.$$typeof===n||void 0!==e.getModuleId)},t.typeOf=function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case i:case u:case a:case d:case p:return e;default:switch(e=e&&e.$$typeof){case c:case s:case f:case m:case h:case l:return e;default:return t}}case o:return t}}}},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},9852:(e,t,n)=>{"use strict";n.d(t,{j:()=>a});var r=n(1721),o=n(2943),i=n(2288),a=new(function(e){function t(){var t;return(t=e.call(this)||this).setup=function(e){var t;if(!i.sk&&(null==(t=window)?void 0:t.addEventListener)){var n=function(){return e()};return window.addEventListener("visibilitychange",n,!1),window.addEventListener("focus",n,!1),function(){window.removeEventListener("visibilitychange",n),window.removeEventListener("focus",n)}}},t}(0,r.Z)(t,e);var n=t.prototype;return n.onSubscribe=function(){this.cleanup||this.setEventListener(this.setup)},n.onUnsubscribe=function(){var e;this.hasListeners()||(null==(e=this.cleanup)||e.call(this),this.cleanup=void 0)},n.setEventListener=function(e){var t,n=this;this.setup=e,null==(t=this.cleanup)||t.call(this),this.cleanup=e((function(e){"boolean"==typeof e?n.setFocused(e):n.onFocus()}))},n.setFocused=function(e){this.focused=e,e&&this.onFocus()},n.onFocus=function(){this.listeners.forEach((function(e){e()}))},n.isFocused=function(){return"boolean"==typeof this.focused?this.focused:"undefined"==typeof document||[void 0,"visible","prerender"].includes(document.visibilityState)},t}(o.l))},6747:(e,t,n)=>{"use strict";n.d(t,{QueryClient:()=>r.S});var r=n(8061),o=n(6755);n.o(o,"QueryClientProvider")&&n.d(t,{QueryClientProvider:function(){return o.QueryClientProvider}}),n.o(o,"useQuery")&&n.d(t,{useQuery:function(){return o.useQuery}})},1909:(e,t,n)=>{"use strict";n.d(t,{E:()=>i,j:()=>o});var r=console;function o(){return r}function i(e){r=e}},101:(e,t,n)=>{"use strict";n.d(t,{V:()=>o});var r=n(2288),o=new(function(){function e(){this.queue=[],this.transactions=0,this.notifyFn=function(e){e()},this.batchNotifyFn=function(e){e()}}var t=e.prototype;return t.batch=function(e){var t;this.transactions++;try{t=e()}finally{this.transactions--,this.transactions||this.flush()}return t},t.schedule=function(e){var t=this;this.transactions?this.queue.push(e):(0,r.A4)((function(){t.notifyFn(e)}))},t.batchCalls=function(e){var t=this;return function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];t.schedule((function(){e.apply(void 0,r)}))}},t.flush=function(){var e=this,t=this.queue;this.queue=[],t.length&&(0,r.A4)((function(){e.batchNotifyFn((function(){t.forEach((function(t){e.notifyFn(t)}))}))}))},t.setNotifyFunction=function(e){this.notifyFn=e},t.setBatchNotifyFunction=function(e){this.batchNotifyFn=e},e}())},68:(e,t,n)=>{"use strict";n.d(t,{N:()=>a});var r=n(1721),o=n(2943),i=n(2288),a=new(function(e){function t(){var t;return(t=e.call(this)||this).setup=function(e){var t;if(!i.sk&&(null==(t=window)?void 0:t.addEventListener)){var n=function(){return e()};return window.addEventListener("online",n,!1),window.addEventListener("offline",n,!1),function(){window.removeEventListener("online",n),window.removeEventListener("offline",n)}}},t}(0,r.Z)(t,e);var n=t.prototype;return n.onSubscribe=function(){this.cleanup||this.setEventListener(this.setup)},n.onUnsubscribe=function(){var e;this.hasListeners()||(null==(e=this.cleanup)||e.call(this),this.cleanup=void 0)},n.setEventListener=function(e){var t,n=this;this.setup=e,null==(t=this.cleanup)||t.call(this),this.cleanup=e((function(e){"boolean"==typeof e?n.setOnline(e):n.onOnline()}))},n.setOnline=function(e){this.online=e,e&&this.onOnline()},n.onOnline=function(){this.listeners.forEach((function(e){e()}))},n.isOnline=function(){return"boolean"==typeof this.online?this.online:"undefined"==typeof navigator||void 0===navigator.onLine||navigator.onLine},t}(o.l))},8061:(e,t,n)=>{"use strict";n.d(t,{S:()=>y});var r=n(7462),o=n(2288),i=n(1721),a=n(101),u=n(1909),l=n(1216),s=function(){function e(e){this.abortSignalConsumed=!1,this.hadObservers=!1,this.defaultOptions=e.defaultOptions,this.setOptions(e.options),this.observers=[],this.cache=e.cache,this.queryKey=e.queryKey,this.queryHash=e.queryHash,this.initialState=e.state||this.getDefaultState(this.options),this.state=this.initialState,this.meta=e.meta,this.scheduleGc()}var t=e.prototype;return t.setOptions=function(e){var t;this.options=(0,r.Z)({},this.defaultOptions,e),this.meta=null==e?void 0:e.meta,this.cacheTime=Math.max(this.cacheTime||0,null!=(t=this.options.cacheTime)?t:3e5)},t.setDefaultOptions=function(e){this.defaultOptions=e},t.scheduleGc=function(){var e=this;this.clearGcTimeout(),(0,o.PN)(this.cacheTime)&&(this.gcTimeout=setTimeout((function(){e.optionalRemove()}),this.cacheTime))},t.clearGcTimeout=function(){this.gcTimeout&&(clearTimeout(this.gcTimeout),this.gcTimeout=void 0)},t.optionalRemove=function(){this.observers.length||(this.state.isFetching?this.hadObservers&&this.scheduleGc():this.cache.remove(this))},t.setData=function(e,t){var n,r,i=this.state.data,a=(0,o.SE)(e,i);return(null==(n=(r=this.options).isDataEqual)?void 0:n.call(r,i,a))?a=i:!1!==this.options.structuralSharing&&(a=(0,o.Q$)(i,a)),this.dispatch({data:a,type:"success",dataUpdatedAt:null==t?void 0:t.updatedAt}),a},t.setState=function(e,t){this.dispatch({type:"setState",state:e,setStateOptions:t})},t.cancel=function(e){var t,n=this.promise;return null==(t=this.retryer)||t.cancel(e),n?n.then(o.ZT).catch(o.ZT):Promise.resolve()},t.destroy=function(){this.clearGcTimeout(),this.cancel({silent:!0})},t.reset=function(){this.destroy(),this.setState(this.initialState)},t.isActive=function(){return this.observers.some((function(e){return!1!==e.options.enabled}))},t.isFetching=function(){return this.state.isFetching},t.isStale=function(){return this.state.isInvalidated||!this.state.dataUpdatedAt||this.observers.some((function(e){return e.getCurrentResult().isStale}))},t.isStaleByTime=function(e){return void 0===e&&(e=0),this.state.isInvalidated||!this.state.dataUpdatedAt||!(0,o.Kp)(this.state.dataUpdatedAt,e)},t.onFocus=function(){var e,t=this.observers.find((function(e){return e.shouldFetchOnWindowFocus()}));t&&t.refetch(),null==(e=this.retryer)||e.continue()},t.onOnline=function(){var e,t=this.observers.find((function(e){return e.shouldFetchOnReconnect()}));t&&t.refetch(),null==(e=this.retryer)||e.continue()},t.addObserver=function(e){-1===this.observers.indexOf(e)&&(this.observers.push(e),this.hadObservers=!0,this.clearGcTimeout(),this.cache.notify({type:"observerAdded",query:this,observer:e}))},t.removeObserver=function(e){-1!==this.observers.indexOf(e)&&(this.observers=this.observers.filter((function(t){return t!==e})),this.observers.length||(this.retryer&&(this.retryer.isTransportCancelable||this.abortSignalConsumed?this.retryer.cancel({revert:!0}):this.retryer.cancelRetry()),this.cacheTime?this.scheduleGc():this.cache.remove(this)),this.cache.notify({type:"observerRemoved",query:this,observer:e}))},t.getObserversCount=function(){return this.observers.length},t.invalidate=function(){this.state.isInvalidated||this.dispatch({type:"invalidate"})},t.fetch=function(e,t){var n,r,i,a=this;if(this.state.isFetching)if(this.state.dataUpdatedAt&&(null==t?void 0:t.cancelRefetch))this.cancel({silent:!0});else if(this.promise){var s;return null==(s=this.retryer)||s.continueRetry(),this.promise}if(e&&this.setOptions(e),!this.options.queryFn){var c=this.observers.find((function(e){return e.options.queryFn}));c&&this.setOptions(c.options)}var f=(0,o.mc)(this.queryKey),d=(0,o.G9)(),p={queryKey:f,pageParam:void 0,meta:this.meta};Object.defineProperty(p,"signal",{enumerable:!0,get:function(){if(d)return a.abortSignalConsumed=!0,d.signal}});var h,m,v={fetchOptions:t,options:this.options,queryKey:f,state:this.state,fetchFn:function(){return a.options.queryFn?(a.abortSignalConsumed=!1,a.options.queryFn(p)):Promise.reject("Missing queryFn")},meta:this.meta};return(null==(n=this.options.behavior)?void 0:n.onFetch)&&(null==(h=this.options.behavior)||h.onFetch(v)),this.revertState=this.state,this.state.isFetching&&this.state.fetchMeta===(null==(r=v.fetchOptions)?void 0:r.meta)||this.dispatch({type:"fetch",meta:null==(m=v.fetchOptions)?void 0:m.meta}),this.retryer=new l.m4({fn:v.fetchFn,abort:null==d||null==(i=d.abort)?void 0:i.bind(d),onSuccess:function(e){a.setData(e),null==a.cache.config.onSuccess||a.cache.config.onSuccess(e,a),0===a.cacheTime&&a.optionalRemove()},onError:function(e){(0,l.DV)(e)&&e.silent||a.dispatch({type:"error",error:e}),(0,l.DV)(e)||(null==a.cache.config.onError||a.cache.config.onError(e,a),(0,u.j)().error(e)),0===a.cacheTime&&a.optionalRemove()},onFail:function(){a.dispatch({type:"failed"})},onPause:function(){a.dispatch({type:"pause"})},onContinue:function(){a.dispatch({type:"continue"})},retry:v.options.retry,retryDelay:v.options.retryDelay}),this.promise=this.retryer.promise,this.promise},t.dispatch=function(e){var t=this;this.state=this.reducer(this.state,e),a.V.batch((function(){t.observers.forEach((function(t){t.onQueryUpdate(e)})),t.cache.notify({query:t,type:"queryUpdated",action:e})}))},t.getDefaultState=function(e){var t="function"==typeof e.initialData?e.initialData():e.initialData,n=void 0!==e.initialData?"function"==typeof e.initialDataUpdatedAt?e.initialDataUpdatedAt():e.initialDataUpdatedAt:0,r=void 0!==t;return{data:t,dataUpdateCount:0,dataUpdatedAt:r?null!=n?n:Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchMeta:null,isFetching:!1,isInvalidated:!1,isPaused:!1,status:r?"success":"idle"}},t.reducer=function(e,t){var n,o;switch(t.type){case"failed":return(0,r.Z)({},e,{fetchFailureCount:e.fetchFailureCount+1});case"pause":return(0,r.Z)({},e,{isPaused:!0});case"continue":return(0,r.Z)({},e,{isPaused:!1});case"fetch":return(0,r.Z)({},e,{fetchFailureCount:0,fetchMeta:null!=(n=t.meta)?n:null,isFetching:!0,isPaused:!1},!e.dataUpdatedAt&&{error:null,status:"loading"});case"success":return(0,r.Z)({},e,{data:t.data,dataUpdateCount:e.dataUpdateCount+1,dataUpdatedAt:null!=(o=t.dataUpdatedAt)?o:Date.now(),error:null,fetchFailureCount:0,isFetching:!1,isInvalidated:!1,isPaused:!1,status:"success"});case"error":var i=t.error;return(0,l.DV)(i)&&i.revert&&this.revertState?(0,r.Z)({},this.revertState):(0,r.Z)({},e,{error:i,errorUpdateCount:e.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:e.fetchFailureCount+1,isFetching:!1,isPaused:!1,status:"error"});case"invalidate":return(0,r.Z)({},e,{isInvalidated:!0});case"setState":return(0,r.Z)({},e,t.state);default:return e}},e}(),c=n(2943),f=function(e){function t(t){var n;return(n=e.call(this)||this).config=t||{},n.queries=[],n.queriesMap={},n}(0,i.Z)(t,e);var n=t.prototype;return n.build=function(e,t,n){var r,i=t.queryKey,a=null!=(r=t.queryHash)?r:(0,o.Rm)(i,t),u=this.get(a);return u||(u=new s({cache:this,queryKey:i,queryHash:a,options:e.defaultQueryOptions(t),state:n,defaultOptions:e.getQueryDefaults(i),meta:t.meta}),this.add(u)),u},n.add=function(e){this.queriesMap[e.queryHash]||(this.queriesMap[e.queryHash]=e,this.queries.push(e),this.notify({type:"queryAdded",query:e}))},n.remove=function(e){var t=this.queriesMap[e.queryHash];t&&(e.destroy(),this.queries=this.queries.filter((function(t){return t!==e})),t===e&&delete this.queriesMap[e.queryHash],this.notify({type:"queryRemoved",query:e}))},n.clear=function(){var e=this;a.V.batch((function(){e.queries.forEach((function(t){e.remove(t)}))}))},n.get=function(e){return this.queriesMap[e]},n.getAll=function(){return this.queries},n.find=function(e,t){var n=(0,o.I6)(e,t)[0];return void 0===n.exact&&(n.exact=!0),this.queries.find((function(e){return(0,o._x)(n,e)}))},n.findAll=function(e,t){var n=(0,o.I6)(e,t)[0];return Object.keys(n).length>0?this.queries.filter((function(e){return(0,o._x)(n,e)})):this.queries},n.notify=function(e){var t=this;a.V.batch((function(){t.listeners.forEach((function(t){t(e)}))}))},n.onFocus=function(){var e=this;a.V.batch((function(){e.queries.forEach((function(e){e.onFocus()}))}))},n.onOnline=function(){var e=this;a.V.batch((function(){e.queries.forEach((function(e){e.onOnline()}))}))},t}(c.l),d=function(){function e(e){this.options=(0,r.Z)({},e.defaultOptions,e.options),this.mutationId=e.mutationId,this.mutationCache=e.mutationCache,this.observers=[],this.state=e.state||{context:void 0,data:void 0,error:null,failureCount:0,isPaused:!1,status:"idle",variables:void 0},this.meta=e.meta}var t=e.prototype;return t.setState=function(e){this.dispatch({type:"setState",state:e})},t.addObserver=function(e){-1===this.observers.indexOf(e)&&this.observers.push(e)},t.removeObserver=function(e){this.observers=this.observers.filter((function(t){return t!==e}))},t.cancel=function(){return this.retryer?(this.retryer.cancel(),this.retryer.promise.then(o.ZT).catch(o.ZT)):Promise.resolve()},t.continue=function(){return this.retryer?(this.retryer.continue(),this.retryer.promise):this.execute()},t.execute=function(){var e,t=this,n="loading"===this.state.status,r=Promise.resolve();return n||(this.dispatch({type:"loading",variables:this.options.variables}),r=r.then((function(){null==t.mutationCache.config.onMutate||t.mutationCache.config.onMutate(t.state.variables,t)})).then((function(){return null==t.options.onMutate?void 0:t.options.onMutate(t.state.variables)})).then((function(e){e!==t.state.context&&t.dispatch({type:"loading",context:e,variables:t.state.variables})}))),r.then((function(){return t.executeMutation()})).then((function(n){e=n,null==t.mutationCache.config.onSuccess||t.mutationCache.config.onSuccess(e,t.state.variables,t.state.context,t)})).then((function(){return null==t.options.onSuccess?void 0:t.options.onSuccess(e,t.state.variables,t.state.context)})).then((function(){return null==t.options.onSettled?void 0:t.options.onSettled(e,null,t.state.variables,t.state.context)})).then((function(){return t.dispatch({type:"success",data:e}),e})).catch((function(e){return null==t.mutationCache.config.onError||t.mutationCache.config.onError(e,t.state.variables,t.state.context,t),(0,u.j)().error(e),Promise.resolve().then((function(){return null==t.options.onError?void 0:t.options.onError(e,t.state.variables,t.state.context)})).then((function(){return null==t.options.onSettled?void 0:t.options.onSettled(void 0,e,t.state.variables,t.state.context)})).then((function(){throw t.dispatch({type:"error",error:e}),e}))}))},t.executeMutation=function(){var e,t=this;return this.retryer=new l.m4({fn:function(){return t.options.mutationFn?t.options.mutationFn(t.state.variables):Promise.reject("No mutationFn found")},onFail:function(){t.dispatch({type:"failed"})},onPause:function(){t.dispatch({type:"pause"})},onContinue:function(){t.dispatch({type:"continue"})},retry:null!=(e=this.options.retry)?e:0,retryDelay:this.options.retryDelay}),this.retryer.promise},t.dispatch=function(e){var t=this;this.state=function(e,t){switch(t.type){case"failed":return(0,r.Z)({},e,{failureCount:e.failureCount+1});case"pause":return(0,r.Z)({},e,{isPaused:!0});case"continue":return(0,r.Z)({},e,{isPaused:!1});case"loading":return(0,r.Z)({},e,{context:t.context,data:void 0,error:null,isPaused:!1,status:"loading",variables:t.variables});case"success":return(0,r.Z)({},e,{data:t.data,error:null,status:"success",isPaused:!1});case"error":return(0,r.Z)({},e,{data:void 0,error:t.error,failureCount:e.failureCount+1,isPaused:!1,status:"error"});case"setState":return(0,r.Z)({},e,t.state);default:return e}}(this.state,e),a.V.batch((function(){t.observers.forEach((function(t){t.onMutationUpdate(e)})),t.mutationCache.notify(t)}))},e}(),p=function(e){function t(t){var n;return(n=e.call(this)||this).config=t||{},n.mutations=[],n.mutationId=0,n}(0,i.Z)(t,e);var n=t.prototype;return n.build=function(e,t,n){var r=new d({mutationCache:this,mutationId:++this.mutationId,options:e.defaultMutationOptions(t),state:n,defaultOptions:t.mutationKey?e.getMutationDefaults(t.mutationKey):void 0,meta:t.meta});return this.add(r),r},n.add=function(e){this.mutations.push(e),this.notify(e)},n.remove=function(e){this.mutations=this.mutations.filter((function(t){return t!==e})),e.cancel(),this.notify(e)},n.clear=function(){var e=this;a.V.batch((function(){e.mutations.forEach((function(t){e.remove(t)}))}))},n.getAll=function(){return this.mutations},n.find=function(e){return void 0===e.exact&&(e.exact=!0),this.mutations.find((function(t){return(0,o.X7)(e,t)}))},n.findAll=function(e){return this.mutations.filter((function(t){return(0,o.X7)(e,t)}))},n.notify=function(e){var t=this;a.V.batch((function(){t.listeners.forEach((function(t){t(e)}))}))},n.onFocus=function(){this.resumePausedMutations()},n.onOnline=function(){this.resumePausedMutations()},n.resumePausedMutations=function(){var e=this.mutations.filter((function(e){return e.state.isPaused}));return a.V.batch((function(){return e.reduce((function(e,t){return e.then((function(){return t.continue().catch(o.ZT)}))}),Promise.resolve())}))},t}(c.l),h=n(9852),m=n(68);function v(e,t){return null==e.getNextPageParam?void 0:e.getNextPageParam(t[t.length-1],t)}var y=function(){function e(e){void 0===e&&(e={}),this.queryCache=e.queryCache||new f,this.mutationCache=e.mutationCache||new p,this.defaultOptions=e.defaultOptions||{},this.queryDefaults=[],this.mutationDefaults=[]}var t=e.prototype;return t.mount=function(){var e=this;this.unsubscribeFocus=h.j.subscribe((function(){h.j.isFocused()&&m.N.isOnline()&&(e.mutationCache.onFocus(),e.queryCache.onFocus())})),this.unsubscribeOnline=m.N.subscribe((function(){h.j.isFocused()&&m.N.isOnline()&&(e.mutationCache.onOnline(),e.queryCache.onOnline())}))},t.unmount=function(){var e,t;null==(e=this.unsubscribeFocus)||e.call(this),null==(t=this.unsubscribeOnline)||t.call(this)},t.isFetching=function(e,t){var n=(0,o.I6)(e,t)[0];return n.fetching=!0,this.queryCache.findAll(n).length},t.isMutating=function(e){return this.mutationCache.findAll((0,r.Z)({},e,{fetching:!0})).length},t.getQueryData=function(e,t){var n;return null==(n=this.queryCache.find(e,t))?void 0:n.state.data},t.getQueriesData=function(e){return this.getQueryCache().findAll(e).map((function(e){return[e.queryKey,e.state.data]}))},t.setQueryData=function(e,t,n){var r=(0,o._v)(e),i=this.defaultQueryOptions(r);return this.queryCache.build(this,i).setData(t,n)},t.setQueriesData=function(e,t,n){var r=this;return a.V.batch((function(){return r.getQueryCache().findAll(e).map((function(e){var o=e.queryKey;return[o,r.setQueryData(o,t,n)]}))}))},t.getQueryState=function(e,t){var n;return null==(n=this.queryCache.find(e,t))?void 0:n.state},t.removeQueries=function(e,t){var n=(0,o.I6)(e,t)[0],r=this.queryCache;a.V.batch((function(){r.findAll(n).forEach((function(e){r.remove(e)}))}))},t.resetQueries=function(e,t,n){var i=this,u=(0,o.I6)(e,t,n),l=u[0],s=u[1],c=this.queryCache,f=(0,r.Z)({},l,{active:!0});return a.V.batch((function(){return c.findAll(l).forEach((function(e){e.reset()})),i.refetchQueries(f,s)}))},t.cancelQueries=function(e,t,n){var r=this,i=(0,o.I6)(e,t,n),u=i[0],l=i[1],s=void 0===l?{}:l;void 0===s.revert&&(s.revert=!0);var c=a.V.batch((function(){return r.queryCache.findAll(u).map((function(e){return e.cancel(s)}))}));return Promise.all(c).then(o.ZT).catch(o.ZT)},t.invalidateQueries=function(e,t,n){var i,u,l,s=this,c=(0,o.I6)(e,t,n),f=c[0],d=c[1],p=(0,r.Z)({},f,{active:null==(i=null!=(u=f.refetchActive)?u:f.active)||i,inactive:null!=(l=f.refetchInactive)&&l});return a.V.batch((function(){return s.queryCache.findAll(f).forEach((function(e){e.invalidate()})),s.refetchQueries(p,d)}))},t.refetchQueries=function(e,t,n){var i=this,u=(0,o.I6)(e,t,n),l=u[0],s=u[1],c=a.V.batch((function(){return i.queryCache.findAll(l).map((function(e){return e.fetch(void 0,(0,r.Z)({},s,{meta:{refetchPage:null==l?void 0:l.refetchPage}}))}))})),f=Promise.all(c).then(o.ZT);return(null==s?void 0:s.throwOnError)||(f=f.catch(o.ZT)),f},t.fetchQuery=function(e,t,n){var r=(0,o._v)(e,t,n),i=this.defaultQueryOptions(r);void 0===i.retry&&(i.retry=!1);var a=this.queryCache.build(this,i);return a.isStaleByTime(i.staleTime)?a.fetch(i):Promise.resolve(a.state.data)},t.prefetchQuery=function(e,t,n){return this.fetchQuery(e,t,n).then(o.ZT).catch(o.ZT)},t.fetchInfiniteQuery=function(e,t,n){var r=(0,o._v)(e,t,n);return r.behavior={onFetch:function(e){e.fetchFn=function(){var t,n,r,i,a,u,s,c,f,d=null==(t=e.fetchOptions)||null==(n=t.meta)?void 0:n.refetchPage,p=null==(r=e.fetchOptions)||null==(i=r.meta)?void 0:i.fetchMore,h=null==p?void 0:p.pageParam,m="forward"===(null==p?void 0:p.direction),y="backward"===(null==p?void 0:p.direction),g=(null==(a=e.state.data)?void 0:a.pages)||[],b=(null==(u=e.state.data)?void 0:u.pageParams)||[],w=(0,o.G9)(),S=null==w?void 0:w.signal,k=b,E=!1,x=e.options.queryFn||function(){return Promise.reject("Missing queryFn")},C=function(e,t,n,r){return k=r?[t].concat(k):[].concat(k,[t]),r?[n].concat(e):[].concat(e,[n])},P=function(t,n,r,o){if(E)return Promise.reject("Cancelled");if(void 0===r&&!n&&t.length)return Promise.resolve(t);var i={queryKey:e.queryKey,signal:S,pageParam:r,meta:e.meta},a=x(i),u=Promise.resolve(a).then((function(e){return C(t,r,e,o)}));return(0,l.LE)(a)&&(u.cancel=a.cancel),u};if(g.length)if(m){var O=void 0!==h,_=O?h:v(e.options,g);s=P(g,O,_)}else if(y){var R=void 0!==h,T=R?h:(c=e.options,f=g,null==c.getPreviousPageParam?void 0:c.getPreviousPageParam(f[0],f));s=P(g,R,T,!0)}else!function(){k=[];var t=void 0===e.options.getNextPageParam,n=!d||!g[0]||d(g[0],0,g);s=n?P([],t,b[0]):Promise.resolve(C([],b[0],g[0]));for(var r=function(n){s=s.then((function(r){if(!d||!g[n]||d(g[n],n,g)){var o=t?b[n]:v(e.options,r);return P(r,t,o)}return Promise.resolve(C(r,b[n],g[n]))}))},o=1;o<g.length;o++)r(o)}();else s=P([]);var A=s.then((function(e){return{pages:e,pageParams:k}}));return A.cancel=function(){E=!0,null==w||w.abort(),(0,l.LE)(s)&&s.cancel()},A}}},this.fetchQuery(r)},t.prefetchInfiniteQuery=function(e,t,n){return this.fetchInfiniteQuery(e,t,n).then(o.ZT).catch(o.ZT)},t.cancelMutations=function(){var e=this,t=a.V.batch((function(){return e.mutationCache.getAll().map((function(e){return e.cancel()}))}));return Promise.all(t).then(o.ZT).catch(o.ZT)},t.resumePausedMutations=function(){return this.getMutationCache().resumePausedMutations()},t.executeMutation=function(e){return this.mutationCache.build(this,e).execute()},t.getQueryCache=function(){return this.queryCache},t.getMutationCache=function(){return this.mutationCache},t.getDefaultOptions=function(){return this.defaultOptions},t.setDefaultOptions=function(e){this.defaultOptions=e},t.setQueryDefaults=function(e,t){var n=this.queryDefaults.find((function(t){return(0,o.yF)(e)===(0,o.yF)(t.queryKey)}));n?n.defaultOptions=t:this.queryDefaults.push({queryKey:e,defaultOptions:t})},t.getQueryDefaults=function(e){var t;return e?null==(t=this.queryDefaults.find((function(t){return(0,o.to)(e,t.queryKey)})))?void 0:t.defaultOptions:void 0},t.setMutationDefaults=function(e,t){var n=this.mutationDefaults.find((function(t){return(0,o.yF)(e)===(0,o.yF)(t.mutationKey)}));n?n.defaultOptions=t:this.mutationDefaults.push({mutationKey:e,defaultOptions:t})},t.getMutationDefaults=function(e){var t;return e?null==(t=this.mutationDefaults.find((function(t){return(0,o.to)(e,t.mutationKey)})))?void 0:t.defaultOptions:void 0},t.defaultQueryOptions=function(e){if(null==e?void 0:e._defaulted)return e;var t=(0,r.Z)({},this.defaultOptions.queries,this.getQueryDefaults(null==e?void 0:e.queryKey),e,{_defaulted:!0});return!t.queryHash&&t.queryKey&&(t.queryHash=(0,o.Rm)(t.queryKey,t)),t},t.defaultQueryObserverOptions=function(e){return this.defaultQueryOptions(e)},t.defaultMutationOptions=function(e){return(null==e?void 0:e._defaulted)?e:(0,r.Z)({},this.defaultOptions.mutations,this.getMutationDefaults(null==e?void 0:e.mutationKey),e,{_defaulted:!0})},t.clear=function(){this.queryCache.clear(),this.mutationCache.clear()},e}()},1216:(e,t,n)=>{"use strict";n.d(t,{DV:()=>s,LE:()=>u,m4:()=>c});var r=n(9852),o=n(68),i=n(2288);function a(e){return Math.min(1e3*Math.pow(2,e),3e4)}function u(e){return"function"==typeof(null==e?void 0:e.cancel)}var l=function(e){this.revert=null==e?void 0:e.revert,this.silent=null==e?void 0:e.silent};function s(e){return e instanceof l}var c=function(e){var t,n,s,c,f=this,d=!1;this.abort=e.abort,this.cancel=function(e){return null==t?void 0:t(e)},this.cancelRetry=function(){d=!0},this.continueRetry=function(){d=!1},this.continue=function(){return null==n?void 0:n()},this.failureCount=0,this.isPaused=!1,this.isResolved=!1,this.isTransportCancelable=!1,this.promise=new Promise((function(e,t){s=e,c=t}));var p=function(t){f.isResolved||(f.isResolved=!0,null==e.onSuccess||e.onSuccess(t),null==n||n(),s(t))},h=function(t){f.isResolved||(f.isResolved=!0,null==e.onError||e.onError(t),null==n||n(),c(t))};!function s(){if(!f.isResolved){var c;try{c=e.fn()}catch(e){c=Promise.reject(e)}t=function(e){if(!f.isResolved&&(h(new l(e)),null==f.abort||f.abort(),u(c)))try{c.cancel()}catch(e){}},f.isTransportCancelable=u(c),Promise.resolve(c).then(p).catch((function(t){var u,l;if(!f.isResolved){var c=null!=(u=e.retry)?u:3,p=null!=(l=e.retryDelay)?l:a,m="function"==typeof p?p(f.failureCount,t):p,v=!0===c||"number"==typeof c&&f.failureCount<c||"function"==typeof c&&c(f.failureCount,t);!d&&v?(f.failureCount++,null==e.onFail||e.onFail(f.failureCount,t),(0,i.Gh)(m).then((function(){if(!r.j.isFocused()||!o.N.isOnline())return new Promise((function(t){n=t,f.isPaused=!0,null==e.onPause||e.onPause()})).then((function(){n=void 0,f.isPaused=!1,null==e.onContinue||e.onContinue()}))})).then((function(){d?h(t):s()}))):h(t)}}))}}()}},2943:(e,t,n)=>{"use strict";n.d(t,{l:()=>r});var r=function(){function e(){this.listeners=[]}var t=e.prototype;return t.subscribe=function(e){var t=this,n=e||function(){};return this.listeners.push(n),this.onSubscribe(),function(){t.listeners=t.listeners.filter((function(e){return e!==n})),t.onUnsubscribe()}},t.hasListeners=function(){return this.listeners.length>0},t.onSubscribe=function(){},t.onUnsubscribe=function(){},e}()},6755:()=>{},2288:(e,t,n)=>{"use strict";n.d(t,{A4:()=>x,G9:()=>C,Gh:()=>E,I6:()=>f,Kp:()=>s,PN:()=>u,Q$:()=>g,Rm:()=>h,SE:()=>a,VS:()=>b,X7:()=>p,ZT:()=>i,_v:()=>c,_x:()=>d,mc:()=>l,sk:()=>o,to:()=>v,yF:()=>m});var r=n(7462),o="undefined"==typeof window;function i(){}function a(e,t){return"function"==typeof e?e(t):e}function u(e){return"number"==typeof e&&e>=0&&e!==1/0}function l(e){return Array.isArray(e)?e:[e]}function s(e,t){return Math.max(e+(t||0)-Date.now(),0)}function c(e,t,n){return k(e)?"function"==typeof t?(0,r.Z)({},n,{queryKey:e,queryFn:t}):(0,r.Z)({},t,{queryKey:e}):e}function f(e,t,n){return k(e)?[(0,r.Z)({},t,{queryKey:e}),n]:[e||{},t]}function d(e,t){var n=e.active,r=e.exact,o=e.fetching,i=e.inactive,a=e.predicate,u=e.queryKey,l=e.stale;if(k(u))if(r){if(t.queryHash!==h(u,t.options))return!1}else if(!v(t.queryKey,u))return!1;var s=function(e,t){return!0===e&&!0===t||null==e&&null==t?"all":!1===e&&!1===t?"none":(null!=e?e:!t)?"active":"inactive"}(n,i);if("none"===s)return!1;if("all"!==s){var c=t.isActive();if("active"===s&&!c)return!1;if("inactive"===s&&c)return!1}return!("boolean"==typeof l&&t.isStale()!==l||"boolean"==typeof o&&t.isFetching()!==o||a&&!a(t))}function p(e,t){var n=e.exact,r=e.fetching,o=e.predicate,i=e.mutationKey;if(k(i)){if(!t.options.mutationKey)return!1;if(n){if(m(t.options.mutationKey)!==m(i))return!1}else if(!v(t.options.mutationKey,i))return!1}return!("boolean"==typeof r&&"loading"===t.state.status!==r||o&&!o(t))}function h(e,t){return((null==t?void 0:t.queryKeyHashFn)||m)(e)}function m(e){var t;return t=l(e),JSON.stringify(t,(function(e,t){return w(t)?Object.keys(t).sort().reduce((function(e,n){return e[n]=t[n],e}),{}):t}))}function v(e,t){return y(l(e),l(t))}function y(e,t){return e===t||typeof e==typeof t&&!(!e||!t||"object"!=typeof e||"object"!=typeof t)&&!Object.keys(t).some((function(n){return!y(e[n],t[n])}))}function g(e,t){if(e===t)return e;var n=Array.isArray(e)&&Array.isArray(t);if(n||w(e)&&w(t)){for(var r=n?e.length:Object.keys(e).length,o=n?t:Object.keys(t),i=o.length,a=n?[]:{},u=0,l=0;l<i;l++){var s=n?l:o[l];a[s]=g(e[s],t[s]),a[s]===e[s]&&u++}return r===i&&u===r?e:a}return t}function b(e,t){if(e&&!t||t&&!e)return!1;for(var n in e)if(e[n]!==t[n])return!1;return!0}function w(e){if(!S(e))return!1;var t=e.constructor;if(void 0===t)return!0;var n=t.prototype;return!!S(n)&&!!n.hasOwnProperty("isPrototypeOf")}function S(e){return"[object Object]"===Object.prototype.toString.call(e)}function k(e){return"string"==typeof e||Array.isArray(e)}function E(e){return new Promise((function(t){setTimeout(t,e)}))}function x(e){Promise.resolve().then(e).catch((function(e){return setTimeout((function(){throw e}))}))}function C(){if("function"==typeof AbortController)return new AbortController}},8767:(e,t,n)=>{"use strict";n.d(t,{QueryClient:()=>r.QueryClient,QueryClientProvider:()=>o.QueryClientProvider,useQuery:()=>o.useQuery});var r=n(6747);n.o(r,"QueryClientProvider")&&n.d(t,{QueryClientProvider:function(){return r.QueryClientProvider}}),n.o(r,"useQuery")&&n.d(t,{useQuery:function(){return r.useQuery}});var o=n(7066)},7066:(e,t,n)=>{"use strict";n.d(t,{QueryClientProvider:()=>f,useQuery:()=>C});var r=n(101),o=n(3935).unstable_batchedUpdates;r.V.setBatchNotifyFunction(o);var i=n(1909),a=console;(0,i.E)(a);var u=n(7294),l=u.createContext(void 0),s=u.createContext(!1);function c(e){return e&&"undefined"!=typeof window?(window.ReactQueryClientContext||(window.ReactQueryClientContext=l),window.ReactQueryClientContext):l}var f=function(e){var t=e.client,n=e.contextSharing,r=void 0!==n&&n,o=e.children;u.useEffect((function(){return t.mount(),function(){t.unmount()}}),[t]);var i=c(r);return u.createElement(s.Provider,{value:r},u.createElement(i.Provider,{value:t},o))},d=n(7462),p=n(1721),h=n(2288),m=n(9852),v=n(2943),y=n(1216),g=function(e){function t(t,n){var r;return(r=e.call(this)||this).client=t,r.options=n,r.trackedProps=[],r.selectError=null,r.bindMethods(),r.setOptions(n),r}(0,p.Z)(t,e);var n=t.prototype;return n.bindMethods=function(){this.remove=this.remove.bind(this),this.refetch=this.refetch.bind(this)},n.onSubscribe=function(){1===this.listeners.length&&(this.currentQuery.addObserver(this),b(this.currentQuery,this.options)&&this.executeFetch(),this.updateTimers())},n.onUnsubscribe=function(){this.listeners.length||this.destroy()},n.shouldFetchOnReconnect=function(){return w(this.currentQuery,this.options,this.options.refetchOnReconnect)},n.shouldFetchOnWindowFocus=function(){return w(this.currentQuery,this.options,this.options.refetchOnWindowFocus)},n.destroy=function(){this.listeners=[],this.clearTimers(),this.currentQuery.removeObserver(this)},n.setOptions=function(e,t){var n=this.options,r=this.currentQuery;if(this.options=this.client.defaultQueryObserverOptions(e),void 0!==this.options.enabled&&"boolean"!=typeof this.options.enabled)throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=n.queryKey),this.updateQuery();var o=this.hasListeners();o&&S(this.currentQuery,r,this.options,n)&&this.executeFetch(),this.updateResult(t),!o||this.currentQuery===r&&this.options.enabled===n.enabled&&this.options.staleTime===n.staleTime||this.updateStaleTimeout();var i=this.computeRefetchInterval();!o||this.currentQuery===r&&this.options.enabled===n.enabled&&i===this.currentRefetchInterval||this.updateRefetchInterval(i)},n.getOptimisticResult=function(e){var t=this.client.defaultQueryObserverOptions(e),n=this.client.getQueryCache().build(this.client,t);return this.createResult(n,t)},n.getCurrentResult=function(){return this.currentResult},n.trackResult=function(e,t){var n=this,r={},o=function(e){n.trackedProps.includes(e)||n.trackedProps.push(e)};return Object.keys(e).forEach((function(t){Object.defineProperty(r,t,{configurable:!1,enumerable:!0,get:function(){return o(t),e[t]}})})),(t.useErrorBoundary||t.suspense)&&o("error"),r},n.getNextResult=function(e){var t=this;return new Promise((function(n,r){var o=t.subscribe((function(t){t.isFetching||(o(),t.isError&&(null==e?void 0:e.throwOnError)?r(t.error):n(t))}))}))},n.getCurrentQuery=function(){return this.currentQuery},n.remove=function(){this.client.getQueryCache().remove(this.currentQuery)},n.refetch=function(e){return this.fetch((0,d.Z)({},e,{meta:{refetchPage:null==e?void 0:e.refetchPage}}))},n.fetchOptimistic=function(e){var t=this,n=this.client.defaultQueryObserverOptions(e),r=this.client.getQueryCache().build(this.client,n);return r.fetch().then((function(){return t.createResult(r,n)}))},n.fetch=function(e){var t=this;return this.executeFetch(e).then((function(){return t.updateResult(),t.currentResult}))},n.executeFetch=function(e){this.updateQuery();var t=this.currentQuery.fetch(this.options,e);return(null==e?void 0:e.throwOnError)||(t=t.catch(h.ZT)),t},n.updateStaleTimeout=function(){var e=this;if(this.clearStaleTimeout(),!h.sk&&!this.currentResult.isStale&&(0,h.PN)(this.options.staleTime)){var t=(0,h.Kp)(this.currentResult.dataUpdatedAt,this.options.staleTime)+1;this.staleTimeoutId=setTimeout((function(){e.currentResult.isStale||e.updateResult()}),t)}},n.computeRefetchInterval=function(){var e;return"function"==typeof this.options.refetchInterval?this.options.refetchInterval(this.currentResult.data,this.currentQuery):null!=(e=this.options.refetchInterval)&&e},n.updateRefetchInterval=function(e){var t=this;this.clearRefetchInterval(),this.currentRefetchInterval=e,!h.sk&&!1!==this.options.enabled&&(0,h.PN)(this.currentRefetchInterval)&&0!==this.currentRefetchInterval&&(this.refetchIntervalId=setInterval((function(){(t.options.refetchIntervalInBackground||m.j.isFocused())&&t.executeFetch()}),this.currentRefetchInterval))},n.updateTimers=function(){this.updateStaleTimeout(),this.updateRefetchInterval(this.computeRefetchInterval())},n.clearTimers=function(){this.clearStaleTimeout(),this.clearRefetchInterval()},n.clearStaleTimeout=function(){this.staleTimeoutId&&(clearTimeout(this.staleTimeoutId),this.staleTimeoutId=void 0)},n.clearRefetchInterval=function(){this.refetchIntervalId&&(clearInterval(this.refetchIntervalId),this.refetchIntervalId=void 0)},n.createResult=function(e,t){var n,r=this.currentQuery,o=this.options,a=this.currentResult,u=this.currentResultState,l=this.currentResultOptions,s=e!==r,c=s?e.state:this.currentQueryInitialState,f=s?this.currentResult:this.previousQueryResult,d=e.state,p=d.dataUpdatedAt,m=d.error,v=d.errorUpdatedAt,y=d.isFetching,g=d.status,w=!1,E=!1;if(t.optimisticResults){var x=this.hasListeners(),C=!x&&b(e,t),P=x&&S(e,r,t,o);(C||P)&&(y=!0,p||(g="loading"))}if(t.keepPreviousData&&!d.dataUpdateCount&&(null==f?void 0:f.isSuccess)&&"error"!==g)n=f.data,p=f.dataUpdatedAt,g=f.status,w=!0;else if(t.select&&void 0!==d.data)if(a&&d.data===(null==u?void 0:u.data)&&t.select===this.selectFn)n=this.selectResult;else try{this.selectFn=t.select,n=t.select(d.data),!1!==t.structuralSharing&&(n=(0,h.Q$)(null==a?void 0:a.data,n)),this.selectResult=n,this.selectError=null}catch(e){(0,i.j)().error(e),this.selectError=e}else n=d.data;if(void 0!==t.placeholderData&&void 0===n&&("loading"===g||"idle"===g)){var O;if((null==a?void 0:a.isPlaceholderData)&&t.placeholderData===(null==l?void 0:l.placeholderData))O=a.data;else if(O="function"==typeof t.placeholderData?t.placeholderData():t.placeholderData,t.select&&void 0!==O)try{O=t.select(O),!1!==t.structuralSharing&&(O=(0,h.Q$)(null==a?void 0:a.data,O)),this.selectError=null}catch(e){(0,i.j)().error(e),this.selectError=e}void 0!==O&&(g="success",n=O,E=!0)}return this.selectError&&(m=this.selectError,n=this.selectResult,v=Date.now(),g="error"),{status:g,isLoading:"loading"===g,isSuccess:"success"===g,isError:"error"===g,isIdle:"idle"===g,data:n,dataUpdatedAt:p,error:m,errorUpdatedAt:v,failureCount:d.fetchFailureCount,errorUpdateCount:d.errorUpdateCount,isFetched:d.dataUpdateCount>0||d.errorUpdateCount>0,isFetchedAfterMount:d.dataUpdateCount>c.dataUpdateCount||d.errorUpdateCount>c.errorUpdateCount,isFetching:y,isRefetching:y&&"loading"!==g,isLoadingError:"error"===g&&0===d.dataUpdatedAt,isPlaceholderData:E,isPreviousData:w,isRefetchError:"error"===g&&0!==d.dataUpdatedAt,isStale:k(e,t),refetch:this.refetch,remove:this.remove}},n.shouldNotifyListeners=function(e,t){if(!t)return!0;var n=this.options,r=n.notifyOnChangeProps,o=n.notifyOnChangePropsExclusions;if(!r&&!o)return!0;if("tracked"===r&&!this.trackedProps.length)return!0;var i="tracked"===r?this.trackedProps:r;return Object.keys(e).some((function(n){var r=n,a=e[r]!==t[r],u=null==i?void 0:i.some((function(e){return e===n})),l=null==o?void 0:o.some((function(e){return e===n}));return a&&!l&&(!i||u)}))},n.updateResult=function(e){var t=this.currentResult;if(this.currentResult=this.createResult(this.currentQuery,this.options),this.currentResultState=this.currentQuery.state,this.currentResultOptions=this.options,!(0,h.VS)(this.currentResult,t)){var n={cache:!0};!1!==(null==e?void 0:e.listeners)&&this.shouldNotifyListeners(this.currentResult,t)&&(n.listeners=!0),this.notify((0,d.Z)({},n,e))}},n.updateQuery=function(){var e=this.client.getQueryCache().build(this.client,this.options);if(e!==this.currentQuery){var t=this.currentQuery;this.currentQuery=e,this.currentQueryInitialState=e.state,this.previousQueryResult=this.currentResult,this.hasListeners()&&(null==t||t.removeObserver(this),e.addObserver(this))}},n.onQueryUpdate=function(e){var t={};"success"===e.type?t.onSuccess=!0:"error"!==e.type||(0,y.DV)(e.error)||(t.onError=!0),this.updateResult(t),this.hasListeners()&&this.updateTimers()},n.notify=function(e){var t=this;r.V.batch((function(){e.onSuccess?(null==t.options.onSuccess||t.options.onSuccess(t.currentResult.data),null==t.options.onSettled||t.options.onSettled(t.currentResult.data,null)):e.onError&&(null==t.options.onError||t.options.onError(t.currentResult.error),null==t.options.onSettled||t.options.onSettled(void 0,t.currentResult.error)),e.listeners&&t.listeners.forEach((function(e){e(t.currentResult)})),e.cache&&t.client.getQueryCache().notify({query:t.currentQuery,type:"observerResultsUpdated"})}))},t}(v.l);function b(e,t){return function(e,t){return!(!1===t.enabled||e.state.dataUpdatedAt||"error"===e.state.status&&!1===t.retryOnMount)}(e,t)||e.state.dataUpdatedAt>0&&w(e,t,t.refetchOnMount)}function w(e,t,n){if(!1!==t.enabled){var r="function"==typeof n?n(e):n;return"always"===r||!1!==r&&k(e,t)}return!1}function S(e,t,n,r){return!1!==n.enabled&&(e!==t||!1===r.enabled)&&(!n.suspense||"error"!==e.state.status)&&k(e,n)}function k(e,t){return e.isStaleByTime(t.staleTime)}var E,x=u.createContext((E=!1,{clearReset:function(){E=!1},reset:function(){E=!0},isReset:function(){return E}}));function C(e,t,n){return function(e,t){var n=u.useRef(!1),o=u.useState(0)[1],i=function(){var e=u.useContext(c(u.useContext(s)));if(!e)throw new Error("No QueryClient set, use QueryClientProvider to set one");return e}(),a=u.useContext(x),l=i.defaultQueryObserverOptions(e);l.optimisticResults=!0,l.onError&&(l.onError=r.V.batchCalls(l.onError)),l.onSuccess&&(l.onSuccess=r.V.batchCalls(l.onSuccess)),l.onSettled&&(l.onSettled=r.V.batchCalls(l.onSettled)),l.suspense&&("number"!=typeof l.staleTime&&(l.staleTime=1e3),0===l.cacheTime&&(l.cacheTime=1)),(l.suspense||l.useErrorBoundary)&&(a.isReset()||(l.retryOnMount=!1));var f,d,p,h=u.useState((function(){return new t(i,l)}))[0],m=h.getOptimisticResult(l);if(u.useEffect((function(){n.current=!0,a.clearReset();var e=h.subscribe(r.V.batchCalls((function(){n.current&&o((function(e){return e+1}))})));return h.updateResult(),function(){n.current=!1,e()}}),[a,h]),u.useEffect((function(){h.setOptions(l,{listeners:!1})}),[l,h]),l.suspense&&m.isLoading)throw h.fetchOptimistic(l).then((function(e){var t=e.data;null==l.onSuccess||l.onSuccess(t),null==l.onSettled||l.onSettled(t,null)})).catch((function(e){a.clearReset(),null==l.onError||l.onError(e),null==l.onSettled||l.onSettled(void 0,e)}));if(m.isError&&!a.isReset()&&!m.isFetching&&(f=l.suspense,d=l.useErrorBoundary,p=[m.error,h.getCurrentQuery()],"function"==typeof d?d.apply(void 0,p):"boolean"==typeof d?d:f))throw m.error;return"tracked"===l.notifyOnChangeProps&&(m=h.trackResult(m,l)),m}((0,h._v)(e,t,n),g)}},2408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),l=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,v={};function y(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=v,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=y.prototype;var w=b.prototype=new g;w.constructor=b,m(w,y.prototype),w.isPureReactComponent=!0;var S=Array.isArray,k=Object.prototype.hasOwnProperty,E={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var o,i={},a=null,u=null;if(null!=t)for(o in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,o)&&!x.hasOwnProperty(o)&&(i[o]=t[o]);var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===i[o]&&(i[o]=l[o]);return{$$typeof:n,type:e,key:a,ref:u,props:i,_owner:E.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var O=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function R(e,t,o,i,a){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return a=a(l=e),e=""===i?"."+_(l,0):i,S(a)?(o="",null!=e&&(o=e.replace(O,"$&/")+"/"),R(a,t,o,"",(function(e){return e}))):null!=a&&(P(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(O,"$&/")+"/")+e)),t.push(a)),1;if(l=0,i=""===i?".":i+":",S(e))for(var s=0;s<e.length;s++){var c=i+_(u=e[s],s);l+=R(u,t,o,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(u=e.next()).done;)l+=R(u=u.value,t,o,c=i+_(u,s++),a);else if("object"===u)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function T(e,t,n){if(null==e)return e;var r=[],o=0;return R(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function A(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},I={transition:null},L={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:I,ReactCurrentOwner:E};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!P(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=o,t.Profiler=a,t.PureComponent=b,t.StrictMode=i,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),i=e.key,a=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,u=E.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(s in t)k.call(t,s)&&!x.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==l?l[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){l=Array(s);for(var c=0;c<s;c++)l[c]=arguments[c+2];o.children=l}return{$$typeof:n,type:e.type,key:i,ref:a,props:o,_owner:u}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:A}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=I.transition;I.transition={};try{e()}finally{I.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.2.0"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<i(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var u=2*(r+1)-1,l=e[u],s=u+1,c=e[s];if(0>i(l,n))s<o&&0>i(c,l)?(e[r]=c,e[s]=n,r=s):(e[r]=l,e[u]=n,r=u);else{if(!(s<o&&0>i(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var u=Date,l=u.now();t.unstable_now=function(){return u.now()-l}}var s=[],c=[],f=1,d=null,p=3,h=!1,m=!1,v=!1,y="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function S(e){if(v=!1,w(e),!m)if(null!==r(s))m=!0,I(k);else{var t=r(c);null!==t&&L(S,t.startTime-e)}}function k(e,n){m=!1,v&&(v=!1,g(P),P=-1),h=!0;var i=p;try{for(w(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!R());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var u=a(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?d.callback=u:d===r(s)&&o(s),w(n)}else o(s);d=r(s)}if(null!==d)var l=!0;else{var f=r(c);null!==f&&L(S,f.startTime-n),l=!1}return l}finally{d=null,p=i,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E,x=!1,C=null,P=-1,O=5,_=-1;function R(){return!(t.unstable_now()-_<O)}function T(){if(null!==C){var e=t.unstable_now();_=e;var n=!0;try{n=C(!0,e)}finally{n?E():(x=!1,C=null)}}else x=!1}if("function"==typeof b)E=function(){b(T)};else if("undefined"!=typeof MessageChannel){var A=new MessageChannel,N=A.port2;A.port1.onmessage=T,E=function(){N.postMessage(null)}}else E=function(){y(T,0)};function I(e){C=e,x||(x=!0,E())}function L(e,n){P=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,I(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):O=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,i){var a=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>a?(e.sortIndex=i,n(c,e),null===r(s)&&e===r(c)&&(v?(g(P),P=-1):v=!0,L(S,i-a))):(e.sortIndex=u,n(s,e),m||h||(m=!0,I(k))),e},t.unstable_shouldYield=R,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},6774:e=>{e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var i=Object.keys(e),a=Object.keys(t);if(i.length!==a.length)return!1;for(var u=Object.prototype.hasOwnProperty.bind(t),l=0;l<i.length;l++){var s=i[l];if(!u(s))return!1;var c=e[s],f=t[s];if(!1===(o=n?n.call(r,c,f,s):void 0)||void 0===o&&c!==f)return!1}return!0}},3250:(e,t,n)=>{"use strict";var r=n(7294),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=r.useState,a=r.useEffect,u=r.useLayoutEffect,l=r.useDebugValue;function s(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var c="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=i({inst:{value:n,getSnapshot:t}}),o=r[0].inst,c=r[1];return u((function(){o.value=n,o.getSnapshot=t,s(o)&&c({inst:o})}),[e,n,t]),a((function(){return s(o)&&c({inst:o}),e((function(){s(o)&&c({inst:o})}))}),[e]),l(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:c},139:(e,t,n)=>{"use strict";var r=n(7294),o=n(1688),i="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=o.useSyncExternalStore,u=r.useRef,l=r.useEffect,s=r.useMemo,c=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var f=u(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=s((function(){function e(e){if(!l){if(l=!0,a=e,e=r(e),void 0!==o&&d.hasValue){var t=d.value;if(o(t,e))return u=t}return u=e}if(t=u,i(a,e))return t;var n=r(e);return void 0!==o&&o(t,n)?t:(a=e,u=n)}var a,u,l=!1,s=void 0===n?null:n;return[function(){return e(t())},null===s?void 0:function(){return e(s())}]}),[t,n,r,o]);var p=a(e,f[0],f[1]);return l((function(){d.hasValue=!0,d.value=p}),[p]),c(p),p}},1688:(e,t,n)=>{"use strict";e.exports=n(3250)},2798:(e,t,n)=>{"use strict";e.exports=n(139)},7462:(e,t,n)=>{"use strict";function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}n.d(t,{Z:()=>r})},1721:(e,t,n)=>{"use strict";function r(e,t){return r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},r(e,t)}function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}n.d(t,{Z:()=>o})}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(7294),t=n(745),r=n(1688),o=n(2798),i=n(3935);let a=function(e){e()};const u=()=>a,l=e.createContext(null);function s(){return(0,e.useContext)(l)}let c=()=>{throw new Error("uSES not initialized!")};const f=(e,t)=>e===t;function d(t=l){const n=t===l?s:()=>(0,e.useContext)(t);return function(t,r=f){const{store:o,subscription:i,getServerState:a}=n(),u=c(i.addNestedSub,o.getState,a||o.getState,t,r);return(0,e.useDebugValue)(u),u}}const p=d();var h=n(8679),m=n.n(h),v=n(9864);const y={notify(){},get:()=>[]};const g="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?e.useLayoutEffect:e.useEffect;let b=null;function w(t=l){const n=t===l?s:()=>(0,e.useContext)(t);return function(){const{store:e}=n();return e}}const S=w();function k(e=l){const t=e===l?S:w(e);return function(){return t().dispatch}}const E=k();var x;(e=>{c=e})(o.useSyncExternalStoreWithSelector),(e=>{b=e})(r.useSyncExternalStore),x=i.unstable_batchedUpdates,a=x;var C=n(8767),P=n(6774),O=n.n(P);const _=function(e){function t(e,r,l,s,d){for(var p,h,m,v,w,k=0,E=0,x=0,C=0,P=0,N=0,L=m=p=0,F=0,j=0,z=0,M=0,U=l.length,$=U-1,B="",Q="",q="",V="";F<U;){if(h=l.charCodeAt(F),F===$&&0!==E+C+x+k&&(0!==E&&(h=47===E?10:47),C=x=k=0,U++,$++),0===E+C+x+k){if(F===$&&(0<j&&(B=B.replace(f,"")),0<B.trim().length)){switch(h){case 32:case 9:case 59:case 13:case 10:break;default:B+=l.charAt(F)}h=59}switch(h){case 123:for(p=(B=B.trim()).charCodeAt(0),m=1,M=++F;F<U;){switch(h=l.charCodeAt(F)){case 123:m++;break;case 125:m--;break;case 47:switch(h=l.charCodeAt(F+1)){case 42:case 47:e:{for(L=F+1;L<$;++L)switch(l.charCodeAt(L)){case 47:if(42===h&&42===l.charCodeAt(L-1)&&F+2!==L){F=L+1;break e}break;case 10:if(47===h){F=L+1;break e}}F=L}}break;case 91:h++;case 40:h++;case 34:case 39:for(;F++<$&&l.charCodeAt(F)!==h;);}if(0===m)break;F++}if(m=l.substring(M,F),0===p&&(p=(B=B.replace(c,"").trim()).charCodeAt(0)),64===p){switch(0<j&&(B=B.replace(f,"")),h=B.charCodeAt(1)){case 100:case 109:case 115:case 45:j=r;break;default:j=A}if(M=(m=t(r,j,m,h,d+1)).length,0<I&&(w=u(3,m,j=n(A,B,z),r,_,O,M,h,d,s),B=j.join(""),void 0!==w&&0===(M=(m=w.trim()).length)&&(h=0,m="")),0<M)switch(h){case 115:B=B.replace(S,a);case 100:case 109:case 45:m=B+"{"+m+"}";break;case 107:m=(B=B.replace(y,"$1 $2"))+"{"+m+"}",m=1===T||2===T&&i("@"+m,3)?"@-webkit-"+m+"@"+m:"@"+m;break;default:m=B+m,112===s&&(Q+=m,m="")}else m=""}else m=t(r,n(r,B,z),m,s,d+1);q+=m,m=z=j=L=p=0,B="",h=l.charCodeAt(++F);break;case 125:case 59:if(1<(M=(B=(0<j?B.replace(f,""):B).trim()).length))switch(0===L&&(p=B.charCodeAt(0),45===p||96<p&&123>p)&&(M=(B=B.replace(" ",":")).length),0<I&&void 0!==(w=u(1,B,r,e,_,O,Q.length,s,d,s))&&0===(M=(B=w.trim()).length)&&(B="\0\0"),p=B.charCodeAt(0),h=B.charCodeAt(1),p){case 0:break;case 64:if(105===h||99===h){V+=B+l.charAt(F);break}default:58!==B.charCodeAt(M-1)&&(Q+=o(B,p,h,B.charCodeAt(2)))}z=j=L=p=0,B="",h=l.charCodeAt(++F)}}switch(h){case 13:case 10:47===E?E=0:0===1+p&&107!==s&&0<B.length&&(j=1,B+="\0"),0<I*D&&u(0,B,r,e,_,O,Q.length,s,d,s),O=1,_++;break;case 59:case 125:if(0===E+C+x+k){O++;break}default:switch(O++,v=l.charAt(F),h){case 9:case 32:if(0===C+k+E)switch(P){case 44:case 58:case 9:case 32:v="";break;default:32!==h&&(v=" ")}break;case 0:v="\\0";break;case 12:v="\\f";break;case 11:v="\\v";break;case 38:0===C+E+k&&(j=z=1,v="\f"+v);break;case 108:if(0===C+E+k+R&&0<L)switch(F-L){case 2:112===P&&58===l.charCodeAt(F-3)&&(R=P);case 8:111===N&&(R=N)}break;case 58:0===C+E+k&&(L=F);break;case 44:0===E+x+C+k&&(j=1,v+="\r");break;case 34:case 39:0===E&&(C=C===h?0:0===C?h:C);break;case 91:0===C+E+x&&k++;break;case 93:0===C+E+x&&k--;break;case 41:0===C+E+k&&x--;break;case 40:0===C+E+k&&(0===p&&(2*P+3*N==533||(p=1)),x++);break;case 64:0===E+x+C+k+L+m&&(m=1);break;case 42:case 47:if(!(0<C+k+x))switch(E){case 0:switch(2*h+3*l.charCodeAt(F+1)){case 235:E=47;break;case 220:M=F,E=42}break;case 42:47===h&&42===P&&M+2!==F&&(33===l.charCodeAt(M+2)&&(Q+=l.substring(M,F+1)),v="",E=0)}}0===E&&(B+=v)}N=P,P=h,F++}if(0<(M=Q.length)){if(j=r,0<I&&void 0!==(w=u(2,Q,j,e,_,O,M,s,d,s))&&0===(Q=w).length)return V+Q+q;if(Q=j.join(",")+"{"+Q+"}",0!=T*R){switch(2!==T||i(Q,2)||(R=0),R){case 111:Q=Q.replace(b,":-moz-$1")+Q;break;case 112:Q=Q.replace(g,"::-webkit-input-$1")+Q.replace(g,"::-moz-$1")+Q.replace(g,":-ms-input-$1")+Q}R=0}}return V+Q+q}function n(e,t,n){var o=t.trim().split(m);t=o;var i=o.length,a=e.length;switch(a){case 0:case 1:var u=0;for(e=0===a?"":e[0]+" ";u<i;++u)t[u]=r(e,t[u],n).trim();break;default:var l=u=0;for(t=[];u<i;++u)for(var s=0;s<a;++s)t[l++]=r(e[s]+" ",o[u],n).trim()}return t}function r(e,t,n){var r=t.charCodeAt(0);switch(33>r&&(r=(t=t.trim()).charCodeAt(0)),r){case 38:return t.replace(v,"$1"+e.trim());case 58:return e.trim()+t.replace(v,"$1"+e.trim());default:if(0<1*n&&0<t.indexOf("\f"))return t.replace(v,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var a=e+";",u=2*t+3*n+4*r;if(944===u){e=a.indexOf(":",9)+1;var l=a.substring(e,a.length-1).trim();return l=a.substring(0,e).trim()+l+";",1===T||2===T&&i(l,1)?"-webkit-"+l+l:l}if(0===T||2===T&&!i(a,1))return a;switch(u){case 1015:return 97===a.charCodeAt(10)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:if(45===a.charCodeAt(8))return"-webkit-"+a+a;if(0<a.indexOf("image-set(",11))return a.replace(P,"$1-webkit-$2")+a;break;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(l=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+l+a;case 1005:return p.test(a)?a.replace(d,":-webkit-")+a.replace(d,":-moz-")+a:a;case 1e3:switch(t=(l=a.substring(13).trim()).indexOf("-")+1,l.charCodeAt(0)+l.charCodeAt(t)){case 226:l=a.replace(w,"tb");break;case 232:l=a.replace(w,"tb-rl");break;case 220:l=a.replace(w,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+l+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(t=(a=e).length-10,u=(l=(33===a.charCodeAt(t)?a.substring(0,t):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|l.charCodeAt(7))){case 203:if(111>l.charCodeAt(8))break;case 115:a=a.replace(l,"-webkit-"+l)+";"+a;break;case 207:case 102:a=a.replace(l,"-webkit-"+(102<u?"inline-":"")+"box")+";"+a.replace(l,"-webkit-"+l)+";"+a.replace(l,"-ms-"+l+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return l=a.replace("-items",""),"-webkit-"+a+"-webkit-box-"+l+"-ms-flex-"+l+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(E,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","").replace(E,"")+a}break;case 973:case 989:if(45!==a.charCodeAt(3)||122===a.charCodeAt(4))break;case 931:case 953:if(!0===C.test(e))return 115===(l=e.substring(e.indexOf(":")+1)).charCodeAt(0)?o(e.replace("stretch","fill-available"),t,n,r).replace(":fill-available",":stretch"):a.replace(l,"-webkit-"+l)+a.replace(l,"-moz-"+l.replace("fill-",""))+a;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+r&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(h,"$1-webkit-$2")+a}return a}function i(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),L(2!==t?r:r.replace(x,"$1"),n,t)}function a(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(k," or ($1)").substring(4):"("+t+")"}function u(e,t,n,r,o,i,a,u,l,c){for(var f,d=0,p=t;d<I;++d)switch(f=N[d].call(s,e,p,n,r,o,i,a,u,l,c)){case void 0:case!1:case!0:case null:break;default:p=f}if(p!==t)return p}function l(e){return void 0!==(e=e.prefix)&&(L=null,e?"function"!=typeof e?T=1:(T=2,L=e):T=0),l}function s(e,n){var r=e;if(33>r.charCodeAt(0)&&(r=r.trim()),r=[r],0<I){var o=u(-1,n,r,r,_,O,0,0,0,0);void 0!==o&&"string"==typeof o&&(n=o)}var i=t(A,r,n,0,0);return 0<I&&void 0!==(o=u(-2,i,r,r,_,O,i.length,0,0,0))&&(i=o),R=0,O=_=1,i}var c=/^\0+/g,f=/[\0\r\f]/g,d=/: */g,p=/zoo|gra/,h=/([,: ])(transform)/g,m=/,\r+?/g,v=/([\t\r\n ])*\f?&/g,y=/@(k\w+)\s*(\S*)\s*/,g=/::(place)/g,b=/:(read-only)/g,w=/[svh]\w+-[tblr]{2}/,S=/\(\s*(.*)\s*\)/g,k=/([\s\S]*?);/g,E=/-self|flex-/g,x=/[^]*?(:[rp][el]a[\w-]+)[^]*/,C=/stretch|:\s*\w+\-(?:conte|avail)/,P=/([^-])(image-set\()/,O=1,_=1,R=0,T=1,A=[],N=[],I=0,L=null,D=0;return s.use=function e(t){switch(t){case void 0:case null:I=N.length=0;break;default:if("function"==typeof t)N[I++]=t;else if("object"==typeof t)for(var n=0,r=t.length;n<r;++n)e(t[n]);else D=0|!!t}return e},s.set=l,void 0!==e&&l(e),s},R={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},T=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var A=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const N=T((function(e){return A.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));function I(){return(I=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var L=function(e,t){for(var n=[e[0]],r=0,o=t.length;r<o;r+=1)n.push(t[r],e[r+1]);return n},D=function(e){return null!==e&&"object"==typeof e&&"[object Object]"===(e.toString?e.toString():Object.prototype.toString.call(e))&&!(0,v.typeOf)(e)},F=Object.freeze([]),j=Object.freeze({});function z(e){return"function"==typeof e}function M(e){return e.displayName||e.name||"Component"}function U(e){return e&&"string"==typeof e.styledComponentId}var $="undefined"!=typeof process&&(process.env.REACT_APP_SC_ATTR||process.env.SC_ATTR)||"data-styled",B="undefined"!=typeof window&&"HTMLElement"in window,Q=Boolean("boolean"==typeof SC_DISABLE_SPEEDY?SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&""!==process.env.REACT_APP_SC_DISABLE_SPEEDY?"false"!==process.env.REACT_APP_SC_DISABLE_SPEEDY&&process.env.REACT_APP_SC_DISABLE_SPEEDY:"undefined"!=typeof process&&void 0!==process.env.SC_DISABLE_SPEEDY&&""!==process.env.SC_DISABLE_SPEEDY&&"false"!==process.env.SC_DISABLE_SPEEDY&&process.env.SC_DISABLE_SPEEDY),q={};function V(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("An error occurred. See https://git.io/JUIaE#"+e+" for more information."+(n.length>0?" Args: "+n.join(", "):""))}var H=function(){function e(e){this.groupSizes=new Uint32Array(512),this.length=512,this.tag=e}var t=e.prototype;return t.indexOfGroup=function(e){for(var t=0,n=0;n<e;n++)t+=this.groupSizes[n];return t},t.insertRules=function(e,t){if(e>=this.groupSizes.length){for(var n=this.groupSizes,r=n.length,o=r;e>=o;)(o<<=1)<0&&V(16,""+e);this.groupSizes=new Uint32Array(o),this.groupSizes.set(n),this.length=o;for(var i=r;i<o;i++)this.groupSizes[i]=0}for(var a=this.indexOfGroup(e+1),u=0,l=t.length;u<l;u++)this.tag.insertRule(a,t[u])&&(this.groupSizes[e]++,a++)},t.clearGroup=function(e){if(e<this.length){var t=this.groupSizes[e],n=this.indexOfGroup(e),r=n+t;this.groupSizes[e]=0;for(var o=n;o<r;o++)this.tag.deleteRule(n)}},t.getGroup=function(e){var t="";if(e>=this.length||0===this.groupSizes[e])return t;for(var n=this.groupSizes[e],r=this.indexOfGroup(e),o=r+n,i=r;i<o;i++)t+=this.tag.getRule(i)+"/*!sc*/\n";return t},e}(),W=new Map,K=new Map,Z=1,G=function(e){if(W.has(e))return W.get(e);for(;K.has(Z);)Z++;var t=Z++;return W.set(e,t),K.set(t,e),t},X=function(e){return K.get(e)},Y=function(e,t){t>=Z&&(Z=t+1),W.set(e,t),K.set(t,e)},J="style["+$+'][data-styled-version="5.3.5"]',ee=new RegExp("^"+$+'\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'),te=function(e,t,n){for(var r,o=n.split(","),i=0,a=o.length;i<a;i++)(r=o[i])&&e.registerName(t,r)},ne=function(e,t){for(var n=(t.textContent||"").split("/*!sc*/\n"),r=[],o=0,i=n.length;o<i;o++){var a=n[o].trim();if(a){var u=a.match(ee);if(u){var l=0|parseInt(u[1],10),s=u[2];0!==l&&(Y(s,l),te(e,s,u[3]),e.getTag().insertRules(l,r)),r.length=0}else r.push(a)}}},re=function(){return"undefined"!=typeof window&&void 0!==window.__webpack_nonce__?window.__webpack_nonce__:null},oe=function(e){var t=document.head,n=e||t,r=document.createElement("style"),o=function(e){for(var t=e.childNodes,n=t.length;n>=0;n--){var r=t[n];if(r&&1===r.nodeType&&r.hasAttribute($))return r}}(n),i=void 0!==o?o.nextSibling:null;r.setAttribute($,"active"),r.setAttribute("data-styled-version","5.3.5");var a=re();return a&&r.setAttribute("nonce",a),n.insertBefore(r,i),r},ie=function(){function e(e){var t=this.element=oe(e);t.appendChild(document.createTextNode("")),this.sheet=function(e){if(e.sheet)return e.sheet;for(var t=document.styleSheets,n=0,r=t.length;n<r;n++){var o=t[n];if(o.ownerNode===e)return o}V(17)}(t),this.length=0}var t=e.prototype;return t.insertRule=function(e,t){try{return this.sheet.insertRule(t,e),this.length++,!0}catch(e){return!1}},t.deleteRule=function(e){this.sheet.deleteRule(e),this.length--},t.getRule=function(e){var t=this.sheet.cssRules[e];return void 0!==t&&"string"==typeof t.cssText?t.cssText:""},e}(),ae=function(){function e(e){var t=this.element=oe(e);this.nodes=t.childNodes,this.length=0}var t=e.prototype;return t.insertRule=function(e,t){if(e<=this.length&&e>=0){var n=document.createTextNode(t),r=this.nodes[e];return this.element.insertBefore(n,r||null),this.length++,!0}return!1},t.deleteRule=function(e){this.element.removeChild(this.nodes[e]),this.length--},t.getRule=function(e){return e<this.length?this.nodes[e].textContent:""},e}(),ue=function(){function e(e){this.rules=[],this.length=0}var t=e.prototype;return t.insertRule=function(e,t){return e<=this.length&&(this.rules.splice(e,0,t),this.length++,!0)},t.deleteRule=function(e){this.rules.splice(e,1),this.length--},t.getRule=function(e){return e<this.length?this.rules[e]:""},e}(),le=B,se={isServer:!B,useCSSOMInjection:!Q},ce=function(){function e(e,t,n){void 0===e&&(e=j),void 0===t&&(t={}),this.options=I({},se,{},e),this.gs=t,this.names=new Map(n),this.server=!!e.isServer,!this.server&&B&&le&&(le=!1,function(e){for(var t=document.querySelectorAll(J),n=0,r=t.length;n<r;n++){var o=t[n];o&&"active"!==o.getAttribute($)&&(ne(e,o),o.parentNode&&o.parentNode.removeChild(o))}}(this))}e.registerId=function(e){return G(e)};var t=e.prototype;return t.reconstructWithOptions=function(t,n){return void 0===n&&(n=!0),new e(I({},this.options,{},t),this.gs,n&&this.names||void 0)},t.allocateGSInstance=function(e){return this.gs[e]=(this.gs[e]||0)+1},t.getTag=function(){return this.tag||(this.tag=(n=(t=this.options).isServer,r=t.useCSSOMInjection,o=t.target,e=n?new ue(o):r?new ie(o):new ae(o),new H(e)));var e,t,n,r,o},t.hasNameForId=function(e,t){return this.names.has(e)&&this.names.get(e).has(t)},t.registerName=function(e,t){if(G(e),this.names.has(e))this.names.get(e).add(t);else{var n=new Set;n.add(t),this.names.set(e,n)}},t.insertRules=function(e,t,n){this.registerName(e,t),this.getTag().insertRules(G(e),n)},t.clearNames=function(e){this.names.has(e)&&this.names.get(e).clear()},t.clearRules=function(e){this.getTag().clearGroup(G(e)),this.clearNames(e)},t.clearTag=function(){this.tag=void 0},t.toString=function(){return function(e){for(var t=e.getTag(),n=t.length,r="",o=0;o<n;o++){var i=X(o);if(void 0!==i){var a=e.names.get(i),u=t.getGroup(o);if(a&&u&&a.size){var l=$+".g"+o+'[id="'+i+'"]',s="";void 0!==a&&a.forEach((function(e){e.length>0&&(s+=e+",")})),r+=""+u+l+'{content:"'+s+'"}/*!sc*/\n'}}}return r}(this)},e}(),fe=/(a)(d)/gi,de=function(e){return String.fromCharCode(e+(e>25?39:97))};function pe(e){var t,n="";for(t=Math.abs(e);t>52;t=t/52|0)n=de(t%52)+n;return(de(t%52)+n).replace(fe,"$1-$2")}var he=function(e,t){for(var n=t.length;n;)e=33*e^t.charCodeAt(--n);return e},me=function(e){return he(5381,e)};function ve(e){for(var t=0;t<e.length;t+=1){var n=e[t];if(z(n)&&!U(n))return!1}return!0}var ye=me("5.3.5"),ge=function(){function e(e,t,n){this.rules=e,this.staticRulesId="",this.isStatic=(void 0===n||n.isStatic)&&ve(e),this.componentId=t,this.baseHash=he(ye,t),this.baseStyle=n,ce.registerId(t)}return e.prototype.generateAndInjectStyles=function(e,t,n){var r=this.componentId,o=[];if(this.baseStyle&&o.push(this.baseStyle.generateAndInjectStyles(e,t,n)),this.isStatic&&!n.hash)if(this.staticRulesId&&t.hasNameForId(r,this.staticRulesId))o.push(this.staticRulesId);else{var i=Fe(this.rules,e,t,n).join(""),a=pe(he(this.baseHash,i)>>>0);if(!t.hasNameForId(r,a)){var u=n(i,"."+a,void 0,r);t.insertRules(r,a,u)}o.push(a),this.staticRulesId=a}else{for(var l=this.rules.length,s=he(this.baseHash,n.hash),c="",f=0;f<l;f++){var d=this.rules[f];if("string"==typeof d)c+=d;else if(d){var p=Fe(d,e,t,n),h=Array.isArray(p)?p.join(""):p;s=he(s,h+f),c+=h}}if(c){var m=pe(s>>>0);if(!t.hasNameForId(r,m)){var v=n(c,"."+m,void 0,r);t.insertRules(r,m,v)}o.push(m)}}return o.join(" ")},e}(),be=/^\s*\/\/.*$/gm,we=[":","[",".","#"];function Se(e){var t,n,r,o,i=void 0===e?j:e,a=i.options,u=void 0===a?j:a,l=i.plugins,s=void 0===l?F:l,c=new _(u),f=[],d=function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,i,a,u,l,s,c,f){switch(n){case 1:if(0===c&&64===r.charCodeAt(0))return e(r+";"),"";break;case 2:if(0===s)return r+"/*|*/";break;case 3:switch(s){case 102:case 112:return e(o[0]+r),"";default:return r+(0===f?"/*|*/":"")}case-2:r.split("/*|*/}").forEach(t)}}}((function(e){f.push(e)})),p=function(e,r,i){return 0===r&&-1!==we.indexOf(i[n.length])||i.match(o)?e:"."+t};function h(e,i,a,u){void 0===u&&(u="&");var l=e.replace(be,""),s=i&&a?a+" "+i+" { "+l+" }":l;return t=u,n=i,r=new RegExp("\\"+n+"\\b","g"),o=new RegExp("(\\"+n+"\\b){2,}"),c(a||!i?"":i,s)}return c.use([].concat(s,[function(e,t,o){2===e&&o.length&&o[0].lastIndexOf(n)>0&&(o[0]=o[0].replace(r,p))},d,function(e){if(-2===e){var t=f;return f=[],t}}])),h.hash=s.length?s.reduce((function(e,t){return t.name||V(15),he(e,t.name)}),5381).toString():"",h}var ke=e.createContext(),Ee=(ke.Consumer,e.createContext()),xe=(Ee.Consumer,new ce),Ce=Se();function Pe(){return(0,e.useContext)(ke)||xe}function Oe(){return(0,e.useContext)(Ee)||Ce}function _e(t){var n=(0,e.useState)(t.stylisPlugins),r=n[0],o=n[1],i=Pe(),a=(0,e.useMemo)((function(){var e=i;return t.sheet?e=t.sheet:t.target&&(e=e.reconstructWithOptions({target:t.target},!1)),t.disableCSSOMInjection&&(e=e.reconstructWithOptions({useCSSOMInjection:!1})),e}),[t.disableCSSOMInjection,t.sheet,t.target]),u=(0,e.useMemo)((function(){return Se({options:{prefix:!t.disableVendorPrefixes},plugins:r})}),[t.disableVendorPrefixes,r]);return(0,e.useEffect)((function(){O()(r,t.stylisPlugins)||o(t.stylisPlugins)}),[t.stylisPlugins]),e.createElement(ke.Provider,{value:a},e.createElement(Ee.Provider,{value:u},t.children))}var Re=function(){function e(e,t){var n=this;this.inject=function(e,t){void 0===t&&(t=Ce);var r=n.name+t.hash;e.hasNameForId(n.id,r)||e.insertRules(n.id,r,t(n.rules,r,"@keyframes"))},this.toString=function(){return V(12,String(n.name))},this.name=e,this.id="sc-keyframes-"+e,this.rules=t}return e.prototype.getName=function(e){return void 0===e&&(e=Ce),this.name+e.hash},e}(),Te=/([A-Z])/,Ae=/([A-Z])/g,Ne=/^ms-/,Ie=function(e){return"-"+e.toLowerCase()};function Le(e){return Te.test(e)?e.replace(Ae,Ie).replace(Ne,"-ms-"):e}var De=function(e){return null==e||!1===e||""===e};function Fe(e,t,n,r){if(Array.isArray(e)){for(var o,i=[],a=0,u=e.length;a<u;a+=1)""!==(o=Fe(e[a],t,n,r))&&(Array.isArray(o)?i.push.apply(i,o):i.push(o));return i}return De(e)?"":U(e)?"."+e.styledComponentId:z(e)?"function"!=typeof(l=e)||l.prototype&&l.prototype.isReactComponent||!t?e:Fe(e(t),t,n,r):e instanceof Re?n?(e.inject(n,r),e.getName(r)):e:D(e)?function e(t,n){var r,o,i=[];for(var a in t)t.hasOwnProperty(a)&&!De(t[a])&&(Array.isArray(t[a])&&t[a].isCss||z(t[a])?i.push(Le(a)+":",t[a],";"):D(t[a])?i.push.apply(i,e(t[a],a)):i.push(Le(a)+": "+(r=a,(null==(o=t[a])||"boolean"==typeof o||""===o?"":"number"!=typeof o||0===o||r in R?String(o).trim():o+"px")+";")));return n?[n+" {"].concat(i,["}"]):i}(e):e.toString();var l}var je=function(e){return Array.isArray(e)&&(e.isCss=!0),e};function ze(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];return z(e)||D(e)?je(Fe(L(F,[e].concat(n)))):0===n.length&&1===e.length&&"string"==typeof e[0]?e:je(Fe(L(e,n)))}new Set;var Me=function(e,t,n){return void 0===n&&(n=j),e.theme!==n.theme&&e.theme||t||n.theme},Ue=/[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g,$e=/(^-|-$)/g;function Be(e){return e.replace(Ue,"-").replace($e,"")}var Qe=function(e){return pe(me(e)>>>0)};function qe(e){return"string"==typeof e&&!0}var Ve=function(e){return"function"==typeof e||"object"==typeof e&&null!==e&&!Array.isArray(e)},He=function(e){return"__proto__"!==e&&"constructor"!==e&&"prototype"!==e};function We(e,t,n){var r=e[n];Ve(t)&&Ve(r)?Ke(r,t):e[n]=t}function Ke(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o=0,i=n;o<i.length;o++){var a=i[o];if(Ve(a))for(var u in a)He(u)&&We(e,a[u],u)}return e}var Ze=e.createContext();Ze.Consumer;var Ge={};function Xe(t,n,r){var o=U(t),i=!qe(t),a=n.attrs,u=void 0===a?F:a,l=n.componentId,s=void 0===l?function(e,t){var n="string"!=typeof e?"sc":Be(e);Ge[n]=(Ge[n]||0)+1;var r=n+"-"+Qe("5.3.5"+n+Ge[n]);return t?t+"-"+r:r}(n.displayName,n.parentComponentId):l,c=n.displayName,f=void 0===c?function(e){return qe(e)?"styled."+e:"Styled("+M(e)+")"}(t):c,d=n.displayName&&n.componentId?Be(n.displayName)+"-"+n.componentId:n.componentId||s,p=o&&t.attrs?Array.prototype.concat(t.attrs,u).filter(Boolean):u,h=n.shouldForwardProp;o&&t.shouldForwardProp&&(h=n.shouldForwardProp?function(e,r,o){return t.shouldForwardProp(e,r,o)&&n.shouldForwardProp(e,r,o)}:t.shouldForwardProp);var v,y=new ge(r,d,o?t.componentStyle:void 0),g=y.isStatic&&0===u.length,b=function(t,n){return function(t,n,r,o){var i=t.attrs,a=t.componentStyle,u=t.defaultProps,l=t.foldedComponentIds,s=t.shouldForwardProp,c=t.styledComponentId,f=t.target,d=function(e,t,n){void 0===e&&(e=j);var r=I({},t,{theme:e}),o={};return n.forEach((function(e){var t,n,i,a=e;for(t in z(a)&&(a=a(r)),a)r[t]=o[t]="className"===t?(n=o[t],i=a[t],n&&i?n+" "+i:n||i):a[t]})),[r,o]}(Me(n,(0,e.useContext)(Ze),u)||j,n,i),p=d[0],h=d[1],m=function(e,t,n,r){var o=Pe(),i=Oe();return t?e.generateAndInjectStyles(j,o,i):e.generateAndInjectStyles(n,o,i)}(a,o,p),v=r,y=h.$as||n.$as||h.as||n.as||f,g=qe(y),b=h!==n?I({},n,{},h):n,w={};for(var S in b)"$"!==S[0]&&"as"!==S&&("forwardedAs"===S?w.as=b[S]:(s?s(S,N,y):!g||N(S))&&(w[S]=b[S]));return n.style&&h.style!==n.style&&(w.style=I({},n.style,{},h.style)),w.className=Array.prototype.concat(l,c,m!==c?m:null,n.className,h.className).filter(Boolean).join(" "),w.ref=v,(0,e.createElement)(y,w)}(v,t,n,g)};return b.displayName=f,(v=e.forwardRef(b)).attrs=p,v.componentStyle=y,v.displayName=f,v.shouldForwardProp=h,v.foldedComponentIds=o?Array.prototype.concat(t.foldedComponentIds,t.styledComponentId):F,v.styledComponentId=d,v.target=o?t.target:t,v.withComponent=function(e){var t=n.componentId,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(n,["componentId"]),i=t&&t+"-"+(qe(e)?e:Be(M(e)));return Xe(e,I({},o,{attrs:p,componentId:i}),r)},Object.defineProperty(v,"defaultProps",{get:function(){return this._foldedDefaultProps},set:function(e){this._foldedDefaultProps=o?Ke({},t.defaultProps,e):e}}),v.toString=function(){return"."+v.styledComponentId},i&&m()(v,t,{attrs:!0,componentStyle:!0,displayName:!0,foldedComponentIds:!0,shouldForwardProp:!0,styledComponentId:!0,target:!0,withComponent:!0}),v}var Ye=function(e){return function e(t,n,r){if(void 0===r&&(r=j),!(0,v.isValidElementType)(n))return V(1,String(n));var o=function(){return t(n,r,ze.apply(void 0,arguments))};return o.withConfig=function(o){return e(t,n,I({},r,{},o))},o.attrs=function(o){return e(t,n,I({},r,{attrs:Array.prototype.concat(r.attrs,o).filter(Boolean)}))},o}(Xe,e)};["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","marker","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","textPath","tspan"].forEach((function(e){Ye[e]=Ye(e)}));var Je=function(){function e(e,t){this.rules=e,this.componentId=t,this.isStatic=ve(e),ce.registerId(this.componentId+1)}var t=e.prototype;return t.createStyles=function(e,t,n,r){var o=r(Fe(this.rules,t,n,r).join(""),""),i=this.componentId+e;n.insertRules(i,i,o)},t.removeStyles=function(e,t){t.clearRules(this.componentId+e)},t.renderStyles=function(e,t,n,r){e>2&&ce.registerId(this.componentId+e),this.removeStyles(e,n),this.createStyles(e,t,n,r)},e}();!function(){var t=function(){var t=this;this._emitSheetCSS=function(){var e=t.instance.toString();if(!e)return"";var n=re();return"<style "+[n&&'nonce="'+n+'"',$+'="true"','data-styled-version="5.3.5"'].filter(Boolean).join(" ")+">"+e+"</style>"},this.getStyleTags=function(){return t.sealed?V(2):t._emitSheetCSS()},this.getStyleElement=function(){var n;if(t.sealed)return V(2);var r=((n={})[$]="",n["data-styled-version"]="5.3.5",n.dangerouslySetInnerHTML={__html:t.instance.toString()},n),o=re();return o&&(r.nonce=o),[e.createElement("style",I({},r,{key:"sc-0-0"}))]},this.seal=function(){t.sealed=!0},this.instance=new ce({isServer:!0}),this.sealed=!1}.prototype;t.collectStyles=function(t){return this.sealed?V(2):e.createElement(_e,{sheet:this.instance},t)},t.interleaveWithNodeStream=function(e){return V(3)}}();const et=Ye,tt=(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];var i=ze.apply(void 0,[t].concat(r)),a="sc-global-"+Qe(JSON.stringify(i)),u=new Je(i,a);function l(t){var n=Pe(),r=Oe(),o=(0,e.useContext)(Ze),i=(0,e.useRef)(n.allocateGSInstance(a)).current;return n.server&&s(i,t,n,o,r),(0,e.useLayoutEffect)((function(){if(!n.server)return s(i,t,n,o,r),function(){return u.removeStyles(i,n)}}),[i,t,n,o,r]),null}function s(e,t,n,r,o){if(u.isStatic)u.renderStyles(e,q,n,o);else{var i=I({},t,{theme:Me(t,r,l.defaultProps)});u.renderStyles(e,i,n,o)}}return e.memo(l)})`
input, label {
    display:block;
}

body {
    margin: 0;
    height: 100vh;
    font-family: Roboto, Helvetica, sans-serif;
}
@keyframes gradient {
    0% {
        background-position: 0% 50%;
    }
 
    50% {
        background-position: 100% 50%;
    }
 
    100% {
        background-position: 0% 50%;
    }
}`;var nt,rt=n(7462);!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(nt||(nt={}));var ot="beforeunload";function it(e){e.preventDefault(),e.returnValue=""}function at(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function ut(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}const lt=(0,e.createContext)(null),st=(0,e.createContext)(null),ct=(0,e.createContext)({outlet:null,matches:[]});function ft(e,t){if(!e)throw new Error(t)}function dt(e,t,n){void 0===n&&(n="/");let r=bt(("string"==typeof t?ut(t):t).pathname||"/",n);if(null==r)return null;let o=pt(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e)i=yt(o[e],r);return i}function pt(e,t,n,r){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r=""),e.forEach(((e,o)=>{let i={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};i.relativePath.startsWith("/")&&(i.relativePath.startsWith(r)||ft(!1),i.relativePath=i.relativePath.slice(r.length));let a=wt([r,i.relativePath]),u=n.concat(i);e.children&&e.children.length>0&&(!0===e.index&&ft(!1),pt(e.children,t,u,a)),(null!=e.path||e.index)&&t.push({path:a,score:vt(a,e.index),routesMeta:u})})),t}const ht=/^:\w+$/,mt=e=>"*"===e;function vt(e,t){let n=e.split("/"),r=n.length;return n.some(mt)&&(r+=-2),t&&(r+=2),n.filter((e=>!mt(e))).reduce(((e,t)=>e+(ht.test(t)?3:""===t?1:10)),r)}function yt(e,t){let{routesMeta:n}=e,r={},o="/",i=[];for(let e=0;e<n.length;++e){let a=n[e],u=e===n.length-1,l="/"===o?t:t.slice(o.length)||"/",s=gt({path:a.relativePath,caseSensitive:a.caseSensitive,end:u},l);if(!s)return null;Object.assign(r,s.params);let c=a.route;i.push({params:r,pathname:wt([o,s.pathname]),pathnameBase:St(wt([o,s.pathnameBase])),route:c}),"/"!==s.pathnameBase&&(o=wt([o,s.pathnameBase]))}return i}function gt(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(r.push(t),"([^\\/]+)")));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):o+=n?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let i=o[0],a=i.replace(/(.)\/+$/,"$1"),u=o.slice(1);return{params:r.reduce(((e,t,n)=>{if("*"===t){let e=u[n]||"";a=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(u[n]||""),e}),{}),pathname:i,pathnameBase:a,pattern:e}}function bt(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const wt=e=>e.join("/").replace(/\/\/+/g,"/"),St=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),kt=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",Et=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function xt(){return null!=(0,e.useContext)(st)}function Ct(){return xt()||ft(!1),(0,e.useContext)(st).location}function Pt(){xt()||ft(!1);let{basename:t,navigator:n}=(0,e.useContext)(lt),{matches:r}=(0,e.useContext)(ct),{pathname:o}=Ct(),i=JSON.stringify(r.map((e=>e.pathnameBase))),a=(0,e.useRef)(!1);return(0,e.useEffect)((()=>{a.current=!0})),(0,e.useCallback)((function(e,r){if(void 0===r&&(r={}),!a.current)return;if("number"==typeof e)return void n.go(e);let u=function(e,t,n){let r,o="string"==typeof e?ut(e):e,i=""===e||""===o.pathname?"/":o.pathname;if(null==i)r=n;else{let e=t.length-1;if(i.startsWith("..")){let t=i.split("/");for(;".."===t[0];)t.shift(),e-=1;o.pathname=t.join("/")}r=e>=0?t[e]:"/"}let a=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?ut(e):e,i=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:i,search:kt(r),hash:Et(o)}}(o,r);return i&&"/"!==i&&i.endsWith("/")&&!a.pathname.endsWith("/")&&(a.pathname+="/"),a}(e,JSON.parse(i),o);"/"!==t&&(u.pathname=wt([t,u.pathname])),(r.replace?n.replace:n.push)(u,r.state)}),[t,n,i,o])}const Ot=(0,e.createContext)(null);function _t(t){let{to:n,replace:r,state:o}=t;xt()||ft(!1);let i=Pt();return(0,e.useEffect)((()=>{i(n,{replace:r,state:o})})),null}function Rt(t){return function(t){let n=(0,e.useContext)(ct).outlet;return n?(0,e.createElement)(Ot.Provider,{value:t},n):n}(t.context)}function Tt(e){ft(!1)}function At(t){let{basename:n="/",children:r=null,location:o,navigationType:i=nt.Pop,navigator:a,static:u=!1}=t;xt()&&ft(!1);let l=St(n),s=(0,e.useMemo)((()=>({basename:l,navigator:a,static:u})),[l,a,u]);"string"==typeof o&&(o=ut(o));let{pathname:c="/",search:f="",hash:d="",state:p=null,key:h="default"}=o,m=(0,e.useMemo)((()=>{let e=bt(c,l);return null==e?null:{pathname:e,search:f,hash:d,state:p,key:h}}),[l,c,f,d,p,h]);return null==m?null:(0,e.createElement)(lt.Provider,{value:s},(0,e.createElement)(st.Provider,{children:r,value:{location:m,navigationType:i}}))}function Nt(t){let{children:n,location:r}=t;return function(t,n){xt()||ft(!1);let{matches:r}=(0,e.useContext)(ct),o=r[r.length-1],i=o?o.params:{},a=(o&&o.pathname,o?o.pathnameBase:"/");o&&o.route;let u,l=Ct();if(n){var s;let e="string"==typeof n?ut(n):n;"/"===a||(null==(s=e.pathname)?void 0:s.startsWith(a))||ft(!1),u=e}else u=l;let c=u.pathname||"/",f=dt(t,{pathname:"/"===a?c:c.slice(a.length)||"/"});return function(t,n){return void 0===n&&(n=[]),null==t?null:t.reduceRight(((r,o,i)=>(0,e.createElement)(ct.Provider,{children:void 0!==o.route.element?o.route.element:r,value:{outlet:r,matches:n.concat(t.slice(0,i+1))}})),null)}(f&&f.map((e=>Object.assign({},e,{params:Object.assign({},i,e.params),pathname:wt([a,e.pathname]),pathnameBase:"/"===e.pathnameBase?a:wt([a,e.pathnameBase])}))),r)}(It(n),r)}function It(t){let n=[];return e.Children.forEach(t,(t=>{if(!(0,e.isValidElement)(t))return;if(t.type===e.Fragment)return void n.push.apply(n,It(t.props.children));t.type!==Tt&&ft(!1);let r={caseSensitive:t.props.caseSensitive,element:t.props.element,index:t.props.index,path:t.props.path};t.props.children&&(r.children=It(t.props.children)),n.push(r)})),n}function Lt(t){let{basename:n,children:r,window:o}=t,i=(0,e.useRef)();null==i.current&&(i.current=function(e){void 0===e&&(e={});var t=e.window,n=void 0===t?document.defaultView:t,r=n.history;function o(){var e=n.location,t=e.pathname,o=e.search,i=e.hash,a=r.state||{};return[a.idx,{pathname:t,search:o,hash:i,state:a.usr||null,key:a.key||"default"}]}var i=null;n.addEventListener("popstate",(function(){if(i)f.call(i),i=null;else{var e=nt.Pop,t=o(),n=t[0],r=t[1];if(f.length){if(null!=n){var a=l-n;a&&(i={action:e,location:r,retry:function(){y(-1*a)}},y(a))}}else v(e)}}));var a=nt.Pop,u=o(),l=u[0],s=u[1],c=at(),f=at();function d(e){return"string"==typeof e?e:function(e){var t=e.pathname,n=void 0===t?"/":t,r=e.search,o=void 0===r?"":r,i=e.hash,a=void 0===i?"":i;return o&&"?"!==o&&(n+="?"===o.charAt(0)?o:"?"+o),a&&"#"!==a&&(n+="#"===a.charAt(0)?a:"#"+a),n}(e)}function p(e,t){return void 0===t&&(t=null),(0,rt.Z)({pathname:s.pathname,hash:"",search:""},"string"==typeof e?ut(e):e,{state:t,key:Math.random().toString(36).substr(2,8)})}function h(e,t){return[{usr:e.state,key:e.key,idx:t},d(e)]}function m(e,t,n){return!f.length||(f.call({action:e,location:t,retry:n}),!1)}function v(e){a=e;var t=o();l=t[0],s=t[1],c.call({action:a,location:s})}function y(e){r.go(e)}null==l&&(l=0,r.replaceState((0,rt.Z)({},r.state,{idx:l}),""));var g={get action(){return a},get location(){return s},createHref:d,push:function e(t,o){var i=nt.Push,a=p(t,o);if(m(i,a,(function(){e(t,o)}))){var u=h(a,l+1),s=u[0],c=u[1];try{r.pushState(s,"",c)}catch(e){n.location.assign(c)}v(i)}},replace:function e(t,n){var o=nt.Replace,i=p(t,n);if(m(o,i,(function(){e(t,n)}))){var a=h(i,l),u=a[0],s=a[1];r.replaceState(u,"",s),v(o)}},go:y,back:function(){y(-1)},forward:function(){y(1)},listen:function(e){return c.push(e)},block:function(e){var t=f.push(e);return 1===f.length&&n.addEventListener(ot,it),function(){t(),f.length||n.removeEventListener(ot,it)}}};return g}({window:o}));let a=i.current,[u,l]=(0,e.useState)({action:a.action,location:a.location});return(0,e.useLayoutEffect)((()=>a.listen(l)),[a]),(0,e.createElement)(At,{basename:n,children:r,location:u.location,navigationType:u.action,navigator:a})}const Dt=et((({children:t,...n})=>e.createElement("div",{...n},t)))`
  border-radius: 8px;
  background-color: white;
  box-shadow: 0 8px 32px 0 rgba( 31, 38, 135, 0.37 );;
  min-width: fit-content;
  padding: 24px;
  height: fit-content;
  max-height: 70vh;
  display: flex;
  flex-direction: column;
  overflow: auto;
  margin-bottom: 24px;

  @media only screen and (max-width: 768px) {
    width: 80%;
  }

  @media only screen and (min-width: 769px) {
    width: 40vw;
    max-width: 500px;
  }
`,Ft=t=>e.createElement(Dt,null,t.children),jt=et.button`
  width: 100%;
  display: inline-block;
  outline: 0;
  border: 0;
  cursor: pointer;
  color: #fff;
  font-weight: 500;
  font-size: 14px;
  height: 30px;
  padding: 0px 15px;
  text-shadow: rgb(0 0 0 / 25%) 0px 3px 8px;
  transition: all 0.5s ease 0s;
  :hover {
    box-shadow: rgba(0, 0, 0, 0.4) 0px 3px 8px;
    transition: all 0.3s ease 0s;
  }

  background: #7a579f;
  border-radius: 12px;
  letter-spacing: 1px;
`,zt=({children:t,...n})=>e.createElement(jt,{...n},t),Mt=et.div`
  color: #a41533;
  font-size: 0.75em;
  padding-top: 0.25em;
`,Ut=t=>{const{text:n}=t;return e.createElement(Mt,null,n)},$t=et.input`
  color: rgba(0, 0, 0, 0.87);
  border-bottom-color: ${({$hasError:e})=>e?"#cc0000 !important":"rgba(0, 0, 0, 0.42)"};
  font-size: 1rem;
  font-weight: 400;
  letter-spacing: 0.009375em;
  text-decoration: inherit;
  text-transform: inherit;
  align-self: flex-end;
  box-sizing: border-box;
  width: 100%;
  padding: 6px 16px 6px;
  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);
  border: none;
  border-bottom: 1px solid;
  border-radius: 4px 4px 0 0;
  :hover {
    border-bottom-color: rgba(0, 0, 0, 0.87);
    background: #ececec;
  }
  :focus {
    border-color: #7a579f;
    outline: none;
  }
`,Bt=t=>e.createElement($t,{...t}),Qt=et.div`
  margin: 18px 0px;
  height: 45px;
`,qt=t=>{const{errorMessage:n,...r}=t;return e.createElement(Qt,null,e.createElement(Bt,{...r,$hasError:!!n}),n&&e.createElement(Ut,{text:n}))},Vt=(0,e.createContext)(void 0),Ht=et.div`
  color: #cc0000;
  font-weight: 500;
  font-size: 14px;
`,Wt=e=>!e||0===e.trim().length,Kt=()=>{const t=(0,e.useContext)(Vt),[n,r]=(0,e.useState)(""),[o,i]=(0,e.useState)(""),[a,u]=(0,e.useState)(""),[l,s]=(0,e.useState)(""),[c,f]=(0,e.useState)(!1),d=e=>{({username:()=>{u(""),r(e.target.value)},password:()=>{s(""),i(e.target.value)}})[e.target.name](),(()=>{const e=Wt(n),t=Wt(o);f(!e&&!t)})()};return e.createElement(e.Fragment,null,t.loginError&&e.createElement(Ht,null,"Invalid username or password"),e.createElement("form",{onSubmit:e=>{e.preventDefault(),c?t.login(n.trim(),o.trim()):(Wt(n)&&u("Username is required"),Wt(o)&&s("Password is required"))},style:{width:"90%"}},e.createElement(qt,{type:"text",errorMessage:a,value:n,name:"username",placeholder:"Username",onChange:d}),e.createElement(qt,{type:"password",errorMessage:l,value:o,name:"password",placeholder:"Password",onChange:d}),e.createElement(zt,{title:"Login",type:"submit"},"Login")))},Zt=et.div`
  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
  background-size: 400% 400%;
  animation: gradient 15s ease infinite;
  height: 100%;
  overflow: auto;
`,Gt=et.div`
  display: flex;
  justify-content: center;
  height: 100%;
  align-items: center;

  /* @media only screen and (max-width: 768px) {
    width: 100%;
  } */

  /* @media only screen and (min-width: 769px) {
    align-items: center;
  } */
`,Xt=et.h1`
  white-space: nowrap;
  font-family: "Courier";
  letter-spacing: 3px;
  font-size: 3rem;
  font-weight: 600;
  color: #5e87b8;
  border-right: 4px solid #000; /*This will be the blinking cursor*/
  animation: cursor 1s infinite step-end;
  width: fit-content;

  @keyframes cursor {
    0%,
    100% {
      border-color: transparent;
    }
    50% {
      border-color: #000;
    }
  }
`,Yt=()=>(0,e.useContext)(Vt).isLoggedIn?e.createElement(_t,{to:"/server-list"}):e.createElement(Zt,null,e.createElement(Gt,null,e.createElement(Ft,null,e.createElement("div",{style:{display:"flex",justifyContent:"center",flexDirection:"column",alignItems:"center"}},e.createElement(Xt,null,"Login"),e.createElement(Kt,null))))),Jt=et.div`
  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
  background-size: 400% 400%;
  animation: gradient 15s ease infinite;
  height: 100%;
  overflow: auto;
`,en=et.div`
  display: flex;
  justify-content: center;
  height: 100%;
  align-items: center;
`,tn=et.h1`
  white-space: nowrap;
  font-family: "Courier";
  font-size: 3rem;
  font-weight: 600;
  color: #5e87b8;
`,nn=()=>{const t=Pt();return e.createElement(Jt,null,e.createElement(en,null,e.createElement(Ft,null,e.createElement("div",{style:{display:"flex",justifyContent:"center",flexDirection:"column",alignItems:"center"}},e.createElement(tn,null,"You've been logged out"),e.createElement(zt,{onClick:()=>t("/login")},"Go to login")))))},rn=()=>{const t=Ct();return(0,e.useContext)(Vt).isLoggedIn?e.createElement(Rt,null):e.createElement(_t,{to:"/login",state:{from:t},replace:!0})},on=()=>e.createElement("svg",{"data-testid":"menu-icon",xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24"},e.createElement("path",{d:"M0 0h24v24H0z",fill:"none"}),e.createElement("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"})),an=et.div`
  background: rgba(255, 255, 255, 0.7);
  display: flex;
  justify-content: flex-end;
  align-items: center;
`,un=et.div`
  .popover__wrapper {
    position: relative;
    display: inline-block;
    padding: 1.5rem;
  }

  @media only screen and (max-width: 768px) {
    .popover__title {
      &--text {
        display: none;
      }
    }
  }

  @media only screen and (min-width: 769px) {
    .popover__title {
      &--icon {
        display: none;
      }
    }
  }

  .popover__content {
    z-index: 1;
    position: absolute;
    right: 12px;
    border-radius: 8px;
    background-color: white;
    padding: 1.5rem;
    box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);
    @media only screen and (max-width: 768px) {
        width: 40vw;
  }

  @media only screen and (min-width: 769px) {
    width: auto;
  }
}
`;var ln=n(7294);const sn=()=>{const{logout:t}=(0,e.useContext)(Vt),n=Pt(),[r,o]=(0,e.useState)(!1),i=(e=>{const t=ln.useRef();return ln.useEffect((()=>{const n=n=>{t.current&&!t.current.contains(n.target)&&e()};return document.addEventListener("click",n,!0),()=>{document.removeEventListener("click",n,!0)}}),[t]),t})((()=>{o(!1)}));return e.createElement(an,null,e.createElement(un,null,e.createElement("div",{ref:i,className:"popover__wrapper"},e.createElement("div",{className:"popover__title",onClick:()=>{o(!0)}},e.createElement("span",{className:"popover__title--text"},"Menu"),e.createElement("span",{className:"popover__title--icon"},e.createElement(on,null))),r&&e.createElement("div",{className:"popover__content"},e.createElement(zt,{onClick:()=>(t(),n("/logout"))},"Logout")))))};function cn(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function fn(e){return!!e&&!!e[Xn]}function dn(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return n===Object||"function"==typeof n&&Function.toString.call(n)===Yn}(e)||Array.isArray(e)||!!e[Gn]||!!e.constructor[Gn]||gn(e)||bn(e))}function pn(e,t,n){void 0===n&&(n=!1),0===hn(e)?(n?Object.keys:Jn)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function hn(e){var t=e[Xn];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:gn(e)?2:bn(e)?3:0}function mn(e,t){return 2===hn(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function vn(e,t,n){var r=hn(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function yn(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function gn(e){return Hn&&e instanceof Map}function bn(e){return Wn&&e instanceof Set}function wn(e){return e.o||e.t}function Sn(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=er(e);delete t[Xn];for(var n=Jn(t),r=0;r<n.length;r++){var o=n[r],i=t[o];!1===i.writable&&(i.writable=!0,i.configurable=!0),(i.get||i.set)&&(t[o]={configurable:!0,writable:!0,enumerable:i.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function kn(e,t){return void 0===t&&(t=!1),xn(e)||fn(e)||!dn(e)||(hn(e)>1&&(e.set=e.add=e.clear=e.delete=En),Object.freeze(e),t&&pn(e,(function(e,t){return kn(t,!0)}),!0)),e}function En(){cn(2)}function xn(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function Cn(e){var t=tr[e];return t||cn(18,e),t}function Pn(){return qn}function On(e,t){t&&(Cn("Patches"),e.u=[],e.s=[],e.v=t)}function _n(e){Rn(e),e.p.forEach(An),e.p=null}function Rn(e){e===qn&&(qn=e.l)}function Tn(e){return qn={p:[],l:qn,h:e,m:!0,_:0}}function An(e){var t=e[Xn];0===t.i||1===t.i?t.j():t.O=!0}function Nn(e,t){t._=t.p.length;var n=t.p[0],r=void 0!==e&&e!==n;return t.h.g||Cn("ES5").S(t,e,r),r?(n[Xn].P&&(_n(t),cn(4)),dn(e)&&(e=In(t,e),t.l||Dn(t,e)),t.u&&Cn("Patches").M(n[Xn].t,e,t.u,t.s)):e=In(t,n,[]),_n(t),t.u&&t.v(t.u,t.s),e!==Zn?e:void 0}function In(e,t,n){if(xn(t))return t;var r=t[Xn];if(!r)return pn(t,(function(o,i){return Ln(e,r,t,o,i,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return Dn(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=Sn(r.k):r.o;pn(3===r.i?new Set(o):o,(function(t,i){return Ln(e,r,o,t,i,n)})),Dn(e,o,!1),n&&e.u&&Cn("Patches").R(r,n,e.u,e.s)}return r.o}function Ln(e,t,n,r,o,i){if(fn(o)){var a=In(e,o,i&&t&&3!==t.i&&!mn(t.D,r)?i.concat(r):void 0);if(vn(n,r,a),!fn(a))return;e.m=!1}if(dn(o)&&!xn(o)){if(!e.h.F&&e._<1)return;In(e,o),t&&t.A.l||Dn(e,o)}}function Dn(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&kn(t,n)}function Fn(e,t){var n=e[Xn];return(n?wn(n):e)[t]}function jn(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function zn(e){e.P||(e.P=!0,e.l&&zn(e.l))}function Mn(e){e.o||(e.o=Sn(e.t))}function Un(e,t,n){var r=gn(t)?Cn("MapSet").N(t,n):bn(t)?Cn("MapSet").T(t,n):e.g?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:Pn(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,i=nr;n&&(o=[r],i=rr);var a=Proxy.revocable(o,i),u=a.revoke,l=a.proxy;return r.k=l,r.j=u,l}(t,n):Cn("ES5").J(t,n);return(n?n.A:Pn()).p.push(r),r}function $n(e){return fn(e)||cn(22,e),function e(t){if(!dn(t))return t;var n,r=t[Xn],o=hn(t);if(r){if(!r.P&&(r.i<4||!Cn("ES5").K(r)))return r.t;r.I=!0,n=Bn(t,o),r.I=!1}else n=Bn(t,o);return pn(n,(function(t,o){r&&function(e,t){return 2===hn(e)?e.get(t):e[t]}(r.t,t)===o||vn(n,t,e(o))})),3===o?new Set(n):n}(e)}function Bn(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return Sn(e)}var Qn,qn,Vn="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),Hn="undefined"!=typeof Map,Wn="undefined"!=typeof Set,Kn="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,Zn=Vn?Symbol.for("immer-nothing"):((Qn={})["immer-nothing"]=!0,Qn),Gn=Vn?Symbol.for("immer-draftable"):"__$immer_draftable",Xn=Vn?Symbol.for("immer-state"):"__$immer_state",Yn=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),Jn="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,er=Object.getOwnPropertyDescriptors||function(e){var t={};return Jn(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},tr={},nr={get:function(e,t){if(t===Xn)return e;var n=wn(e);if(!mn(n,t))return function(e,t,n){var r,o=jn(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!dn(r)?r:r===Fn(e.t,t)?(Mn(e),e.o[t]=Un(e.A.h,r,e)):r},has:function(e,t){return t in wn(e)},ownKeys:function(e){return Reflect.ownKeys(wn(e))},set:function(e,t,n){var r=jn(wn(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=Fn(wn(e),t),i=null==o?void 0:o[Xn];if(i&&i.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(yn(n,o)&&(void 0!==n||mn(e.t,t)))return!0;Mn(e),zn(e)}return e.o[t]===n&&"number"!=typeof n&&(void 0!==n||t in e.o)||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==Fn(e.t,t)||t in e.t?(e.D[t]=!1,Mn(e),zn(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=wn(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){cn(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){cn(12)}},rr={};pn(nr,(function(e,t){rr[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),rr.deleteProperty=function(e,t){return rr.set.call(this,e,t,void 0)},rr.set=function(e,t,n){return nr.set.call(this,e[0],t,n,e[0])};var or=function(){function e(e){var t=this;this.g=Kn,this.F=!0,this.produce=function(e,n,r){if("function"==typeof e&&"function"!=typeof n){var o=n;n=e;var i=t;return function(e){var t=this;void 0===e&&(e=o);for(var r=arguments.length,a=Array(r>1?r-1:0),u=1;u<r;u++)a[u-1]=arguments[u];return i.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(a))}))}}var a;if("function"!=typeof n&&cn(6),void 0!==r&&"function"!=typeof r&&cn(7),dn(e)){var u=Tn(t),l=Un(t,e,void 0),s=!0;try{a=n(l),s=!1}finally{s?_n(u):Rn(u)}return"undefined"!=typeof Promise&&a instanceof Promise?a.then((function(e){return On(u,r),Nn(e,u)}),(function(e){throw _n(u),e})):(On(u,r),Nn(a,u))}if(!e||"object"!=typeof e){if(void 0===(a=n(e))&&(a=e),a===Zn&&(a=void 0),t.F&&kn(a,!0),r){var c=[],f=[];Cn("Patches").M(e,a,c,f),r(c,f)}return a}cn(21,e)},this.produceWithPatches=function(e,n){if("function"==typeof e)return function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))};var r,o,i=t.produce(e,n,(function(e,t){r=e,o=t}));return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return[e,r,o]})):[i,r,o]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){dn(e)||cn(8),fn(e)&&(e=$n(e));var t=Tn(this),n=Un(this,e,void 0);return n[Xn].C=!0,Rn(t),n},t.finishDraft=function(e,t){var n=(e&&e[Xn]).A;return On(n,t),Nn(void 0,n)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!Kn&&cn(20),this.g=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}n>-1&&(t=t.slice(n+1));var o=Cn("Patches").$;return fn(e)?o(e,t):this.produce(e,(function(e){return o(e,t)}))},e}(),ir=new or,ar=ir.produce;ir.produceWithPatches.bind(ir),ir.setAutoFreeze.bind(ir),ir.setUseProxies.bind(ir),ir.applyPatches.bind(ir),ir.createDraft.bind(ir),ir.finishDraft.bind(ir);const ur=ar;function lr(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function sr(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function cr(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?sr(Object(n),!0).forEach((function(t){lr(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):sr(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function fr(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var dr="function"==typeof Symbol&&Symbol.observable||"@@observable",pr=function(){return Math.random().toString(36).substring(7).split("").join(".")},hr={INIT:"@@redux/INIT"+pr(),REPLACE:"@@redux/REPLACE"+pr(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+pr()}};function mr(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function vr(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(fr(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(fr(1));return n(vr)(e,t)}if("function"!=typeof e)throw new Error(fr(2));var o=e,i=t,a=[],u=a,l=!1;function s(){u===a&&(u=a.slice())}function c(){if(l)throw new Error(fr(3));return i}function f(e){if("function"!=typeof e)throw new Error(fr(4));if(l)throw new Error(fr(5));var t=!0;return s(),u.push(e),function(){if(t){if(l)throw new Error(fr(6));t=!1,s();var n=u.indexOf(e);u.splice(n,1),a=null}}}function d(e){if(!mr(e))throw new Error(fr(7));if(void 0===e.type)throw new Error(fr(8));if(l)throw new Error(fr(9));try{l=!0,i=o(i,e)}finally{l=!1}for(var t=a=u,n=0;n<t.length;n++)(0,t[n])();return e}function p(e){if("function"!=typeof e)throw new Error(fr(10));o=e,d({type:hr.REPLACE})}function h(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(fr(11));function n(){e.next&&e.next(c())}return n(),{unsubscribe:t(n)}}})[dr]=function(){return this},e}return d({type:hr.INIT}),(r={dispatch:d,subscribe:f,getState:c,replaceReducer:p})[dr]=h,r}function yr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function gr(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(fr(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return r=yr.apply(void 0,i)(n.dispatch),cr(cr({},n),{},{dispatch:r})}}}function br(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var wr=br();wr.withExtraArgument=br;const Sr=wr;var kr,Er=(kr=function(e,t){return kr=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},kr(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}kr(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),xr=function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e},Cr=Object.defineProperty,Pr=(Object.defineProperties,Object.getOwnPropertyDescriptors,Object.getOwnPropertySymbols),Or=Object.prototype.hasOwnProperty,_r=Object.prototype.propertyIsEnumerable,Rr=function(e,t,n){return t in e?Cr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n},Tr=function(e,t){for(var n in t||(t={}))Or.call(t,n)&&Rr(e,n,t[n]);if(Pr)for(var r=0,o=Pr(t);r<o.length;r++)n=o[r],_r.call(t,n)&&Rr(e,n,t[n]);return e},Ar="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?yr:yr.apply(null,arguments)};"undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__;var Nr=function(e){function t(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=e.apply(this,n)||this;return Object.setPrototypeOf(o,t.prototype),o}return Er(t,e),Object.defineProperty(t,Symbol.species,{get:function(){return t},enumerable:!1,configurable:!0}),t.prototype.concat=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.prototype.concat.apply(this,t)},t.prototype.prepend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])?new(t.bind.apply(t,xr([void 0],e[0].concat(this)))):new(t.bind.apply(t,xr([void 0],e.concat(this))))},t}(Array);function Ir(e){return dn(e)?ur(e,(function(){})):e}function Lr(e,t){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];if(t){var o=t.apply(void 0,n);if(!o)throw new Error("prepareAction did not return an object");return Tr(Tr({type:e,payload:o.payload},"meta"in o&&{meta:o.meta}),"error"in o&&{error:o.error})}return{type:e,payload:n[0]}}return n.toString=function(){return""+e},n.type=e,n.match=function(t){return t.type===e},n}function Dr(e){var t,n={},r=[],o={addCase:function(e,t){var r="string"==typeof e?e:e.type;if(r in n)throw new Error("addCase cannot be called with two reducers for the same action type");return n[r]=t,o},addMatcher:function(e,t){return r.push({matcher:e,reducer:t}),o},addDefaultCase:function(e){return t=e,o}};return e(o),[n,r,t]}Object.assign;var Fr="listenerMiddleware";Lr(Fr+"/add"),Lr(Fr+"/removeAll"),Lr(Fr+"/remove"),function(){function e(e,t){var n=o[e];return n?n.enumerable=t:o[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[Xn];return nr.get(t,e)},set:function(t){var n=this[Xn];nr.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][Xn];if(!o.P)switch(o.i){case 5:r(o)&&zn(o);break;case 4:n(o)&&zn(o)}}}function n(e){for(var t=e.t,n=e.k,r=Jn(n),o=r.length-1;o>=0;o--){var i=r[o];if(i!==Xn){var a=t[i];if(void 0===a&&!mn(t,i))return!0;var u=n[i],l=u&&u[Xn];if(l?l.t!==a:!yn(u,a))return!0}}var s=!!t[Xn];return r.length!==Jn(t).length+(s?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);if(n&&!n.get)return!0;for(var r=0;r<t.length;r++)if(!t.hasOwnProperty(r))return!0;return!1}var o={};!function(e,t){tr[e]||(tr[e]=t)}("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var i=er(n);delete i[Xn];for(var a=Jn(i),u=0;u<a.length;u++){var l=a[u];i[l]=e(l,t||!!i[l].enumerable)}return Object.create(Object.getPrototypeOf(n),i)}(r,t),i={i:r?5:4,A:n?n.A:Pn(),P:!1,I:!1,D:{},l:n,t,k:o,o:null,O:!1,C:!1};return Object.defineProperty(o,Xn,{value:i,writable:!0}),o},S:function(e,n,o){o?fn(n)&&n[Xn].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[Xn];if(n){var o=n.t,i=n.k,a=n.D,u=n.i;if(4===u)pn(i,(function(t){t!==Xn&&(void 0!==o[t]||mn(o,t)?a[t]||e(i[t]):(a[t]=!0,zn(n)))})),pn(o,(function(e){void 0!==i[e]||mn(i,e)||(a[e]=!1,zn(n))}));else if(5===u){if(r(n)&&(zn(n),a.length=!0),i.length<o.length)for(var l=i.length;l<o.length;l++)a[l]=!1;else for(var s=o.length;s<i.length;s++)a[s]=!0;for(var c=Math.min(i.length,o.length),f=0;f<c;f++)i.hasOwnProperty(f)||(a[f]=!0),void 0===a[f]&&e(i[f])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}();const jr=function(e){var t=e.name;if(!t)throw new Error("`name` is a required option for createSlice");var n,r="function"==typeof e.initialState?e.initialState:Ir(e.initialState),o=e.reducers||{},i=Object.keys(o),a={},u={},l={};function s(){var t="function"==typeof e.extraReducers?Dr(e.extraReducers):[e.extraReducers],n=t[0],o=void 0===n?{}:n,i=t[1],a=void 0===i?[]:i,l=t[2],s=void 0===l?void 0:l,c=Tr(Tr({},o),u);return function(e,t,n,r){void 0===n&&(n=[]);var o,i="function"==typeof t?Dr(t):[t,n,r],a=i[0],u=i[1],l=i[2];if(function(e){return"function"==typeof e}(e))o=function(){return Ir(e())};else{var s=Ir(e);o=function(){return s}}function c(e,t){void 0===e&&(e=o());var n=xr([a[t.type]],u.filter((function(e){return(0,e.matcher)(t)})).map((function(e){return e.reducer})));return 0===n.filter((function(e){return!!e})).length&&(n=[l]),n.reduce((function(e,n){if(n){var r;if(fn(e))return void 0===(r=n(e,t))?e:r;if(dn(e))return ur(e,(function(e){return n(e,t)}));if(void 0===(r=n(e,t))){if(null===e)return e;throw Error("A case reducer on a non-draftable value must not return undefined")}return r}return e}),e)}return c.getInitialState=o,c}(r,c,a,s)}return i.forEach((function(e){var n,r,i=o[e],s=t+"/"+e;"reducer"in i?(n=i.reducer,r=i.prepare):n=i,a[e]=n,u[s]=n,l[e]=r?Lr(s,r):Lr(s)})),{name:t,reducer:function(e,t){return n||(n=s()),n(e,t)},actions:l,caseReducers:a,getInitialState:function(){return n||(n=s()),n.getInitialState()}}}({name:"sort",initialState:{sortParams:{order:"",orderBy:""}},reducers:{sort(e,t){const{column:n}=t.payload,{sortParams:r}=e;""===r.orderBy&&""===r.order||n!==r.orderBy?e.sortParams={orderBy:n,order:"asc"}:r.orderBy===n&&"asc"===r.order?e.sortParams={orderBy:n,order:"desc"}:r.orderBy===n&&"desc"===r.order&&(e.sortParams={orderBy:"",order:""})}}}),zr=jr.actions,Mr=jr.reducer,Ur=et.th``,$r=et.div`
  transition: transform 0.2s ease-in;
  transform: ${({$isAscending:e})=>e?"":"rotate(180deg)"};
  display: flex;
  justify-content: center;
  align-items: center;
  visibility: ${({$isVisible:e})=>e?"visible":"hidden"}; ;
`,Br=et((()=>e.createElement("svg",{"data-testid":"arrow-icon",xmlns:"http://www.w3.org/2000/svg",height:"24",viewBox:"0 0 24 24",width:"24",style:{fontSize:"1em",width:"1em",height:"1em"}},e.createElement("path",{d:"M0 0h24v24H0V0z",fill:"none"}),e.createElement("path",{d:"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"}))))`
  font-size: 1em;
  height: 1em;
  width: 1em;
`,Qr=et.table`
margin-top: 24px;
  display: block;
  overflow-y: auto;
  border-radius: 8px;
  border-spacing: 0;
  border-collapse: collapse;
  min-height: 200px;
  opacity: 0.8;
  height: 80vh;

  @media only screen and (max-width: 768px) {
    width: 80%;
  }

  @media only screen and (min-width: 769px) {
    width: 40vw;
    max-width: 500px;
  }
  
  tbody {
    width: 100%;
    display: table;
  }

  tr:last-child td:first-child {
    border-bottom-left-radius: 8px;
  }
  tr:last-child td:last-child {
    border-bottom-right-radius: 8px;
  }

  tr:first-child th:first-child {
    border-top-left-radius: 8px;
  }
  tr:first-child th:last-child {
    border-top-right-radius: 8px;
  }
  th {
    position: sticky;
    top: 0;
    padding: 0.5em;
    background: #aaaaaa;
    line-height: 1.5em;
    div {
      display: flex;
    }
  }
  tr {
    background: #dbdbdb;
    &:hover {
      background-color: #d7f0fd;
      cursor: pointer;
    }
    &:not(:first-child):not(:last-child) {
      border-bottom: 1px solid #cccccc;
    }
  }

  td {
    padding: 0.25em;
  }
`;var qr=n(9669),Vr=n.n(qr);const Hr=Vr().create({baseURL:"https://playground.tesonet.lt/v1"}),Wr=()=>(0,C.useQuery)(["server-list"],(()=>(async()=>(await(async({...e})=>(Hr.defaults.headers.common.Authorization=`Bearer ${sessionStorage.getItem("token")}`,await Hr(e).then((e=>e))))({method:"GET",url:"/servers"})).data)())),Kr=()=>{const{isLoading:t,data:n,isError:r}=Wr(),o=p((e=>e.sort.sortParams)),i=E();if(t)return e.createElement("div",null,"Loading");if(r)return e.createElement("div",null,"Error occurred");const a=e=>{i(zr.sort({column:e}))},u=((e,t)=>"name"===e.orderBy?[...t].sort(((t,n)=>"asc"===e.order?t.name>n.name?1:-1:t.name>n.name?-1:1)):"distance"===e.orderBy?[...t].sort(((t,n)=>"asc"===e.order?t.distance-n.distance:n.distance-t.distance)):t)(o,n);return e.createElement(Qr,null,e.createElement("tbody",null,e.createElement("tr",null,e.createElement(Ur,{onClick:()=>a("name")},e.createElement("div",{"data-testid":"name-header"},e.createElement("span",null,"Name"),e.createElement($r,{$isAscending:"asc"===o.order,$isVisible:"name"===o.orderBy},e.createElement(Br,null)))),e.createElement(Ur,{onClick:()=>a("distance")},e.createElement("div",{"data-testid":"distance-header"},e.createElement("span",null,"Distance"),e.createElement($r,{$isAscending:"asc"===o.order,$isVisible:"distance"===o.orderBy},e.createElement(Br,null))))),u.map((t=>e.createElement("tr",{"data-testid":"data-row",key:t.name+t.distance},e.createElement("td",null,t.name),e.createElement("td",null,t.distance))))))},Zr=et.div`
  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
  height: 100%;
  overflow: auto;
`,Gr=(et.h1`
  white-space: nowrap;
  font-family: "Courier";
  font-size: 2rem;
  font-weight: 600;
  color: #5e87b8;
  width: fit-content;
`,et.div`
  display: flex;
  flex-direction: column;
  //justify-content: center;
  align-items: center;
  height: 100%;
`),Xr=()=>e.createElement(Zr,null,e.createElement(sn,null),e.createElement(Gr,null,e.createElement(Kr,null))),Yr=()=>e.createElement(Lt,{basename:"/"},e.createElement(Nt,null,e.createElement(Tt,{path:"/",element:e.createElement(_t,{to:"/server-list",replace:!0})}),e.createElement(Tt,{path:"/login",element:e.createElement(Yt,null)}),e.createElement(Tt,{element:e.createElement(rn,null)},e.createElement(Tt,{path:"/server-list",element:e.createElement(Xr,null)})),e.createElement(Tt,{path:"/logout",element:e.createElement(nn,null)}),e.createElement(Tt,{path:"*",element:e.createElement(_t,{to:"/",replace:!0})}))),Jr=t=>{const[n,r]=(0,e.useState)(sessionStorage.getItem("token")),[o,i]=(0,e.useState)(),a=!!n;return e.createElement(Vt.Provider,{value:{isLoggedIn:a,login:async(e,t)=>{i(void 0);const n={username:e,password:t};await Vr().post("https://playground.tesonet.lt/v1/tokens",n,{headers:{"Content-Type":"application/json;charset=utf-8"}}).then((e=>{sessionStorage.setItem("token",e.data.token),r(e.data.token)})).catch((e=>{i(e)}))},logout:()=>{sessionStorage.removeItem("token"),r(void 0)},loginError:o}},t.children)},eo=new C.QueryClient({defaultOptions:{queries:{refetchOnWindowFocus:!0,refetchOnMount:!1,refetchOnReconnect:!0,retry:1,staleTime:3e4}}}),to=function(e){var t,n=function(e){return function(e){void 0===e&&(e={});var t=e.thunk,n=void 0===t||t,r=(e.immutableCheck,e.serializableCheck,new Nr);return n&&(function(e){return"boolean"==typeof e}(n)?r.push(Sr):r.push(Sr.withExtraArgument(n.extraArgument))),r}(e)},r=e||{},o=r.reducer,i=void 0===o?void 0:o,a=r.middleware,u=void 0===a?n():a,l=r.devTools,s=void 0===l||l,c=r.preloadedState,f=void 0===c?void 0:c,d=r.enhancers,p=void 0===d?void 0:d;if("function"==typeof i)t=i;else{if(!function(e){if("object"!=typeof e||null===e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return t===n}(i))throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');t=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:hr.INIT}))throw new Error(fr(12));if(void 0===n(void 0,{type:hr.PROBE_UNKNOWN_ACTION()}))throw new Error(fr(13))}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},u=0;u<a.length;u++){var l=a[u],s=n[l],c=e[l],f=s(c,t);if(void 0===f)throw t&&t.type,new Error(fr(14));o[l]=f,r=r||f!==c}return(r=r||a.length!==Object.keys(e).length)?o:e}}(i)}var h=u;"function"==typeof h&&(h=h(n));var m=gr.apply(void 0,h),v=yr;s&&(v=Ar(Tr({trace:!1},"object"==typeof s&&s)));var y=[m];return Array.isArray(p)?y=xr([m],p):"function"==typeof p&&(y=p(y)),vr(t,f,v.apply(void 0,y))}({reducer:{sort:Mr}}),no=to;(0,t.s)(document.getElementById("root")).render(e.createElement(e.StrictMode,null,e.createElement((function({store:t,context:n,children:r,serverState:o}){const i=(0,e.useMemo)((()=>{const e=function(e,t){let n,r=y;function o(){a.onStateChange&&a.onStateChange()}function i(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){const e=u();let t=null,n=null;return{clear(){t=null,n=null},notify(){e((()=>{let e=t;for(;e;)e.callback(),e=e.next}))},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}const a={addNestedSub:function(e){return i(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:i,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=y)},getListeners:()=>r};return a}(t);return{store:t,subscription:e,getServerState:o?()=>o:void 0}}),[t,o]),a=(0,e.useMemo)((()=>t.getState()),[t]);g((()=>{const{subscription:e}=i;return e.onStateChange=e.notifyNestedSubs,e.trySubscribe(),a!==t.getState()&&e.notifyNestedSubs(),()=>{e.tryUnsubscribe(),e.onStateChange=void 0}}),[i,a]);const s=n||l;return e.createElement(s.Provider,{value:i},r)}),{store:no},e.createElement((()=>e.createElement(Jr,null,e.createElement(C.QueryClientProvider,{client:eo},e.createElement(tt,null),e.createElement(Yr,null)))),null))))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUM4K0QsRUFBTzhlLElBQ0xyRSxHQUFnQixJQUFBbHNDLFVBQVEsSUFBTXl4QixFQUFNSyxZQUFZLENBQUNMLElBQ3ZELEdBQTBCLEtBQ3hCLE1BQU0sYUFDSkMsR0FDRThlLEVBUUosT0FQQTllLEVBQWFpZixjQUFnQmpmLEVBQWFzZixpQkFDMUN0ZixFQUFha2YsZUFFVDFFLElBQWtCemEsRUFBTUssWUFDMUJKLEVBQWFzZixtQkFHUixLQUNMdGYsRUFBYXVmLGlCQUNidmYsRUFBYWlmLG1CQUFnQmgrRSxDQUFTLENBQ3ZDLEdBQ0EsQ0FBQzY5RSxFQUFjdEUsSUFDbEIsTUFBTWhtQixFQUFVN3hELEdBQVcsRUFFM0IsT0FBb0IsZ0JBQW9CNnhELEVBQVFDLFNBQVUsQ0FDeERsMUQsTUFBT3UvRSxHQUNOci9ELEVBQ0wsR0RoQ2EsQ0FBQ3NnRCxNQUFPLElBQ2YsaUJGUU0sSUFFUixnQkFBQzBjLEdBQW1CLEtBQ2xCLGdCQUFDLEVBQUFub0Isb0JBQW1CLENBQUNoTSxPQUFRb1MsSUFDM0IsZ0JBQUNnTSxHQUFXLE1BQ1osZ0JBQUM4VixHQUFTLFNFYlIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL21lcmdlQ29uZmlnLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc0F4aW9zRXJyb3IuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbnVsbC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy92YWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3Mvbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL2ZvY3VzTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL2xvZ2dlci5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9jb3JlL25vdGlmeU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9vbmxpbmVNYW5hZ2VyLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvcXVlcnkuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9xdWVyeUNhY2hlLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvbXV0YXRpb24uanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9tdXRhdGlvbkNhY2hlLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvaW5maW5pdGVRdWVyeUJlaGF2aW9yLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvcXVlcnlDbGllbnQuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9yZXRyeWVyLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvc3Vic2NyaWJhYmxlLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL2NvcmUvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvcmVhY3QvcmVhY3RCYXRjaGVkVXBkYXRlcy5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC9zZXRCYXRjaFVwZGF0ZXNGbi5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC9sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvcmVhY3Qvc2V0TG9nZ2VyLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL3JlYWN0L1F1ZXJ5Q2xpZW50UHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcXVlcnkvZXMvY29yZS9xdWVyeU9ic2VydmVyLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL3JlYWN0L1F1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL3JlYWN0L3VzZVF1ZXJ5LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXF1ZXJ5L2VzL3JlYWN0L3VzZUJhc2VRdWVyeS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1xdWVyeS9lcy9yZWFjdC91dGlscy5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3NoYWxsb3dlcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS93aXRoLXNlbGVjdG9yLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUvc2hpbS93aXRoLXNlbGVjdG9yLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2Uvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9iYXRjaC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlUmVkdXhDb250ZXh0LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVNlbGVjdG9yLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZVN5bmNFeHRlcm5hbFN0b3JlLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTdG9yZS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VEaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9zdHlsaXMvZGlzdC9zdHlsaXMuYnJvd3Nlci5lc20uanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvQGVtb3Rpb24vdW5pdGxlc3MvZGlzdC91bml0bGVzcy5icm93c2VyLmVzbS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9tZW1vaXplL2Rpc3QvZW1vdGlvbi1tZW1vaXplLmVzbS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9AZW1vdGlvbi9pcy1wcm9wLXZhbGlkL2Rpc3QvZW1vdGlvbi1pcy1wcm9wLXZhbGlkLmVzbS5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9zdHlsZWQtY29tcG9uZW50cy9kaXN0L3N0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL0FwcC5zdHlsZWQudHMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9pbmRleC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21tb24vQ2FyZC9DYXJkLnN0eWxlZC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tbW9uL0NhcmQvQ2FyZC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tbW9uL0J1dHRvbi9CdXR0b24uc3R5bGVkLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Db21tb24vQnV0dG9uL0J1dHRvbi50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tbW9uL0Vycm9yL1ZhbGlkYXRpb25FcnJvci5zdHlsZWQudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL0NvbW1vbi9FcnJvci9WYWxpZGF0aW9uRXJyb3IudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL0NvbW1vbi9JbnB1dC9JbnB1dC5zdHlsZWQudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL0NvbW1vbi9JbnB1dC9JbnB1dC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tbW9uL0Zvcm0vRm9ybUlucHV0LnN0eWxlZC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tbW9uL0Zvcm0vRm9ybUlucHV0LnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9zdG9yZS9hdXRoL0F1dGhDb250ZXh0LnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Mb2dpbi9Mb2dpbkZvcm0vTG9naW5Gb3JtLnN0eWxlZC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvTG9naW4vTG9naW5Gb3JtL0xvZ2luRm9ybS50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvUGFnZXMvTG9naW4vTG9naW5QYWdlLnN0eWxlZC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvUGFnZXMvTG9naW4vTG9naW5QYWdlLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9QYWdlcy9Mb2dvdXQvTG9nb3V0LnN0eWxlZC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvUGFnZXMvTG9nb3V0L0xvZ291dC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvUm91dGluZy9Qcml2YXRlUm91dGUudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL0NvbW1vbi9JY29ucy9NZW51SWNvbi50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tbW9uL1BhZ2VIZWFkZXIvUGFnZUhlYWRlci5zdHlsZWQudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL2hvb2tzL3VzZU91dHNpZGVDbGljay50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tbW9uL1BhZ2VIZWFkZXIvUGFnZUhlYWRlci50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbW1lci5lc20ubWpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIuanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvcmVkdXgtdGh1bmsvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9ub2RlX21vZHVsZXMvQHJlZHV4anMvdG9vbGtpdC9kaXN0L3JlZHV4LXRvb2xraXQuZXNtLmpzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL3N0b3JlL3JlZHV4L3NvcnQudHMiLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvU2VydmVyTGlzdC9TZXJ2ZXJMaXN0LnN0eWxlZC50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvQ29tbW9uL0ljb25zL0Fycm93VXBJY29uLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy91dGlscy9heGlvcy51dGlscy50cyIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9TZXJ2ZXJMaXN0L1NlcnZlckxpc3RTZXJ2aWNlLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9TZXJ2ZXJMaXN0L1NlcnZlckxpc3QudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL1BhZ2VzL1NlcnZlckxpc3QvU2VydmVyTGlzdFBhZ2Uuc3R5bGVkLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9QYWdlcy9TZXJ2ZXJMaXN0L1NlcnZlckxpc3RQYWdlLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9Sb3V0aW5nL0FwcFJvdXRlci50c3giLCJ3ZWJwYWNrOi8vbnMtZXhlcmNpc2UvLi9zcmMvc3RvcmUvYXV0aC9BdXRoQ29udGV4dFByb3ZpZGVyLnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL3NyYy9BcHAudHN4Iiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL3N0b3JlL3JlZHV4L2luZGV4LnRzIiwid2VicGFjazovL25zLWV4ZXJjaXNlLy4vc3JjL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9ucy1leGVyY2lzZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL1Byb3ZpZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbCcpO1xudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciBDYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3InKTtcbnZhciBwYXJzZVByb3RvY29sID0gcmVxdWlyZSgnLi4vaGVscGVycy9wYXJzZVByb3RvY29sJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24geGhyQWRhcHRlcihjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICB2YXIgcmVxdWVzdEhlYWRlcnMgPSBjb25maWcuaGVhZGVycztcbiAgICB2YXIgcmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB2YXIgb25DYW5jZWxlZDtcbiAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgICBjb25maWcuY2FuY2VsVG9rZW4udW5zdWJzY3JpYmUob25DYW5jZWxlZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkgJiYgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8ICByZXNwb25zZVR5cGUgPT09ICdqc29uJyA/XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUZXh0IDogcmVxdWVzdC5yZXNwb25zZTtcbiAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShmdW5jdGlvbiBfcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgZnVuY3Rpb24gX3JlamVjdChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKCdvbmxvYWRlbmQnIGluIHJlcXVlc3QpIHtcbiAgICAgIC8vIFVzZSBvbmxvYWRlbmQgaWYgYXZhaWxhYmxlXG4gICAgICByZXF1ZXN0Lm9ubG9hZGVuZCA9IG9ubG9hZGVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZSB0byBlbXVsYXRlIG9ubG9hZGVuZFxuICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAgIC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG4gICAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlYWR5c3RhdGUgaGFuZGxlciBpcyBjYWxsaW5nIGJlZm9yZSBvbmVycm9yIG9yIG9udGltZW91dCBoYW5kbGVycyxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGNhbGwgb25sb2FkZW5kIG9uIHRoZSBuZXh0ICd0aWNrJ1xuICAgICAgICBzZXRUaW1lb3V0KG9ubG9hZGVuZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBicm93c2VyIHJlcXVlc3QgY2FuY2VsbGF0aW9uIChhcyBvcHBvc2VkIHRvIGEgbWFudWFsIGNhbmNlbGxhdGlvbilcbiAgICByZXF1ZXN0Lm9uYWJvcnQgPSBmdW5jdGlvbiBoYW5kbGVBYm9ydCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignUmVxdWVzdCBhYm9ydGVkJywgQXhpb3NFcnJvci5FQ09OTkFCT1JURUQsIGNvbmZpZywgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcignTmV0d29yayBFcnJvcicsIEF4aW9zRXJyb3IuRVJSX05FVFdPUkssIGNvbmZpZywgcmVxdWVzdCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICB2YXIgdGltZW91dEVycm9yTWVzc2FnZSA9IGNvbmZpZy50aW1lb3V0ID8gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJyA6ICd0aW1lb3V0IGV4Y2VlZGVkJztcbiAgICAgIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihmdWxsUGF0aCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgIGNvb2tpZXMucmVhZChjb25maWcueHNyZkNvb2tpZU5hbWUpIDpcbiAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnLndpdGhDcmVkZW50aWFscykpIHtcbiAgICAgIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gISFjb25maWcud2l0aENyZWRlbnRpYWxzO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAocmVzcG9uc2VUeXBlICYmIHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbiB8fCBjb25maWcuc2lnbmFsKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgICAgb25DYW5jZWxlZCA9IGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgKGNhbmNlbCAmJiBjYW5jZWwudHlwZSkgPyBuZXcgQ2FuY2VsZWRFcnJvcigpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcmVxdWVzdERhdGEpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG9jb2wgPSBwYXJzZVByb3RvY29sKGZ1bGxQYXRoKTtcblxuICAgIGlmIChwcm90b2NvbCAmJiBbICdodHRwJywgJ2h0dHBzJywgJ2ZpbGUnIF0uaW5kZXhPZihwcm90b2NvbCkgPT09IC0xKSB7XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1Vuc3VwcG9ydGVkIHByb3RvY29sICcgKyBwcm90b2NvbCArICc6JywgQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIGNvbmZpZykpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvcicpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuYXhpb3MuVkVSU0lPTiA9IHJlcXVpcmUoJy4vZW52L2RhdGEnKS52ZXJzaW9uO1xuYXhpb3MudG9Gb3JtRGF0YSA9IHJlcXVpcmUoJy4vaGVscGVycy90b0Zvcm1EYXRhJyk7XG5cbi8vIEV4cG9zZSBBeGlvc0Vycm9yIGNsYXNzXG5heGlvcy5BeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vbGliL2NvcmUvQXhpb3NFcnJvcicpO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxuLy8gRXhwb3NlIGlzQXhpb3NFcnJvclxuYXhpb3MuaXNBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzQXhpb3NFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF4aW9zO1xuXG4vLyBBbGxvdyB1c2Ugb2YgZGVmYXVsdCBpbXBvcnQgc3ludGF4IGluIFR5cGVTY3JpcHRcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBheGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbGVkRXJyb3IgPSByZXF1aXJlKCcuL0NhbmNlbGVkRXJyb3InKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuXG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuKGZ1bmN0aW9uKGNhbmNlbCkge1xuICAgIGlmICghdG9rZW4uX2xpc3RlbmVycykgcmV0dXJuO1xuXG4gICAgdmFyIGk7XG4gICAgdmFyIGwgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICB9XG4gICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHRoaXMucHJvbWlzZS50aGVuID0gZnVuY3Rpb24ob25mdWxmaWxsZWQpIHtcbiAgICB2YXIgX3Jlc29sdmU7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgdG9rZW4udW5zdWJzY3JpYmUoX3Jlc29sdmUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfTtcblxuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZSB0byB0aGUgY2FuY2VsIHNpZ25hbFxuICovXG5cbkNhbmNlbFRva2VuLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgfVxufTtcblxuLyoqXG4gKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdW5zdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsZWRFcnJvcmAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWxlZEVycm9yKG1lc3NhZ2UpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVxLW51bGwsZXFlcWVxXG4gIEF4aW9zRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlID09IG51bGwgPyAnY2FuY2VsZWQnIDogbWVzc2FnZSwgQXhpb3NFcnJvci5FUlJfQ0FOQ0VMRUQpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsZWRFcnJvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuL2J1aWxkRnVsbFBhdGgnKTtcbnZhciB2YWxpZGF0b3IgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3ZhbGlkYXRvcicpO1xuXG52YXIgdmFsaWRhdG9ycyA9IHZhbGlkYXRvci52YWxpZGF0b3JzO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gQXhpb3MoaW5zdGFuY2VDb25maWcpIHtcbiAgdGhpcy5kZWZhdWx0cyA9IGluc3RhbmNlQ29uZmlnO1xuICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICByZXF1ZXN0OiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKCksXG4gICAgcmVzcG9uc2U6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKVxuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyBzcGVjaWZpYyBmb3IgdGhpcyByZXF1ZXN0IChtZXJnZWQgd2l0aCB0aGlzLmRlZmF1bHRzKVxuICovXG5BeGlvcy5wcm90b3R5cGUucmVxdWVzdCA9IGZ1bmN0aW9uIHJlcXVlc3QoY29uZmlnT3JVcmwsIGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZ09yVXJsID09PSAnc3RyaW5nJykge1xuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnT3JVcmwgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIHZhciB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsO1xuXG4gIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHRyYW5zaXRpb25hbCwge1xuICAgICAgc2lsZW50SlNPTlBhcnNpbmc6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbiksXG4gICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGNsYXJpZnlUaW1lb3V0RXJyb3I6IHZhbGlkYXRvcnMudHJhbnNpdGlvbmFsKHZhbGlkYXRvcnMuYm9vbGVhbilcbiAgICB9LCBmYWxzZSk7XG4gIH1cblxuICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gIHZhciByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICB2YXIgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB2YXIgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciBwcm9taXNlO1xuXG4gIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcblxuICAgIEFycmF5LnByb3RvdHlwZS51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgY2hhaW4gPSBjaGFpbi5jb25jYXQocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluKTtcblxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cblxuICB2YXIgbmV3Q29uZmlnID0gY29uZmlnO1xuICB3aGlsZSAocmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgdmFyIG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB2YXIgb25SZWplY3RlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCk7XG4gICAgdHJ5IHtcbiAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG9uUmVqZWN0ZWQoZXJyb3IpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdHJ5IHtcbiAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0KG5ld0NvbmZpZyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfVxuXG4gIHdoaWxlIChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSwgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICB2YXIgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgaGVhZGVyczogaXNGb3JtID8ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSdcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfSkpO1xuICAgIH07XG4gIH1cblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCgpO1xuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2QgKyAnRm9ybSddID0gZ2VuZXJhdGVIVFRQTWV0aG9kKHRydWUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIEF4aW9zRXJyb3IobWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICB0aGlzLm5hbWUgPSAnQXhpb3NFcnJvcic7XG4gIGNvZGUgJiYgKHRoaXMuY29kZSA9IGNvZGUpO1xuICBjb25maWcgJiYgKHRoaXMuY29uZmlnID0gY29uZmlnKTtcbiAgcmVxdWVzdCAmJiAodGhpcy5yZXF1ZXN0ID0gcmVxdWVzdCk7XG4gIHJlc3BvbnNlICYmICh0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2UpO1xufVxuXG51dGlscy5pbmhlcml0cyhBeGlvc0Vycm9yLCBFcnJvciwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gU3RhbmRhcmRcbiAgICAgIG1lc3NhZ2U6IHRoaXMubWVzc2FnZSxcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIC8vIE1pY3Jvc29mdFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBudW1iZXI6IHRoaXMubnVtYmVyLFxuICAgICAgLy8gTW96aWxsYVxuICAgICAgZmlsZU5hbWU6IHRoaXMuZmlsZU5hbWUsXG4gICAgICBsaW5lTnVtYmVyOiB0aGlzLmxpbmVOdW1iZXIsXG4gICAgICBjb2x1bW5OdW1iZXI6IHRoaXMuY29sdW1uTnVtYmVyLFxuICAgICAgc3RhY2s6IHRoaXMuc3RhY2ssXG4gICAgICAvLyBBeGlvc1xuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH1cbn0pO1xuXG52YXIgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG52YXIgZGVzY3JpcHRvcnMgPSB7fTtcblxuW1xuICAnRVJSX0JBRF9PUFRJT05fVkFMVUUnLFxuICAnRVJSX0JBRF9PUFRJT04nLFxuICAnRUNPTk5BQk9SVEVEJyxcbiAgJ0VUSU1FRE9VVCcsXG4gICdFUlJfTkVUV09SSycsXG4gICdFUlJfRlJfVE9PX01BTllfUkVESVJFQ1RTJyxcbiAgJ0VSUl9ERVBSRUNBVEVEJyxcbiAgJ0VSUl9CQURfUkVTUE9OU0UnLFxuICAnRVJSX0JBRF9SRVFVRVNUJyxcbiAgJ0VSUl9DQU5DRUxFRCdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5dLmZvckVhY2goZnVuY3Rpb24oY29kZSkge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gZnVuY3Rpb24oZXJyb3IsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UsIGN1c3RvbVByb3BzKSB7XG4gIHZhciBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSk7XG5cbiAgQXhpb3NFcnJvci5jYWxsKGF4aW9zRXJyb3IsIGVycm9yLm1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkLFxuICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgIHJ1bldoZW46IG9wdGlvbnMgPyBvcHRpb25zLnJ1bldoZW4gOiBudWxsXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi4vaGVscGVycy9jb21iaW5lVVJMcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgYmFzZVVSTCB3aXRoIHRoZSByZXF1ZXN0ZWRVUkwsXG4gKiBvbmx5IHdoZW4gdGhlIHJlcXVlc3RlZFVSTCBpcyBub3QgYWxyZWFkeSBhbiBhYnNvbHV0ZSBVUkwuXG4gKiBJZiB0aGUgcmVxdWVzdFVSTCBpcyBhYnNvbHV0ZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSByZXF1ZXN0ZWRVUkwgdW50b3VjaGVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RlZFVSTCBBYnNvbHV0ZSBvciByZWxhdGl2ZSBVUkwgdG8gY29tYmluZVxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIGZ1bGwgcGF0aFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcbnZhciBDYW5jZWxlZEVycm9yID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3InKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcigpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNcbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGNvbmZpZzFbcHJvcF0sIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMltwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzFbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtZXJnZU1hcCA9IHtcbiAgICAndXJsJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnbWV0aG9kJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnZGF0YSc6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgJ2Jhc2VVUkwnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXF1ZXN0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndHJhbnNmb3JtUmVzcG9uc2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdwYXJhbXNTZXJpYWxpemVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RpbWVvdXRNZXNzYWdlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnd2l0aENyZWRlbnRpYWxzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYWRhcHRlcic6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3Jlc3BvbnNlVHlwZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3hzcmZDb29raWVOYW1lJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkhlYWRlck5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvblVwbG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnb25Eb3dubG9hZFByb2dyZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnZGVjb21wcmVzcyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdtYXhCb2R5TGVuZ3RoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnYmVmb3JlUmVkaXJlY3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc3BvcnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwc0FnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnY2FuY2VsVG9rZW4nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdzb2NrZXRQYXRoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VFbmNvZGluZyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJzogbWVyZ2VEaXJlY3RLZXlzXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIHZhciBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgdmFyIGNvbmZpZ1ZhbHVlID0gbWVyZ2UocHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuL0F4aW9zRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIFtBeGlvc0Vycm9yLkVSUl9CQURfUkVRVUVTVCwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFXVtNYXRoLmZsb29yKHJlc3BvbnNlLnN0YXR1cyAvIDEwMCkgLSA0XSxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgZGF0YSBmb3IgYSByZXF1ZXN0IG9yIGEgcmVzcG9uc2VcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxTdHJpbmd9IGRhdGEgVGhlIGRhdGEgdG8gYmUgdHJhbnNmb3JtZWRcbiAqIEBwYXJhbSB7QXJyYXl9IGhlYWRlcnMgVGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0IG9yIHJlc3BvbnNlXG4gKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufSBmbnMgQSBzaW5nbGUgZnVuY3Rpb24gb3IgQXJyYXkgb2YgZnVuY3Rpb25zXG4gKiBAcmV0dXJucyB7Kn0gVGhlIHJlc3VsdGluZyB0cmFuc2Zvcm1lZCBkYXRhXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdHJhbnNmb3JtRGF0YShkYXRhLCBoZWFkZXJzLCBmbnMpIHtcbiAgdmFyIGNvbnRleHQgPSB0aGlzIHx8IGRlZmF1bHRzO1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbi5jYWxsKGNvbnRleHQsIGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xudmFyIEF4aW9zRXJyb3IgPSByZXF1aXJlKCcuLi9jb3JlL0F4aW9zRXJyb3InKTtcbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHJlcXVpcmUoJy4vdHJhbnNpdGlvbmFsJyk7XG52YXIgdG9Gb3JtRGF0YSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4uL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHZhciBpc09iamVjdFBheWxvYWQgPSB1dGlscy5pc09iamVjdChkYXRhKTtcbiAgICB2YXIgY29udGVudFR5cGUgPSBoZWFkZXJzICYmIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddO1xuXG4gICAgdmFyIGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscy5pc0ZpbGVMaXN0KGRhdGEpKSB8fCAoaXNPYmplY3RQYXlsb2FkICYmIGNvbnRlbnRUeXBlID09PSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScpKSB7XG4gICAgICB2YXIgX0Zvcm1EYXRhID0gdGhpcy5lbnYgJiYgdGhpcy5lbnYuRm9ybURhdGE7XG4gICAgICByZXR1cm4gdG9Gb3JtRGF0YShpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLCBfRm9ybURhdGEgJiYgbmV3IF9Gb3JtRGF0YSgpKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0UGF5bG9hZCB8fCBjb250ZW50VHlwZSA9PT0gJ2FwcGxpY2F0aW9uL2pzb24nKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIHZhciB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgdmFyIHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICB2YXIgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIHZhciBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHN0cmljdEpTT05QYXJzaW5nIHx8IChmb3JjZWRKU09OUGFyc2luZyAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiBkYXRhLmxlbmd0aCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHJlcXVpcmUoJy4vZW52L0Zvcm1EYXRhJylcbiAgfSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9LFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4yNy4yXCJcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBwYXlsb2FkIGlzIGFuIGVycm9yIHRocm93biBieSBBeGlvcywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzdHJpY3Rcbm1vZHVsZS5leHBvcnRzID0gbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VQcm90b2NvbCh1cmwpIHtcbiAgdmFyIG1hdGNoID0gL14oWy0rXFx3XXsxLDI1fSkoOj9cXC9cXC98OikvLmV4ZWModXJsKTtcbiAgcmV0dXJuIG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7P09iamVjdH0gW2Zvcm1EYXRhXVxuICogQHJldHVybnMge09iamVjdH1cbiAqKi9cblxuZnVuY3Rpb24gdG9Gb3JtRGF0YShvYmosIGZvcm1EYXRhKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyBGb3JtRGF0YSgpO1xuXG4gIHZhciBzdGFjayA9IFtdO1xuXG4gIGZ1bmN0aW9uIGNvbnZlcnRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICcnO1xuXG4gICAgaWYgKHV0aWxzLmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS50b0lTT1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgPyBuZXcgQmxvYihbdmFsdWVdKSA6IEJ1ZmZlci5mcm9tKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZChkYXRhLCBwYXJlbnRLZXkpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChkYXRhKSB8fCB1dGlscy5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBpZiAoc3RhY2suaW5kZXhPZihkYXRhKSAhPT0gLTEpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGFyZW50S2V5KTtcbiAgICAgIH1cblxuICAgICAgc3RhY2sucHVzaChkYXRhKTtcblxuICAgICAgdXRpbHMuZm9yRWFjaChkYXRhLCBmdW5jdGlvbiBlYWNoKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICB2YXIgZnVsbEtleSA9IHBhcmVudEtleSA/IHBhcmVudEtleSArICcuJyArIGtleSA6IGtleTtcbiAgICAgICAgdmFyIGFycjtcblxuICAgICAgICBpZiAodmFsdWUgJiYgIXBhcmVudEtleSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaWYgKHV0aWxzLmVuZHNXaXRoKGtleSwgJ3t9JykpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh1dGlscy5lbmRzV2l0aChrZXksICdbXScpICYmIChhcnIgPSB1dGlscy50b0FycmF5KHZhbHVlKSkpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgICAhdXRpbHMuaXNVbmRlZmluZWQoZWwpICYmIGZvcm1EYXRhLmFwcGVuZChmdWxsS2V5LCBjb252ZXJ0VmFsdWUoZWwpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJ1aWxkKHZhbHVlLCBmdWxsS2V5KTtcbiAgICAgIH0pO1xuXG4gICAgICBzdGFjay5wb3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKHBhcmVudEtleSwgY29udmVydFZhbHVlKGRhdGEpKTtcbiAgICB9XG4gIH1cblxuICBidWlsZChvYmopO1xuXG4gIHJldHVybiBmb3JtRGF0YTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2Vudi9kYXRhJykudmVyc2lvbjtcbnZhciBBeGlvc0Vycm9yID0gcmVxdWlyZSgnLi4vY29yZS9BeGlvc0Vycm9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaChmdW5jdGlvbih0eXBlLCBpKSB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG52YXIgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvcHQsIG9wdHMpIHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSxcbiAgICAgICAgQXhpb3NFcnJvci5FUlJfREVQUkVDQVRFRFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvbiAmJiAhZGVwcmVjYXRlZFdhcm5pbmdzW29wdF0pIHtcbiAgICAgIGRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdID0gdHJ1ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGZvcm1hdE1lc3NhZ2UoXG4gICAgICAgICAgb3B0LFxuICAgICAgICAgICcgaGFzIGJlZW4gZGVwcmVjYXRlZCBzaW5jZSB2JyArIHZlcnNpb24gKyAnIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlJ1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWxpZGF0b3IgPyB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0cykgOiB0cnVlO1xuICB9O1xufTtcblxuLyoqXG4gKiBBc3NlcnQgb2JqZWN0J3MgcHJvcGVydGllcyB0eXBlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtvYmplY3R9IHNjaGVtYVxuICogQHBhcmFtIHtib29sZWFuP30gYWxsb3dVbmtub3duXG4gKi9cblxuZnVuY3Rpb24gYXNzZXJ0T3B0aW9ucyhvcHRpb25zLCBzY2hlbWEsIGFsbG93VW5rbm93bikge1xuICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnLCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIHZhciBvcHQgPSBrZXlzW2ldO1xuICAgIHZhciB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb24gJyArIG9wdCArICcgbXVzdCBiZSAnICsgcmVzdWx0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OX1ZBTFVFKTtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAoYWxsb3dVbmtub3duICE9PSB0cnVlKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignVW5rbm93biBvcHRpb24gJyArIG9wdCwgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTik7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBhc3NlcnRPcHRpb25zOiBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzOiB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG52YXIga2luZE9mID0gKGZ1bmN0aW9uKGNhY2hlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih0aGluZykge1xuICAgIHZhciBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG4gIH07XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuZnVuY3Rpb24ga2luZE9mVGVzdCh0eXBlKSB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBmdW5jdGlvbiBpc0tpbmRPZih0aGluZykge1xuICAgIHJldHVybiBraW5kT2YodGhpbmcpID09PSB0eXBlO1xuICB9O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmIChraW5kT2YodmFsKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBmdW5jdGlvblxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xudmFyIGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0ZpbGUgPSBraW5kT2ZUZXN0KCdGaWxlJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbnZhciBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodGhpbmcpIHtcbiAgdmFyIHBhdHRlcm4gPSAnW29iamVjdCBGb3JtRGF0YV0nO1xuICByZXR1cm4gdGhpbmcgJiYgKFxuICAgICh0eXBlb2YgRm9ybURhdGEgPT09ICdmdW5jdGlvbicgJiYgdGhpbmcgaW5zdGFuY2VvZiBGb3JtRGF0YSkgfHxcbiAgICB0b1N0cmluZy5jYWxsKHRoaW5nKSA9PT0gcGF0dGVybiB8fFxuICAgIChpc0Z1bmN0aW9uKHRoaW5nLnRvU3RyaW5nKSAmJiB0aGluZy50b1N0cmluZygpID09PSBwYXR0ZXJuKVxuICApO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG52YXIgaXNVUkxTZWFyY2hQYXJhbXMgPSBraW5kT2ZUZXN0KCdVUkxTZWFyY2hQYXJhbXMnKTtcblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnRyaW0gPyBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqL1xuXG5mdW5jdGlvbiBpbmhlcml0cyhjb25zdHJ1Y3Rvciwgc3VwZXJDb25zdHJ1Y3RvciwgcHJvcHMsIGRlc2NyaXB0b3JzKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIGRlc2NyaXB0b3JzKTtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtmaWx0ZXJdXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIHRvRmxhdE9iamVjdChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlcikge1xuICB2YXIgcHJvcHM7XG4gIHZhciBpO1xuICB2YXIgcHJvcDtcbiAgdmFyIG1lcmdlZCA9IHt9O1xuXG4gIGRlc3RPYmogPSBkZXN0T2JqIHx8IHt9O1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHNvdXJjZU9iaik7XG4gIH0gd2hpbGUgKHNvdXJjZU9iaiAmJiAoIWZpbHRlciB8fCBmaWx0ZXIoc291cmNlT2JqLCBkZXN0T2JqKSkgJiYgc291cmNlT2JqICE9PSBPYmplY3QucHJvdG90eXBlKTtcblxuICByZXR1cm4gZGVzdE9iajtcbn1cblxuLypcbiAqIGRldGVybWluZXMgd2hldGhlciBhIHN0cmluZyBlbmRzIHdpdGggdGhlIGNoYXJhY3RlcnMgb2YgYSBzcGVjaWZpZWQgc3RyaW5nXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGVuZHNXaXRoKHN0ciwgc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQgfHwgcG9zaXRpb24gPiBzdHIubGVuZ3RoKSB7XG4gICAgcG9zaXRpb24gPSBzdHIubGVuZ3RoO1xuICB9XG4gIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gIHZhciBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3RcbiAqIEBwYXJhbSB7Kn0gW3RoaW5nXVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5mdW5jdGlvbiB0b0FycmF5KHRoaW5nKSB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICB2YXIgaSA9IHRoaW5nLmxlbmd0aDtcbiAgaWYgKGlzVW5kZWZpbmVkKGkpKSByZXR1cm4gbnVsbDtcbiAgdmFyIGFyciA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSA+IDApIHtcbiAgICBhcnJbaV0gPSB0aGluZ1tpXTtcbiAgfVxuICByZXR1cm4gYXJyO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xudmFyIGlzVHlwZWRBcnJheSA9IChmdW5jdGlvbihUeXBlZEFycmF5KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiBmdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiBUeXBlZEFycmF5ICYmIHRoaW5nIGluc3RhbmNlb2YgVHlwZWRBcnJheTtcbiAgfTtcbn0pKHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NLFxuICBpbmhlcml0czogaW5oZXJpdHMsXG4gIHRvRmxhdE9iamVjdDogdG9GbGF0T2JqZWN0LFxuICBraW5kT2Y6IGtpbmRPZixcbiAga2luZE9mVGVzdDoga2luZE9mVGVzdCxcbiAgZW5kc1dpdGg6IGVuZHNXaXRoLFxuICB0b0FycmF5OiB0b0FycmF5LFxuICBpc1R5cGVkQXJyYXk6IGlzVHlwZWRBcnJheSxcbiAgaXNGaWxlTGlzdDogaXNGaWxlTGlzdFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksY2E9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBwKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBkYT1uZXcgU2V0LGVhPXt9O2Z1bmN0aW9uIGZhKGEsYil7aGEoYSxiKTtoYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gaGEoYSxiKXtlYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspZGEuYWRkKGJbYV0pfVxudmFyIGlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxqYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGthPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxsYT1cbnt9LG1hPXt9O2Z1bmN0aW9uIG9hKGEpe2lmKGphLmNhbGwobWEsYSkpcmV0dXJuITA7aWYoamEuY2FsbChsYSxhKSlyZXR1cm4hMTtpZihrYS50ZXN0KGEpKXJldHVybiBtYVthXT0hMDtsYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIHo9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07eltiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciByYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLFxuc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuei54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gdGEoYSxiLGMsZCl7dmFyIGU9ei5oYXNPd25Qcm9wZXJ0eShiKT96W2JdOm51bGw7aWYobnVsbCE9PWU/MCE9PWUudHlwZTpkfHwhKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0pcWEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP29hKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKX1cbnZhciB1YT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCx2YT1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSx3YT1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHlhPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSx6YT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLEJhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxDYT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksRWE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLEZhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLEdhPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLEhhPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtcbnZhciBJYT1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5jYWNoZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7dmFyIEphPVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBLYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9SmEmJmFbSmFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIEE9T2JqZWN0LmFzc2lnbixMYTtmdW5jdGlvbiBNYShhKXtpZih2b2lkIDA9PT1MYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtMYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTGErYX12YXIgTmE9ITE7XG5mdW5jdGlvbiBPYShhLGIpe2lmKCFhfHxOYSlyZXR1cm5cIlwiO05hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChsKXt2YXIgZD1sfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2gobCl7ZD1sfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2gobCl7ZD1sfWEoKX19Y2F0Y2gobCl7aWYobCYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBsLnN0YWNrKXtmb3IodmFyIGU9bC5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXt2YXIgaz1cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO2EuZGlzcGxheU5hbWUmJmsuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSYmKGs9ay5yZXBsYWNlKFwiPGFub255bW91cz5cIixhLmRpc3BsYXlOYW1lKSk7cmV0dXJuIGt9d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e05hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TWEoYSk6XCJcIn1cbmZ1bmN0aW9uIFBhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBNYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE1hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBNYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE1hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1PYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1PYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1PYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFFhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2Ugd2E6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIEFhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHphOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgRWE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgRmE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQ2E6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgQmE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgRGE6dmFyIGI9YS5yZW5kZXI7YT1hLmRpc3BsYXlOYW1lO2F8fChhPWIuZGlzcGxheU5hbWV8fFxuYi5uYW1lfHxcIlwiLGE9XCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO3JldHVybiBhO2Nhc2UgR2E6cmV0dXJuIGI9YS5kaXNwbGF5TmFtZXx8bnVsbCxudWxsIT09Yj9iOlFhKGEudHlwZSl8fFwiTWVtb1wiO2Nhc2UgSGE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFFhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSYShhKXt2YXIgYj1hLnR5cGU7c3dpdGNoKGEudGFnKXtjYXNlIDI0OnJldHVyblwiQ2FjaGVcIjtjYXNlIDk6cmV0dXJuKGIuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgMTA6cmV0dXJuKGIuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgMTg6cmV0dXJuXCJEZWh5ZHJhdGVkRnJhZ21lbnRcIjtjYXNlIDExOnJldHVybiBhPWIucmVuZGVyLGE9YS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIlwiLGIuZGlzcGxheU5hbWV8fChcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSA3OnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA0OnJldHVyblwiUG9ydGFsXCI7Y2FzZSAzOnJldHVyblwiUm9vdFwiO2Nhc2UgNjpyZXR1cm5cIlRleHRcIjtjYXNlIDE2OnJldHVybiBRYShiKTtjYXNlIDg6cmV0dXJuIGI9PT16YT9cIlN0cmljdE1vZGVcIjpcIk1vZGVcIjtjYXNlIDIyOnJldHVyblwiT2Zmc2NyZWVuXCI7XG5jYXNlIDEyOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIDIxOnJldHVyblwiU2NvcGVcIjtjYXNlIDEzOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIDE5OnJldHVyblwiU3VzcGVuc2VMaXN0XCI7Y2FzZSAyNTpyZXR1cm5cIlRyYWNpbmdNYXJrZXJcIjtjYXNlIDE6Y2FzZSAwOmNhc2UgMTc6Y2FzZSAyOmNhc2UgMTQ6Y2FzZSAxNTppZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7Y2FzZSBcIm9iamVjdFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gYWIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYmIoYSxiKXthYihhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2NiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmNiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gZGIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBlYj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IocCg5MSkpO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHAoOTIpKTtpZihlYihjKSl7aWYoMTxjLmxlbmd0aCl0aHJvdyBFcnJvcihwKDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX1mdW5jdGlvbiBrYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxuZnVuY3Rpb24gbGIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2tiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG1iLG5iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIhPT1hLm5hbWVzcGFjZVVSSXx8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle21iPW1ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO21iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW1iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIG9iKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcGI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGFzcGVjdFJhdGlvOiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCxcbnpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scWI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHBiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3FiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cGJbYl09cGJbYV19KX0pO2Z1bmN0aW9uIHJiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxwYi5oYXNPd25Qcm9wZXJ0eShhKSYmcGJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gc2IoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9cmIoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdGI9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHViKGEsYil7aWYoYil7aWYodGJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcihwKDYwKSk7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfHwhKFwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcihwKDYyKSk7fX1cbmZ1bmN0aW9uIHZiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgd2I9bnVsbDtmdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHAoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKCl7fXZhciBJYj0hMTtmdW5jdGlvbiBKYihhLGIsYyl7aWYoSWIpcmV0dXJuIGEoYixjKTtJYj0hMDt0cnl7cmV0dXJuIEdiKGEsYixjKX1maW5hbGx5e2lmKEliPSExLG51bGwhPT16Ynx8bnVsbCE9PUFiKUhiKCksRmIoKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHAoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgTGI9ITE7aWYoaWEpdHJ5e3ZhciBNYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe0xiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYil9Y2F0Y2goYSl7TGI9ITF9ZnVuY3Rpb24gTmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIE9iPSExLFBiPW51bGwsUWI9ITEsUmI9bnVsbCxTYj17b25FcnJvcjpmdW5jdGlvbihhKXtPYj0hMDtQYj1hfX07ZnVuY3Rpb24gVGIoYSxiLGMsZCxlLGYsZyxoLGspe09iPSExO1BiPW51bGw7TmIuYXBwbHkoU2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFViKGEsYixjLGQsZSxmLGcsaCxrKXtUYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoT2Ipe2lmKE9iKXt2YXIgbD1QYjtPYj0hMTtQYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IocCgxOTgpKTtRYnx8KFFiPSEwLFJiPWwpfX1mdW5jdGlvbiBWYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmNDA5OCkmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIFdiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGIoYSl7aWYoVmIoYSkhPT1hKXRocm93IEVycm9yKHAoMTg4KSk7fVxuZnVuY3Rpb24gWWIoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9VmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gWGIoZSksYTtpZihmPT09ZClyZXR1cm4gWGIoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcihwKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHAoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IocCgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBaYihhKXthPVliKGEpO3JldHVybiBudWxsIT09YT8kYihhKTpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhO2ZvcihhPWEuY2hpbGQ7bnVsbCE9PWE7KXt2YXIgYj0kYihhKTtpZihudWxsIT09YilyZXR1cm4gYjthPWEuc2libGluZ31yZXR1cm4gbnVsbH1cbnZhciBhYz1jYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGJjPWNhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLGNjPWNhLnVuc3RhYmxlX3Nob3VsZFlpZWxkLGRjPWNhLnVuc3RhYmxlX3JlcXVlc3RQYWludCxCPWNhLnVuc3RhYmxlX25vdyxlYz1jYS51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxmYz1jYS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxnYz1jYS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxoYz1jYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxpYz1jYS51bnN0YWJsZV9Mb3dQcmlvcml0eSxqYz1jYS51bnN0YWJsZV9JZGxlUHJpb3JpdHksa2M9bnVsbCxsYz1udWxsO2Z1bmN0aW9uIG1jKGEpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclJvb3QpdHJ5e2xjLm9uQ29tbWl0RmliZXJSb290KGtjLGEsdm9pZCAwLDEyOD09PShhLmN1cnJlbnQuZmxhZ3MmMTI4KSl9Y2F0Y2goYil7fX1cbnZhciBvYz1NYXRoLmNsejMyP01hdGguY2x6MzI6bmMscGM9TWF0aC5sb2cscWM9TWF0aC5MTjI7ZnVuY3Rpb24gbmMoYSl7YT4+Pj0wO3JldHVybiAwPT09YT8zMjozMS0ocGMoYSkvcWN8MCl8MH12YXIgcmM9NjQsc2M9NDE5NDMwNDtcbmZ1bmN0aW9uIHRjKGEpe3N3aXRjaChhJi1hKXtjYXNlIDE6cmV0dXJuIDE7Y2FzZSAyOnJldHVybiAyO2Nhc2UgNDpyZXR1cm4gNDtjYXNlIDg6cmV0dXJuIDg7Y2FzZSAxNjpyZXR1cm4gMTY7Y2FzZSAzMjpyZXR1cm4gMzI7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYSY0MTk0MjQwO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuIGEmMTMwMDIzNDI0O2Nhc2UgMTM0MjE3NzI4OnJldHVybiAxMzQyMTc3Mjg7Y2FzZSAyNjg0MzU0NTY6cmV0dXJuIDI2ODQzNTQ1NjtjYXNlIDUzNjg3MDkxMjpyZXR1cm4gNTM2ODcwOTEyO2Nhc2UgMTA3Mzc0MTgyNDpyZXR1cm4gMTA3Mzc0MTgyNDtcbmRlZmF1bHQ6cmV0dXJuIGF9fWZ1bmN0aW9uIHVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIDA7dmFyIGQ9MCxlPWEuc3VzcGVuZGVkTGFuZXMsZj1hLnBpbmdlZExhbmVzLGc9YyYyNjg0MzU0NTU7aWYoMCE9PWcpe3ZhciBoPWcmfmU7MCE9PWg/ZD10YyhoKTooZiY9ZywwIT09ZiYmKGQ9dGMoZikpKX1lbHNlIGc9YyZ+ZSwwIT09Zz9kPXRjKGcpOjAhPT1mJiYoZD10YyhmKSk7aWYoMD09PWQpcmV0dXJuIDA7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZSkmJihlPWQmLWQsZj1iJi1iLGU+PWZ8fDE2PT09ZSYmMCE9PShmJjQxOTQyNDApKSlyZXR1cm4gYjswIT09KGQmNCkmJihkfD1jJjE2KTtiPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLW9jKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gdmMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6cmV0dXJuIGIrMjUwO2Nhc2UgODpjYXNlIDE2OmNhc2UgMzI6Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYis1RTM7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4tMTtjYXNlIDEzNDIxNzcyODpjYXNlIDI2ODQzNTQ1NjpjYXNlIDUzNjg3MDkxMjpjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuLTE7ZGVmYXVsdDpyZXR1cm4tMX19XG5mdW5jdGlvbiB3YyhhLGIpe2Zvcih2YXIgYz1hLnN1c3BlbmRlZExhbmVzLGQ9YS5waW5nZWRMYW5lcyxlPWEuZXhwaXJhdGlvblRpbWVzLGY9YS5wZW5kaW5nTGFuZXM7MDxmOyl7dmFyIGc9MzEtb2MoZiksaD0xPDxnLGs9ZVtnXTtpZigtMT09PWspe2lmKDA9PT0oaCZjKXx8MCE9PShoJmQpKWVbZ109dmMoaCxiKX1lbHNlIGs8PWImJihhLmV4cGlyZWRMYW5lc3w9aCk7ZiY9fmh9fWZ1bmN0aW9uIHhjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiB5Yygpe3ZhciBhPXJjO3JjPDw9MTswPT09KHJjJjQxOTQyNDApJiYocmM9NjQpO3JldHVybiBhfWZ1bmN0aW9uIHpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gQWMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iOzUzNjg3MDkxMiE9PWImJihhLnN1c3BlbmRlZExhbmVzPTAsYS5waW5nZWRMYW5lcz0wKTthPWEuZXZlbnRUaW1lcztiPTMxLW9jKGIpO2FbYl09Y31mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzJn5iO2EucGVuZGluZ0xhbmVzPWI7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9YjthLm11dGFibGVSZWFkTGFuZXMmPWI7YS5lbnRhbmdsZWRMYW5lcyY9YjtiPWEuZW50YW5nbGVtZW50czt2YXIgZD1hLmV2ZW50VGltZXM7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxjOyl7dmFyIGU9MzEtb2MoYyksZj0xPDxlO2JbZV09MDtkW2VdPS0xO2FbZV09LTE7YyY9fmZ9fVxuZnVuY3Rpb24gQ2MoYSxiKXt2YXIgYz1hLmVudGFuZ2xlZExhbmVzfD1iO2ZvcihhPWEuZW50YW5nbGVtZW50cztjOyl7dmFyIGQ9MzEtb2MoYyksZT0xPDxkO2UmYnxhW2RdJmImJihhW2RdfD1iKTtjJj1+ZX19dmFyIEM9MDtmdW5jdGlvbiBEYyhhKXthJj0tYTtyZXR1cm4gMTxhPzQ8YT8wIT09KGEmMjY4NDM1NDU1KT8xNjo1MzY4NzA5MTI6NDoxfXZhciBFYyxGYyxHYyxIYyxJYyxKYz0hMSxLYz1bXSxMYz1udWxsLE1jPW51bGwsTmM9bnVsbCxPYz1uZXcgTWFwLFBjPW5ldyBNYXAsUWM9W10sUmM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gU2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpMYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6TWM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6TmM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOk9jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOlBjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gVGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT17YmxvY2tlZE9uOmIsZG9tRXZlbnROYW1lOmMsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmYsdGFyZ2V0Q29udGFpbmVyczpbZV19LG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmRmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gVWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4gTGM9VGMoTGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIE1jPVRjKE1jLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBOYz1UYyhOYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO09jLnNldChmLFRjKE9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxQYy5zZXQoZixUYyhQYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBWYyhhKXt2YXIgYj1XYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVZiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPVdiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO0ljKGEucHJpb3JpdHksZnVuY3Rpb24oKXtHYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiBYYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9WWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbD09PWMpe2M9YS5uYXRpdmVFdmVudDt2YXIgZD1uZXcgYy5jb25zdHJ1Y3RvcihjLnR5cGUsYyk7d2I9ZDtjLnRhcmdldC5kaXNwYXRjaEV2ZW50KGQpO3diPW51bGx9ZWxzZSByZXR1cm4gYj1DYihjKSxudWxsIT09YiYmRmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gWmMoYSxiLGMpe1hjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiAkYygpe0pjPSExO251bGwhPT1MYyYmWGMoTGMpJiYoTGM9bnVsbCk7bnVsbCE9PU1jJiZYYyhNYykmJihNYz1udWxsKTtudWxsIT09TmMmJlhjKE5jKSYmKE5jPW51bGwpO09jLmZvckVhY2goWmMpO1BjLmZvckVhY2goWmMpfVxuZnVuY3Rpb24gYWQoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLEpjfHwoSmM9ITAsY2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhjYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSwkYykpKX1cbmZ1bmN0aW9uIGJkKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIGFkKGIsYSl9aWYoMDxLYy5sZW5ndGgpe2FkKEtjWzBdLGEpO2Zvcih2YXIgYz0xO2M8S2MubGVuZ3RoO2MrKyl7dmFyIGQ9S2NbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1MYyYmYWQoTGMsYSk7bnVsbCE9PU1jJiZhZChNYyxhKTtudWxsIT09TmMmJmFkKE5jLGEpO09jLmZvckVhY2goYik7UGMuZm9yRWFjaChiKTtmb3IoYz0wO2M8UWMubGVuZ3RoO2MrKylkPVFjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxRYy5sZW5ndGgmJihjPVFjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmUWMuc2hpZnQoKX12YXIgY2Q9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsZGQ9ITA7XG5mdW5jdGlvbiBlZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9MSxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fWZ1bmN0aW9uIGdkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz00LGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19XG5mdW5jdGlvbiBmZChhLGIsYyxkKXtpZihkZCl7dmFyIGU9WWMoYSxiLGMsZCk7aWYobnVsbD09PWUpaGQoYSxiLGQsaWQsYyksU2MoYSxkKTtlbHNlIGlmKFVjKGUsYSxiLGMsZCkpZC5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmKFNjKGEsZCksYiY0JiYtMTxSYy5pbmRleE9mKGEpKXtmb3IoO251bGwhPT1lOyl7dmFyIGY9Q2IoZSk7bnVsbCE9PWYmJkVjKGYpO2Y9WWMoYSxiLGMsZCk7bnVsbD09PWYmJmhkKGEsYixkLGlkLGMpO2lmKGY9PT1lKWJyZWFrO2U9Zn1udWxsIT09ZSYmZC5zdG9wUHJvcGFnYXRpb24oKX1lbHNlIGhkKGEsYixkLG51bGwsYyl9fXZhciBpZD1udWxsO1xuZnVuY3Rpb24gWWMoYSxiLGMsZCl7aWQ9bnVsbDthPXhiKGQpO2E9V2MoYSk7aWYobnVsbCE9PWEpaWYoYj1WYihhKSxudWxsPT09YilhPW51bGw7ZWxzZSBpZihjPWIudGFnLDEzPT09Yyl7YT1XYihiKTtpZihudWxsIT09YSlyZXR1cm4gYTthPW51bGx9ZWxzZSBpZigzPT09Yyl7aWYoYi5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClyZXR1cm4gMz09PWIudGFnP2Iuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDthPW51bGx9ZWxzZSBiIT09YSYmKGE9bnVsbCk7aWQ9YTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGpkKGEpe3N3aXRjaChhKXtjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsaWNrXCI6Y2FzZSBcImNsb3NlXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjpjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwia2V5dXBcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwicGFzdGVcIjpjYXNlIFwicGF1c2VcIjpjYXNlIFwicGxheVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmNhc2UgXCJyYXRlY2hhbmdlXCI6Y2FzZSBcInJlc2V0XCI6Y2FzZSBcInJlc2l6ZVwiOmNhc2UgXCJzZWVrZWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjpjYXNlIFwidm9sdW1lY2hhbmdlXCI6Y2FzZSBcImNoYW5nZVwiOmNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpjYXNlIFwidGV4dElucHV0XCI6Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjpjYXNlIFwiYmVmb3JlaW5wdXRcIjpjYXNlIFwiYmx1clwiOmNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImhhc2hjaGFuZ2VcIjpjYXNlIFwicG9wc3RhdGVcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInNlbGVjdHN0YXJ0XCI6cmV0dXJuIDE7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwic2Nyb2xsXCI6Y2FzZSBcInRvZ2dsZVwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwid2hlZWxcIjpjYXNlIFwibW91c2VlbnRlclwiOmNhc2UgXCJtb3VzZWxlYXZlXCI6Y2FzZSBcInBvaW50ZXJlbnRlclwiOmNhc2UgXCJwb2ludGVybGVhdmVcIjpyZXR1cm4gNDtcbmNhc2UgXCJtZXNzYWdlXCI6c3dpdGNoKGVjKCkpe2Nhc2UgZmM6cmV0dXJuIDE7Y2FzZSBnYzpyZXR1cm4gNDtjYXNlIGhjOmNhc2UgaWM6cmV0dXJuIDE2O2Nhc2UgamM6cmV0dXJuIDUzNjg3MDkxMjtkZWZhdWx0OnJldHVybiAxNn1kZWZhdWx0OnJldHVybiAxNn19dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO2Z1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1cbmZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9QShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9QSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPUEoe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPUEoe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPUEoe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1BKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9QSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1BKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9QSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1BKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1BKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9QSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9QSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9aWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9aWEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoaWEpe3ZhciB4ZTtpZihpYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO0piKHJlLGIpfX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlO1xuZnVuY3Rpb24gSWUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07aWYoIWphLmNhbGwoYixlKXx8IUhlKGFbZV0sYltlXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gSmUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gS2UoYSxiKXt2YXIgYz1KZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1KZShjKX19ZnVuY3Rpb24gTGUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9MZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBNZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBOZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gT2UoYSl7dmFyIGI9TWUoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJkxlKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZOZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1LZShjLGYpO3ZhciBnPUtlKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgUGU9aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk5lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkllKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cbmZ1bmN0aW9uIFZlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFdlPXthbmltYXRpb25lbmQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpWZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFhlPXt9LFllPXt9O1xuaWEmJihZZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBXZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBXZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFplKGEpe2lmKFhlW2FdKXJldHVybiBYZVthXTtpZighV2VbYV0pcmV0dXJuIGE7dmFyIGI9V2VbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gWWUpcmV0dXJuIFhlW2FdPWJbY107cmV0dXJuIGF9dmFyICRlPVplKFwiYW5pbWF0aW9uZW5kXCIpLGFmPVplKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGJmPVplKFwiYW5pbWF0aW9uc3RhcnRcIiksY2Y9WmUoXCJ0cmFuc2l0aW9uZW5kXCIpLGRmPW5ldyBNYXAsZWY9XCJhYm9ydCBhdXhDbGljayBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHRvZ2dsZSB0b3VjaE1vdmUgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIGZmKGEsYil7ZGYuc2V0KGEsYik7ZmEoYixbYV0pfWZvcih2YXIgZ2Y9MDtnZjxlZi5sZW5ndGg7Z2YrKyl7dmFyIGhmPWVmW2dmXSxqZj1oZi50b0xvd2VyQ2FzZSgpLGtmPWhmWzBdLnRvVXBwZXJDYXNlKCkraGYuc2xpY2UoMSk7ZmYoamYsXCJvblwiK2tmKX1mZigkZSxcIm9uQW5pbWF0aW9uRW5kXCIpO2ZmKGFmLFwib25BbmltYXRpb25JdGVyYXRpb25cIik7ZmYoYmYsXCJvbkFuaW1hdGlvblN0YXJ0XCIpO2ZmKFwiZGJsY2xpY2tcIixcIm9uRG91YmxlQ2xpY2tcIik7ZmYoXCJmb2N1c2luXCIsXCJvbkZvY3VzXCIpO2ZmKFwiZm9jdXNvdXRcIixcIm9uQmx1clwiKTtmZihjZixcIm9uVHJhbnNpdGlvbkVuZFwiKTtoYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtcbmhhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZmEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtmYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5mYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgbGY9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxtZj1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChsZikpO1xuZnVuY3Rpb24gbmYoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7VWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfX19aWYoUWIpdGhyb3cgYT1SYixRYj0hMSxSYj1udWxsLGE7fVxuZnVuY3Rpb24gRChhLGIpe3ZhciBjPWJbb2ZdO3ZvaWQgMD09PWMmJihjPWJbb2ZdPW5ldyBTZXQpO3ZhciBkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwocGYoYixhLDIsITEpLGMuYWRkKGQpKX1mdW5jdGlvbiBxZihhLGIsYyl7dmFyIGQ9MDtiJiYoZHw9NCk7cGYoYyxhLGQsYil9dmFyIHJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gc2YoYSl7aWYoIWFbcmZdKXthW3JmXT0hMDtkYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1wic2VsZWN0aW9uY2hhbmdlXCIhPT1iJiYobWYuaGFzKGIpfHxxZihiLCExLGEpLHFmKGIsITAsYSkpfSk7dmFyIGI9OT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7bnVsbD09PWJ8fGJbcmZdfHwoYltyZl09ITAscWYoXCJzZWxlY3Rpb25jaGFuZ2VcIiwhMSxiKSl9fVxuZnVuY3Rpb24gcGYoYSxiLGMsZCl7c3dpdGNoKGpkKGIpKXtjYXNlIDE6dmFyIGU9ZWQ7YnJlYWs7Y2FzZSA0OmU9Z2Q7YnJlYWs7ZGVmYXVsdDplPWZkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFMYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPVdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1KYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9ZGYuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLG49YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6bj1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpuPVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSAkZTpjYXNlIGFmOmNhc2UgYmY6az1IZDticmVhaztjYXNlIGNmOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHQ9MCE9PShiJjQpLEo9IXQmJlwic2Nyb2xsXCI9PT1hLHg9dD9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt0PVtdO2Zvcih2YXIgdz1kLHU7bnVsbCE9PVxudzspe3U9dzt2YXIgRj11LnN0YXRlTm9kZTs1PT09dS50YWcmJm51bGwhPT1GJiYodT1GLG51bGwhPT14JiYoRj1LYih3LHgpLG51bGwhPUYmJnQucHVzaCh0Zih3LEYsdSkpKSk7aWYoSilicmVhazt3PXcucmV0dXJufTA8dC5sZW5ndGgmJihoPW5ldyBrKGgsbixudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp0fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmYyE9PXdiJiYobj1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYoV2Mobil8fG5bdWZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYobj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCxuPW4/V2Mobik6bnVsbCxudWxsIT09XG5uJiYoSj1WYihuKSxuIT09Snx8NSE9PW4udGFnJiY2IT09bi50YWcpKW49bnVsbH1lbHNlIGs9bnVsbCxuPWQ7aWYoayE9PW4pe3Q9QmQ7Rj1cIm9uTW91c2VMZWF2ZVwiO3g9XCJvbk1vdXNlRW50ZXJcIjt3PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdD1UZCxGPVwib25Qb2ludGVyTGVhdmVcIix4PVwib25Qb2ludGVyRW50ZXJcIix3PVwicG9pbnRlclwiO0o9bnVsbD09az9oOnVlKGspO3U9bnVsbD09bj9oOnVlKG4pO2g9bmV3IHQoRix3K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9SjtoLnJlbGF0ZWRUYXJnZXQ9dTtGPW51bGw7V2MoZSk9PT1kJiYodD1uZXcgdCh4LHcrXCJlbnRlclwiLG4sYyxlKSx0LnRhcmdldD11LHQucmVsYXRlZFRhcmdldD1KLEY9dCk7Sj1GO2lmKGsmJm4pYjp7dD1rO3g9bjt3PTA7Zm9yKHU9dDt1O3U9dmYodSkpdysrO3U9MDtmb3IoRj14O0Y7Rj12ZihGKSl1Kys7Zm9yKDswPHctdTspdD12Zih0KSx3LS07Zm9yKDswPHUtdzspeD1cbnZmKHgpLHUtLTtmb3IoO3ctLTspe2lmKHQ9PT14fHxudWxsIT09eCYmdD09PXguYWx0ZXJuYXRlKWJyZWFrIGI7dD12Zih0KTt4PXZmKHgpfXQ9bnVsbH1lbHNlIHQ9bnVsbDtudWxsIT09ayYmd2YoZyxoLGssdCwhMSk7bnVsbCE9PW4mJm51bGwhPT1KJiZ3ZihnLEosbix0LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBuYT12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKW5hPUZlO2Vsc2V7bmE9RGU7dmFyIHhhPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYobmE9RWUpO2lmKG5hJiYobmE9bmEoYSxkKSkpe25lKGcsbmEsYyxlKTticmVhayBhfXhhJiZ4YShhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKHhhPWguX3dyYXBwZXJTdGF0ZSkmJlxueGEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmY2IoaCxcIm51bWJlclwiLGgudmFsdWUpfXhhPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKHhhKXx8XCJ0cnVlXCI9PT14YS5jb250ZW50RWRpdGFibGUpUWU9eGEsUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciAkYTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmJhPVwib25Db21wb3NpdGlvbkVuZFwiO1xuYnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpiYT1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifWJhPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihiYT1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtiYSYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09YmE/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1iYSYmaWUmJigkYT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLHhhPW9lKGQsYmEpLDA8eGEubGVuZ3RoJiYoYmE9bmV3IExkKGJhLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6YmEsbGlzdGVuZXJzOnhhfSksJGE/YmEuZGF0YT0kYTooJGE9aGUoYyksbnVsbCE9PSRhJiYoYmEuZGF0YT0kYSkpKSk7aWYoJGE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksXG4wPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9JGEpfXNlKGcsYil9KX1mdW5jdGlvbiB0ZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9S2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQodGYoYSxmLGUpKSxmPUtiKGEsYiksbnVsbCE9ZiYmZC5wdXNoKHRmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gdmYoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHdmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9S2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQodGYoYyxrLGgpKSk6ZXx8KGs9S2IoYyxmKSxudWxsIT1rJiZnLnB1c2godGYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX12YXIgeGY9L1xcclxcbj8vZyx5Zj0vXFx1MDAwMHxcXHVGRkZEL2c7ZnVuY3Rpb24gemYoYSl7cmV0dXJuKFwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiXCIrYSkucmVwbGFjZSh4ZixcIlxcblwiKS5yZXBsYWNlKHlmLFwiXCIpfWZ1bmN0aW9uIEFmKGEsYixjKXtiPXpmKGIpO2lmKHpmKGEpIT09YiYmYyl0aHJvdyBFcnJvcihwKDQyNSkpO31mdW5jdGlvbiBCZigpe31cbnZhciBDZj1udWxsLERmPW51bGw7ZnVuY3Rpb24gRWYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgRmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsR2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEhmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dm9pZCAwLEpmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxdWV1ZU1pY3JvdGFzaz9xdWV1ZU1pY3JvdGFzazpcInVuZGVmaW5lZFwiIT09dHlwZW9mIEhmP2Z1bmN0aW9uKGEpe3JldHVybiBIZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSWYpfTpGZjtmdW5jdGlvbiBJZihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9KX1cbmZ1bmN0aW9uIEtmKGEsYil7dmFyIGM9YixkPTA7ZG97dmFyIGU9Yy5uZXh0U2libGluZzthLnJlbW92ZUNoaWxkKGMpO2lmKGUmJjg9PT1lLm5vZGVUeXBlKWlmKGM9ZS5kYXRhLFwiLyRcIj09PWMpe2lmKDA9PT1kKXthLnJlbW92ZUNoaWxkKGUpO2JkKGIpO3JldHVybn1kLS19ZWxzZVwiJFwiIT09YyYmXCIkP1wiIT09YyYmXCIkIVwiIT09Y3x8ZCsrO2M9ZX13aGlsZShjKTtiZChiKX1mdW5jdGlvbiBMZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVhaztpZig4PT09Yil7Yj1hLmRhdGE7aWYoXCIkXCI9PT1ifHxcIiQhXCI9PT1ifHxcIiQ/XCI9PT1iKWJyZWFrO2lmKFwiLyRcIj09PWIpcmV0dXJuIG51bGx9fXJldHVybiBhfVxuZnVuY3Rpb24gTWYoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5mPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE9mPVwiX19yZWFjdEZpYmVyJFwiK05mLFBmPVwiX19yZWFjdFByb3BzJFwiK05mLHVmPVwiX19yZWFjdENvbnRhaW5lciRcIitOZixvZj1cIl9fcmVhY3RFdmVudHMkXCIrTmYsUWY9XCJfX3JlYWN0TGlzdGVuZXJzJFwiK05mLFJmPVwiX19yZWFjdEhhbmRsZXMkXCIrTmY7XG5mdW5jdGlvbiBXYyhhKXt2YXIgYj1hW09mXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t1Zl18fGNbT2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9TWYoYSk7bnVsbCE9PWE7KXtpZihjPWFbT2ZdKXJldHVybiBjO2E9TWYoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVtPZl18fGFbdWZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IocCgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVtQZl18fG51bGx9dmFyIFNmPVtdLFRmPS0xO2Z1bmN0aW9uIFVmKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gRShhKXswPlRmfHwoYS5jdXJyZW50PVNmW1RmXSxTZltUZl09bnVsbCxUZi0tKX1mdW5jdGlvbiBHKGEsYil7VGYrKztTZltUZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBWZj17fSxIPVVmKFZmKSxXZj1VZighMSksWGY9VmY7ZnVuY3Rpb24gWWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBWZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFpmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gJGYoKXtFKFdmKTtFKEgpfWZ1bmN0aW9uIGFnKGEsYixjKXtpZihILmN1cnJlbnQhPT1WZil0aHJvdyBFcnJvcihwKDE2OCkpO0coSCxiKTtHKFdmLGMpfWZ1bmN0aW9uIGJnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtiPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYikpdGhyb3cgRXJyb3IocCgxMDgsUmEoYSl8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gQSh7fSxjLGQpfVxuZnVuY3Rpb24gY2coYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFZmO1hmPUguY3VycmVudDtHKEgsYSk7RyhXZixXZi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBkZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IocCgxNjkpKTtjPyhhPWJnKGEsYixYZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEUoV2YpLEUoSCksRyhILGEpKTpFKFdmKTtHKFdmLGMpfXZhciBlZz1udWxsLGZnPSExLGdnPSExO2Z1bmN0aW9uIGhnKGEpe251bGw9PT1lZz9lZz1bYV06ZWcucHVzaChhKX1mdW5jdGlvbiBpZyhhKXtmZz0hMDtoZyhhKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWdnJiZudWxsIT09ZWcpe2dnPSEwO3ZhciBhPTAsYj1DO3RyeXt2YXIgYz1lZztmb3IoQz0xO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdO2RvIGQ9ZCghMCk7d2hpbGUobnVsbCE9PWQpfWVnPW51bGw7Zmc9ITF9Y2F0Y2goZSl7dGhyb3cgbnVsbCE9PWVnJiYoZWc9ZWcuc2xpY2UoYSsxKSksYWMoZmMsamcpLGU7fWZpbmFsbHl7Qz1iLGdnPSExfX1yZXR1cm4gbnVsbH12YXIga2c9W10sbGc9MCxtZz1udWxsLG5nPTAsb2c9W10scGc9MCxxZz1udWxsLHJnPTEsc2c9XCJcIjtmdW5jdGlvbiB0ZyhhLGIpe2tnW2xnKytdPW5nO2tnW2xnKytdPW1nO21nPWE7bmc9Yn1cbmZ1bmN0aW9uIHVnKGEsYixjKXtvZ1twZysrXT1yZztvZ1twZysrXT1zZztvZ1twZysrXT1xZztxZz1hO3ZhciBkPXJnO2E9c2c7dmFyIGU9MzItb2MoZCktMTtkJj1+KDE8PGUpO2MrPTE7dmFyIGY9MzItb2MoYikrZTtpZigzMDxmKXt2YXIgZz1lLWUlNTtmPShkJigxPDxnKS0xKS50b1N0cmluZygzMik7ZD4+PWc7ZS09ZztyZz0xPDwzMi1vYyhiKStlfGM8PGV8ZDtzZz1mK2F9ZWxzZSByZz0xPDxmfGM8PGV8ZCxzZz1hfWZ1bmN0aW9uIHZnKGEpe251bGwhPT1hLnJldHVybiYmKHRnKGEsMSksdWcoYSwxLDApKX1mdW5jdGlvbiB3ZyhhKXtmb3IoO2E9PT1tZzspbWc9a2dbLS1sZ10sa2dbbGddPW51bGwsbmc9a2dbLS1sZ10sa2dbbGddPW51bGw7Zm9yKDthPT09cWc7KXFnPW9nWy0tcGddLG9nW3BnXT1udWxsLHNnPW9nWy0tcGddLG9nW3BnXT1udWxsLHJnPW9nWy0tcGddLG9nW3BnXT1udWxsfXZhciB4Zz1udWxsLHlnPW51bGwsST0hMSx6Zz1udWxsO1xuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1CZyg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtiPWEuZGVsZXRpb25zO251bGw9PT1iPyhhLmRlbGV0aW9ucz1bY10sYS5mbGFnc3w9MTYpOmIucHVzaChjKX1cbmZ1bmN0aW9uIENnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9TGYoYi5maXJzdENoaWxkKSwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9bnVsbCwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4gYj04IT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGM9bnVsbCE9PXFnP3tpZDpyZyxvdmVyZmxvdzpzZ306bnVsbCxhLm1lbW9pemVkU3RhdGU9e2RlaHlkcmF0ZWQ6Yix0cmVlQ29udGV4dDpjLHJldHJ5TGFuZToxMDczNzQxODI0fSxjPUJnKDE4LG51bGwsbnVsbCwwKSxjLnN0YXRlTm9kZT1iLGMucmV0dXJuPWEsYS5jaGlsZD1jLHhnPWEseWc9XG5udWxsLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBEZyhhKXtyZXR1cm4gMCE9PShhLm1vZGUmMSkmJjA9PT0oYS5mbGFncyYxMjgpfWZ1bmN0aW9uIEVnKGEpe2lmKEkpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUNnKGEsYikpe2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7Yj1MZihjLm5leHRTaWJsaW5nKTt2YXIgZD14ZztiJiZDZyhhLGIpP0FnKGQsYyk6KGEuZmxhZ3M9YS5mbGFncyYtNDA5N3wyLEk9ITEseGc9YSl9fWVsc2V7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTthLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MjtJPSExO3hnPWF9fX1mdW5jdGlvbiBGZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47eGc9YX1cbmZ1bmN0aW9uIEdnKGEpe2lmKGEhPT14ZylyZXR1cm4hMTtpZighSSlyZXR1cm4gRmcoYSksST0hMCwhMTt2YXIgYjsoYj0zIT09YS50YWcpJiYhKGI9NSE9PWEudGFnKSYmKGI9YS50eXBlLGI9XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFFZihhLnR5cGUsYS5tZW1vaXplZFByb3BzKSk7aWYoYiYmKGI9eWcpKXtpZihEZyhhKSl0aHJvdyBIZygpLEVycm9yKHAoNDE4KSk7Zm9yKDtiOylBZyhhLGIpLGI9TGYoYi5uZXh0U2libGluZyl9RmcoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcihwKDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXt5Zz1MZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfXlnPVxubnVsbH19ZWxzZSB5Zz14Zz9MZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBIZygpe2Zvcih2YXIgYT15ZzthOylhPUxmKGEubmV4dFNpYmxpbmcpfWZ1bmN0aW9uIElnKCl7eWc9eGc9bnVsbDtJPSExfWZ1bmN0aW9uIEpnKGEpe251bGw9PT16Zz96Zz1bYV06emcucHVzaChhKX12YXIgS2c9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gTGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1BKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIE1nPVVmKG51bGwpLE5nPW51bGwsT2c9bnVsbCxQZz1udWxsO2Z1bmN0aW9uIFFnKCl7UGc9T2c9Tmc9bnVsbH1mdW5jdGlvbiBSZyhhKXt2YXIgYj1NZy5jdXJyZW50O0UoTWcpO2EuX2N1cnJlbnRWYWx1ZT1ifVxuZnVuY3Rpb24gU2coYSxiLGMpe2Zvcig7bnVsbCE9PWE7KXt2YXIgZD1hLmFsdGVybmF0ZTsoYS5jaGlsZExhbmVzJmIpIT09Yj8oYS5jaGlsZExhbmVzfD1iLG51bGwhPT1kJiYoZC5jaGlsZExhbmVzfD1iKSk6bnVsbCE9PWQmJihkLmNoaWxkTGFuZXMmYikhPT1iJiYoZC5jaGlsZExhbmVzfD1iKTtpZihhPT09YylicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBUZyhhLGIpe05nPWE7UGc9T2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJihVZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBWZyhhKXt2YXIgYj1hLl9jdXJyZW50VmFsdWU7aWYoUGchPT1hKWlmKGE9e2NvbnRleHQ6YSxtZW1vaXplZFZhbHVlOmIsbmV4dDpudWxsfSxudWxsPT09T2cpe2lmKG51bGw9PT1OZyl0aHJvdyBFcnJvcihwKDMwOCkpO09nPWE7TmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDphfX1lbHNlIE9nPU9nLm5leHQ9YTtyZXR1cm4gYn12YXIgV2c9bnVsbDtmdW5jdGlvbiBYZyhhKXtudWxsPT09V2c/V2c9W2FdOldnLnB1c2goYSl9ZnVuY3Rpb24gWWcoYSxiLGMsZCl7dmFyIGU9Yi5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYy5uZXh0PWMsWGcoYikpOihjLm5leHQ9ZS5uZXh0LGUubmV4dD1jKTtiLmludGVybGVhdmVkPWM7cmV0dXJuIFpnKGEsZCl9XG5mdW5jdGlvbiBaZyhhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9dmFyICRnPSExO2Z1bmN0aW9uIGFoKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjB9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiBiaChhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiBjaChhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1cbmZ1bmN0aW9uIGRoKGEsYixjKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Q9ZC5zaGFyZWQ7aWYoMCE9PShLJjIpKXt2YXIgZT1kLnBlbmRpbmc7bnVsbD09PWU/Yi5uZXh0PWI6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QucGVuZGluZz1iO3JldHVybiBaZyhhLGMpfWU9ZC5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYi5uZXh0PWIsWGcoZCkpOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLmludGVybGVhdmVkPWI7cmV0dXJuIFpnKGEsYyl9ZnVuY3Rpb24gZWgoYSxiLGMpe2I9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5zaGFyZWQsMCE9PShjJjQxOTQyNDApKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbmZ1bmN0aW9uIGZoKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBnaChhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlOyRnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG09YS5hbHRlcm5hdGU7bnVsbCE9PW0mJihtPW0udXBkYXRlUXVldWUsaD1tLmxhc3RCYXNlVXBkYXRlLGghPT1nJiYobnVsbD09PWg/bS5maXJzdEJhc2VVcGRhdGU9bDpoLm5leHQ9bCxtLmxhc3RCYXNlVXBkYXRlPWspKX1pZihudWxsIT09Zil7dmFyIHE9ZS5iYXNlU3RhdGU7Zz0wO209bD1rPW51bGw7aD1mO2Rve3ZhciByPWgubGFuZSx5PWguZXZlbnRUaW1lO2lmKChkJnIpPT09cil7bnVsbCE9PW0mJihtPW0ubmV4dD17ZXZlbnRUaW1lOnksbGFuZTowLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIG49YSx0PWg7cj1iO3k9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpuPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbil7cT1uLmNhbGwoeSxxLHIpO2JyZWFrIGF9cT1uO2JyZWFrIGE7Y2FzZSAzOm4uZmxhZ3M9bi5mbGFncyYtNjU1Mzd8MTI4O2Nhc2UgMDpuPXQucGF5bG9hZDtyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuP24uY2FsbCh5LHEscik6bjtpZihudWxsPT09cnx8dm9pZCAwPT09cilicmVhayBhO3E9QSh7fSxxLHIpO2JyZWFrIGE7Y2FzZSAyOiRnPSEwfX1udWxsIT09aC5jYWxsYmFjayYmMCE9PWgubGFuZSYmKGEuZmxhZ3N8PTY0LHI9ZS5lZmZlY3RzLG51bGw9PT1yP2UuZWZmZWN0cz1baF06ci5wdXNoKGgpKX1lbHNlIHk9e2V2ZW50VGltZTp5LGxhbmU6cix0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1tPyhsPW09eSxrPXEpOm09bS5uZXh0PXksZ3w9cjtcbmg9aC5uZXh0O2lmKG51bGw9PT1oKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIHI9aCxoPXIubmV4dCxyLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPXIsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1tJiYoaz1xKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1tO2I9ZS5zaGFyZWQuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWIpe2U9YjtkbyBnfD1lLmxhbmUsZT1lLm5leHQ7d2hpbGUoZSE9PWIpfWVsc2UgbnVsbD09PWYmJihlLnNoYXJlZC5sYW5lcz0wKTtoaHw9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPXF9fVxuZnVuY3Rpb24gaWgoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHAoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgamg9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24ga2goYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOkEoe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIG5oPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1ZiKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUwoKSxlPWxoKGEpLGY9Y2goZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUwoKSxlPWxoKGEpLGY9Y2goZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9TCgpLGQ9XG5saChhKSxlPWNoKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7Yj1kaChhLGUsZCk7bnVsbCE9PWImJihtaChiLGEsZCxjKSxlaChiLGEsZCkpfX07ZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSWUoYyxkKXx8IUllKGUsZik6ITB9XG5mdW5jdGlvbiBwaChhLGIsYyl7dmFyIGQ9ITEsZT1WZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1WZyhmKTooZT1aZihiKT9YZjpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9ZZihhLGUpOlZmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9bmg7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBxaChhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmbmguZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiByaChhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWpoO2FoKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9VmcoZik6KGY9WmYoYik/WGY6SC5jdXJyZW50LGUuY29udGV4dD1ZZihhLGYpKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoa2goYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmbmguZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZ2goYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NDE5NDMwOCl9XG5mdW5jdGlvbiBzaChhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHAoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IocCgxNDcsYSkpO3ZhciBlPWQsZj1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZilyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1lLnJlZnM7Yj09PWpoJiYoYj1lLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2ZdOmJbZl09YX07Yi5fc3RyaW5nUmVmPWY7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHAoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHAoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiB0aChhLGIpe2E9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO3Rocm93IEVycm9yKHAoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWE/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YSkpO31mdW5jdGlvbiB1aChhKXt2YXIgYj1hLl9pbml0O3JldHVybiBiKGEuX3BheWxvYWQpfVxuZnVuY3Rpb24gdmgoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIuZGVsZXRpb25zO251bGw9PT1kPyhiLmRlbGV0aW9ucz1bY10sYi5mbGFnc3w9MTYpOmQucHVzaChjKX19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9d2goYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBiLmZsYWdzfD0xMDQ4NTc2LGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFnc3w9MixjKTpkO2IuZmxhZ3N8PTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZcbm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3N8PTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj14aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe3ZhciBmPWMudHlwZTtpZihmPT09eWEpcmV0dXJuIG0oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxjLmtleSk7aWYobnVsbCE9PWImJihiLmVsZW1lbnRUeXBlPT09Znx8XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi4kJHR5cGVvZj09PUhhJiZ1aChmKT09PWIudHlwZSkpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPXNoKGEsYixjKSxkLnJldHVybj1hLGQ7ZD15aChjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1zaChhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fFxuYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPXpoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1BaChjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiYmXCJcIiE9PWJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj14aChcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYz15aChiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxcbmMucmVmPXNoKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB3YTpyZXR1cm4gYj16aChiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7Y2FzZSBIYTp2YXIgZD1iLl9pbml0O3JldHVybiBxKGEsZChiLl9wYXlsb2FkKSxjKX1pZihlYihiKXx8S2EoYikpcmV0dXJuIGI9QWgoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7dGgoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjJiZcIlwiIT09Y3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbDtjYXNlIHdhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsO2Nhc2UgSGE6cmV0dXJuIGU9Yy5faW5pdCxyKGEsXG5iLGUoYy5fcGF5bG9hZCksZCl9aWYoZWIoYyl8fEthKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTt0aChhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGQmJlwiXCIhPT1kfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpO2Nhc2Ugd2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSk7Y2FzZSBIYTp2YXIgZj1kLl9pbml0O3JldHVybiB5KGEsYixjLGYoZC5fcGF5bG9hZCksZSl9aWYoZWIoZCl8fEthKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTt0aChiLGQpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gbihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwsdT1nLHc9Zz0wLHg9bnVsbDtudWxsIT09dSYmdzxoLmxlbmd0aDt3Kyspe3UuaW5kZXg+dz8oeD11LHU9bnVsbCk6eD11LnNpYmxpbmc7dmFyIG49cihlLHUsaFt3XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXgpO2JyZWFrfWEmJnUmJm51bGw9PT1uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcsdyk7bnVsbD09PW0/bD1uOm0uc2libGluZz1uO209bjt1PXh9aWYodz09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT11KXtmb3IoO3c8aC5sZW5ndGg7dysrKXU9cShlLGhbd10sayksbnVsbCE9PXUmJihnPWYodSxnLHcpLG51bGw9PT1tP2w9dTptLnNpYmxpbmc9dSxtPXUpO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3c8aC5sZW5ndGg7dysrKXg9eSh1LGUsdyxoW3ddLGspLG51bGwhPT14JiYoYSYmbnVsbCE9PXguYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09XG54LmtleT93Ongua2V5KSxnPWYoeCxnLHcpLG51bGw9PT1tP2w9eDptLnNpYmxpbmc9eCxtPXgpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiB0KGUsZyxoLGspe3ZhciBsPUthKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHAoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09aCl0aHJvdyBFcnJvcihwKDE1MSkpO2Zvcih2YXIgdT1sPW51bGwsbT1nLHc9Zz0wLHg9bnVsbCxuPWgubmV4dCgpO251bGwhPT1tJiYhbi5kb25lO3crKyxuPWgubmV4dCgpKXttLmluZGV4Pnc/KHg9bSxtPW51bGwpOng9bS5zaWJsaW5nO3ZhciB0PXIoZSxtLG4udmFsdWUsayk7aWYobnVsbD09PXQpe251bGw9PT1tJiYobT14KTticmVha31hJiZtJiZudWxsPT09dC5hbHRlcm5hdGUmJmIoZSxtKTtnPWYodCxnLHcpO251bGw9PT11P2w9dDp1LnNpYmxpbmc9dDt1PXQ7bT14fWlmKG4uZG9uZSlyZXR1cm4gYyhlLFxubSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT1tKXtmb3IoOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj1xKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXkobSxlLHcsbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PW4ua2V5P3c6bi5rZXkpLGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIEooYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09eWEmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zil7c3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgdmE6YTp7Zm9yKHZhciBrPVxuZi5rZXksbD1kO251bGwhPT1sOyl7aWYobC5rZXk9PT1rKXtrPWYudHlwZTtpZihrPT09eWEpe2lmKDc9PT1sLnRhZyl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19ZWxzZSBpZihsLmVsZW1lbnRUeXBlPT09a3x8XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUhhJiZ1aChrKT09PWwudHlwZSl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcyk7ZC5yZWY9c2goYSxsLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YyhhLGwpO2JyZWFrfWVsc2UgYihhLGwpO2w9bC5zaWJsaW5nfWYudHlwZT09PXlhPyhkPUFoKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD15aChmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1zaChhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2Ugd2E6YTp7Zm9yKGw9Zi5rZXk7bnVsbCE9PVxuZDspe2lmKGQua2V5PT09bClpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD16aChmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIEhhOnJldHVybiBsPWYuX2luaXQsSihhLGQsbChmLl9wYXlsb2FkKSxoKX1pZihlYihmKSlyZXR1cm4gbihhLGQsZixoKTtpZihLYShmKSlyZXR1cm4gdChhLGQsZixoKTt0aChhLGYpfXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgZiYmXCJcIiE9PWZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZj8oZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOlxuKGMoYSxkKSxkPXhoKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpKTpjKGEsZCl9cmV0dXJuIEp9dmFyIEJoPXZoKCEwKSxDaD12aCghMSksRGg9e30sRWg9VWYoRGgpLEZoPVVmKERoKSxHaD1VZihEaCk7ZnVuY3Rpb24gSGgoYSl7aWYoYT09PURoKXRocm93IEVycm9yKHAoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gSWgoYSxiKXtHKEdoLGIpO0coRmgsYSk7RyhFaCxEaCk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpsYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bGIoYixhKX1FKEVoKTtHKEVoLGIpfWZ1bmN0aW9uIEpoKCl7RShFaCk7RShGaCk7RShHaCl9XG5mdW5jdGlvbiBLaChhKXtIaChHaC5jdXJyZW50KTt2YXIgYj1IaChFaC5jdXJyZW50KTt2YXIgYz1sYihiLGEudHlwZSk7YiE9PWMmJihHKEZoLGEpLEcoRWgsYykpfWZ1bmN0aW9uIExoKGEpe0ZoLmN1cnJlbnQ9PT1hJiYoRShFaCksRShGaCkpfXZhciBNPVVmKDApO1xuZnVuY3Rpb24gTWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5oPVtdO1xuZnVuY3Rpb24gT2goKXtmb3IodmFyIGE9MDthPE5oLmxlbmd0aDthKyspTmhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDtOaC5sZW5ndGg9MH12YXIgUGg9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixRaD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxSaD0wLE49bnVsbCxPPW51bGwsUD1udWxsLFNoPSExLFRoPSExLFVoPTAsVmg9MDtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IocCgzMjEpKTt9ZnVuY3Rpb24gV2goYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFhoKGEsYixjLGQsZSxmKXtSaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO1BoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/WWg6Wmg7YT1jKGQsZSk7aWYoVGgpe2Y9MDtkb3tUaD0hMTtVaD0wO2lmKDI1PD1mKXRocm93IEVycm9yKHAoMzAxKSk7Zis9MTtQPU89bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7UGguY3VycmVudD0kaDthPWMoZCxlKX13aGlsZShUaCl9UGguY3VycmVudD1haTtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O1JoPTA7UD1PPU49bnVsbDtTaD0hMTtpZihiKXRocm93IEVycm9yKHAoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmkoKXt2YXIgYT0wIT09VWg7VWg9MDtyZXR1cm4gYX1cbmZ1bmN0aW9uIGNpKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIGRpKCl7aWYobnVsbD09PU8pe3ZhciBhPU4uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU8ubmV4dDt2YXIgYj1udWxsPT09UD9OLm1lbW9pemVkU3RhdGU6UC5uZXh0O2lmKG51bGwhPT1iKVA9YixPPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDMxMCkpO089YTthPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUsYmFzZVF1ZXVlOk8uYmFzZVF1ZXVlLHF1ZXVlOk8ucXVldWUsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWF9cmV0dXJuIFB9XG5mdW5jdGlvbiBlaShhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIGZpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtmPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9bnVsbCxrPW51bGwsbD1mO2Rve3ZhciBtPWwubGFuZTtpZigoUmgmbSk9PT1tKW51bGwhPT1rJiYoaz1rLm5leHQ9e2xhbmU6MCxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1sLmhhc0VhZ2VyU3RhdGU/bC5lYWdlclN0YXRlOmEoZCxsLmFjdGlvbik7ZWxzZXt2YXIgcT17bGFuZTptLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxcbmVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWs/KGg9az1xLGc9ZCk6az1rLm5leHQ9cTtOLmxhbmVzfD1tO2hofD1tfWw9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09Zik7bnVsbD09PWs/Zz1kOmsubmV4dD1oO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1nO2IuYmFzZVF1ZXVlPWs7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfWE9Yy5pbnRlcmxlYXZlZDtpZihudWxsIT09YSl7ZT1hO2RvIGY9ZS5sYW5lLE4ubGFuZXN8PWYsaGh8PWYsZT1lLm5leHQ7d2hpbGUoZSE9PWEpfWVsc2UgbnVsbD09PWUmJihjLmxhbmVzPTApO3JldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBnaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1mdW5jdGlvbiBoaSgpe31cbmZ1bmN0aW9uIGlpKGEsYil7dmFyIGM9TixkPWRpKCksZT1iKCksZj0hSGUoZC5tZW1vaXplZFN0YXRlLGUpO2YmJihkLm1lbW9pemVkU3RhdGU9ZSxVZz0hMCk7ZD1kLnF1ZXVlO2ppKGtpLmJpbmQobnVsbCxjLGQsYSksW2FdKTtpZihkLmdldFNuYXBzaG90IT09Ynx8Znx8bnVsbCE9PVAmJlAubWVtb2l6ZWRTdGF0ZS50YWcmMSl7Yy5mbGFnc3w9MjA0ODtsaSg5LG1pLmJpbmQobnVsbCxjLGQsZSxiKSx2b2lkIDAsbnVsbCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoYyxiLGUpfXJldHVybiBlfWZ1bmN0aW9uIG5pKGEsYixjKXthLmZsYWdzfD0xNjM4NDthPXtnZXRTbmFwc2hvdDpiLHZhbHVlOmN9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5zdG9yZXM9W2FdKTooYz1iLnN0b3JlcyxudWxsPT09Yz9iLnN0b3Jlcz1bYV06Yy5wdXNoKGEpKX1cbmZ1bmN0aW9uIG1pKGEsYixjLGQpe2IudmFsdWU9YztiLmdldFNuYXBzaG90PWQ7b2koYikmJnBpKGEpfWZ1bmN0aW9uIGtpKGEsYixjKXtyZXR1cm4gYyhmdW5jdGlvbigpe29pKGIpJiZwaShhKX0pfWZ1bmN0aW9uIG9pKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgYz1iKCk7cmV0dXJuIUhlKGEsYyl9Y2F0Y2goZCl7cmV0dXJuITB9fWZ1bmN0aW9uIHBpKGEpe3ZhciBiPVpnKGEsMSk7bnVsbCE9PWImJm1oKGIsYSwxLC0xKX1cbmZ1bmN0aW9uIHFpKGEpe3ZhciBiPWNpKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6ZWksbGFzdFJlbmRlcmVkU3RhdGU6YX07Yi5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1yaS5iaW5kKG51bGwsTixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gbGkoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIHNpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiB0aShhLGIsYyxkKXt2YXIgZT1jaSgpO04uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1kaSgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJldoKGQsZy5kZXBzKSl7ZS5tZW1vaXplZFN0YXRlPWxpKGIsYyxmLGQpO3JldHVybn19Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsZixkKX1mdW5jdGlvbiB2aShhLGIpe3JldHVybiB0aSg4MzkwNjU2LDgsYSxiKX1mdW5jdGlvbiBqaShhLGIpe3JldHVybiB1aSgyMDQ4LDgsYSxiKX1mdW5jdGlvbiB3aShhLGIpe3JldHVybiB1aSg0LDIsYSxiKX1mdW5jdGlvbiB4aShhLGIpe3JldHVybiB1aSg0LDQsYSxiKX1cbmZ1bmN0aW9uIHlpKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gemkoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB1aSg0LDQseWkuYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gQWkoKXt9ZnVuY3Rpb24gQmkoYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBDaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBEaShhLGIsYyl7aWYoMD09PShSaCYyMSkpcmV0dXJuIGEuYmFzZVN0YXRlJiYoYS5iYXNlU3RhdGU9ITEsVWc9ITApLGEubWVtb2l6ZWRTdGF0ZT1jO0hlKGMsYil8fChjPXljKCksTi5sYW5lc3w9YyxoaHw9YyxhLmJhc2VTdGF0ZT0hMCk7cmV0dXJuIGJ9ZnVuY3Rpb24gRWkoYSxiKXt2YXIgYz1DO0M9MCE9PWMmJjQ+Yz9jOjQ7YSghMCk7dmFyIGQ9UWgudHJhbnNpdGlvbjtRaC50cmFuc2l0aW9uPXt9O3RyeXthKCExKSxiKCl9ZmluYWxseXtDPWMsUWgudHJhbnNpdGlvbj1kfX1mdW5jdGlvbiBGaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9bGgoYSk7Yz17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixjKTtlbHNlIGlmKGM9WWcoYSxiLGMsZCksbnVsbCE9PWMpe3ZhciBlPUwoKTttaChjLGEsZCxlKTtKaShjLGIsZCl9fVxuZnVuY3Rpb24gcmkoYSxiLGMpe3ZhciBkPWxoKGEpLGU9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsZSk7ZWxzZXt2YXIgZj1hLmFsdGVybmF0ZTtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1mfHwwPT09Zi5sYW5lcykmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5oYXNFYWdlclN0YXRlPSEwO2UuZWFnZXJTdGF0ZT1oO2lmKEhlKGgsZykpe3ZhciBrPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWs/KGUubmV4dD1lLFhnKGIpKTooZS5uZXh0PWsubmV4dCxrLm5leHQ9ZSk7Yi5pbnRlcmxlYXZlZD1lO3JldHVybn19Y2F0Y2gobCl7fWZpbmFsbHl7fWM9WWcoYSxiLGUsZCk7bnVsbCE9PWMmJihlPUwoKSxtaChjLGEsZCxlKSxKaShjLGIsZCkpfX1cbmZ1bmN0aW9uIEhpKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO3JldHVybiBhPT09Tnx8bnVsbCE9PWImJmI9PT1OfWZ1bmN0aW9uIElpKGEsYil7VGg9U2g9ITA7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn1mdW5jdGlvbiBKaShhLGIsYyl7aWYoMCE9PShjJjQxOTQyNDApKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxudmFyIGFpPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpRLHVzZUNvbnRleHQ6USx1c2VFZmZlY3Q6USx1c2VJbXBlcmF0aXZlSGFuZGxlOlEsdXNlSW5zZXJ0aW9uRWZmZWN0OlEsdXNlTGF5b3V0RWZmZWN0OlEsdXNlTWVtbzpRLHVzZVJlZHVjZXI6USx1c2VSZWY6USx1c2VTdGF0ZTpRLHVzZURlYnVnVmFsdWU6USx1c2VEZWZlcnJlZFZhbHVlOlEsdXNlVHJhbnNpdGlvbjpRLHVzZU11dGFibGVTb3VyY2U6USx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpRLHVzZUlkOlEsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxZaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtjaSgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDp2aSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdGkoNDE5NDMwOCxcbjQseWkuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0MTk0MzA4LDQsYSxiKX0sdXNlSW5zZXJ0aW9uRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9Y2koKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9Y2koKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07ZC5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1HaS5iaW5kKG51bGwsTixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9XG5jaSgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpxaSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7cmV0dXJuIGNpKCkubWVtb2l6ZWRTdGF0ZT1hfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9cWkoITEpLGI9YVswXTthPUVpLmJpbmQobnVsbCxhWzFdKTtjaSgpLm1lbW9pemVkU3RhdGU9YTtyZXR1cm5bYixhXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbigpe30sdXNlU3luY0V4dGVybmFsU3RvcmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPU4sZT1jaSgpO2lmKEkpe2lmKHZvaWQgMD09PWMpdGhyb3cgRXJyb3IocCg0MDcpKTtjPWMoKX1lbHNle2M9YigpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGQsYixjKX1lLm1lbW9pemVkU3RhdGU9Yzt2YXIgZj17dmFsdWU6YyxnZXRTbmFwc2hvdDpifTtlLnF1ZXVlPWY7dmkoa2kuYmluZChudWxsLGQsXG5mLGEpLFthXSk7ZC5mbGFnc3w9MjA0ODtsaSg5LG1pLmJpbmQobnVsbCxkLGYsYyxiKSx2b2lkIDAsbnVsbCk7cmV0dXJuIGN9LHVzZUlkOmZ1bmN0aW9uKCl7dmFyIGE9Y2koKSxiPVIuaWRlbnRpZmllclByZWZpeDtpZihJKXt2YXIgYz1zZzt2YXIgZD1yZztjPShkJn4oMTw8MzItb2MoZCktMSkpLnRvU3RyaW5nKDMyKStjO2I9XCI6XCIrYitcIlJcIitjO2M9VWgrKzswPGMmJihiKz1cIkhcIitjLnRvU3RyaW5nKDMyKSk7Yis9XCI6XCJ9ZWxzZSBjPVZoKyssYj1cIjpcIitiK1wiclwiK2MudG9TdHJpbmcoMzIpK1wiOlwiO3JldHVybiBhLm1lbW9pemVkU3RhdGU9Yn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxaaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpmaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZmkoZWkpfSxcbnVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1kaSgpO3JldHVybiBEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWZpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LCRoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmdpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBnaShlaSl9LHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1kaSgpO3JldHVybiBudWxsPT09XG5PP2IubWVtb2l6ZWRTdGF0ZT1hOkRpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9Z2koZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX07ZnVuY3Rpb24gS2koYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UGEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmUsZGlnZXN0Om51bGx9fWZ1bmN0aW9uIExpKGEsYixjKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6bnVsbCxzdGFjazpudWxsIT1jP2M6bnVsbCxkaWdlc3Q6bnVsbCE9Yj9iOm51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE5pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIE9pKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1BpfHwoUGk9ITAsUWk9ZCk7TWkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBSaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9O2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1TaT9TaT1uZXcgU2V0KFt0aGlzXSk6U2kuYWRkKHRoaXMpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIFRpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtpZihudWxsPT09ZCl7ZD1hLnBpbmdDYWNoZT1uZXcgTmk7dmFyIGU9bmV3IFNldDtkLnNldChiLGUpfWVsc2UgZT1kLmdldChiKSx2b2lkIDA9PT1lJiYoZT1uZXcgU2V0LGQuc2V0KGIsZSkpO2UuaGFzKGMpfHwoZS5hZGQoYyksYT1VaS5iaW5kKG51bGwsYSxiLGMpLGIudGhlbihhLGEpKX1mdW5jdGlvbiBWaShhKXtkb3t2YXIgYjtpZihiPTEzPT09YS50YWcpYj1hLm1lbW9pemVkU3RhdGUsYj1udWxsIT09Yj9udWxsIT09Yi5kZWh5ZHJhdGVkPyEwOiExOiEwO2lmKGIpcmV0dXJuIGE7YT1hLnJldHVybn13aGlsZShudWxsIT09YSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBXaShhLGIsYyxkLGUpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiBhPT09Yj9hLmZsYWdzfD02NTUzNjooYS5mbGFnc3w9MTI4LGMuZmxhZ3N8PTEzMTA3MixjLmZsYWdzJj0tNTI4MDUsMT09PWMudGFnJiYobnVsbD09PWMuYWx0ZXJuYXRlP2MudGFnPTE3OihiPWNoKC0xLDEpLGIudGFnPTIsZGgoYyxiLDEpKSksYy5sYW5lc3w9MSksYTthLmZsYWdzfD02NTUzNjthLmxhbmVzPWU7cmV0dXJuIGF9dmFyIFhpPXVhLlJlYWN0Q3VycmVudE93bmVyLFVnPSExO2Z1bmN0aW9uIFlpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/Q2goYixudWxsLGMsZCk6QmgoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBaaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7VGcoYixlKTtkPVhoKGEsYixjLGQsZixlKTtjPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZjJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWooYSxiLGMsZCxlKXtpZihudWxsPT09YSl7dmFyIGY9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYhYmooZikmJnZvaWQgMD09PWYuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWYsY2ooYSxiLGYsZCxlKTthPXloKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZSk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWY9YS5jaGlsZDtpZigwPT09KGEubGFuZXMmZSkpe3ZhciBnPWYubWVtb2l6ZWRQcm9wcztjPWMuY29tcGFyZTtjPW51bGwhPT1jP2M6SWU7aWYoYyhnLGQpJiZhLnJlZj09PWIucmVmKXJldHVybiAkaShhLGIsZSl9Yi5mbGFnc3w9MTthPXdoKGYsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2ooYSxiLGMsZCxlKXtpZihudWxsIT09YSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKEllKGYsZCkmJmEucmVmPT09Yi5yZWYpaWYoVWc9ITEsYi5wZW5kaW5nUHJvcHM9ZD1mLDAhPT0oYS5sYW5lcyZlKSkwIT09KGEuZmxhZ3MmMTMxMDcyKSYmKFVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsJGkoYSxiLGUpfXJldHVybiBkaihhLGIsYyxkLGUpfVxuZnVuY3Rpb24gZWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxHKGZqLGdqKSxnanw9YztlbHNle2lmKDA9PT0oYyYxMDczNzQxODI0KSlyZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LGIudXBkYXRlUXVldWU9bnVsbCxHKGZqLGdqKSxnanw9YSxudWxsO2IubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH07ZD1udWxsIT09Zj9mLmJhc2VMYW5lczpjO0coZmosZ2opO2dqfD1kfWVsc2UgbnVsbCE9PVxuZj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsRyhmaixnaiksZ2p8PWQ7WWkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gaGooYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTJ9ZnVuY3Rpb24gZGooYSxiLGMsZCxlKXt2YXIgZj1aZihjKT9YZjpILmN1cnJlbnQ7Zj1ZZihiLGYpO1RnKGIsZSk7Yz1YaChhLGIsYyxkLGYsZSk7ZD1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmZCYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlqKGEsYixjLGQsZSl7aWYoWmYoYykpe3ZhciBmPSEwO2NnKGIpfWVsc2UgZj0hMTtUZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSlqaihhLGIpLHBoKGIsYyxkKSxyaChiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1WZyhsKToobD1aZihjKT9YZjpILmN1cnJlbnQsbD1ZZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oaCE9PWR8fGshPT1sKSYmcWgoYixnLGQsbCk7JGc9ITE7dmFyIHI9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8ciE9PWt8fFdmLmN1cnJlbnR8fCRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtoKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD0kZ3x8b2goYixjLGgsZCxyLGssbCkpPyhxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCkpOlxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7YmgoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpMZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO3E9Yi5wZW5kaW5nUHJvcHM7cj1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1WZyhrKTooaz1aZihjKT9YZjpILmN1cnJlbnQsaz1ZZihiLGspKTt2YXIgeT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgeXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXF8fHIhPT1rKSYmcWgoYixnLGQsayk7JGc9ITE7cj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO3ZhciBuPWIubWVtb2l6ZWRTdGF0ZTtoIT09cXx8ciE9PW58fFdmLmN1cnJlbnR8fCRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgeSYmKGtoKGIsYyx5LGQpLG49Yi5tZW1vaXplZFN0YXRlKSwobD0kZ3x8b2goYixjLGwsZCxyLG4sayl8fCExKT8obXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTEwMjQpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9biksZy5wcm9wcz1kLGcuc3RhdGU9bixnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1cbmEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksZD0hMSl9cmV0dXJuIGtqKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGtqKGEsYixjLGQsZSxmKXtoaihhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyYxMjgpO2lmKCFkJiYhZylyZXR1cm4gZSYmZGcoYixjLCExKSwkaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtYaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPUJoKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9QmgoYixudWxsLGgsZikpOllpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJmRnKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gbGooYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9hZyhhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZhZyhhLGIuY29udGV4dCwhMSk7SWgoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gbWooYSxiLGMsZCxlKXtJZygpO0pnKGUpO2IuZmxhZ3N8PTI1NjtZaShhLGIsYyxkKTtyZXR1cm4gYi5jaGlsZH12YXIgbmo9e2RlaHlkcmF0ZWQ6bnVsbCx0cmVlQ29udGV4dDpudWxsLHJldHJ5TGFuZTowfTtmdW5jdGlvbiBvaihhKXtyZXR1cm57YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH19XG5mdW5jdGlvbiBwaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1NLmN1cnJlbnQsZj0hMSxnPTAhPT0oYi5mbGFncyYxMjgpLGg7KGg9Zyl8fChoPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7aWYoaClmPSEwLGIuZmxhZ3MmPS0xMjk7ZWxzZSBpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSllfD0xO0coTSxlJjEpO2lmKG51bGw9PT1hKXtFZyhiKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmKGE9YS5kZWh5ZHJhdGVkLG51bGwhPT1hKSlyZXR1cm4gMD09PShiLm1vZGUmMSk/Yi5sYW5lcz0xOlwiJCFcIj09PWEuZGF0YT9iLmxhbmVzPTg6Yi5sYW5lcz0xMDczNzQxODI0LG51bGw7Zz1kLmNoaWxkcmVuO2E9ZC5mYWxsYmFjaztyZXR1cm4gZj8oZD1iLm1vZGUsZj1iLmNoaWxkLGc9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpnfSwwPT09KGQmMSkmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1cbmcpOmY9cWooZyxkLDAsbnVsbCksYT1BaChhLGQsYyxudWxsKSxmLnJldHVybj1iLGEucmV0dXJuPWIsZi5zaWJsaW5nPWEsYi5jaGlsZD1mLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT1vaihjKSxiLm1lbW9pemVkU3RhdGU9bmosYSk6cmooYixnKX1lPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSYmKGg9ZS5kZWh5ZHJhdGVkLG51bGwhPT1oKSlyZXR1cm4gc2ooYSxiLGcsZCxoLGUsYyk7aWYoZil7Zj1kLmZhbGxiYWNrO2c9Yi5tb2RlO2U9YS5jaGlsZDtoPWUuc2libGluZzt2YXIgaz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmQuY2hpbGRyZW59OzA9PT0oZyYxKSYmYi5jaGlsZCE9PWU/KGQ9Yi5jaGlsZCxkLmNoaWxkTGFuZXM9MCxkLnBlbmRpbmdQcm9wcz1rLGIuZGVsZXRpb25zPW51bGwpOihkPXdoKGUsayksZC5zdWJ0cmVlRmxhZ3M9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQpO251bGwhPT1oP2Y9d2goaCxmKTooZj1BaChmLGcsYyxudWxsKSxmLmZsYWdzfD0yKTtmLnJldHVybj1cbmI7ZC5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7ZD1mO2Y9Yi5jaGlsZDtnPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZTtnPW51bGw9PT1nP29qKGMpOntiYXNlTGFuZXM6Zy5iYXNlTGFuZXN8YyxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfTtmLm1lbW9pemVkU3RhdGU9ZztmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZH1mPWEuY2hpbGQ7YT1mLnNpYmxpbmc7ZD13aChmLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59KTswPT09KGIubW9kZSYxKSYmKGQubGFuZXM9Yyk7ZC5yZXR1cm49YjtkLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGM9Yi5kZWxldGlvbnMsbnVsbD09PWM/KGIuZGVsZXRpb25zPVthXSxiLmZsYWdzfD0xNik6Yy5wdXNoKGEpKTtiLmNoaWxkPWQ7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGR9XG5mdW5jdGlvbiByaihhLGIpe2I9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Yn0sYS5tb2RlLDAsbnVsbCk7Yi5yZXR1cm49YTtyZXR1cm4gYS5jaGlsZD1ifWZ1bmN0aW9uIHRqKGEsYixjLGQpe251bGwhPT1kJiZKZyhkKTtCaChiLGEuY2hpbGQsbnVsbCxjKTthPXJqKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3N8PTI7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGF9XG5mdW5jdGlvbiBzaihhLGIsYyxkLGUsZixnKXtpZihjKXtpZihiLmZsYWdzJjI1NilyZXR1cm4gYi5mbGFncyY9LTI1NyxkPUxpKEVycm9yKHAoNDIyKSkpLHRqKGEsYixnLGQpO2lmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpcmV0dXJuIGIuY2hpbGQ9YS5jaGlsZCxiLmZsYWdzfD0xMjgsbnVsbDtmPWQuZmFsbGJhY2s7ZT1iLm1vZGU7ZD1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSxlLDAsbnVsbCk7Zj1BaChmLGUsZyxudWxsKTtmLmZsYWdzfD0yO2QucmV0dXJuPWI7Zi5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7MCE9PShiLm1vZGUmMSkmJkJoKGIsYS5jaGlsZCxudWxsLGcpO2IuY2hpbGQubWVtb2l6ZWRTdGF0ZT1vaihnKTtiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGZ9aWYoMD09PShiLm1vZGUmMSkpcmV0dXJuIHRqKGEsYixnLG51bGwpO2lmKFwiJCFcIj09PWUuZGF0YSl7ZD1lLm5leHRTaWJsaW5nJiZlLm5leHRTaWJsaW5nLmRhdGFzZXQ7XG5pZihkKXZhciBoPWQuZGdzdDtkPWg7Zj1FcnJvcihwKDQxOSkpO2Q9TGkoZixkLHZvaWQgMCk7cmV0dXJuIHRqKGEsYixnLGQpfWg9MCE9PShnJmEuY2hpbGRMYW5lcyk7aWYoVWd8fGgpe2Q9UjtpZihudWxsIT09ZCl7c3dpdGNoKGcmLWcpe2Nhc2UgNDplPTI7YnJlYWs7Y2FzZSAxNjplPTg7YnJlYWs7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OmU9MzI7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6ZT0yNjg0MzU0NTY7YnJlYWs7ZGVmYXVsdDplPTB9ZT0wIT09KGUmKGQuc3VzcGVuZGVkTGFuZXN8ZykpPzA6ZTtcbjAhPT1lJiZlIT09Zi5yZXRyeUxhbmUmJihmLnJldHJ5TGFuZT1lLFpnKGEsZSksbWgoZCxhLGUsLTEpKX11aigpO2Q9TGkoRXJyb3IocCg0MjEpKSk7cmV0dXJuIHRqKGEsYixnLGQpfWlmKFwiJD9cIj09PWUuZGF0YSlyZXR1cm4gYi5mbGFnc3w9MTI4LGIuY2hpbGQ9YS5jaGlsZCxiPXZqLmJpbmQobnVsbCxhKSxlLl9yZWFjdFJldHJ5PWIsbnVsbDthPWYudHJlZUNvbnRleHQ7eWc9TGYoZS5uZXh0U2libGluZyk7eGc9YjtJPSEwO3pnPW51bGw7bnVsbCE9PWEmJihvZ1twZysrXT1yZyxvZ1twZysrXT1zZyxvZ1twZysrXT1xZyxyZz1hLmlkLHNnPWEub3ZlcmZsb3cscWc9Yik7Yj1yaihiLGQuY2hpbGRyZW4pO2IuZmxhZ3N8PTQwOTY7cmV0dXJuIGJ9ZnVuY3Rpb24gd2ooYSxiLGMpe2EubGFuZXN8PWI7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbCE9PWQmJihkLmxhbmVzfD1iKTtTZyhhLnJldHVybixiLGMpfVxuZnVuY3Rpb24geGooYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYucmVuZGVyaW5nU3RhcnRUaW1lPTAsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIHlqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7WWkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9MTI4O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmd2ooYSxjLGIpO2Vsc2UgaWYoMTk9PT1hLnRhZyl3aihhLGMsYik7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUcoTSxkKTtpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09TWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt4aihiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PU1oKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX14aihiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp4aihiLCExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBqaihhLGIpezA9PT0oYi5tb2RlJjEpJiZudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKX1mdW5jdGlvbiAkaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7aGh8PWIubGFuZXM7aWYoMD09PShjJmIuY2hpbGRMYW5lcykpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHAoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPXdoKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz13aChhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gemooYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOmxqKGIpO0lnKCk7YnJlYWs7Y2FzZSA1OktoKGIpO2JyZWFrO2Nhc2UgMTpaZihiLnR5cGUpJiZjZyhiKTticmVhaztjYXNlIDQ6SWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkPWIudHlwZS5fY29udGV4dCxlPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWU7YnJlYWs7Y2FzZSAxMzpkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCl7aWYobnVsbCE9PWQuZGVoeWRyYXRlZClyZXR1cm4gRyhNLE0uY3VycmVudCYxKSxiLmZsYWdzfD0xMjgsbnVsbDtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gcGooYSxiLGMpO0coTSxNLmN1cnJlbnQmMSk7YT0kaShhLGIsYyk7cmV0dXJuIG51bGwhPT1hP2Euc2libGluZzpudWxsfUcoTSxNLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZcbmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjEyOCkpe2lmKGQpcmV0dXJuIHlqKGEsYixjKTtiLmZsYWdzfD0xMjh9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtHKE0sTS5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzPTAsZWooYSxiLGMpfXJldHVybiAkaShhLGIsYyl9dmFyIEFqLEJqLENqLERqO1xuQWo9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0JqPWZ1bmN0aW9uKCl7fTtcbkNqPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtIaChFaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9QSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX11YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PWwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiZcbihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHwoYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsXG5jKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRChcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixjKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RGo9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07XG5mdW5jdGlvbiBFaihhLGIpe2lmKCFJKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBTKGEpe3ZhciBiPW51bGwhPT1hLmFsdGVybmF0ZSYmYS5hbHRlcm5hdGUuY2hpbGQ9PT1hLmNoaWxkLGM9MCxkPTA7aWYoYilmb3IodmFyIGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQsZHw9ZS5mbGFncyYxNDY4MDA2NCxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Vsc2UgZm9yKGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MsZHw9ZS5mbGFncyxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Euc3VidHJlZUZsYWdzfD1kO2EuY2hpbGRMYW5lcz1jO3JldHVybiBifVxuZnVuY3Rpb24gRmooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIFMoYiksbnVsbDtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMzpkPWIuc3RhdGVOb2RlO0poKCk7RShXZik7RShIKTtPaCgpO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClHZyhiKT9iLmZsYWdzfD00Om51bGw9PT1hfHxhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYwPT09KGIuZmxhZ3MmMjU2KXx8KGIuZmxhZ3N8PTEwMjQsbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpKTtCaihhLGIpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA1OkxoKGIpO3ZhciBlPUhoKEdoLmN1cnJlbnQpO1xuYz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKUNqKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtTKGIpO3JldHVybiBudWxsfWE9SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7ZFtQZl09ZjthPTAhPT0oYi5tb2RlJjEpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGQpO0QoXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmQpO0QoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEQoXCJpbnZhbGlkXCIsZCl9dWIoYyxmKTtlPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsaCxhKSxlPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsXG5oLGEpLGU9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTplYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmXCJvblNjcm9sbFwiPT09ZyYmRChcInNjcm9sbFwiLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtkYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPUJmKX1kPWU7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YSYmKGE9a2IoYykpO1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XG5cInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVtPZl09YjthW1BmXT1kO0FqKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTthOntnPXZiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsYSk7RChcImNsb3NlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmEpO0QoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWQ7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9Z2IoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXViKGMsZSk7aD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3NiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZuYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09XG5jfHxcIlwiIT09aykmJm9iKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZvYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGVhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkQoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZ0YShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2RiKGEsZCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLFxuITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1CZil9c3dpdGNoKGMpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ZD0hIWQuYXV0b0ZvY3VzO2JyZWFrIGE7Y2FzZSBcImltZ1wiOmQ9ITA7YnJlYWsgYTtkZWZhdWx0OmQ9ITF9fWQmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mil9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGooYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7Yz1IaChHaC5jdXJyZW50KTtIaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2lmKGY9ZC5ub2RlVmFsdWUhPT1jKWlmKGE9XG54ZyxudWxsIT09YSlzd2l0Y2goYS50YWcpe2Nhc2UgMzpBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKTticmVhaztjYXNlIDU6ITAhPT1hLm1lbW9pemVkUHJvcHMuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKX1mJiYoYi5mbGFnc3w9NCl9ZWxzZSBkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFtPZl09YixiLnN0YXRlTm9kZT1kfVMoYik7cmV0dXJuIG51bGw7Y2FzZSAxMzpFKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsIT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2lmKEkmJm51bGwhPT15ZyYmMCE9PShiLm1vZGUmMSkmJjA9PT0oYi5mbGFncyYxMjgpKUhnKCksSWcoKSxiLmZsYWdzfD05ODU2MCxmPSExO2Vsc2UgaWYoZj1HZyhiKSxudWxsIT09ZCYmbnVsbCE9PWQuZGVoeWRyYXRlZCl7aWYobnVsbD09PVxuYSl7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTgpKTtmPWIubWVtb2l6ZWRTdGF0ZTtmPW51bGwhPT1mP2YuZGVoeWRyYXRlZDpudWxsO2lmKCFmKXRocm93IEVycm9yKHAoMzE3KSk7ZltPZl09Yn1lbHNlIElnKCksMD09PShiLmZsYWdzJjEyOCkmJihiLm1lbW9pemVkU3RhdGU9bnVsbCksYi5mbGFnc3w9NDtTKGIpO2Y9ITF9ZWxzZSBudWxsIT09emcmJihHaih6Zyksemc9bnVsbCksZj0hMDtpZighZilyZXR1cm4gYi5mbGFncyY2NTUzNj9iOm51bGx9aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7ZCE9PShudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkmJmQmJihiLmNoaWxkLmZsYWdzfD04MTkyLDAhPT0oYi5tb2RlJjEpJiYobnVsbD09PWF8fDAhPT0oTS5jdXJyZW50JjEpPzA9PT1UJiYoVD0zKTp1aigpKSk7bnVsbCE9PWIudXBkYXRlUXVldWUmJihiLmZsYWdzfD00KTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxcbkJqKGEsYiksbnVsbD09PWEmJnNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFMoYiksbnVsbDtjYXNlIDEwOnJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLFMoYiksbnVsbDtjYXNlIDE3OnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDE5OkUoTSk7Zj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWYpcmV0dXJuIFMoYiksbnVsbDtkPTAhPT0oYi5mbGFncyYxMjgpO2c9Zi5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZClFaihmLCExKTtlbHNle2lmKDAhPT1UfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9TWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTEyODtFaihmLCExKTtkPWcudXBkYXRlUXVldWU7bnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPWQsYi5mbGFnc3w9NCk7Yi5zdWJ0cmVlRmxhZ3M9MDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0xNDY4MDA2Nixcbmc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5zdWJ0cmVlRmxhZ3M9MCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYuc3VidHJlZUZsYWdzPTAsZi5kZWxldGlvbnM9bnVsbCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxmLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0coTSxNLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPVxuYS5zaWJsaW5nfW51bGwhPT1mLnRhaWwmJkIoKT5IaiYmKGIuZmxhZ3N8PTEyOCxkPSEwLEVqKGYsITEpLGIubGFuZXM9NDE5NDMwNCl9ZWxzZXtpZighZClpZihhPU1oKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD0xMjgsZD0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRWooZiwhMCksbnVsbD09PWYudGFpbCYmXCJoaWRkZW5cIj09PWYudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIUkpcmV0dXJuIFMoYiksbnVsbH1lbHNlIDIqQigpLWYucmVuZGVyaW5nU3RhcnRUaW1lPkhqJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PTEyOCxkPSEwLEVqKGYsITEpLGIubGFuZXM9NDE5NDMwNCk7Zi5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1mLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGYubGFzdD1nKX1pZihudWxsIT09Zi50YWlsKXJldHVybiBiPWYudGFpbCxmLnJlbmRlcmluZz1cbmIsZi50YWlsPWIuc2libGluZyxmLnJlbmRlcmluZ1N0YXJ0VGltZT1CKCksYi5zaWJsaW5nPW51bGwsYz1NLmN1cnJlbnQsRyhNLGQ/YyYxfDI6YyYxKSxiO1MoYik7cmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBJaigpLGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PWQmJihiLmZsYWdzfD04MTkyKSxkJiYwIT09KGIubW9kZSYxKT8wIT09KGdqJjEwNzM3NDE4MjQpJiYoUyhiKSxiLnN1YnRyZWVGbGFncyY2JiYoYi5mbGFnc3w9ODE5MikpOlMoYiksbnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2Nhc2UgMjU6cmV0dXJuIG51bGx9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBKaihhLGIpe3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLGE9Yi5mbGFncyxhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMzpyZXR1cm4gSmgoKSxFKFdmKSxFKEgpLE9oKCksYT1iLmZsYWdzLDAhPT0oYSY2NTUzNikmJjA9PT0oYSYxMjgpPyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgNTpyZXR1cm4gTGgoYiksbnVsbDtjYXNlIDEzOkUoTSk7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1iLmFsdGVybmF0ZSl0aHJvdyBFcnJvcihwKDM0MCkpO0lnKCl9YT1iLmZsYWdzO3JldHVybiBhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEUoTSksbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksbnVsbDtjYXNlIDEwOnJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBJaigpLFxubnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBLaj0hMSxVPSExLExqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0LFY9bnVsbDtmdW5jdGlvbiBNaihhLGIpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKGQpe1coYSxiLGQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gTmooYSxiLGMpe3RyeXtjKCl9Y2F0Y2goZCl7VyhhLGIsZCl9fXZhciBPaj0hMTtcbmZ1bmN0aW9uIFBqKGEsYil7Q2Y9ZGQ7YT1NZSgpO2lmKE5lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBjPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntjPShjPWEub3duZXJEb2N1bWVudCkmJmMuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZD1jLmdldFNlbGVjdGlvbiYmYy5nZXRTZWxlY3Rpb24oKTtpZihkJiYwIT09ZC5yYW5nZUNvdW50KXtjPWQuYW5jaG9yTm9kZTt2YXIgZT1kLmFuY2hvck9mZnNldCxmPWQuZm9jdXNOb2RlO2Q9ZC5mb2N1c09mZnNldDt0cnl7Yy5ub2RlVHlwZSxmLm5vZGVUeXBlfWNhdGNoKEYpe2M9bnVsbDticmVhayBhfXZhciBnPTAsaD0tMSxrPS0xLGw9MCxtPTAscT1hLHI9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB5Ozspe3EhPT1jfHwwIT09ZSYmMyE9PXEubm9kZVR5cGV8fChoPWcrZSk7cSE9PWZ8fDAhPT1kJiYzIT09cS5ub2RlVHlwZXx8KGs9ZytkKTszPT09cS5ub2RlVHlwZSYmKGcrPVxucS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHk9cS5maXJzdENoaWxkKSlicmVhaztyPXE7cT15fWZvcig7Oyl7aWYocT09PWEpYnJlYWsgYjtyPT09YyYmKytsPT09ZSYmKGg9Zyk7cj09PWYmJisrbT09PWQmJihrPWcpO2lmKG51bGwhPT0oeT1xLm5leHRTaWJsaW5nKSlicmVhaztxPXI7cj1xLnBhcmVudE5vZGV9cT15fWM9LTE9PT1ofHwtMT09PWs/bnVsbDp7c3RhcnQ6aCxlbmQ6a319ZWxzZSBjPW51bGx9Yz1jfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBjPW51bGw7RGY9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Y307ZGQ9ITE7Zm9yKFY9YjtudWxsIT09VjspaWYoYj1WLGE9Yi5jaGlsZCwwIT09KGIuc3VidHJlZUZsYWdzJjEwMjgpJiZudWxsIT09YSlhLnJldHVybj1iLFY9YTtlbHNlIGZvcig7bnVsbCE9PVY7KXtiPVY7dHJ5e3ZhciBuPWIuYWx0ZXJuYXRlO2lmKDAhPT0oYi5mbGFncyYxMDI0KSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7XG5jYXNlIDE6aWYobnVsbCE9PW4pe3ZhciB0PW4ubWVtb2l6ZWRQcm9wcyxKPW4ubWVtb2l6ZWRTdGF0ZSx4PWIuc3RhdGVOb2RlLHc9eC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP3Q6TGcoYi50eXBlLHQpLEopO3guX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9d31icmVhaztjYXNlIDM6dmFyIHU9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzsxPT09dS5ub2RlVHlwZT91LnRleHRDb250ZW50PVwiXCI6OT09PXUubm9kZVR5cGUmJnUuZG9jdW1lbnRFbGVtZW50JiZ1LnJlbW92ZUNoaWxkKHUuZG9jdW1lbnRFbGVtZW50KTticmVhaztjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9fWNhdGNoKEYpe1coYixiLnJldHVybixGKX1hPWIuc2libGluZztpZihudWxsIT09YSl7YS5yZXR1cm49Yi5yZXR1cm47Vj1hO2JyZWFrfVY9Yi5yZXR1cm59bj1PajtPaj0hMTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFFqKGEsYixjKXt2YXIgZD1iLnVwZGF0ZVF1ZXVlO2Q9bnVsbCE9PWQ/ZC5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBlPWQ9ZC5uZXh0O2Rve2lmKChlLnRhZyZhKT09PWEpe3ZhciBmPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWYmJk5qKGIsYyxmKX1lPWUubmV4dH13aGlsZShlIT09ZCl9fWZ1bmN0aW9uIFJqKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBTaihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1jO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fVxuZnVuY3Rpb24gVGooYSl7dmFyIGI9YS5hbHRlcm5hdGU7bnVsbCE9PWImJihhLmFsdGVybmF0ZT1udWxsLFRqKGIpKTthLmNoaWxkPW51bGw7YS5kZWxldGlvbnM9bnVsbDthLnNpYmxpbmc9bnVsbDs1PT09YS50YWcmJihiPWEuc3RhdGVOb2RlLG51bGwhPT1iJiYoZGVsZXRlIGJbT2ZdLGRlbGV0ZSBiW1BmXSxkZWxldGUgYltvZl0sZGVsZXRlIGJbUWZdLGRlbGV0ZSBiW1JmXSkpO2Euc3RhdGVOb2RlPW51bGw7YS5yZXR1cm49bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gVWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBWaihhKXthOmZvcig7Oyl7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxVaihhLnJldHVybikpcmV0dXJuIG51bGw7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2ZvcihhPWEuc2libGluZzs1IT09YS50YWcmJjYhPT1hLnRhZyYmMTghPT1hLnRhZzspe2lmKGEuZmxhZ3MmMiljb250aW51ZSBhO2lmKG51bGw9PT1hLmNoaWxkfHw0PT09YS50YWcpY29udGludWUgYTtlbHNlIGEuY2hpbGQucmV0dXJuPWEsYT1hLmNoaWxkfWlmKCEoYS5mbGFncyYyKSlyZXR1cm4gYS5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24gV2ooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPUJmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspV2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gWGooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihYaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVhqKGEsYixjKSxhPWEuc2libGluZ312YXIgWD1udWxsLFlqPSExO2Z1bmN0aW9uIFpqKGEsYixjKXtmb3IoYz1jLmNoaWxkO251bGwhPT1jOylhayhhLGIsYyksYz1jLnNpYmxpbmd9XG5mdW5jdGlvbiBhayhhLGIsYyl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7bGMub25Db21taXRGaWJlclVubW91bnQoa2MsYyl9Y2F0Y2goaCl7fXN3aXRjaChjLnRhZyl7Y2FzZSA1OlV8fE1qKGMsYik7Y2FzZSA2OnZhciBkPVgsZT1ZajtYPW51bGw7WmooYSxiLGMpO1g9ZDtZaj1lO251bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKTphLnJlbW92ZUNoaWxkKGMpKTpYLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSAxODpudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9LZihhLnBhcmVudE5vZGUsYyk6MT09PWEubm9kZVR5cGUmJktmKGEsYyksYmQoYSkpOktmKFgsYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDQ6ZD1YO2U9WWo7WD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO1xuWmooYSxiLGMpO1g9ZDtZaj1lO2JyZWFrO2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTppZighVSYmKGQ9Yy51cGRhdGVRdWV1ZSxudWxsIT09ZCYmKGQ9ZC5sYXN0RWZmZWN0LG51bGwhPT1kKSkpe2U9ZD1kLm5leHQ7ZG97dmFyIGY9ZSxnPWYuZGVzdHJveTtmPWYudGFnO3ZvaWQgMCE9PWcmJigwIT09KGYmMik/TmooYyxiLGcpOjAhPT0oZiY0KSYmTmooYyxiLGcpKTtlPWUubmV4dH13aGlsZShlIT09ZCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMTppZighVSYmKE1qKGMsYiksZD1jLnN0YXRlTm9kZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsVW5tb3VudCkpdHJ5e2QucHJvcHM9Yy5tZW1vaXplZFByb3BzLGQuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChoKXtXKGMsYixoKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAyMTpaaihhLGIsYyk7YnJlYWs7Y2FzZSAyMjpjLm1vZGUmMT8oVT0oZD1VKXx8bnVsbCE9PVxuYy5tZW1vaXplZFN0YXRlLFpqKGEsYixjKSxVPWQpOlpqKGEsYixjKTticmVhaztkZWZhdWx0OlpqKGEsYixjKX19ZnVuY3Rpb24gYmsoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgTGopO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1jay5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIGRrKGEsYil7dmFyIGM9Yi5kZWxldGlvbnM7aWYobnVsbCE9PWMpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07dHJ5e3ZhciBmPWEsZz1iLGg9ZzthOmZvcig7bnVsbCE9PWg7KXtzd2l0Y2goaC50YWcpe2Nhc2UgNTpYPWguc3RhdGVOb2RlO1lqPSExO2JyZWFrIGE7Y2FzZSAzOlg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhO2Nhc2UgNDpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYX1oPWgucmV0dXJufWlmKG51bGw9PT1YKXRocm93IEVycm9yKHAoMTYwKSk7YWsoZixnLGUpO1g9bnVsbDtZaj0hMTt2YXIgaz1lLmFsdGVybmF0ZTtudWxsIT09ayYmKGsucmV0dXJuPW51bGwpO2UucmV0dXJuPW51bGx9Y2F0Y2gobCl7VyhlLGIsbCl9fWlmKGIuc3VidHJlZUZsYWdzJjEyODU0KWZvcihiPWIuY2hpbGQ7bnVsbCE9PWI7KWVrKGIsYSksYj1iLnNpYmxpbmd9XG5mdW5jdGlvbiBlayhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS5mbGFncztzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7dHJ5e1FqKDMsYSxhLnJldHVybiksUmooMyxhKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9dHJ5e1FqKDUsYSxhLnJldHVybil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDE6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2JyZWFrO2Nhc2UgNTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7aWYoYS5mbGFncyYzMil7dmFyIGU9YS5zdGF0ZU5vZGU7dHJ5e29iKGUsXCJcIil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1pZihkJjQmJihlPWEuc3RhdGVOb2RlLG51bGwhPWUpKXt2YXIgZj1hLm1lbW9pemVkUHJvcHMsZz1udWxsIT09Yz9jLm1lbW9pemVkUHJvcHM6ZixoPWEudHlwZSxrPWEudXBkYXRlUXVldWU7XG5hLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWspdHJ5e1wiaW5wdXRcIj09PWgmJlwicmFkaW9cIj09PWYudHlwZSYmbnVsbCE9Zi5uYW1lJiZhYihlLGYpO3ZiKGgsZyk7dmFyIGw9dmIoaCxmKTtmb3IoZz0wO2c8ay5sZW5ndGg7Zys9Mil7dmFyIG09a1tnXSxxPWtbZysxXTtcInN0eWxlXCI9PT1tP3NiKGUscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bT9uYihlLHEpOlwiY2hpbGRyZW5cIj09PW0/b2IoZSxxKTp0YShlLG0scSxsKX1zd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6YmIoZSxmKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihlLGYpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp2YXIgcj1lLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZi5tdWx0aXBsZTt2YXIgeT1mLnZhbHVlO251bGwhPXk/ZmIoZSwhIWYubXVsdGlwbGUseSwhMSk6ciE9PSEhZi5tdWx0aXBsZSYmKG51bGwhPWYuZGVmYXVsdFZhbHVlP2ZiKGUsISFmLm11bHRpcGxlLFxuZi5kZWZhdWx0VmFsdWUsITApOmZiKGUsISFmLm11bHRpcGxlLGYubXVsdGlwbGU/W106XCJcIiwhMSkpfWVbUGZdPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDY6ZGsoYixhKTtmayhhKTtpZihkJjQpe2lmKG51bGw9PT1hLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2MikpO2U9YS5zdGF0ZU5vZGU7Zj1hLm1lbW9pemVkUHJvcHM7dHJ5e2Uubm9kZVZhbHVlPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDM6ZGsoYixhKTtmayhhKTtpZihkJjQmJm51bGwhPT1jJiZjLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXRyeXtiZChiLmNvbnRhaW5lckluZm8pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX1icmVhaztjYXNlIDQ6ZGsoYixhKTtmayhhKTticmVhaztjYXNlIDEzOmRrKGIsYSk7ZmsoYSk7ZT1hLmNoaWxkO2UuZmxhZ3MmODE5MiYmKGY9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZSxlLnN0YXRlTm9kZS5pc0hpZGRlbj1mLCFmfHxcbm51bGwhPT1lLmFsdGVybmF0ZSYmbnVsbCE9PWUuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGV8fChnaz1CKCkpKTtkJjQmJmJrKGEpO2JyZWFrO2Nhc2UgMjI6bT1udWxsIT09YyYmbnVsbCE9PWMubWVtb2l6ZWRTdGF0ZTthLm1vZGUmMT8oVT0obD1VKXx8bSxkayhiLGEpLFU9bCk6ZGsoYixhKTtmayhhKTtpZihkJjgxOTIpe2w9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZigoYS5zdGF0ZU5vZGUuaXNIaWRkZW49bCkmJiFtJiYwIT09KGEubW9kZSYxKSlmb3IoVj1hLG09YS5jaGlsZDtudWxsIT09bTspe2ZvcihxPVY9bTtudWxsIT09Vjspe3I9Vjt5PXIuY2hpbGQ7c3dpdGNoKHIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6UWooNCxyLHIucmV0dXJuKTticmVhaztjYXNlIDE6TWoocixyLnJldHVybik7dmFyIG49ci5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFVubW91bnQpe2Q9cjtjPXIucmV0dXJuO3RyeXtiPWQsbi5wcm9wcz1cbmIubWVtb2l6ZWRQcm9wcyxuLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxuLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7VyhkLGMsdCl9fWJyZWFrO2Nhc2UgNTpNaihyLHIucmV0dXJuKTticmVhaztjYXNlIDIyOmlmKG51bGwhPT1yLm1lbW9pemVkU3RhdGUpe2hrKHEpO2NvbnRpbnVlfX1udWxsIT09eT8oeS5yZXR1cm49cixWPXkpOmhrKHEpfW09bS5zaWJsaW5nfWE6Zm9yKG09bnVsbCxxPWE7Oyl7aWYoNT09PXEudGFnKXtpZihudWxsPT09bSl7bT1xO3RyeXtlPXEuc3RhdGVOb2RlLGw/KGY9ZS5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGg9cS5zdGF0ZU5vZGUsaz1xLm1lbW9pemVkUHJvcHMuc3R5bGUsZz12b2lkIDAhPT1rJiZudWxsIT09ayYmay5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ay5kaXNwbGF5Om51bGwsaC5zdHlsZS5kaXNwbGF5PVxucmIoXCJkaXNwbGF5XCIsZykpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19fWVsc2UgaWYoNj09PXEudGFnKXtpZihudWxsPT09bSl0cnl7cS5zdGF0ZU5vZGUubm9kZVZhbHVlPWw/XCJcIjpxLm1lbW9pemVkUHJvcHN9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1lbHNlIGlmKCgyMiE9PXEudGFnJiYyMyE9PXEudGFnfHxudWxsPT09cS5tZW1vaXplZFN0YXRlfHxxPT09YSkmJm51bGwhPT1xLmNoaWxkKXtxLmNoaWxkLnJldHVybj1xO3E9cS5jaGlsZDtjb250aW51ZX1pZihxPT09YSlicmVhayBhO2Zvcig7bnVsbD09PXEuc2libGluZzspe2lmKG51bGw9PT1xLnJldHVybnx8cS5yZXR1cm49PT1hKWJyZWFrIGE7bT09PXEmJihtPW51bGwpO3E9cS5yZXR1cm59bT09PXEmJihtPW51bGwpO3Euc2libGluZy5yZXR1cm49cS5yZXR1cm47cT1xLnNpYmxpbmd9fWJyZWFrO2Nhc2UgMTk6ZGsoYixhKTtmayhhKTtkJjQmJmJrKGEpO2JyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDpkayhiLFxuYSksZmsoYSl9fWZ1bmN0aW9uIGZrKGEpe3ZhciBiPWEuZmxhZ3M7aWYoYiYyKXt0cnl7YTp7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoVWooYykpe3ZhciBkPWM7YnJlYWsgYX1jPWMucmV0dXJufXRocm93IEVycm9yKHAoMTYwKSk7fXN3aXRjaChkLnRhZyl7Y2FzZSA1OnZhciBlPWQuc3RhdGVOb2RlO2QuZmxhZ3MmMzImJihvYihlLFwiXCIpLGQuZmxhZ3MmPS0zMyk7dmFyIGY9VmooYSk7WGooYSxmLGUpO2JyZWFrO2Nhc2UgMzpjYXNlIDQ6dmFyIGc9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxoPVZqKGEpO1dqKGEsaCxnKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYxKSk7fX1jYXRjaChrKXtXKGEsYS5yZXR1cm4sayl9YS5mbGFncyY9LTN9YiY0MDk2JiYoYS5mbGFncyY9LTQwOTcpfWZ1bmN0aW9uIGlrKGEsYixjKXtWPWE7amsoYSxiLGMpfVxuZnVuY3Rpb24gamsoYSxiLGMpe2Zvcih2YXIgZD0wIT09KGEubW9kZSYxKTtudWxsIT09Vjspe3ZhciBlPVYsZj1lLmNoaWxkO2lmKDIyPT09ZS50YWcmJmQpe3ZhciBnPW51bGwhPT1lLm1lbW9pemVkU3RhdGV8fEtqO2lmKCFnKXt2YXIgaD1lLmFsdGVybmF0ZSxrPW51bGwhPT1oJiZudWxsIT09aC5tZW1vaXplZFN0YXRlfHxVO2g9S2o7dmFyIGw9VTtLaj1nO2lmKChVPWspJiYhbClmb3IoVj1lO251bGwhPT1WOylnPVYsaz1nLmNoaWxkLDIyPT09Zy50YWcmJm51bGwhPT1nLm1lbW9pemVkU3RhdGU/a2soZSk6bnVsbCE9PWs/KGsucmV0dXJuPWcsVj1rKTprayhlKTtmb3IoO251bGwhPT1mOylWPWYsamsoZixiLGMpLGY9Zi5zaWJsaW5nO1Y9ZTtLaj1oO1U9bH1sayhhLGIsYyl9ZWxzZSAwIT09KGUuc3VidHJlZUZsYWdzJjg3NzIpJiZudWxsIT09Zj8oZi5yZXR1cm49ZSxWPWYpOmxrKGEsYixjKX19XG5mdW5jdGlvbiBsayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZigwIT09KGIuZmxhZ3MmODc3Mikpe3ZhciBjPWIuYWx0ZXJuYXRlO3RyeXtpZigwIT09KGIuZmxhZ3MmODc3Mikpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlV8fFJqKDUsYik7YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKGIuZmxhZ3MmNCYmIVUpaWYobnVsbD09PWMpZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGU9Yi5lbGVtZW50VHlwZT09PWIudHlwZT9jLm1lbW9pemVkUHJvcHM6TGcoYi50eXBlLGMubWVtb2l6ZWRQcm9wcyk7ZC5jb21wb25lbnREaWRVcGRhdGUoZSxjLm1lbW9pemVkU3RhdGUsZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIGY9Yi51cGRhdGVRdWV1ZTtudWxsIT09ZiYmaWgoYixmLGQpO2JyZWFrO2Nhc2UgMzp2YXIgZz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1nKXtjPW51bGw7aWYobnVsbCE9PWIuY2hpbGQpc3dpdGNoKGIuY2hpbGQudGFnKXtjYXNlIDU6Yz1cbmIuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpjPWIuY2hpbGQuc3RhdGVOb2RlfWloKGIsZyxjKX1icmVhaztjYXNlIDU6dmFyIGg9Yi5zdGF0ZU5vZGU7aWYobnVsbD09PWMmJmIuZmxhZ3MmNCl7Yz1oO3ZhciBrPWIubWVtb2l6ZWRQcm9wcztzd2l0Y2goYi50eXBlKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmsuYXV0b0ZvY3VzJiZjLmZvY3VzKCk7YnJlYWs7Y2FzZSBcImltZ1wiOmsuc3JjJiYoYy5zcmM9ay5zcmMpfX1icmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzppZihudWxsPT09Yi5tZW1vaXplZFN0YXRlKXt2YXIgbD1iLmFsdGVybmF0ZTtpZihudWxsIT09bCl7dmFyIG09bC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1tKXt2YXIgcT1tLmRlaHlkcmF0ZWQ7bnVsbCE9PXEmJmJkKHEpfX19YnJlYWs7Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjE6Y2FzZSAyMjpjYXNlIDIzOmNhc2UgMjU6YnJlYWs7XG5kZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fVV8fGIuZmxhZ3MmNTEyJiZTaihiKX1jYXRjaChyKXtXKGIsYi5yZXR1cm4scil9fWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9Yz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1mdW5jdGlvbiBoayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBjPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fVxuZnVuY3Rpb24ga2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7dHJ5e3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp2YXIgYz1iLnJldHVybjt0cnl7UmooNCxiKX1jYXRjaChrKXtXKGIsYyxrKX1icmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQpe3ZhciBlPWIucmV0dXJuO3RyeXtkLmNvbXBvbmVudERpZE1vdW50KCl9Y2F0Y2goayl7VyhiLGUsayl9fXZhciBmPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZixrKX1icmVhaztjYXNlIDU6dmFyIGc9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixnLGspfX19Y2F0Y2goayl7VyhiLGIucmV0dXJuLGspfWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGg9Yi5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1iLnJldHVybjtWPWg7YnJlYWt9Vj1iLnJldHVybn19XG52YXIgbWs9TWF0aC5jZWlsLG5rPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsb2s9dWEuUmVhY3RDdXJyZW50T3duZXIscGs9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSz0wLFI9bnVsbCxZPW51bGwsWj0wLGdqPTAsZmo9VWYoMCksVD0wLHFrPW51bGwsaGg9MCxyaz0wLHNrPTAsdGs9bnVsbCx1az1udWxsLGdrPTAsSGo9SW5maW5pdHksdms9bnVsbCxQaT0hMSxRaT1udWxsLFNpPW51bGwsd2s9ITEseGs9bnVsbCx5az0wLHprPTAsQWs9bnVsbCxCaz0tMSxDaz0wO2Z1bmN0aW9uIEwoKXtyZXR1cm4gMCE9PShLJjYpP0IoKTotMSE9PUJrP0JrOkJrPUIoKX1cbmZ1bmN0aW9uIGxoKGEpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiAxO2lmKDAhPT0oSyYyKSYmMCE9PVopcmV0dXJuIFomLVo7aWYobnVsbCE9PUtnLnRyYW5zaXRpb24pcmV0dXJuIDA9PT1DayYmKENrPXljKCkpLENrO2E9QztpZigwIT09YSlyZXR1cm4gYTthPXdpbmRvdy5ldmVudDthPXZvaWQgMD09PWE/MTY6amQoYS50eXBlKTtyZXR1cm4gYX1mdW5jdGlvbiBtaChhLGIsYyxkKXtpZig1MDx6ayl0aHJvdyB6az0wLEFrPW51bGwsRXJyb3IocCgxODUpKTtBYyhhLGMsZCk7aWYoMD09PShLJjIpfHxhIT09UilhPT09UiYmKDA9PT0oSyYyKSYmKHJrfD1jKSw0PT09VCYmRGsoYSxaKSksRWsoYSxkKSwxPT09YyYmMD09PUsmJjA9PT0oYi5tb2RlJjEpJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9XG5mdW5jdGlvbiBFayhhLGIpe3ZhciBjPWEuY2FsbGJhY2tOb2RlO3djKGEsYik7dmFyIGQ9dWMoYSxhPT09Uj9aOjApO2lmKDA9PT1kKW51bGwhPT1jJiZiYyhjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wO2Vsc2UgaWYoYj1kJi1kLGEuY2FsbGJhY2tQcmlvcml0eSE9PWIpe251bGwhPWMmJmJjKGMpO2lmKDE9PT1iKTA9PT1hLnRhZz9pZyhGay5iaW5kKG51bGwsYSkpOmhnKEZrLmJpbmQobnVsbCxhKSksSmYoZnVuY3Rpb24oKXswPT09KEsmNikmJmpnKCl9KSxjPW51bGw7ZWxzZXtzd2l0Y2goRGMoZCkpe2Nhc2UgMTpjPWZjO2JyZWFrO2Nhc2UgNDpjPWdjO2JyZWFrO2Nhc2UgMTY6Yz1oYzticmVhaztjYXNlIDUzNjg3MDkxMjpjPWpjO2JyZWFrO2RlZmF1bHQ6Yz1oY31jPUdrKGMsSGsuYmluZChudWxsLGEpKX1hLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIEhrKGEsYil7Qms9LTE7Q2s9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYz1hLmNhbGxiYWNrTm9kZTtpZihJaygpJiZhLmNhbGxiYWNrTm9kZSE9PWMpcmV0dXJuIG51bGw7dmFyIGQ9dWMoYSxhPT09Uj9aOjApO2lmKDA9PT1kKXJldHVybiBudWxsO2lmKDAhPT0oZCYzMCl8fDAhPT0oZCZhLmV4cGlyZWRMYW5lcyl8fGIpYj1KayhhLGQpO2Vsc2V7Yj1kO3ZhciBlPUs7S3w9Mjt2YXIgZj1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLEhqPUIoKSs1MDAsTGsoYSxiKTtkbyB0cnl7TWsoKTticmVha31jYXRjaChoKXtOayhhLGgpfXdoaWxlKDEpO1FnKCk7bmsuY3VycmVudD1mO0s9ZTtudWxsIT09WT9iPTA6KFI9bnVsbCxaPTAsYj1UKX1pZigwIT09Yil7Mj09PWImJihlPXhjKGEpLDAhPT1lJiYoZD1lLGI9T2soYSxlKSkpO2lmKDE9PT1iKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2lmKDY9PT1iKURrKGEsZCk7XG5lbHNle2U9YS5jdXJyZW50LmFsdGVybmF0ZTtpZigwPT09KGQmMzApJiYhUGsoZSkmJihiPUprKGEsZCksMj09PWImJihmPXhjKGEpLDAhPT1mJiYoZD1mLGI9T2soYSxmKSkpLDE9PT1iKSl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYzthLmZpbmlzaGVkV29yaz1lO2EuZmluaXNoZWRMYW5lcz1kO3N3aXRjaChiKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHAoMzQ1KSk7Y2FzZSAyOlFrKGEsdWssdmspO2JyZWFrO2Nhc2UgMzpEayhhLGQpO2lmKChkJjEzMDAyMzQyNCk9PT1kJiYoYj1nays1MDAtQigpLDEwPGIpKXtpZigwIT09dWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmZCkhPT1kKXtMKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksYik7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA0OkRrKGEsZCk7aWYoKGQmNDE5NDI0MCk9PT1cbmQpYnJlYWs7Yj1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxkOyl7dmFyIGc9MzEtb2MoZCk7Zj0xPDxnO2c9YltnXTtnPmUmJihlPWcpO2QmPX5mfWQ9ZTtkPUIoKS1kO2Q9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqbWsoZC8xOTYwKSktZDtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGQpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNTpRayhhLHVrLHZrKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzI5KSk7fX19RWsoYSxCKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWM/SGsuYmluZChudWxsLGEpOm51bGx9XG5mdW5jdGlvbiBPayhhLGIpe3ZhciBjPXRrO2EuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmKExrKGEsYikuZmxhZ3N8PTI1Nik7YT1KayhhLGIpOzIhPT1hJiYoYj11ayx1az1jLG51bGwhPT1iJiZHaihiKSk7cmV0dXJuIGF9ZnVuY3Rpb24gR2ooYSl7bnVsbD09PXVrP3VrPWE6dWsucHVzaC5hcHBseSh1ayxhKX1cbmZ1bmN0aW9uIFBrKGEpe2Zvcih2YXIgYj1hOzspe2lmKGIuZmxhZ3MmMTYzODQpe3ZhciBjPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMmJihjPWMuc3RvcmVzLG51bGwhPT1jKSlmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXSxmPWUuZ2V0U25hcHNob3Q7ZT1lLnZhbHVlO3RyeXtpZighSGUoZigpLGUpKXJldHVybiExfWNhdGNoKGcpe3JldHVybiExfX19Yz1iLmNoaWxkO2lmKGIuc3VidHJlZUZsYWdzJjE2Mzg0JiZudWxsIT09YyljLnJldHVybj1iLGI9YztlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiEwO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuITB9XG5mdW5jdGlvbiBEayhhLGIpe2ImPX5zaztiJj1+cms7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1vYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19ZnVuY3Rpb24gRmsoYSl7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7SWsoKTt2YXIgYj11YyhhLDApO2lmKDA9PT0oYiYxKSlyZXR1cm4gRWsoYSxCKCkpLG51bGw7dmFyIGM9SmsoYSxiKTtpZigwIT09YS50YWcmJjI9PT1jKXt2YXIgZD14YyhhKTswIT09ZCYmKGI9ZCxjPU9rKGEsZCkpfWlmKDE9PT1jKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGIpLEVrKGEsQigpKSxjO2lmKDY9PT1jKXRocm93IEVycm9yKHAoMzQ1KSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtRayhhLHVrLHZrKTtFayhhLEIoKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSayhhLGIpe3ZhciBjPUs7S3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtLPWMsMD09PUsmJihIaj1CKCkrNTAwLGZnJiZqZygpKX19ZnVuY3Rpb24gU2soYSl7bnVsbCE9PXhrJiYwPT09eGsudGFnJiYwPT09KEsmNikmJklrKCk7dmFyIGI9SztLfD0xO3ZhciBjPXBrLnRyYW5zaXRpb24sZD1DO3RyeXtpZihway50cmFuc2l0aW9uPW51bGwsQz0xLGEpcmV0dXJuIGEoKX1maW5hbGx5e0M9ZCxway50cmFuc2l0aW9uPWMsSz1iLDA9PT0oSyY2KSYmamcoKX19ZnVuY3Rpb24gSWooKXtnaj1mai5jdXJyZW50O0UoZmopfVxuZnVuY3Rpb24gTGsoYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsR2YoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yzt3ZyhkKTtzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmJGYoKTticmVhaztjYXNlIDM6SmgoKTtFKFdmKTtFKEgpO09oKCk7YnJlYWs7Y2FzZSA1OkxoKGQpO2JyZWFrO2Nhc2UgNDpKaCgpO2JyZWFrO2Nhc2UgMTM6RShNKTticmVhaztjYXNlIDE5OkUoTSk7YnJlYWs7Y2FzZSAxMDpSZyhkLnR5cGUuX2NvbnRleHQpO2JyZWFrO2Nhc2UgMjI6Y2FzZSAyMzpJaigpfWM9Yy5yZXR1cm59Uj1hO1k9YT13aChhLmN1cnJlbnQsbnVsbCk7Wj1naj1iO1Q9MDtxaz1udWxsO3NrPXJrPWhoPTA7dWs9dGs9bnVsbDtpZihudWxsIT09V2cpe2ZvcihiPVxuMDtiPFdnLmxlbmd0aDtiKyspaWYoYz1XZ1tiXSxkPWMuaW50ZXJsZWF2ZWQsbnVsbCE9PWQpe2MuaW50ZXJsZWF2ZWQ9bnVsbDt2YXIgZT1kLm5leHQsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe3ZhciBnPWYubmV4dDtmLm5leHQ9ZTtkLm5leHQ9Z31jLnBlbmRpbmc9ZH1XZz1udWxsfXJldHVybiBhfVxuZnVuY3Rpb24gTmsoYSxiKXtkb3t2YXIgYz1ZO3RyeXtRZygpO1BoLmN1cnJlbnQ9YWk7aWYoU2gpe2Zvcih2YXIgZD1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fVNoPSExfVJoPTA7UD1PPU49bnVsbDtUaD0hMTtVaD0wO29rLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtUPTE7cWs9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1aO2guZmxhZ3N8PTMyNzY4O2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWssbT1oLHE9bS50YWc7aWYoMD09PShtLm1vZGUmMSkmJigwPT09cXx8MTE9PT1xfHwxNT09PXEpKXt2YXIgcj1tLmFsdGVybmF0ZTtyPyhtLnVwZGF0ZVF1ZXVlPXIudXBkYXRlUXVldWUsbS5tZW1vaXplZFN0YXRlPXIubWVtb2l6ZWRTdGF0ZSxcbm0ubGFuZXM9ci5sYW5lcyk6KG0udXBkYXRlUXVldWU9bnVsbCxtLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIHk9VmkoZyk7aWYobnVsbCE9PXkpe3kuZmxhZ3MmPS0yNTc7V2koeSxnLGgsZixiKTt5Lm1vZGUmMSYmVGkoZixsLGIpO2I9eTtrPWw7dmFyIG49Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09bil7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtiLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBuLmFkZChrKTticmVhayBhfWVsc2V7aWYoMD09PShiJjEpKXtUaShmLGwsYik7dWooKTticmVhayBhfWs9RXJyb3IocCg0MjYpKX19ZWxzZSBpZihJJiZoLm1vZGUmMSl7dmFyIEo9VmkoZyk7aWYobnVsbCE9PUopezA9PT0oSi5mbGFncyY2NTUzNikmJihKLmZsYWdzfD0yNTYpO1dpKEosZyxoLGYsYik7SmcoS2koayxoKSk7YnJlYWsgYX19Zj1rPUtpKGssaCk7NCE9PVQmJihUPTIpO251bGw9PT10az90az1bZl06dGsucHVzaChmKTtmPWc7ZG97c3dpdGNoKGYudGFnKXtjYXNlIDM6Zi5mbGFnc3w9NjU1MzY7XG5iJj0tYjtmLmxhbmVzfD1iO3ZhciB4PU9pKGYsayxiKTtmaChmLHgpO2JyZWFrIGE7Y2FzZSAxOmg9azt2YXIgdz1mLnR5cGUsdT1mLnN0YXRlTm9kZTtpZigwPT09KGYuZmxhZ3MmMTI4KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1LmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVNpfHwhU2kuaGFzKHUpKSkpe2YuZmxhZ3N8PTY1NTM2O2ImPS1iO2YubGFuZXN8PWI7dmFyIEY9UmkoZixoLGIpO2ZoKGYsRik7YnJlYWsgYX19Zj1mLnJldHVybn13aGlsZShudWxsIT09Zil9VGsoYyl9Y2F0Y2gobmEpe2I9bmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1mdW5jdGlvbiBLaygpe3ZhciBhPW5rLmN1cnJlbnQ7bmsuY3VycmVudD1haTtyZXR1cm4gbnVsbD09PWE/YWk6YX1cbmZ1bmN0aW9uIHVqKCl7aWYoMD09PVR8fDM9PT1UfHwyPT09VClUPTQ7bnVsbD09PVJ8fDA9PT0oaGgmMjY4NDM1NDU1KSYmMD09PShyayYyNjg0MzU0NTUpfHxEayhSLFopfWZ1bmN0aW9uIEprKGEsYil7dmFyIGM9SztLfD0yO3ZhciBkPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsTGsoYSxiKTtkbyB0cnl7VWsoKTticmVha31jYXRjaChlKXtOayhhLGUpfXdoaWxlKDEpO1FnKCk7Sz1jO25rLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcihwKDI2MSkpO1I9bnVsbDtaPTA7cmV0dXJuIFR9ZnVuY3Rpb24gVWsoKXtmb3IoO251bGwhPT1ZOylWayhZKX1mdW5jdGlvbiBNaygpe2Zvcig7bnVsbCE9PVkmJiFjYygpOylWayhZKX1mdW5jdGlvbiBWayhhKXt2YXIgYj1XayhhLmFsdGVybmF0ZSxhLGdqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/VGsoYSk6WT1iO29rLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFRrKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMzI3NjgpKXtpZihjPUZqKGMsYixnaiksbnVsbCE9PWMpe1k9YztyZXR1cm59fWVsc2V7Yz1KaihjLGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0zMjc2NztZPWM7cmV0dXJufWlmKG51bGwhPT1hKWEuZmxhZ3N8PTMyNzY4LGEuc3VidHJlZUZsYWdzPTAsYS5kZWxldGlvbnM9bnVsbDtlbHNle1Q9NjtZPW51bGw7cmV0dXJufX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVQmJihUPTUpfWZ1bmN0aW9uIFFrKGEsYixjKXt2YXIgZD1DLGU9cGsudHJhbnNpdGlvbjt0cnl7cGsudHJhbnNpdGlvbj1udWxsLEM9MSxYayhhLGIsYyxkKX1maW5hbGx5e3BrLnRyYW5zaXRpb249ZSxDPWR9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBYayhhLGIsYyxkKXtkbyBJaygpO3doaWxlKG51bGwhPT14ayk7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7Yz1hLmZpbmlzaGVkV29yazt2YXIgZT1hLmZpbmlzaGVkTGFuZXM7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHAoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrUHJpb3JpdHk9MDt2YXIgZj1jLmxhbmVzfGMuY2hpbGRMYW5lcztCYyhhLGYpO2E9PT1SJiYoWT1SPW51bGwsWj0wKTswPT09KGMuc3VidHJlZUZsYWdzJjIwNjQpJiYwPT09KGMuZmxhZ3MmMjA2NCl8fHdrfHwod2s9ITAsR2soaGMsZnVuY3Rpb24oKXtJaygpO3JldHVybiBudWxsfSkpO2Y9MCE9PShjLmZsYWdzJjE1OTkwKTtpZigwIT09KGMuc3VidHJlZUZsYWdzJjE1OTkwKXx8Zil7Zj1way50cmFuc2l0aW9uO3BrLnRyYW5zaXRpb249bnVsbDtcbnZhciBnPUM7Qz0xO3ZhciBoPUs7S3w9NDtvay5jdXJyZW50PW51bGw7UGooYSxjKTtlayhjLGEpO09lKERmKTtkZD0hIUNmO0RmPUNmPW51bGw7YS5jdXJyZW50PWM7aWsoYyxhLGUpO2RjKCk7Sz1oO0M9Zztway50cmFuc2l0aW9uPWZ9ZWxzZSBhLmN1cnJlbnQ9Yzt3ayYmKHdrPSExLHhrPWEseWs9ZSk7Zj1hLnBlbmRpbmdMYW5lczswPT09ZiYmKFNpPW51bGwpO21jKGMuc3RhdGVOb2RlLGQpO0VrKGEsQigpKTtpZihudWxsIT09Yilmb3IoZD1hLm9uUmVjb3ZlcmFibGVFcnJvcixjPTA7YzxiLmxlbmd0aDtjKyspZT1iW2NdLGQoZS52YWx1ZSx7Y29tcG9uZW50U3RhY2s6ZS5zdGFjayxkaWdlc3Q6ZS5kaWdlc3R9KTtpZihQaSl0aHJvdyBQaT0hMSxhPVFpLFFpPW51bGwsYTswIT09KHlrJjEpJiYwIT09YS50YWcmJklrKCk7Zj1hLnBlbmRpbmdMYW5lczswIT09KGYmMSk/YT09PUFrP3prKys6KHprPTAsQWs9YSk6ems9MDtqZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gSWsoKXtpZihudWxsIT09eGspe3ZhciBhPURjKHlrKSxiPXBrLnRyYW5zaXRpb24sYz1DO3RyeXtway50cmFuc2l0aW9uPW51bGw7Qz0xNj5hPzE2OmE7aWYobnVsbD09PXhrKXZhciBkPSExO2Vsc2V7YT14azt4az1udWxsO3lrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzMxKSk7dmFyIGU9SztLfD00O2ZvcihWPWEuY3VycmVudDtudWxsIT09Vjspe3ZhciBmPVYsZz1mLmNoaWxkO2lmKDAhPT0oVi5mbGFncyYxNikpe3ZhciBoPWYuZGVsZXRpb25zO2lmKG51bGwhPT1oKXtmb3IodmFyIGs9MDtrPGgubGVuZ3RoO2srKyl7dmFyIGw9aFtrXTtmb3IoVj1sO251bGwhPT1WOyl7dmFyIG09Vjtzd2l0Y2gobS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOCxtLGYpfXZhciBxPW0uY2hpbGQ7aWYobnVsbCE9PXEpcS5yZXR1cm49bSxWPXE7ZWxzZSBmb3IoO251bGwhPT1WOyl7bT1WO3ZhciByPW0uc2libGluZyx5PW0ucmV0dXJuO1RqKG0pO2lmKG09PT1cbmwpe1Y9bnVsbDticmVha31pZihudWxsIT09cil7ci5yZXR1cm49eTtWPXI7YnJlYWt9Vj15fX19dmFyIG49Zi5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe3ZhciB0PW4uY2hpbGQ7aWYobnVsbCE9PXQpe24uY2hpbGQ9bnVsbDtkb3t2YXIgSj10LnNpYmxpbmc7dC5zaWJsaW5nPW51bGw7dD1KfXdoaWxlKG51bGwhPT10KX19Vj1mfX1pZigwIT09KGYuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09ZylnLnJldHVybj1mLFY9ZztlbHNlIGI6Zm9yKDtudWxsIT09Vjspe2Y9VjtpZigwIT09KGYuZmxhZ3MmMjA0OCkpc3dpdGNoKGYudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDksZixmLnJldHVybil9dmFyIHg9Zi5zaWJsaW5nO2lmKG51bGwhPT14KXt4LnJldHVybj1mLnJldHVybjtWPXg7YnJlYWsgYn1WPWYucmV0dXJufX12YXIgdz1hLmN1cnJlbnQ7Zm9yKFY9dztudWxsIT09Vjspe2c9Vjt2YXIgdT1nLmNoaWxkO2lmKDAhPT0oZy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1cbnUpdS5yZXR1cm49ZyxWPXU7ZWxzZSBiOmZvcihnPXc7bnVsbCE9PVY7KXtoPVY7aWYoMCE9PShoLmZsYWdzJjIwNDgpKXRyeXtzd2l0Y2goaC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UmooOSxoKX19Y2F0Y2gobmEpe1coaCxoLnJldHVybixuYSl9aWYoaD09PWcpe1Y9bnVsbDticmVhayBifXZhciBGPWguc2libGluZztpZihudWxsIT09Ril7Ri5yZXR1cm49aC5yZXR1cm47Vj1GO2JyZWFrIGJ9Vj1oLnJldHVybn19Sz1lO2pnKCk7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vblBvc3RDb21taXRGaWJlclJvb3QpdHJ5e2xjLm9uUG9zdENvbW1pdEZpYmVyUm9vdChrYyxhKX1jYXRjaChuYSl7fWQ9ITB9cmV0dXJuIGR9ZmluYWxseXtDPWMscGsudHJhbnNpdGlvbj1ifX1yZXR1cm4hMX1mdW5jdGlvbiBZayhhLGIsYyl7Yj1LaShjLGIpO2I9T2koYSxiLDEpO2E9ZGgoYSxiLDEpO2I9TCgpO251bGwhPT1hJiYoQWMoYSwxLGIpLEVrKGEsYikpfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoMz09PWEudGFnKVlrKGEsYSxjKTtlbHNlIGZvcig7bnVsbCE9PWI7KXtpZigzPT09Yi50YWcpe1lrKGIsYSxjKTticmVha31lbHNlIGlmKDE9PT1iLnRhZyl7dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVNpfHwhU2kuaGFzKGQpKSl7YT1LaShjLGEpO2E9UmkoYixhLDEpO2I9ZGgoYixhLDEpO2E9TCgpO251bGwhPT1iJiYoQWMoYiwxLGEpLEVrKGIsYSkpO2JyZWFrfX1iPWIucmV0dXJufX1cbmZ1bmN0aW9uIFVpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1MKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1I9PT1hJiYoWiZjKT09PWMmJig0PT09VHx8Mz09PVQmJihaJjEzMDAyMzQyNCk9PT1aJiY1MDA+QigpLWdrP0xrKGEsMCk6c2t8PWMpO0VrKGEsYil9ZnVuY3Rpb24gWmsoYSxiKXswPT09YiYmKDA9PT0oYS5tb2RlJjEpP2I9MTooYj1zYyxzYzw8PTEsMD09PShzYyYxMzAwMjM0MjQpJiYoc2M9NDE5NDMwNCkpKTt2YXIgYz1MKCk7YT1aZyhhLGIpO251bGwhPT1hJiYoQWMoYSxiLGMpLEVrKGEsYykpfWZ1bmN0aW9uIHZqKGEpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZSxjPTA7bnVsbCE9PWImJihjPWIucmV0cnlMYW5lKTtaayhhLGMpfVxuZnVuY3Rpb24gY2soYSxiKXt2YXIgYz0wO3N3aXRjaChhLnRhZyl7Y2FzZSAxMzp2YXIgZD1hLnN0YXRlTm9kZTt2YXIgZT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihjPWUucmV0cnlMYW5lKTticmVhaztjYXNlIDE5OmQ9YS5zdGF0ZU5vZGU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMxNCkpO31udWxsIT09ZCYmZC5kZWxldGUoYik7WmsoYSxjKX12YXIgV2s7XG5Xaz1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fFdmLmN1cnJlbnQpVWc9ITA7ZWxzZXtpZigwPT09KGEubGFuZXMmYykmJjA9PT0oYi5mbGFncyYxMjgpKXJldHVybiBVZz0hMSx6aihhLGIsYyk7VWc9MCE9PShhLmZsYWdzJjEzMTA3Mik/ITA6ITF9ZWxzZSBVZz0hMSxJJiYwIT09KGIuZmxhZ3MmMTA0ODU3NikmJnVnKGIsbmcsYi5pbmRleCk7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBkPWIudHlwZTtqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9WWYoYixILmN1cnJlbnQpO1RnKGIsYyk7ZT1YaChudWxsLGIsZCxhLGUsYyk7dmFyIGY9YmkoKTtiLmZsYWdzfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZj8oYi50YWc9MSxiLm1lbW9pemVkU3RhdGU9bnVsbCxiLnVwZGF0ZVF1ZXVlPVxubnVsbCxaZihkKT8oZj0hMCxjZyhiKSk6Zj0hMSxiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsLGFoKGIpLGUudXBkYXRlcj1uaCxiLnN0YXRlTm9kZT1lLGUuX3JlYWN0SW50ZXJuYWxzPWIscmgoYixkLGEsYyksYj1raihudWxsLGIsZCwhMCxmLGMpKTooYi50YWc9MCxJJiZmJiZ2ZyhiKSxZaShudWxsLGIsZSxjKSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTY6ZD1iLmVsZW1lbnRUeXBlO2E6e2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wcztlPWQuX2luaXQ7ZD1lKGQuX3BheWxvYWQpO2IudHlwZT1kO2U9Yi50YWc9JGsoZCk7YT1MZyhkLGEpO3N3aXRjaChlKXtjYXNlIDA6Yj1kaihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9aWoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaShudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFqKG51bGwsYixkLExnKGQudHlwZSxhKSxjKTticmVhayBhfXRocm93IEVycm9yKHAoMzA2LFxuZCxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxkaihhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxpaihhLGIsZCxlLGMpO2Nhc2UgMzphOntsaihiKTtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDM4NykpO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkU3RhdGU7ZT1mLmVsZW1lbnQ7YmgoYSxiKTtnaChiLGQsbnVsbCxjKTt2YXIgZz1iLm1lbW9pemVkU3RhdGU7ZD1nLmVsZW1lbnQ7aWYoZi5pc0RlaHlkcmF0ZWQpaWYoZj17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDohMSxjYWNoZTpnLmNhY2hlLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6Zy5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9LGIudXBkYXRlUXVldWUuYmFzZVN0YXRlPVxuZixiLm1lbW9pemVkU3RhdGU9ZixiLmZsYWdzJjI1Nil7ZT1LaShFcnJvcihwKDQyMykpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgaWYoZCE9PWUpe2U9S2koRXJyb3IocCg0MjQpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGZvcih5Zz1MZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLHhnPWIsST0hMCx6Zz1udWxsLGM9Q2goYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3w0MDk2LGM9Yy5zaWJsaW5nO2Vsc2V7SWcoKTtpZihkPT09ZSl7Yj0kaShhLGIsYyk7YnJlYWsgYX1ZaShhLGIsZCxjKX1iPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBLaChiKSxudWxsPT09YSYmRWcoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixFZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmRWYoZCxmKSYmKGIuZmxhZ3N8PTMyKSxcbmhqKGEsYiksWWkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZFZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHBqKGEsYixjKTtjYXNlIDQ6cmV0dXJuIEloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPUJoKGIsbnVsbCxkLGMpOllpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxaaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkUHJvcHM7XG5nPWUudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1nO2lmKG51bGwhPT1mKWlmKEhlKGYudmFsdWUsZykpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhV2YuY3VycmVudCl7Yj0kaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZj1iLmNoaWxkLG51bGwhPT1mJiYoZi5yZXR1cm49Yik7bnVsbCE9PWY7KXt2YXIgaD1mLmRlcGVuZGVuY2llcztpZihudWxsIT09aCl7Zz1mLmNoaWxkO2Zvcih2YXIgaz1oLmZpcnN0Q29udGV4dDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQpe2lmKDE9PT1mLnRhZyl7az1jaCgtMSxjJi1jKTtrLnRhZz0yO3ZhciBsPWYudXBkYXRlUXVldWU7aWYobnVsbCE9PWwpe2w9bC5zaGFyZWQ7dmFyIG09bC5wZW5kaW5nO251bGw9PT1tP2submV4dD1rOihrLm5leHQ9bS5uZXh0LG0ubmV4dD1rKTtsLnBlbmRpbmc9a319Zi5sYW5lc3w9YztrPWYuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5sYW5lc3w9Yyk7U2coZi5yZXR1cm4sXG5jLGIpO2gubGFuZXN8PWM7YnJlYWt9az1rLm5leHR9fWVsc2UgaWYoMTA9PT1mLnRhZylnPWYudHlwZT09PWIudHlwZT9udWxsOmYuY2hpbGQ7ZWxzZSBpZigxOD09PWYudGFnKXtnPWYucmV0dXJuO2lmKG51bGw9PT1nKXRocm93IEVycm9yKHAoMzQxKSk7Zy5sYW5lc3w9YztoPWcuYWx0ZXJuYXRlO251bGwhPT1oJiYoaC5sYW5lc3w9Yyk7U2coZyxjLGIpO2c9Zi5zaWJsaW5nfWVsc2UgZz1mLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWY7ZWxzZSBmb3IoZz1mO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31mPWcuc2libGluZztpZihudWxsIT09Zil7Zi5yZXR1cm49Zy5yZXR1cm47Zz1mO2JyZWFrfWc9Zy5yZXR1cm59Zj1nfVlpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sVGcoYixjKSxlPVZnKGUpLGQ9ZChlKSxiLmZsYWdzfD0xLFlpKGEsYixkLGMpLFxuYi5jaGlsZDtjYXNlIDE0OnJldHVybiBkPWIudHlwZSxlPUxnKGQsYi5wZW5kaW5nUHJvcHMpLGU9TGcoZC50eXBlLGUpLGFqKGEsYixkLGUsYyk7Y2FzZSAxNTpyZXR1cm4gY2ooYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGpqKGEsYiksYi50YWc9MSxaZihkKT8oYT0hMCxjZyhiKSk6YT0hMSxUZyhiLGMpLHBoKGIsZCxlKSxyaChiLGQsZSxjKSxraihudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIHlqKGEsYixjKTtjYXNlIDIyOnJldHVybiBlaihhLGIsYyl9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9O2Z1bmN0aW9uIEdrKGEsYil7cmV0dXJuIGFjKGEsYil9XG5mdW5jdGlvbiBhbChhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuc3VidHJlZUZsYWdzPXRoaXMuZmxhZ3M9MDt0aGlzLmRlbGV0aW9ucz1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBCZyhhLGIsYyxkKXtyZXR1cm4gbmV3IGFsKGEsYixjLGQpfWZ1bmN0aW9uIGJqKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiAkayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmooYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PURhKXJldHVybiAxMTtpZihhPT09R2EpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gd2goYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1CZyhhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLnN1YnRyZWVGbGFncz0wLGMuZGVsZXRpb25zPW51bGwpO2MuZmxhZ3M9YS5mbGFncyYxNDY4MDA2NDtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24geWgoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJqKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHlhOnJldHVybiBBaChjLmNoaWxkcmVuLGUsZixiKTtjYXNlIHphOmc9ODtlfD04O2JyZWFrO2Nhc2UgQWE6cmV0dXJuIGE9QmcoMTIsYyxiLGV8MiksYS5lbGVtZW50VHlwZT1BYSxhLmxhbmVzPWYsYTtjYXNlIEVhOnJldHVybiBhPUJnKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPUVhLGEubGFuZXM9ZixhO2Nhc2UgRmE6cmV0dXJuIGE9QmcoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9RmEsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gcWooYyxlLGYsYik7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIEJhOmc9MTA7YnJlYWsgYTtjYXNlIENhOmc9OTticmVhayBhO2Nhc2UgRGE6Zz0xMTtcbmJyZWFrIGE7Y2FzZSBHYTpnPTE0O2JyZWFrIGE7Y2FzZSBIYTpnPTE2O2Q9bnVsbDticmVhayBhfXRocm93IEVycm9yKHAoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9QmcoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBBaChhLGIsYyxkKXthPUJnKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBxaihhLGIsYyxkKXthPUJnKDIyLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YzthLnN0YXRlTm9kZT17aXNIaWRkZW46ITF9O3JldHVybiBhfWZ1bmN0aW9uIHhoKGEsYixjKXthPUJnKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIHpoKGEsYixjKXtiPUJnKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYmwoYSxiLGMsZCxlKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLmNhbGxiYWNrTm9kZT10aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz16YygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz16YygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz16YygwKTt0aGlzLmlkZW50aWZpZXJQcmVmaXg9ZDt0aGlzLm9uUmVjb3ZlcmFibGVFcnJvcj1lO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1cbm51bGx9ZnVuY3Rpb24gY2woYSxiLGMsZCxlLGYsZyxoLGspe2E9bmV3IGJsKGEsYixjLGgsayk7MT09PWI/KGI9MSwhMD09PWYmJihifD04KSk6Yj0wO2Y9QmcoMyxudWxsLG51bGwsYik7YS5jdXJyZW50PWY7Zi5zdGF0ZU5vZGU9YTtmLm1lbW9pemVkU3RhdGU9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6YyxjYWNoZTpudWxsLHRyYW5zaXRpb25zOm51bGwscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpudWxsfTthaChmKTtyZXR1cm4gYX1mdW5jdGlvbiBkbChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOndhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gZWwoYSl7aWYoIWEpcmV0dXJuIFZmO2E9YS5fcmVhY3RJbnRlcm5hbHM7YTp7aWYoVmIoYSkhPT1hfHwxIT09YS50YWcpdGhyb3cgRXJyb3IocCgxNzApKTt2YXIgYj1hO2Rve3N3aXRjaChiLnRhZyl7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGUuY29udGV4dDticmVhayBhO2Nhc2UgMTppZihaZihiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3Rocm93IEVycm9yKHAoMTcxKSk7fWlmKDE9PT1hLnRhZyl7dmFyIGM9YS50eXBlO2lmKFpmKGMpKXJldHVybiBiZyhhLGMsYil9cmV0dXJuIGJ9XG5mdW5jdGlvbiBmbChhLGIsYyxkLGUsZixnLGgsayl7YT1jbChjLGQsITAsYSxlLGYsZyxoLGspO2EuY29udGV4dD1lbChudWxsKTtjPWEuY3VycmVudDtkPUwoKTtlPWxoKGMpO2Y9Y2goZCxlKTtmLmNhbGxiYWNrPXZvaWQgMCE9PWImJm51bGwhPT1iP2I6bnVsbDtkaChjLGYsZSk7YS5jdXJyZW50LmxhbmVzPWU7QWMoYSxlLGQpO0VrKGEsZCk7cmV0dXJuIGF9ZnVuY3Rpb24gZ2woYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9TCgpLGc9bGgoZSk7Yz1lbChjKTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWNoKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO2E9ZGgoZSxiLGcpO251bGwhPT1hJiYobWgoYSxlLGcsZiksZWgoYSxlLGcpKTtyZXR1cm4gZ31cbmZ1bmN0aW9uIGhsKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gaWwoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIGpsKGEsYil7aWwoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmlsKGEsYil9ZnVuY3Rpb24ga2woKXtyZXR1cm4gbnVsbH12YXIgbGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcG9ydEVycm9yP3JlcG9ydEVycm9yOmZ1bmN0aW9uKGEpe2NvbnNvbGUuZXJyb3IoYSl9O2Z1bmN0aW9uIG1sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnJlbmRlcj1tbC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDQwOSkpO2dsKGEsYixudWxsLG51bGwpfTtubC5wcm90b3R5cGUudW5tb3VudD1tbC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsIT09YSl7dGhpcy5faW50ZXJuYWxSb290PW51bGw7dmFyIGI9YS5jb250YWluZXJJbmZvO1NrKGZ1bmN0aW9uKCl7Z2wobnVsbCxhLG51bGwsbnVsbCl9KTtiW3VmXT1udWxsfX07ZnVuY3Rpb24gbmwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb249ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9SGMoKTthPXtibG9ja2VkT246bnVsbCx0YXJnZXQ6YSxwcmlvcml0eTpifTtmb3IodmFyIGM9MDtjPFFjLmxlbmd0aCYmMCE9PWImJmI8UWNbY10ucHJpb3JpdHk7YysrKTtRYy5zcGxpY2UoYywwLGEpOzA9PT1jJiZWYyhhKX19O2Z1bmN0aW9uIG9sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlKX1mdW5jdGlvbiBwbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gcWwoKXt9XG5mdW5jdGlvbiBybChhLGIsYyxkLGUpe2lmKGUpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZj1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1obChnKTtmLmNhbGwoYSl9fXZhciBnPWZsKGIsZCxhLDAsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9ZzthW3VmXT1nLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKCk7cmV0dXJuIGd9Zm9yKDtlPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGUpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgaD1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1obChrKTtoLmNhbGwoYSl9fXZhciBrPWNsKGEsMCwhMSxudWxsLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWs7YVt1Zl09ay5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTayhmdW5jdGlvbigpe2dsKGIsayxjLGQpfSk7cmV0dXJuIGt9XG5mdW5jdGlvbiBzbChhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1obChnKTtoLmNhbGwoYSl9fWdsKGIsZyxhLGUpfWVsc2UgZz1ybChjLGIsYSxlLGQpO3JldHVybiBobChnKX1FYz1mdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMzp2YXIgYj1hLnN0YXRlTm9kZTtpZihiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe3ZhciBjPXRjKGIucGVuZGluZ0xhbmVzKTswIT09YyYmKENjKGIsY3wxKSxFayhiLEIoKSksMD09PShLJjYpJiYoSGo9QigpKzUwMCxqZygpKSl9YnJlYWs7Y2FzZSAxMzpTayhmdW5jdGlvbigpe3ZhciBiPVpnKGEsMSk7aWYobnVsbCE9PWIpe3ZhciBjPUwoKTttaChiLGEsMSxjKX19KSxqbChhLDEpfX07XG5GYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1aZyhhLDEzNDIxNzcyOCk7aWYobnVsbCE9PWIpe3ZhciBjPUwoKTttaChiLGEsMTM0MjE3NzI4LGMpfWpsKGEsMTM0MjE3NzI4KX19O0djPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWxoKGEpLGM9WmcoYSxiKTtpZihudWxsIT09Yyl7dmFyIGQ9TCgpO21oKGMsYSxiLGQpfWpsKGEsYil9fTtIYz1mdW5jdGlvbigpe3JldHVybiBDfTtJYz1mdW5jdGlvbihhLGIpe3ZhciBjPUM7dHJ5e3JldHVybiBDPWEsYigpfWZpbmFsbHl7Qz1jfX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmJiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcihwKDkwKSk7V2EoZCk7YmIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVJrO0hiPVNrO1xudmFyIHRsPXt1c2luZ0NsaWVudEVudHJ5UG9pbnQ6ITEsRXZlbnRzOltDYix1ZSxEYixFYixGYixSa119LHVsPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpXYyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE4LjIuMFwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgdmw9e2J1bmRsZVR5cGU6dWwuYnVuZGxlVHlwZSx2ZXJzaW9uOnVsLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp1bC5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOnVsLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRFcnJvckhhbmRsZXI6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1aYihhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dWwuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxua2wsZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbCxyZWNvbmNpbGVyVmVyc2lvbjpcIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwifTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHdsPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZighd2wuaXNEaXNhYmxlZCYmd2wuc3VwcG9ydHNGaWJlcil0cnl7a2M9d2wuaW5qZWN0KHZsKSxsYz13bH1jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dGw7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFvbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBkbChhLGIsbnVsbCxjKX07ZXhwb3J0cy5jcmVhdGVSb290PWZ1bmN0aW9uKGEsYil7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoMjk5KSk7dmFyIGM9ITEsZD1cIlwiLGU9bGw7bnVsbCE9PWImJnZvaWQgMCE9PWImJighMD09PWIudW5zdGFibGVfc3RyaWN0TW9kZSYmKGM9ITApLHZvaWQgMCE9PWIuaWRlbnRpZmllclByZWZpeCYmKGQ9Yi5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1iLm9uUmVjb3ZlcmFibGVFcnJvciYmKGU9Yi5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWNsKGEsMSwhMSxudWxsLG51bGwsYywhMSxkLGUpO2FbdWZdPWIuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7cmV0dXJuIG5ldyBtbChiKX07XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHAoMTg4KSk7YT1PYmplY3Qua2V5cyhhKS5qb2luKFwiLFwiKTt0aHJvdyBFcnJvcihwKDI2OCxhKSk7fWE9WmIoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhKXtyZXR1cm4gU2soYSl9O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXBsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHNsKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3Q9ZnVuY3Rpb24oYSxiLGMpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDQwNSkpO3ZhciBkPW51bGwhPWMmJmMuaHlkcmF0ZWRTb3VyY2VzfHxudWxsLGU9ITEsZj1cIlwiLGc9bGw7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJighMD09PWMudW5zdGFibGVfc3RyaWN0TW9kZSYmKGU9ITApLHZvaWQgMCE9PWMuaWRlbnRpZmllclByZWZpeCYmKGY9Yy5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1jLm9uUmVjb3ZlcmFibGVFcnJvciYmKGc9Yy5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWZsKGIsbnVsbCxhLDEsbnVsbCE9Yz9jOm51bGwsZSwhMSxmLGcpO2FbdWZdPWIuY3VycmVudDtzZihhKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspYz1kW2FdLGU9Yy5fZ2V0VmVyc2lvbixlPWUoYy5fc291cmNlKSxudWxsPT1iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtjLGVdOmIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGMsXG5lKTtyZXR1cm4gbmV3IG5sKGIpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXBsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHNsKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXBsKGEpKXRocm93IEVycm9yKHAoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhTayhmdW5jdGlvbigpe3NsKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVt1Zl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVJrO1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcGwoYykpdGhyb3cgRXJyb3IocCgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcihwKDM4KSk7cmV0dXJuIHNsKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIG0gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IG0uY3JlYXRlUm9vdDtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IG0uaHlkcmF0ZVJvb3Q7XG59IGVsc2Uge1xuICB2YXIgaSA9IG0uX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmNyZWF0ZVJvb3QoYywgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gZnVuY3Rpb24oYywgaCwgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uaHlkcmF0ZVJvb3QoYywgaCwgbyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBiPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGM9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSxkPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxlPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxmPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxnPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxoPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LnNlcnZlcl9jb250ZXh0XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLG09U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLG49U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIikscD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxxPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKSx1O3U9U3ltYm9sLmZvcihcInJlYWN0Lm1vZHVsZS5yZWZlcmVuY2VcIik7XG5mdW5jdGlvbiB2KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciByPWEuJCR0eXBlb2Y7c3dpdGNoKHIpe2Nhc2UgYjpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBkOmNhc2UgZjpjYXNlIGU6Y2FzZSBtOmNhc2UgbjpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgaDpjYXNlIGw6Y2FzZSBxOmNhc2UgcDpjYXNlIGc6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gcn19Y2FzZSBjOnJldHVybiByfX19ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aDtleHBvcnRzLkNvbnRleHRQcm92aWRlcj1nO2V4cG9ydHMuRWxlbWVudD1iO2V4cG9ydHMuRm9yd2FyZFJlZj1sO2V4cG9ydHMuRnJhZ21lbnQ9ZDtleHBvcnRzLkxhenk9cTtleHBvcnRzLk1lbW89cDtleHBvcnRzLlBvcnRhbD1jO2V4cG9ydHMuUHJvZmlsZXI9ZjtleHBvcnRzLlN0cmljdE1vZGU9ZTtleHBvcnRzLlN1c3BlbnNlPW07XG5leHBvcnRzLlN1c3BlbnNlTGlzdD1uO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1ofTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09Z307ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWJ9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bH07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09ZH07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHYoYSk9PT1xfTtleHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PXB9O1xuZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWN9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PWZ9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09ZX07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB2KGEpPT09bX07ZXhwb3J0cy5pc1N1c3BlbnNlTGlzdD1mdW5jdGlvbihhKXtyZXR1cm4gdihhKT09PW59O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWR8fGE9PT1mfHxhPT09ZXx8YT09PW18fGE9PT1ufHxhPT09dHx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1xfHxhLiQkdHlwZW9mPT09cHx8YS4kJHR5cGVvZj09PWd8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09bHx8YS4kJHR5cGVvZj09PXV8fHZvaWQgMCE9PWEuZ2V0TW9kdWxlSWQpPyEwOiExfTtleHBvcnRzLnR5cGVPZj12O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJhYmxlJztcbmltcG9ydCB7IGlzU2VydmVyIH0gZnJvbSAnLi91dGlscyc7XG5leHBvcnQgdmFyIEZvY3VzTWFuYWdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1N1YnNjcmliYWJsZSkge1xuICBfaW5oZXJpdHNMb29zZShGb2N1c01hbmFnZXIsIF9TdWJzY3JpYmFibGUpO1xuXG4gIGZ1bmN0aW9uIEZvY3VzTWFuYWdlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdWJzY3JpYmFibGUuY2FsbCh0aGlzKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuc2V0dXAgPSBmdW5jdGlvbiAob25Gb2N1cykge1xuICAgICAgdmFyIF93aW5kb3c7XG5cbiAgICAgIGlmICghaXNTZXJ2ZXIgJiYgKChfd2luZG93ID0gd2luZG93KSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKSkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgICAgICByZXR1cm4gb25Gb2N1cygpO1xuICAgICAgICB9OyAvLyBMaXN0ZW4gdG8gdmlzaWJpbGxpdHljaGFuZ2UgYW5kIGZvY3VzXG5cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gQmUgc3VyZSB0byB1bnN1YnNjcmliZSBpZiBhIG5ldyBoYW5kbGVyIGlzIHNldFxuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgbGlzdGVuZXIpO1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEZvY3VzTWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm9uU3Vic2NyaWJlID0gZnVuY3Rpb24gb25TdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmNsZWFudXApIHtcbiAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcih0aGlzLnNldHVwKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uVW5zdWJzY3JpYmUgPSBmdW5jdGlvbiBvblVuc3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgdmFyIF90aGlzJGNsZWFudXA7XG5cbiAgICAgIChfdGhpcyRjbGVhbnVwID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cC5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5jbGVhbnVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0RXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHNldEV2ZW50TGlzdGVuZXIoc2V0dXApIHtcbiAgICB2YXIgX3RoaXMkY2xlYW51cDIsXG4gICAgICAgIF90aGlzMiA9IHRoaXM7XG5cbiAgICB0aGlzLnNldHVwID0gc2V0dXA7XG4gICAgKF90aGlzJGNsZWFudXAyID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cDIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmNsZWFudXAgPSBzZXR1cChmdW5jdGlvbiAoZm9jdXNlZCkge1xuICAgICAgaWYgKHR5cGVvZiBmb2N1c2VkID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgX3RoaXMyLnNldEZvY3VzZWQoZm9jdXNlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpczIub25Gb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zZXRGb2N1c2VkID0gZnVuY3Rpb24gc2V0Rm9jdXNlZChmb2N1c2VkKSB7XG4gICAgdGhpcy5mb2N1c2VkID0gZm9jdXNlZDtcblxuICAgIGlmIChmb2N1c2VkKSB7XG4gICAgICB0aGlzLm9uRm9jdXMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRm9jdXMgPSBmdW5jdGlvbiBvbkZvY3VzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5pc0ZvY3VzZWQgPSBmdW5jdGlvbiBpc0ZvY3VzZWQoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLmZvY3VzZWQgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHRoaXMuZm9jdXNlZDtcbiAgICB9IC8vIGRvY3VtZW50IGdsb2JhbCBjYW4gYmUgdW5hdmFpbGFibGUgaW4gcmVhY3QgbmF0aXZlXG5cblxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3VuZGVmaW5lZCwgJ3Zpc2libGUnLCAncHJlcmVuZGVyJ10uaW5jbHVkZXMoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlKTtcbiAgfTtcblxuICByZXR1cm4gRm9jdXNNYW5hZ2VyO1xufShTdWJzY3JpYmFibGUpO1xuZXhwb3J0IHZhciBmb2N1c01hbmFnZXIgPSBuZXcgRm9jdXNNYW5hZ2VyKCk7IiwiLy8gVFlQRVNcbi8vIEZVTkNUSU9OU1xudmFyIGxvZ2dlciA9IGNvbnNvbGU7XG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9nZ2VyKCkge1xuICByZXR1cm4gbG9nZ2VyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNldExvZ2dlcihuZXdMb2dnZXIpIHtcbiAgbG9nZ2VyID0gbmV3TG9nZ2VyO1xufSIsImltcG9ydCB7IHNjaGVkdWxlTWljcm90YXNrIH0gZnJvbSAnLi91dGlscyc7IC8vIFRZUEVTXG5cbi8vIENMQVNTXG5leHBvcnQgdmFyIE5vdGlmeU1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBOb3RpZnlNYW5hZ2VyKCkge1xuICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICB0aGlzLnRyYW5zYWN0aW9ucyA9IDA7XG5cbiAgICB0aGlzLm5vdGlmeUZuID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH07XG5cbiAgICB0aGlzLmJhdGNoTm90aWZ5Rm4gPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBOb3RpZnlNYW5hZ2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYmF0Y2ggPSBmdW5jdGlvbiBiYXRjaChjYWxsYmFjaykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgdGhpcy50cmFuc2FjdGlvbnMrKztcblxuICAgIHRyeSB7XG4gICAgICByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnRyYW5zYWN0aW9ucy0tO1xuXG4gICAgICBpZiAoIXRoaXMudHJhbnNhY3Rpb25zKSB7XG4gICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIF9wcm90by5zY2hlZHVsZSA9IGZ1bmN0aW9uIHNjaGVkdWxlKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGlmICh0aGlzLnRyYW5zYWN0aW9ucykge1xuICAgICAgdGhpcy5xdWV1ZS5wdXNoKGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZWR1bGVNaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5ub3RpZnlGbihjYWxsYmFjayk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEFsbCBjYWxscyB0byB0aGUgd3JhcHBlZCBmdW5jdGlvbiB3aWxsIGJlIGJhdGNoZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmJhdGNoQ2FsbHMgPSBmdW5jdGlvbiBiYXRjaENhbGxzKGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIF90aGlzMi5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIHF1ZXVlID0gdGhpcy5xdWV1ZTtcbiAgICB0aGlzLnF1ZXVlID0gW107XG5cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICBzY2hlZHVsZU1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5iYXRjaE5vdGlmeUZuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBxdWV1ZS5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgX3RoaXMzLm5vdGlmeUZuKGNhbGxiYWNrKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFVzZSB0aGlzIG1ldGhvZCB0byBzZXQgYSBjdXN0b20gbm90aWZ5IGZ1bmN0aW9uLlxuICAgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGZvciBleGFtcGxlIHdyYXAgbm90aWZpY2F0aW9ucyB3aXRoIGBSZWFjdC5hY3RgIHdoaWxlIHJ1bm5pbmcgdGVzdHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldE5vdGlmeUZ1bmN0aW9uID0gZnVuY3Rpb24gc2V0Tm90aWZ5RnVuY3Rpb24oZm4pIHtcbiAgICB0aGlzLm5vdGlmeUZuID0gZm47XG4gIH1cbiAgLyoqXG4gICAqIFVzZSB0aGlzIG1ldGhvZCB0byBzZXQgYSBjdXN0b20gZnVuY3Rpb24gdG8gYmF0Y2ggbm90aWZpY2F0aW9ucyB0b2dldGhlciBpbnRvIGEgc2luZ2xlIHRpY2suXG4gICAqIEJ5IGRlZmF1bHQgUmVhY3QgUXVlcnkgd2lsbCB1c2UgdGhlIGJhdGNoIGZ1bmN0aW9uIHByb3ZpZGVkIGJ5IFJlYWN0RE9NIG9yIFJlYWN0IE5hdGl2ZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2V0QmF0Y2hOb3RpZnlGdW5jdGlvbiA9IGZ1bmN0aW9uIHNldEJhdGNoTm90aWZ5RnVuY3Rpb24oZm4pIHtcbiAgICB0aGlzLmJhdGNoTm90aWZ5Rm4gPSBmbjtcbiAgfTtcblxuICByZXR1cm4gTm90aWZ5TWFuYWdlcjtcbn0oKTsgLy8gU0lOR0xFVE9OXG5cbmV4cG9ydCB2YXIgbm90aWZ5TWFuYWdlciA9IG5ldyBOb3RpZnlNYW5hZ2VyKCk7IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tICcuL3N1YnNjcmliYWJsZSc7XG5pbXBvcnQgeyBpc1NlcnZlciB9IGZyb20gJy4vdXRpbHMnO1xuZXhwb3J0IHZhciBPbmxpbmVNYW5hZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU3Vic2NyaWJhYmxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKE9ubGluZU1hbmFnZXIsIF9TdWJzY3JpYmFibGUpO1xuXG4gIGZ1bmN0aW9uIE9ubGluZU1hbmFnZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfU3Vic2NyaWJhYmxlLmNhbGwodGhpcykgfHwgdGhpcztcblxuICAgIF90aGlzLnNldHVwID0gZnVuY3Rpb24gKG9uT25saW5lKSB7XG4gICAgICB2YXIgX3dpbmRvdztcblxuICAgICAgaWYgKCFpc1NlcnZlciAmJiAoKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgICAgIHJldHVybiBvbk9ubGluZSgpO1xuICAgICAgICB9OyAvLyBMaXN0ZW4gdG8gb25saW5lXG5cblxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb25saW5lJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29mZmxpbmUnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIEJlIHN1cmUgdG8gdW5zdWJzY3JpYmUgaWYgYSBuZXcgaGFuZGxlciBpcyBzZXRcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb25saW5lJywgbGlzdGVuZXIpO1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdvZmZsaW5lJywgbGlzdGVuZXIpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gT25saW5lTWFuYWdlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm9uU3Vic2NyaWJlID0gZnVuY3Rpb24gb25TdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmNsZWFudXApIHtcbiAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcih0aGlzLnNldHVwKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uVW5zdWJzY3JpYmUgPSBmdW5jdGlvbiBvblVuc3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgdmFyIF90aGlzJGNsZWFudXA7XG5cbiAgICAgIChfdGhpcyRjbGVhbnVwID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cC5jYWxsKHRoaXMpO1xuICAgICAgdGhpcy5jbGVhbnVwID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0RXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHNldEV2ZW50TGlzdGVuZXIoc2V0dXApIHtcbiAgICB2YXIgX3RoaXMkY2xlYW51cDIsXG4gICAgICAgIF90aGlzMiA9IHRoaXM7XG5cbiAgICB0aGlzLnNldHVwID0gc2V0dXA7XG4gICAgKF90aGlzJGNsZWFudXAyID0gdGhpcy5jbGVhbnVwKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkY2xlYW51cDIuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmNsZWFudXAgPSBzZXR1cChmdW5jdGlvbiAob25saW5lKSB7XG4gICAgICBpZiAodHlwZW9mIG9ubGluZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIF90aGlzMi5zZXRPbmxpbmUob25saW5lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzMi5vbk9ubGluZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zZXRPbmxpbmUgPSBmdW5jdGlvbiBzZXRPbmxpbmUob25saW5lKSB7XG4gICAgdGhpcy5vbmxpbmUgPSBvbmxpbmU7XG5cbiAgICBpZiAob25saW5lKSB7XG4gICAgICB0aGlzLm9uT25saW5lKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbk9ubGluZSA9IGZ1bmN0aW9uIG9uT25saW5lKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5pc09ubGluZSA9IGZ1bmN0aW9uIGlzT25saW5lKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5vbmxpbmUgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHRoaXMub25saW5lO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgbmF2aWdhdG9yLm9uTGluZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBuYXZpZ2F0b3Iub25MaW5lO1xuICB9O1xuXG4gIHJldHVybiBPbmxpbmVNYW5hZ2VyO1xufShTdWJzY3JpYmFibGUpO1xuZXhwb3J0IHZhciBvbmxpbmVNYW5hZ2VyID0gbmV3IE9ubGluZU1hbmFnZXIoKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGdldEFib3J0Q29udHJvbGxlciwgZnVuY3Rpb25hbFVwZGF0ZSwgaXNWYWxpZFRpbWVvdXQsIG5vb3AsIHJlcGxhY2VFcXVhbERlZXAsIHRpbWVVbnRpbFN0YWxlLCBlbnN1cmVRdWVyeUtleUFycmF5IH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi9ub3RpZnlNYW5hZ2VyJztcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IFJldHJ5ZXIsIGlzQ2FuY2VsbGVkRXJyb3IgfSBmcm9tICcuL3JldHJ5ZXInOyAvLyBUWVBFU1xuXG4vLyBDTEFTU1xuZXhwb3J0IHZhciBRdWVyeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFF1ZXJ5KGNvbmZpZykge1xuICAgIHRoaXMuYWJvcnRTaWduYWxDb25zdW1lZCA9IGZhbHNlO1xuICAgIHRoaXMuaGFkT2JzZXJ2ZXJzID0gZmFsc2U7XG4gICAgdGhpcy5kZWZhdWx0T3B0aW9ucyA9IGNvbmZpZy5kZWZhdWx0T3B0aW9ucztcbiAgICB0aGlzLnNldE9wdGlvbnMoY29uZmlnLm9wdGlvbnMpO1xuICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XG4gICAgdGhpcy5jYWNoZSA9IGNvbmZpZy5jYWNoZTtcbiAgICB0aGlzLnF1ZXJ5S2V5ID0gY29uZmlnLnF1ZXJ5S2V5O1xuICAgIHRoaXMucXVlcnlIYXNoID0gY29uZmlnLnF1ZXJ5SGFzaDtcbiAgICB0aGlzLmluaXRpYWxTdGF0ZSA9IGNvbmZpZy5zdGF0ZSB8fCB0aGlzLmdldERlZmF1bHRTdGF0ZSh0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuc3RhdGUgPSB0aGlzLmluaXRpYWxTdGF0ZTtcbiAgICB0aGlzLm1ldGEgPSBjb25maWcubWV0YTtcbiAgICB0aGlzLnNjaGVkdWxlR2MoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBRdWVyeS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnNldE9wdGlvbnMgPSBmdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyRjYWNoZVRpO1xuXG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIHRoaXMuZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIHRoaXMubWV0YSA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMubWV0YTsgLy8gRGVmYXVsdCB0byA1IG1pbnV0ZXMgaWYgbm90IGNhY2hlIHRpbWUgaXMgc2V0XG5cbiAgICB0aGlzLmNhY2hlVGltZSA9IE1hdGgubWF4KHRoaXMuY2FjaGVUaW1lIHx8IDAsIChfdGhpcyRvcHRpb25zJGNhY2hlVGkgPSB0aGlzLm9wdGlvbnMuY2FjaGVUaW1lKSAhPSBudWxsID8gX3RoaXMkb3B0aW9ucyRjYWNoZVRpIDogNSAqIDYwICogMTAwMCk7XG4gIH07XG5cbiAgX3Byb3RvLnNldERlZmF1bHRPcHRpb25zID0gZnVuY3Rpb24gc2V0RGVmYXVsdE9wdGlvbnMob3B0aW9ucykge1xuICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zO1xuICB9O1xuXG4gIF9wcm90by5zY2hlZHVsZUdjID0gZnVuY3Rpb24gc2NoZWR1bGVHYygpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5jbGVhckdjVGltZW91dCgpO1xuXG4gICAgaWYgKGlzVmFsaWRUaW1lb3V0KHRoaXMuY2FjaGVUaW1lKSkge1xuICAgICAgdGhpcy5nY1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMub3B0aW9uYWxSZW1vdmUoKTtcbiAgICAgIH0sIHRoaXMuY2FjaGVUaW1lKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyR2NUaW1lb3V0ID0gZnVuY3Rpb24gY2xlYXJHY1RpbWVvdXQoKSB7XG4gICAgaWYgKHRoaXMuZ2NUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5nY1RpbWVvdXQpO1xuICAgICAgdGhpcy5nY1RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vcHRpb25hbFJlbW92ZSA9IGZ1bmN0aW9uIG9wdGlvbmFsUmVtb3ZlKCkge1xuICAgIGlmICghdGhpcy5vYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5pc0ZldGNoaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLmhhZE9ic2VydmVycykge1xuICAgICAgICAgIHRoaXMuc2NoZWR1bGVHYygpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNhY2hlLnJlbW92ZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNldERhdGEgPSBmdW5jdGlvbiBzZXREYXRhKHVwZGF0ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMkb3B0aW9ucyRpc0RhdGFFLCBfdGhpcyRvcHRpb25zO1xuXG4gICAgdmFyIHByZXZEYXRhID0gdGhpcy5zdGF0ZS5kYXRhOyAvLyBHZXQgdGhlIG5ldyBkYXRhXG5cbiAgICB2YXIgZGF0YSA9IGZ1bmN0aW9uYWxVcGRhdGUodXBkYXRlciwgcHJldkRhdGEpOyAvLyBVc2UgcHJldiBkYXRhIGlmIGFuIGlzRGF0YUVxdWFsIGZ1bmN0aW9uIGlzIGRlZmluZWQgYW5kIHJldHVybnMgYHRydWVgXG5cbiAgICBpZiAoKF90aGlzJG9wdGlvbnMkaXNEYXRhRSA9IChfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zKS5pc0RhdGFFcXVhbCkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG9wdGlvbnMkaXNEYXRhRS5jYWxsKF90aGlzJG9wdGlvbnMsIHByZXZEYXRhLCBkYXRhKSkge1xuICAgICAgZGF0YSA9IHByZXZEYXRhO1xuICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnN0cnVjdHVyYWxTaGFyaW5nICE9PSBmYWxzZSkge1xuICAgICAgLy8gU3RydWN0dXJhbGx5IHNoYXJlIGRhdGEgYmV0d2VlbiBwcmV2IGFuZCBuZXcgZGF0YSBpZiBuZWVkZWRcbiAgICAgIGRhdGEgPSByZXBsYWNlRXF1YWxEZWVwKHByZXZEYXRhLCBkYXRhKTtcbiAgICB9IC8vIFNldCBkYXRhIGFuZCBtYXJrIGl0IGFzIGNhY2hlZFxuXG5cbiAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgIGRhdGE6IGRhdGEsXG4gICAgICB0eXBlOiAnc3VjY2VzcycsXG4gICAgICBkYXRhVXBkYXRlZEF0OiBvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnVwZGF0ZWRBdFxuICAgIH0pO1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIF9wcm90by5zZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKHN0YXRlLCBzZXRTdGF0ZU9wdGlvbnMpIHtcbiAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgIHR5cGU6ICdzZXRTdGF0ZScsXG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBzZXRTdGF0ZU9wdGlvbnM6IHNldFN0YXRlT3B0aW9uc1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWwgPSBmdW5jdGlvbiBjYW5jZWwob3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRyZXRyeWVyO1xuXG4gICAgdmFyIHByb21pc2UgPSB0aGlzLnByb21pc2U7XG4gICAgKF90aGlzJHJldHJ5ZXIgPSB0aGlzLnJldHJ5ZXIpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRyZXRyeWVyLmNhbmNlbChvcHRpb25zKTtcbiAgICByZXR1cm4gcHJvbWlzZSA/IHByb21pc2UudGhlbihub29wKS5jYXRjaChub29wKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB0aGlzLmNsZWFyR2NUaW1lb3V0KCk7XG4gICAgdGhpcy5jYW5jZWwoe1xuICAgICAgc2lsZW50OiB0cnVlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh0aGlzLmluaXRpYWxTdGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzQWN0aXZlID0gZnVuY3Rpb24gaXNBY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMub2JzZXJ2ZXJzLnNvbWUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICByZXR1cm4gb2JzZXJ2ZXIub3B0aW9ucy5lbmFibGVkICE9PSBmYWxzZTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uaXNGZXRjaGluZyA9IGZ1bmN0aW9uIGlzRmV0Y2hpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuaXNGZXRjaGluZztcbiAgfTtcblxuICBfcHJvdG8uaXNTdGFsZSA9IGZ1bmN0aW9uIGlzU3RhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuaXNJbnZhbGlkYXRlZCB8fCAhdGhpcy5zdGF0ZS5kYXRhVXBkYXRlZEF0IHx8IHRoaXMub2JzZXJ2ZXJzLnNvbWUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICByZXR1cm4gb2JzZXJ2ZXIuZ2V0Q3VycmVudFJlc3VsdCgpLmlzU3RhbGU7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzU3RhbGVCeVRpbWUgPSBmdW5jdGlvbiBpc1N0YWxlQnlUaW1lKHN0YWxlVGltZSkge1xuICAgIGlmIChzdGFsZVRpbWUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhbGVUaW1lID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pc0ludmFsaWRhdGVkIHx8ICF0aGlzLnN0YXRlLmRhdGFVcGRhdGVkQXQgfHwgIXRpbWVVbnRpbFN0YWxlKHRoaXMuc3RhdGUuZGF0YVVwZGF0ZWRBdCwgc3RhbGVUaW1lKTtcbiAgfTtcblxuICBfcHJvdG8ub25Gb2N1cyA9IGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgdmFyIF90aGlzJHJldHJ5ZXIyO1xuXG4gICAgdmFyIG9ic2VydmVyID0gdGhpcy5vYnNlcnZlcnMuZmluZChmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHguc2hvdWxkRmV0Y2hPbldpbmRvd0ZvY3VzKCk7XG4gICAgfSk7XG5cbiAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgIG9ic2VydmVyLnJlZmV0Y2goKTtcbiAgICB9IC8vIENvbnRpbnVlIGZldGNoIGlmIGN1cnJlbnRseSBwYXVzZWRcblxuXG4gICAgKF90aGlzJHJldHJ5ZXIyID0gdGhpcy5yZXRyeWVyKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkcmV0cnllcjIuY29udGludWUoKTtcbiAgfTtcblxuICBfcHJvdG8ub25PbmxpbmUgPSBmdW5jdGlvbiBvbk9ubGluZSgpIHtcbiAgICB2YXIgX3RoaXMkcmV0cnllcjM7XG5cbiAgICB2YXIgb2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVycy5maW5kKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4geC5zaG91bGRGZXRjaE9uUmVjb25uZWN0KCk7XG4gICAgfSk7XG5cbiAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgIG9ic2VydmVyLnJlZmV0Y2goKTtcbiAgICB9IC8vIENvbnRpbnVlIGZldGNoIGlmIGN1cnJlbnRseSBwYXVzZWRcblxuXG4gICAgKF90aGlzJHJldHJ5ZXIzID0gdGhpcy5yZXRyeWVyKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkcmV0cnllcjMuY29udGludWUoKTtcbiAgfTtcblxuICBfcHJvdG8uYWRkT2JzZXJ2ZXIgPSBmdW5jdGlvbiBhZGRPYnNlcnZlcihvYnNlcnZlcikge1xuICAgIGlmICh0aGlzLm9ic2VydmVycy5pbmRleE9mKG9ic2VydmVyKSA9PT0gLTEpIHtcbiAgICAgIHRoaXMub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgICAgdGhpcy5oYWRPYnNlcnZlcnMgPSB0cnVlOyAvLyBTdG9wIHRoZSBxdWVyeSBmcm9tIGJlaW5nIGdhcmJhZ2UgY29sbGVjdGVkXG5cbiAgICAgIHRoaXMuY2xlYXJHY1RpbWVvdXQoKTtcbiAgICAgIHRoaXMuY2FjaGUubm90aWZ5KHtcbiAgICAgICAgdHlwZTogJ29ic2VydmVyQWRkZWQnLFxuICAgICAgICBxdWVyeTogdGhpcyxcbiAgICAgICAgb2JzZXJ2ZXI6IG9ic2VydmVyXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZU9ic2VydmVyID0gZnVuY3Rpb24gcmVtb3ZlT2JzZXJ2ZXIob2JzZXJ2ZXIpIHtcbiAgICBpZiAodGhpcy5vYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcikgIT09IC0xKSB7XG4gICAgICB0aGlzLm9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geCAhPT0gb2JzZXJ2ZXI7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCF0aGlzLm9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgLy8gSWYgdGhlIHRyYW5zcG9ydCBsYXllciBkb2VzIG5vdCBzdXBwb3J0IGNhbmNlbGxhdGlvblxuICAgICAgICAvLyB3ZSdsbCBsZXQgdGhlIHF1ZXJ5IGNvbnRpbnVlIHNvIHRoZSByZXN1bHQgY2FuIGJlIGNhY2hlZFxuICAgICAgICBpZiAodGhpcy5yZXRyeWVyKSB7XG4gICAgICAgICAgaWYgKHRoaXMucmV0cnllci5pc1RyYW5zcG9ydENhbmNlbGFibGUgfHwgdGhpcy5hYm9ydFNpZ25hbENvbnN1bWVkKSB7XG4gICAgICAgICAgICB0aGlzLnJldHJ5ZXIuY2FuY2VsKHtcbiAgICAgICAgICAgICAgcmV2ZXJ0OiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXRyeWVyLmNhbmNlbFJldHJ5KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY2FjaGVUaW1lKSB7XG4gICAgICAgICAgdGhpcy5zY2hlZHVsZUdjKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jYWNoZS5yZW1vdmUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWNoZS5ub3RpZnkoe1xuICAgICAgICB0eXBlOiAnb2JzZXJ2ZXJSZW1vdmVkJyxcbiAgICAgICAgcXVlcnk6IHRoaXMsXG4gICAgICAgIG9ic2VydmVyOiBvYnNlcnZlclxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXRPYnNlcnZlcnNDb3VudCA9IGZ1bmN0aW9uIGdldE9ic2VydmVyc0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLm9ic2VydmVycy5sZW5ndGg7XG4gIH07XG5cbiAgX3Byb3RvLmludmFsaWRhdGUgPSBmdW5jdGlvbiBpbnZhbGlkYXRlKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5pc0ludmFsaWRhdGVkKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ2ludmFsaWRhdGUnXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmZldGNoID0gZnVuY3Rpb24gZmV0Y2gob3B0aW9ucywgZmV0Y2hPcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXMsXG4gICAgICAgIF90aGlzJG9wdGlvbnMkYmVoYXZpbyxcbiAgICAgICAgX2NvbnRleHQkZmV0Y2hPcHRpb25zLFxuICAgICAgICBfYWJvcnRDb250cm9sbGVyJGFib3I7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5pc0ZldGNoaW5nKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5kYXRhVXBkYXRlZEF0ICYmIChmZXRjaE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IGZldGNoT3B0aW9ucy5jYW5jZWxSZWZldGNoKSkge1xuICAgICAgICAvLyBTaWxlbnRseSBjYW5jZWwgY3VycmVudCBmZXRjaCBpZiB0aGUgdXNlciB3YW50cyB0byBjYW5jZWwgcmVmZXRjaGVzXG4gICAgICAgIHRoaXMuY2FuY2VsKHtcbiAgICAgICAgICBzaWxlbnQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucHJvbWlzZSkge1xuICAgICAgICB2YXIgX3RoaXMkcmV0cnllcjQ7XG5cbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoYXQgcmV0cmllcyB0aGF0IHdlcmUgcG90ZW50aWFsbHkgY2FuY2VsbGVkIGR1ZSB0byB1bm1vdW50cyBjYW4gY29udGludWVcbiAgICAgICAgKF90aGlzJHJldHJ5ZXI0ID0gdGhpcy5yZXRyeWVyKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkcmV0cnllcjQuY29udGludWVSZXRyeSgpOyAvLyBSZXR1cm4gY3VycmVudCBwcm9taXNlIGlmIHdlIGFyZSBhbHJlYWR5IGZldGNoaW5nXG5cbiAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZTtcbiAgICAgIH1cbiAgICB9IC8vIFVwZGF0ZSBjb25maWcgaWYgcGFzc2VkLCBvdGhlcndpc2UgdGhlIGNvbmZpZyBmcm9tIHRoZSBsYXN0IGV4ZWN1dGlvbiBpcyB1c2VkXG5cblxuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgfSAvLyBVc2UgdGhlIG9wdGlvbnMgZnJvbSB0aGUgZmlyc3Qgb2JzZXJ2ZXIgd2l0aCBhIHF1ZXJ5IGZ1bmN0aW9uIGlmIG5vIGZ1bmN0aW9uIGlzIGZvdW5kLlxuICAgIC8vIFRoaXMgY2FuIGhhcHBlbiB3aGVuIHRoZSBxdWVyeSBpcyBoeWRyYXRlZCBvciBjcmVhdGVkIHdpdGggc2V0UXVlcnlEYXRhLlxuXG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5xdWVyeUZuKSB7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSB0aGlzLm9ic2VydmVycy5maW5kKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiB4Lm9wdGlvbnMucXVlcnlGbjtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKG9ic2VydmVyLm9wdGlvbnMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBxdWVyeUtleSA9IGVuc3VyZVF1ZXJ5S2V5QXJyYXkodGhpcy5xdWVyeUtleSk7XG4gICAgdmFyIGFib3J0Q29udHJvbGxlciA9IGdldEFib3J0Q29udHJvbGxlcigpOyAvLyBDcmVhdGUgcXVlcnkgZnVuY3Rpb24gY29udGV4dFxuXG4gICAgdmFyIHF1ZXJ5Rm5Db250ZXh0ID0ge1xuICAgICAgcXVlcnlLZXk6IHF1ZXJ5S2V5LFxuICAgICAgcGFnZVBhcmFtOiB1bmRlZmluZWQsXG4gICAgICBtZXRhOiB0aGlzLm1ldGFcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShxdWVyeUZuQ29udGV4dCwgJ3NpZ25hbCcsIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKGFib3J0Q29udHJvbGxlcikge1xuICAgICAgICAgIF90aGlzMi5hYm9ydFNpZ25hbENvbnN1bWVkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gYWJvcnRDb250cm9sbGVyLnNpZ25hbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSk7IC8vIENyZWF0ZSBmZXRjaCBmdW5jdGlvblxuXG4gICAgdmFyIGZldGNoRm4gPSBmdW5jdGlvbiBmZXRjaEZuKCkge1xuICAgICAgaWYgKCFfdGhpczIub3B0aW9ucy5xdWVyeUZuKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnTWlzc2luZyBxdWVyeUZuJyk7XG4gICAgICB9XG5cbiAgICAgIF90aGlzMi5hYm9ydFNpZ25hbENvbnN1bWVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gX3RoaXMyLm9wdGlvbnMucXVlcnlGbihxdWVyeUZuQ29udGV4dCk7XG4gICAgfTsgLy8gVHJpZ2dlciBiZWhhdmlvciBob29rXG5cblxuICAgIHZhciBjb250ZXh0ID0ge1xuICAgICAgZmV0Y2hPcHRpb25zOiBmZXRjaE9wdGlvbnMsXG4gICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICBxdWVyeUtleTogcXVlcnlLZXksXG4gICAgICBzdGF0ZTogdGhpcy5zdGF0ZSxcbiAgICAgIGZldGNoRm46IGZldGNoRm4sXG4gICAgICBtZXRhOiB0aGlzLm1ldGFcbiAgICB9O1xuXG4gICAgaWYgKChfdGhpcyRvcHRpb25zJGJlaGF2aW8gPSB0aGlzLm9wdGlvbnMuYmVoYXZpb3IpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyRvcHRpb25zJGJlaGF2aW8ub25GZXRjaCkge1xuICAgICAgdmFyIF90aGlzJG9wdGlvbnMkYmVoYXZpbzI7XG5cbiAgICAgIChfdGhpcyRvcHRpb25zJGJlaGF2aW8yID0gdGhpcy5vcHRpb25zLmJlaGF2aW9yKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkb3B0aW9ucyRiZWhhdmlvMi5vbkZldGNoKGNvbnRleHQpO1xuICAgIH0gLy8gU3RvcmUgc3RhdGUgaW4gY2FzZSB0aGUgY3VycmVudCBmZXRjaCBuZWVkcyB0byBiZSByZXZlcnRlZFxuXG5cbiAgICB0aGlzLnJldmVydFN0YXRlID0gdGhpcy5zdGF0ZTsgLy8gU2V0IHRvIGZldGNoaW5nIHN0YXRlIGlmIG5vdCBhbHJlYWR5IGluIGl0XG5cbiAgICBpZiAoIXRoaXMuc3RhdGUuaXNGZXRjaGluZyB8fCB0aGlzLnN0YXRlLmZldGNoTWV0YSAhPT0gKChfY29udGV4dCRmZXRjaE9wdGlvbnMgPSBjb250ZXh0LmZldGNoT3B0aW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb250ZXh0JGZldGNoT3B0aW9ucy5tZXRhKSkge1xuICAgICAgdmFyIF9jb250ZXh0JGZldGNoT3B0aW9uczI7XG5cbiAgICAgIHRoaXMuZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnZmV0Y2gnLFxuICAgICAgICBtZXRhOiAoX2NvbnRleHQkZmV0Y2hPcHRpb25zMiA9IGNvbnRleHQuZmV0Y2hPcHRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogX2NvbnRleHQkZmV0Y2hPcHRpb25zMi5tZXRhXG4gICAgICB9KTtcbiAgICB9IC8vIFRyeSB0byBmZXRjaCB0aGUgZGF0YVxuXG5cbiAgICB0aGlzLnJldHJ5ZXIgPSBuZXcgUmV0cnllcih7XG4gICAgICBmbjogY29udGV4dC5mZXRjaEZuLFxuICAgICAgYWJvcnQ6IGFib3J0Q29udHJvbGxlciA9PSBudWxsID8gdm9pZCAwIDogKF9hYm9ydENvbnRyb2xsZXIkYWJvciA9IGFib3J0Q29udHJvbGxlci5hYm9ydCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hYm9ydENvbnRyb2xsZXIkYWJvci5iaW5kKGFib3J0Q29udHJvbGxlciksXG4gICAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uIG9uU3VjY2VzcyhkYXRhKSB7XG4gICAgICAgIF90aGlzMi5zZXREYXRhKGRhdGEpOyAvLyBOb3RpZnkgY2FjaGUgY2FsbGJhY2tcblxuXG4gICAgICAgIF90aGlzMi5jYWNoZS5jb25maWcub25TdWNjZXNzID09IG51bGwgPyB2b2lkIDAgOiBfdGhpczIuY2FjaGUuY29uZmlnLm9uU3VjY2VzcyhkYXRhLCBfdGhpczIpOyAvLyBSZW1vdmUgcXVlcnkgYWZ0ZXIgZmV0Y2hpbmcgaWYgY2FjaGUgdGltZSBpcyAwXG5cbiAgICAgICAgaWYgKF90aGlzMi5jYWNoZVRpbWUgPT09IDApIHtcbiAgICAgICAgICBfdGhpczIub3B0aW9uYWxSZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgLy8gT3B0aW1pc3RpY2FsbHkgdXBkYXRlIHN0YXRlIGlmIG5lZWRlZFxuICAgICAgICBpZiAoIShpc0NhbmNlbGxlZEVycm9yKGVycm9yKSAmJiBlcnJvci5zaWxlbnQpKSB7XG4gICAgICAgICAgX3RoaXMyLmRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNDYW5jZWxsZWRFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAvLyBOb3RpZnkgY2FjaGUgY2FsbGJhY2tcbiAgICAgICAgICBfdGhpczIuY2FjaGUuY29uZmlnLm9uRXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzMi5jYWNoZS5jb25maWcub25FcnJvcihlcnJvciwgX3RoaXMyKTsgLy8gTG9nIGVycm9yXG5cbiAgICAgICAgICBnZXRMb2dnZXIoKS5lcnJvcihlcnJvcik7XG4gICAgICAgIH0gLy8gUmVtb3ZlIHF1ZXJ5IGFmdGVyIGZldGNoaW5nIGlmIGNhY2hlIHRpbWUgaXMgMFxuXG5cbiAgICAgICAgaWYgKF90aGlzMi5jYWNoZVRpbWUgPT09IDApIHtcbiAgICAgICAgICBfdGhpczIub3B0aW9uYWxSZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uRmFpbDogZnVuY3Rpb24gb25GYWlsKCkge1xuICAgICAgICBfdGhpczIuZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdmYWlsZWQnXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uUGF1c2U6IGZ1bmN0aW9uIG9uUGF1c2UoKSB7XG4gICAgICAgIF90aGlzMi5kaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogJ3BhdXNlJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbkNvbnRpbnVlOiBmdW5jdGlvbiBvbkNvbnRpbnVlKCkge1xuICAgICAgICBfdGhpczIuZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdjb250aW51ZSdcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgcmV0cnk6IGNvbnRleHQub3B0aW9ucy5yZXRyeSxcbiAgICAgIHJldHJ5RGVsYXk6IGNvbnRleHQub3B0aW9ucy5yZXRyeURlbGF5XG4gICAgfSk7XG4gICAgdGhpcy5wcm9taXNlID0gdGhpcy5yZXRyeWVyLnByb21pc2U7XG4gICAgcmV0dXJuIHRoaXMucHJvbWlzZTtcbiAgfTtcblxuICBfcHJvdG8uZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHRoaXMuc3RhdGUgPSB0aGlzLnJlZHVjZXIodGhpcy5zdGF0ZSwgYWN0aW9uKTtcbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIub25RdWVyeVVwZGF0ZShhY3Rpb24pO1xuICAgICAgfSk7XG5cbiAgICAgIF90aGlzMy5jYWNoZS5ub3RpZnkoe1xuICAgICAgICBxdWVyeTogX3RoaXMzLFxuICAgICAgICB0eXBlOiAncXVlcnlVcGRhdGVkJyxcbiAgICAgICAgYWN0aW9uOiBhY3Rpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5nZXREZWZhdWx0U3RhdGUgPSBmdW5jdGlvbiBnZXREZWZhdWx0U3RhdGUob3B0aW9ucykge1xuICAgIHZhciBkYXRhID0gdHlwZW9mIG9wdGlvbnMuaW5pdGlhbERhdGEgPT09ICdmdW5jdGlvbicgPyBvcHRpb25zLmluaXRpYWxEYXRhKCkgOiBvcHRpb25zLmluaXRpYWxEYXRhO1xuICAgIHZhciBoYXNJbml0aWFsRGF0YSA9IHR5cGVvZiBvcHRpb25zLmluaXRpYWxEYXRhICE9PSAndW5kZWZpbmVkJztcbiAgICB2YXIgaW5pdGlhbERhdGFVcGRhdGVkQXQgPSBoYXNJbml0aWFsRGF0YSA/IHR5cGVvZiBvcHRpb25zLmluaXRpYWxEYXRhVXBkYXRlZEF0ID09PSAnZnVuY3Rpb24nID8gb3B0aW9ucy5pbml0aWFsRGF0YVVwZGF0ZWRBdCgpIDogb3B0aW9ucy5pbml0aWFsRGF0YVVwZGF0ZWRBdCA6IDA7XG4gICAgdmFyIGhhc0RhdGEgPSB0eXBlb2YgZGF0YSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IGRhdGEsXG4gICAgICBkYXRhVXBkYXRlQ291bnQ6IDAsXG4gICAgICBkYXRhVXBkYXRlZEF0OiBoYXNEYXRhID8gaW5pdGlhbERhdGFVcGRhdGVkQXQgIT0gbnVsbCA/IGluaXRpYWxEYXRhVXBkYXRlZEF0IDogRGF0ZS5ub3coKSA6IDAsXG4gICAgICBlcnJvcjogbnVsbCxcbiAgICAgIGVycm9yVXBkYXRlQ291bnQ6IDAsXG4gICAgICBlcnJvclVwZGF0ZWRBdDogMCxcbiAgICAgIGZldGNoRmFpbHVyZUNvdW50OiAwLFxuICAgICAgZmV0Y2hNZXRhOiBudWxsLFxuICAgICAgaXNGZXRjaGluZzogZmFsc2UsXG4gICAgICBpc0ludmFsaWRhdGVkOiBmYWxzZSxcbiAgICAgIGlzUGF1c2VkOiBmYWxzZSxcbiAgICAgIHN0YXR1czogaGFzRGF0YSA/ICdzdWNjZXNzJyA6ICdpZGxlJ1xuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnJlZHVjZXIgPSBmdW5jdGlvbiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgICB2YXIgX2FjdGlvbiRtZXRhLCBfYWN0aW9uJGRhdGFVcGRhdGVkQXQ7XG5cbiAgICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgICBjYXNlICdmYWlsZWQnOlxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgICAgZmV0Y2hGYWlsdXJlQ291bnQ6IHN0YXRlLmZldGNoRmFpbHVyZUNvdW50ICsgMVxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAncGF1c2UnOlxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgICAgaXNQYXVzZWQ6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NvbnRpbnVlJzpcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICAgIGlzUGF1c2VkOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZmV0Y2gnOlxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgICAgZmV0Y2hGYWlsdXJlQ291bnQ6IDAsXG4gICAgICAgICAgZmV0Y2hNZXRhOiAoX2FjdGlvbiRtZXRhID0gYWN0aW9uLm1ldGEpICE9IG51bGwgPyBfYWN0aW9uJG1ldGEgOiBudWxsLFxuICAgICAgICAgIGlzRmV0Y2hpbmc6IHRydWUsXG4gICAgICAgICAgaXNQYXVzZWQ6IGZhbHNlXG4gICAgICAgIH0sICFzdGF0ZS5kYXRhVXBkYXRlZEF0ICYmIHtcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICBzdGF0dXM6ICdsb2FkaW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnc3VjY2Vzcyc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICBkYXRhOiBhY3Rpb24uZGF0YSxcbiAgICAgICAgICBkYXRhVXBkYXRlQ291bnQ6IHN0YXRlLmRhdGFVcGRhdGVDb3VudCArIDEsXG4gICAgICAgICAgZGF0YVVwZGF0ZWRBdDogKF9hY3Rpb24kZGF0YVVwZGF0ZWRBdCA9IGFjdGlvbi5kYXRhVXBkYXRlZEF0KSAhPSBudWxsID8gX2FjdGlvbiRkYXRhVXBkYXRlZEF0IDogRGF0ZS5ub3coKSxcbiAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICBmZXRjaEZhaWx1cmVDb3VudDogMCxcbiAgICAgICAgICBpc0ZldGNoaW5nOiBmYWxzZSxcbiAgICAgICAgICBpc0ludmFsaWRhdGVkOiBmYWxzZSxcbiAgICAgICAgICBpc1BhdXNlZDogZmFsc2UsXG4gICAgICAgICAgc3RhdHVzOiAnc3VjY2VzcydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2Vycm9yJzpcbiAgICAgICAgdmFyIGVycm9yID0gYWN0aW9uLmVycm9yO1xuXG4gICAgICAgIGlmIChpc0NhbmNlbGxlZEVycm9yKGVycm9yKSAmJiBlcnJvci5yZXZlcnQgJiYgdGhpcy5yZXZlcnRTdGF0ZSkge1xuICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgdGhpcy5yZXZlcnRTdGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgICAgIGVycm9yVXBkYXRlQ291bnQ6IHN0YXRlLmVycm9yVXBkYXRlQ291bnQgKyAxLFxuICAgICAgICAgIGVycm9yVXBkYXRlZEF0OiBEYXRlLm5vdygpLFxuICAgICAgICAgIGZldGNoRmFpbHVyZUNvdW50OiBzdGF0ZS5mZXRjaEZhaWx1cmVDb3VudCArIDEsXG4gICAgICAgICAgaXNGZXRjaGluZzogZmFsc2UsXG4gICAgICAgICAgaXNQYXVzZWQ6IGZhbHNlLFxuICAgICAgICAgIHN0YXR1czogJ2Vycm9yJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnaW52YWxpZGF0ZSc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICBpc0ludmFsaWRhdGVkOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdzZXRTdGF0ZSc6XG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIGFjdGlvbi5zdGF0ZSk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFF1ZXJ5O1xufSgpOyIsImltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZVwiO1xuaW1wb3J0IHsgaGFzaFF1ZXJ5S2V5QnlPcHRpb25zLCBtYXRjaFF1ZXJ5LCBwYXJzZUZpbHRlckFyZ3MgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IFF1ZXJ5IH0gZnJvbSAnLi9xdWVyeSc7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi9ub3RpZnlNYW5hZ2VyJztcbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJhYmxlJztcbi8vIENMQVNTXG5leHBvcnQgdmFyIFF1ZXJ5Q2FjaGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9TdWJzY3JpYmFibGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoUXVlcnlDYWNoZSwgX1N1YnNjcmliYWJsZSk7XG5cbiAgZnVuY3Rpb24gUXVlcnlDYWNoZShjb25maWcpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9TdWJzY3JpYmFibGUuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcbiAgICBfdGhpcy5xdWVyaWVzID0gW107XG4gICAgX3RoaXMucXVlcmllc01hcCA9IHt9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBRdWVyeUNhY2hlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYnVpbGQgPSBmdW5jdGlvbiBidWlsZChjbGllbnQsIG9wdGlvbnMsIHN0YXRlKSB7XG4gICAgdmFyIF9vcHRpb25zJHF1ZXJ5SGFzaDtcblxuICAgIHZhciBxdWVyeUtleSA9IG9wdGlvbnMucXVlcnlLZXk7XG4gICAgdmFyIHF1ZXJ5SGFzaCA9IChfb3B0aW9ucyRxdWVyeUhhc2ggPSBvcHRpb25zLnF1ZXJ5SGFzaCkgIT0gbnVsbCA/IF9vcHRpb25zJHF1ZXJ5SGFzaCA6IGhhc2hRdWVyeUtleUJ5T3B0aW9ucyhxdWVyeUtleSwgb3B0aW9ucyk7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpcy5nZXQocXVlcnlIYXNoKTtcblxuICAgIGlmICghcXVlcnkpIHtcbiAgICAgIHF1ZXJ5ID0gbmV3IFF1ZXJ5KHtcbiAgICAgICAgY2FjaGU6IHRoaXMsXG4gICAgICAgIHF1ZXJ5S2V5OiBxdWVyeUtleSxcbiAgICAgICAgcXVlcnlIYXNoOiBxdWVyeUhhc2gsXG4gICAgICAgIG9wdGlvbnM6IGNsaWVudC5kZWZhdWx0UXVlcnlPcHRpb25zKG9wdGlvbnMpLFxuICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgIGRlZmF1bHRPcHRpb25zOiBjbGllbnQuZ2V0UXVlcnlEZWZhdWx0cyhxdWVyeUtleSksXG4gICAgICAgIG1ldGE6IG9wdGlvbnMubWV0YVxuICAgICAgfSk7XG4gICAgICB0aGlzLmFkZChxdWVyeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHF1ZXJ5O1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQocXVlcnkpIHtcbiAgICBpZiAoIXRoaXMucXVlcmllc01hcFtxdWVyeS5xdWVyeUhhc2hdKSB7XG4gICAgICB0aGlzLnF1ZXJpZXNNYXBbcXVlcnkucXVlcnlIYXNoXSA9IHF1ZXJ5O1xuICAgICAgdGhpcy5xdWVyaWVzLnB1c2gocXVlcnkpO1xuICAgICAgdGhpcy5ub3RpZnkoe1xuICAgICAgICB0eXBlOiAncXVlcnlBZGRlZCcsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUocXVlcnkpIHtcbiAgICB2YXIgcXVlcnlJbk1hcCA9IHRoaXMucXVlcmllc01hcFtxdWVyeS5xdWVyeUhhc2hdO1xuXG4gICAgaWYgKHF1ZXJ5SW5NYXApIHtcbiAgICAgIHF1ZXJ5LmRlc3Ryb3koKTtcbiAgICAgIHRoaXMucXVlcmllcyA9IHRoaXMucXVlcmllcy5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHggIT09IHF1ZXJ5O1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChxdWVyeUluTWFwID09PSBxdWVyeSkge1xuICAgICAgICBkZWxldGUgdGhpcy5xdWVyaWVzTWFwW3F1ZXJ5LnF1ZXJ5SGFzaF07XG4gICAgICB9XG5cbiAgICAgIHRoaXMubm90aWZ5KHtcbiAgICAgICAgdHlwZTogJ3F1ZXJ5UmVtb3ZlZCcsXG4gICAgICAgIHF1ZXJ5OiBxdWVyeVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucXVlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICBfdGhpczIucmVtb3ZlKHF1ZXJ5KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQocXVlcnlIYXNoKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcmllc01hcFtxdWVyeUhhc2hdO1xuICB9O1xuXG4gIF9wcm90by5nZXRBbGwgPSBmdW5jdGlvbiBnZXRBbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcmllcztcbiAgfTtcblxuICBfcHJvdG8uZmluZCA9IGZ1bmN0aW9uIGZpbmQoYXJnMSwgYXJnMikge1xuICAgIHZhciBfcGFyc2VGaWx0ZXJBcmdzID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnc1swXTtcblxuICAgIGlmICh0eXBlb2YgZmlsdGVycy5leGFjdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZpbHRlcnMuZXhhY3QgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnF1ZXJpZXMuZmluZChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgIHJldHVybiBtYXRjaFF1ZXJ5KGZpbHRlcnMsIHF1ZXJ5KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZmluZEFsbCA9IGZ1bmN0aW9uIGZpbmRBbGwoYXJnMSwgYXJnMikge1xuICAgIHZhciBfcGFyc2VGaWx0ZXJBcmdzMiA9IHBhcnNlRmlsdGVyQXJncyhhcmcxLCBhcmcyKSxcbiAgICAgICAgZmlsdGVycyA9IF9wYXJzZUZpbHRlckFyZ3MyWzBdO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGZpbHRlcnMpLmxlbmd0aCA+IDAgPyB0aGlzLnF1ZXJpZXMuZmlsdGVyKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgcmV0dXJuIG1hdGNoUXVlcnkoZmlsdGVycywgcXVlcnkpO1xuICAgIH0pIDogdGhpcy5xdWVyaWVzO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkoZXZlbnQpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcihldmVudCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25Gb2N1cyA9IGZ1bmN0aW9uIG9uRm9jdXMoKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzNC5xdWVyaWVzLmZvckVhY2goZnVuY3Rpb24gKHF1ZXJ5KSB7XG4gICAgICAgIHF1ZXJ5Lm9uRm9jdXMoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbk9ubGluZSA9IGZ1bmN0aW9uIG9uT25saW5lKCkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczUucXVlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICBxdWVyeS5vbk9ubGluZSgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFF1ZXJ5Q2FjaGU7XG59KFN1YnNjcmliYWJsZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBnZXRMb2dnZXIgfSBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi9ub3RpZnlNYW5hZ2VyJztcbmltcG9ydCB7IFJldHJ5ZXIgfSBmcm9tICcuL3JldHJ5ZXInO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vdXRpbHMnOyAvLyBUWVBFU1xuXG4vLyBDTEFTU1xuZXhwb3J0IHZhciBNdXRhdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE11dGF0aW9uKGNvbmZpZykge1xuICAgIHRoaXMub3B0aW9ucyA9IF9leHRlbmRzKHt9LCBjb25maWcuZGVmYXVsdE9wdGlvbnMsIGNvbmZpZy5vcHRpb25zKTtcbiAgICB0aGlzLm11dGF0aW9uSWQgPSBjb25maWcubXV0YXRpb25JZDtcbiAgICB0aGlzLm11dGF0aW9uQ2FjaGUgPSBjb25maWcubXV0YXRpb25DYWNoZTtcbiAgICB0aGlzLm9ic2VydmVycyA9IFtdO1xuICAgIHRoaXMuc3RhdGUgPSBjb25maWcuc3RhdGUgfHwgZ2V0RGVmYXVsdFN0YXRlKCk7XG4gICAgdGhpcy5tZXRhID0gY29uZmlnLm1ldGE7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTXV0YXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKHN0YXRlKSB7XG4gICAgdGhpcy5kaXNwYXRjaCh7XG4gICAgICB0eXBlOiAnc2V0U3RhdGUnLFxuICAgICAgc3RhdGU6IHN0YXRlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmFkZE9ic2VydmVyID0gZnVuY3Rpb24gYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpIHtcbiAgICBpZiAodGhpcy5vYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcikgPT09IC0xKSB7XG4gICAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZU9ic2VydmVyID0gZnVuY3Rpb24gcmVtb3ZlT2JzZXJ2ZXIob2JzZXJ2ZXIpIHtcbiAgICB0aGlzLm9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzLmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgICAgcmV0dXJuIHggIT09IG9ic2VydmVyO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jYW5jZWwgPSBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRoaXMucmV0cnllcikge1xuICAgICAgdGhpcy5yZXRyeWVyLmNhbmNlbCgpO1xuICAgICAgcmV0dXJuIHRoaXMucmV0cnllci5wcm9taXNlLnRoZW4obm9vcCkuY2F0Y2gobm9vcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9O1xuXG4gIF9wcm90by5jb250aW51ZSA9IGZ1bmN0aW9uIF9jb250aW51ZSgpIHtcbiAgICBpZiAodGhpcy5yZXRyeWVyKSB7XG4gICAgICB0aGlzLnJldHJ5ZXIuY29udGludWUoKTtcbiAgICAgIHJldHVybiB0aGlzLnJldHJ5ZXIucHJvbWlzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5leGVjdXRlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmV4ZWN1dGUgPSBmdW5jdGlvbiBleGVjdXRlKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgZGF0YTtcbiAgICB2YXIgcmVzdG9yZWQgPSB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gJ2xvYWRpbmcnO1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICBpZiAoIXJlc3RvcmVkKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ2xvYWRpbmcnLFxuICAgICAgICB2YXJpYWJsZXM6IHRoaXMub3B0aW9ucy52YXJpYWJsZXNcbiAgICAgIH0pO1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIE5vdGlmeSBjYWNoZSBjYWxsYmFja1xuICAgICAgICBfdGhpcy5tdXRhdGlvbkNhY2hlLmNvbmZpZy5vbk11dGF0ZSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMubXV0YXRpb25DYWNoZS5jb25maWcub25NdXRhdGUoX3RoaXMuc3RhdGUudmFyaWFibGVzLCBfdGhpcyk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm9wdGlvbnMub25NdXRhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzLm9wdGlvbnMub25NdXRhdGUoX3RoaXMuc3RhdGUudmFyaWFibGVzKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICAgaWYgKGNvbnRleHQgIT09IF90aGlzLnN0YXRlLmNvbnRleHQpIHtcbiAgICAgICAgICBfdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnbG9hZGluZycsXG4gICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgICAgICAgdmFyaWFibGVzOiBfdGhpcy5zdGF0ZS52YXJpYWJsZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMuZXhlY3V0ZU11dGF0aW9uKCk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICBkYXRhID0gcmVzdWx0OyAvLyBOb3RpZnkgY2FjaGUgY2FsbGJhY2tcblxuICAgICAgX3RoaXMubXV0YXRpb25DYWNoZS5jb25maWcub25TdWNjZXNzID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcy5tdXRhdGlvbkNhY2hlLmNvbmZpZy5vblN1Y2Nlc3MoZGF0YSwgX3RoaXMuc3RhdGUudmFyaWFibGVzLCBfdGhpcy5zdGF0ZS5jb250ZXh0LCBfdGhpcyk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy5vblN1Y2Nlc3MgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzLm9wdGlvbnMub25TdWNjZXNzKGRhdGEsIF90aGlzLnN0YXRlLnZhcmlhYmxlcywgX3RoaXMuc3RhdGUuY29udGV4dCk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy5vblNldHRsZWQgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzLm9wdGlvbnMub25TZXR0bGVkKGRhdGEsIG51bGwsIF90aGlzLnN0YXRlLnZhcmlhYmxlcywgX3RoaXMuc3RhdGUuY29udGV4dCk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdzdWNjZXNzJyxcbiAgICAgICAgZGF0YTogZGF0YVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgLy8gTm90aWZ5IGNhY2hlIGNhbGxiYWNrXG4gICAgICBfdGhpcy5tdXRhdGlvbkNhY2hlLmNvbmZpZy5vbkVycm9yID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcy5tdXRhdGlvbkNhY2hlLmNvbmZpZy5vbkVycm9yKGVycm9yLCBfdGhpcy5zdGF0ZS52YXJpYWJsZXMsIF90aGlzLnN0YXRlLmNvbnRleHQsIF90aGlzKTsgLy8gTG9nIGVycm9yXG5cbiAgICAgIGdldExvZ2dlcigpLmVycm9yKGVycm9yKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm9wdGlvbnMub25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMub3B0aW9ucy5vbkVycm9yKGVycm9yLCBfdGhpcy5zdGF0ZS52YXJpYWJsZXMsIF90aGlzLnN0YXRlLmNvbnRleHQpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5vcHRpb25zLm9uU2V0dGxlZCA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMub3B0aW9ucy5vblNldHRsZWQodW5kZWZpbmVkLCBlcnJvciwgX3RoaXMuc3RhdGUudmFyaWFibGVzLCBfdGhpcy5zdGF0ZS5jb250ZXh0KTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5kaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZXhlY3V0ZU11dGF0aW9uID0gZnVuY3Rpb24gZXhlY3V0ZU11dGF0aW9uKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzLFxuICAgICAgICBfdGhpcyRvcHRpb25zJHJldHJ5O1xuXG4gICAgdGhpcy5yZXRyeWVyID0gbmV3IFJldHJ5ZXIoe1xuICAgICAgZm46IGZ1bmN0aW9uIGZuKCkge1xuICAgICAgICBpZiAoIV90aGlzMi5vcHRpb25zLm11dGF0aW9uRm4pIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ05vIG11dGF0aW9uRm4gZm91bmQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfdGhpczIub3B0aW9ucy5tdXRhdGlvbkZuKF90aGlzMi5zdGF0ZS52YXJpYWJsZXMpO1xuICAgICAgfSxcbiAgICAgIG9uRmFpbDogZnVuY3Rpb24gb25GYWlsKCkge1xuICAgICAgICBfdGhpczIuZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdmYWlsZWQnXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uUGF1c2U6IGZ1bmN0aW9uIG9uUGF1c2UoKSB7XG4gICAgICAgIF90aGlzMi5kaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogJ3BhdXNlJ1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbkNvbnRpbnVlOiBmdW5jdGlvbiBvbkNvbnRpbnVlKCkge1xuICAgICAgICBfdGhpczIuZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdjb250aW51ZSdcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgcmV0cnk6IChfdGhpcyRvcHRpb25zJHJldHJ5ID0gdGhpcy5vcHRpb25zLnJldHJ5KSAhPSBudWxsID8gX3RoaXMkb3B0aW9ucyRyZXRyeSA6IDAsXG4gICAgICByZXRyeURlbGF5OiB0aGlzLm9wdGlvbnMucmV0cnlEZWxheVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnJldHJ5ZXIucHJvbWlzZTtcbiAgfTtcblxuICBfcHJvdG8uZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHRoaXMuc3RhdGUgPSByZWR1Y2VyKHRoaXMuc3RhdGUsIGFjdGlvbik7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMub2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIG9ic2VydmVyLm9uTXV0YXRpb25VcGRhdGUoYWN0aW9uKTtcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpczMubXV0YXRpb25DYWNoZS5ub3RpZnkoX3RoaXMzKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gTXV0YXRpb247XG59KCk7XG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdFN0YXRlKCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRleHQ6IHVuZGVmaW5lZCxcbiAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgZXJyb3I6IG51bGwsXG4gICAgZmFpbHVyZUNvdW50OiAwLFxuICAgIGlzUGF1c2VkOiBmYWxzZSxcbiAgICBzdGF0dXM6ICdpZGxlJyxcbiAgICB2YXJpYWJsZXM6IHVuZGVmaW5lZFxuICB9O1xufVxuXG5mdW5jdGlvbiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgJ2ZhaWxlZCc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGZhaWx1cmVDb3VudDogc3RhdGUuZmFpbHVyZUNvdW50ICsgMVxuICAgICAgfSk7XG5cbiAgICBjYXNlICdwYXVzZSc6XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICAgIGlzUGF1c2VkOiB0cnVlXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ2NvbnRpbnVlJzpcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgaXNQYXVzZWQ6IGZhbHNlXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ2xvYWRpbmcnOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBjb250ZXh0OiBhY3Rpb24uY29udGV4dCxcbiAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgaXNQYXVzZWQ6IGZhbHNlLFxuICAgICAgICBzdGF0dXM6ICdsb2FkaW5nJyxcbiAgICAgICAgdmFyaWFibGVzOiBhY3Rpb24udmFyaWFibGVzXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3N1Y2Nlc3MnOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBkYXRhOiBhY3Rpb24uZGF0YSxcbiAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnLFxuICAgICAgICBpc1BhdXNlZDogZmFsc2VcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnZXJyb3InOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgICAgIGVycm9yOiBhY3Rpb24uZXJyb3IsXG4gICAgICAgIGZhaWx1cmVDb3VudDogc3RhdGUuZmFpbHVyZUNvdW50ICsgMSxcbiAgICAgICAgaXNQYXVzZWQ6IGZhbHNlLFxuICAgICAgICBzdGF0dXM6ICdlcnJvcidcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnc2V0U3RhdGUnOlxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwgYWN0aW9uLnN0YXRlKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn0iLCJpbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICcuL25vdGlmeU1hbmFnZXInO1xuaW1wb3J0IHsgTXV0YXRpb24gfSBmcm9tICcuL211dGF0aW9uJztcbmltcG9ydCB7IG1hdGNoTXV0YXRpb24sIG5vb3AgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJhYmxlJzsgLy8gVFlQRVNcblxuLy8gQ0xBU1NcbmV4cG9ydCB2YXIgTXV0YXRpb25DYWNoZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1N1YnNjcmliYWJsZSkge1xuICBfaW5oZXJpdHNMb29zZShNdXRhdGlvbkNhY2hlLCBfU3Vic2NyaWJhYmxlKTtcblxuICBmdW5jdGlvbiBNdXRhdGlvbkNhY2hlKGNvbmZpZykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1N1YnNjcmliYWJsZS5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgX3RoaXMuY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIF90aGlzLm11dGF0aW9ucyA9IFtdO1xuICAgIF90aGlzLm11dGF0aW9uSWQgPSAwO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNdXRhdGlvbkNhY2hlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYnVpbGQgPSBmdW5jdGlvbiBidWlsZChjbGllbnQsIG9wdGlvbnMsIHN0YXRlKSB7XG4gICAgdmFyIG11dGF0aW9uID0gbmV3IE11dGF0aW9uKHtcbiAgICAgIG11dGF0aW9uQ2FjaGU6IHRoaXMsXG4gICAgICBtdXRhdGlvbklkOiArK3RoaXMubXV0YXRpb25JZCxcbiAgICAgIG9wdGlvbnM6IGNsaWVudC5kZWZhdWx0TXV0YXRpb25PcHRpb25zKG9wdGlvbnMpLFxuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgZGVmYXVsdE9wdGlvbnM6IG9wdGlvbnMubXV0YXRpb25LZXkgPyBjbGllbnQuZ2V0TXV0YXRpb25EZWZhdWx0cyhvcHRpb25zLm11dGF0aW9uS2V5KSA6IHVuZGVmaW5lZCxcbiAgICAgIG1ldGE6IG9wdGlvbnMubWV0YVxuICAgIH0pO1xuICAgIHRoaXMuYWRkKG11dGF0aW9uKTtcbiAgICByZXR1cm4gbXV0YXRpb247XG4gIH07XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChtdXRhdGlvbikge1xuICAgIHRoaXMubXV0YXRpb25zLnB1c2gobXV0YXRpb24pO1xuICAgIHRoaXMubm90aWZ5KG11dGF0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKG11dGF0aW9uKSB7XG4gICAgdGhpcy5tdXRhdGlvbnMgPSB0aGlzLm11dGF0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiB4ICE9PSBtdXRhdGlvbjtcbiAgICB9KTtcbiAgICBtdXRhdGlvbi5jYW5jZWwoKTtcbiAgICB0aGlzLm5vdGlmeShtdXRhdGlvbik7XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5tdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgX3RoaXMyLnJlbW92ZShtdXRhdGlvbik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0QWxsID0gZnVuY3Rpb24gZ2V0QWxsKCkge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9ucztcbiAgfTtcblxuICBfcHJvdG8uZmluZCA9IGZ1bmN0aW9uIGZpbmQoZmlsdGVycykge1xuICAgIGlmICh0eXBlb2YgZmlsdGVycy5leGFjdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGZpbHRlcnMuZXhhY3QgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm11dGF0aW9ucy5maW5kKGZ1bmN0aW9uIChtdXRhdGlvbikge1xuICAgICAgcmV0dXJuIG1hdGNoTXV0YXRpb24oZmlsdGVycywgbXV0YXRpb24pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5maW5kQWxsID0gZnVuY3Rpb24gZmluZEFsbChmaWx0ZXJzKSB7XG4gICAgcmV0dXJuIHRoaXMubXV0YXRpb25zLmZpbHRlcihmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgIHJldHVybiBtYXRjaE11dGF0aW9uKGZpbHRlcnMsIG11dGF0aW9uKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5KG11dGF0aW9uKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIobXV0YXRpb24pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRm9jdXMgPSBmdW5jdGlvbiBvbkZvY3VzKCkge1xuICAgIHRoaXMucmVzdW1lUGF1c2VkTXV0YXRpb25zKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uT25saW5lID0gZnVuY3Rpb24gb25PbmxpbmUoKSB7XG4gICAgdGhpcy5yZXN1bWVQYXVzZWRNdXRhdGlvbnMoKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzdW1lUGF1c2VkTXV0YXRpb25zID0gZnVuY3Rpb24gcmVzdW1lUGF1c2VkTXV0YXRpb25zKCkge1xuICAgIHZhciBwYXVzZWRNdXRhdGlvbnMgPSB0aGlzLm11dGF0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiB4LnN0YXRlLmlzUGF1c2VkO1xuICAgIH0pO1xuICAgIHJldHVybiBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBwYXVzZWRNdXRhdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChwcm9taXNlLCBtdXRhdGlvbikge1xuICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gbXV0YXRpb24uY29udGludWUoKS5jYXRjaChub29wKTtcbiAgICAgICAgfSk7XG4gICAgICB9LCBQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE11dGF0aW9uQ2FjaGU7XG59KFN1YnNjcmliYWJsZSk7IiwiaW1wb3J0IHsgaXNDYW5jZWxhYmxlIH0gZnJvbSAnLi9yZXRyeWVyJztcbmltcG9ydCB7IGdldEFib3J0Q29udHJvbGxlciB9IGZyb20gJy4vdXRpbHMnO1xuZXhwb3J0IGZ1bmN0aW9uIGluZmluaXRlUXVlcnlCZWhhdmlvcigpIHtcbiAgcmV0dXJuIHtcbiAgICBvbkZldGNoOiBmdW5jdGlvbiBvbkZldGNoKGNvbnRleHQpIHtcbiAgICAgIGNvbnRleHQuZmV0Y2hGbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9jb250ZXh0JGZldGNoT3B0aW9ucywgX2NvbnRleHQkZmV0Y2hPcHRpb25zMiwgX2NvbnRleHQkZmV0Y2hPcHRpb25zMywgX2NvbnRleHQkZmV0Y2hPcHRpb25zNCwgX2NvbnRleHQkc3RhdGUkZGF0YSwgX2NvbnRleHQkc3RhdGUkZGF0YTI7XG5cbiAgICAgICAgdmFyIHJlZmV0Y2hQYWdlID0gKF9jb250ZXh0JGZldGNoT3B0aW9ucyA9IGNvbnRleHQuZmV0Y2hPcHRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogKF9jb250ZXh0JGZldGNoT3B0aW9uczIgPSBfY29udGV4dCRmZXRjaE9wdGlvbnMubWV0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb250ZXh0JGZldGNoT3B0aW9uczIucmVmZXRjaFBhZ2U7XG4gICAgICAgIHZhciBmZXRjaE1vcmUgPSAoX2NvbnRleHQkZmV0Y2hPcHRpb25zMyA9IGNvbnRleHQuZmV0Y2hPcHRpb25zKSA9PSBudWxsID8gdm9pZCAwIDogKF9jb250ZXh0JGZldGNoT3B0aW9uczQgPSBfY29udGV4dCRmZXRjaE9wdGlvbnMzLm1ldGEpID09IG51bGwgPyB2b2lkIDAgOiBfY29udGV4dCRmZXRjaE9wdGlvbnM0LmZldGNoTW9yZTtcbiAgICAgICAgdmFyIHBhZ2VQYXJhbSA9IGZldGNoTW9yZSA9PSBudWxsID8gdm9pZCAwIDogZmV0Y2hNb3JlLnBhZ2VQYXJhbTtcbiAgICAgICAgdmFyIGlzRmV0Y2hpbmdOZXh0UGFnZSA9IChmZXRjaE1vcmUgPT0gbnVsbCA/IHZvaWQgMCA6IGZldGNoTW9yZS5kaXJlY3Rpb24pID09PSAnZm9yd2FyZCc7XG4gICAgICAgIHZhciBpc0ZldGNoaW5nUHJldmlvdXNQYWdlID0gKGZldGNoTW9yZSA9PSBudWxsID8gdm9pZCAwIDogZmV0Y2hNb3JlLmRpcmVjdGlvbikgPT09ICdiYWNrd2FyZCc7XG4gICAgICAgIHZhciBvbGRQYWdlcyA9ICgoX2NvbnRleHQkc3RhdGUkZGF0YSA9IGNvbnRleHQuc3RhdGUuZGF0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9jb250ZXh0JHN0YXRlJGRhdGEucGFnZXMpIHx8IFtdO1xuICAgICAgICB2YXIgb2xkUGFnZVBhcmFtcyA9ICgoX2NvbnRleHQkc3RhdGUkZGF0YTIgPSBjb250ZXh0LnN0YXRlLmRhdGEpID09IG51bGwgPyB2b2lkIDAgOiBfY29udGV4dCRzdGF0ZSRkYXRhMi5wYWdlUGFyYW1zKSB8fCBbXTtcbiAgICAgICAgdmFyIGFib3J0Q29udHJvbGxlciA9IGdldEFib3J0Q29udHJvbGxlcigpO1xuICAgICAgICB2YXIgYWJvcnRTaWduYWwgPSBhYm9ydENvbnRyb2xsZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGFib3J0Q29udHJvbGxlci5zaWduYWw7XG4gICAgICAgIHZhciBuZXdQYWdlUGFyYW1zID0gb2xkUGFnZVBhcmFtcztcbiAgICAgICAgdmFyIGNhbmNlbGxlZCA9IGZhbHNlOyAvLyBHZXQgcXVlcnkgZnVuY3Rpb25cblxuICAgICAgICB2YXIgcXVlcnlGbiA9IGNvbnRleHQub3B0aW9ucy5xdWVyeUZuIHx8IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ01pc3NpbmcgcXVlcnlGbicpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBidWlsZE5ld1BhZ2VzID0gZnVuY3Rpb24gYnVpbGROZXdQYWdlcyhwYWdlcywgcGFyYW0sIHBhZ2UsIHByZXZpb3VzKSB7XG4gICAgICAgICAgbmV3UGFnZVBhcmFtcyA9IHByZXZpb3VzID8gW3BhcmFtXS5jb25jYXQobmV3UGFnZVBhcmFtcykgOiBbXS5jb25jYXQobmV3UGFnZVBhcmFtcywgW3BhcmFtXSk7XG4gICAgICAgICAgcmV0dXJuIHByZXZpb3VzID8gW3BhZ2VdLmNvbmNhdChwYWdlcykgOiBbXS5jb25jYXQocGFnZXMsIFtwYWdlXSk7XG4gICAgICAgIH07IC8vIENyZWF0ZSBmdW5jdGlvbiB0byBmZXRjaCBhIHBhZ2VcblxuXG4gICAgICAgIHZhciBmZXRjaFBhZ2UgPSBmdW5jdGlvbiBmZXRjaFBhZ2UocGFnZXMsIG1hbnVhbCwgcGFyYW0sIHByZXZpb3VzKSB7XG4gICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KCdDYW5jZWxsZWQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtID09PSAndW5kZWZpbmVkJyAmJiAhbWFudWFsICYmIHBhZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwYWdlcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHF1ZXJ5Rm5Db250ZXh0ID0ge1xuICAgICAgICAgICAgcXVlcnlLZXk6IGNvbnRleHQucXVlcnlLZXksXG4gICAgICAgICAgICBzaWduYWw6IGFib3J0U2lnbmFsLFxuICAgICAgICAgICAgcGFnZVBhcmFtOiBwYXJhbSxcbiAgICAgICAgICAgIG1ldGE6IGNvbnRleHQubWV0YVxuICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIHF1ZXJ5Rm5SZXN1bHQgPSBxdWVyeUZuKHF1ZXJ5Rm5Db250ZXh0KTtcbiAgICAgICAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShxdWVyeUZuUmVzdWx0KS50aGVuKGZ1bmN0aW9uIChwYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gYnVpbGROZXdQYWdlcyhwYWdlcywgcGFyYW0sIHBhZ2UsIHByZXZpb3VzKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChpc0NhbmNlbGFibGUocXVlcnlGblJlc3VsdCkpIHtcbiAgICAgICAgICAgIHZhciBwcm9taXNlQXNBbnkgPSBwcm9taXNlO1xuICAgICAgICAgICAgcHJvbWlzZUFzQW55LmNhbmNlbCA9IHF1ZXJ5Rm5SZXN1bHQuY2FuY2VsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBwcm9taXNlOyAvLyBGZXRjaCBmaXJzdCBwYWdlP1xuXG4gICAgICAgIGlmICghb2xkUGFnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgcHJvbWlzZSA9IGZldGNoUGFnZShbXSk7XG4gICAgICAgIH0gLy8gRmV0Y2ggbmV4dCBwYWdlP1xuICAgICAgICBlbHNlIGlmIChpc0ZldGNoaW5nTmV4dFBhZ2UpIHtcbiAgICAgICAgICAgIHZhciBtYW51YWwgPSB0eXBlb2YgcGFnZVBhcmFtICE9PSAndW5kZWZpbmVkJztcbiAgICAgICAgICAgIHZhciBwYXJhbSA9IG1hbnVhbCA/IHBhZ2VQYXJhbSA6IGdldE5leHRQYWdlUGFyYW0oY29udGV4dC5vcHRpb25zLCBvbGRQYWdlcyk7XG4gICAgICAgICAgICBwcm9taXNlID0gZmV0Y2hQYWdlKG9sZFBhZ2VzLCBtYW51YWwsIHBhcmFtKTtcbiAgICAgICAgICB9IC8vIEZldGNoIHByZXZpb3VzIHBhZ2U/XG4gICAgICAgICAgZWxzZSBpZiAoaXNGZXRjaGluZ1ByZXZpb3VzUGFnZSkge1xuICAgICAgICAgICAgICB2YXIgX21hbnVhbCA9IHR5cGVvZiBwYWdlUGFyYW0gIT09ICd1bmRlZmluZWQnO1xuXG4gICAgICAgICAgICAgIHZhciBfcGFyYW0gPSBfbWFudWFsID8gcGFnZVBhcmFtIDogZ2V0UHJldmlvdXNQYWdlUGFyYW0oY29udGV4dC5vcHRpb25zLCBvbGRQYWdlcyk7XG5cbiAgICAgICAgICAgICAgcHJvbWlzZSA9IGZldGNoUGFnZShvbGRQYWdlcywgX21hbnVhbCwgX3BhcmFtLCB0cnVlKTtcbiAgICAgICAgICAgIH0gLy8gUmVmZXRjaCBwYWdlc1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIG5ld1BhZ2VQYXJhbXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgIHZhciBtYW51YWwgPSB0eXBlb2YgY29udGV4dC5vcHRpb25zLmdldE5leHRQYWdlUGFyYW0gPT09ICd1bmRlZmluZWQnO1xuICAgICAgICAgICAgICAgICAgdmFyIHNob3VsZEZldGNoRmlyc3RQYWdlID0gcmVmZXRjaFBhZ2UgJiYgb2xkUGFnZXNbMF0gPyByZWZldGNoUGFnZShvbGRQYWdlc1swXSwgMCwgb2xkUGFnZXMpIDogdHJ1ZTsgLy8gRmV0Y2ggZmlyc3QgcGFnZVxuXG4gICAgICAgICAgICAgICAgICBwcm9taXNlID0gc2hvdWxkRmV0Y2hGaXJzdFBhZ2UgPyBmZXRjaFBhZ2UoW10sIG1hbnVhbCwgb2xkUGFnZVBhcmFtc1swXSkgOiBQcm9taXNlLnJlc29sdmUoYnVpbGROZXdQYWdlcyhbXSwgb2xkUGFnZVBhcmFtc1swXSwgb2xkUGFnZXNbMF0pKTsgLy8gRmV0Y2ggcmVtYWluaW5nIHBhZ2VzXG5cbiAgICAgICAgICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbiAocGFnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hvdWxkRmV0Y2hOZXh0UGFnZSA9IHJlZmV0Y2hQYWdlICYmIG9sZFBhZ2VzW2ldID8gcmVmZXRjaFBhZ2Uob2xkUGFnZXNbaV0sIGksIG9sZFBhZ2VzKSA6IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdWxkRmV0Y2hOZXh0UGFnZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9wYXJhbTIgPSBtYW51YWwgPyBvbGRQYWdlUGFyYW1zW2ldIDogZ2V0TmV4dFBhZ2VQYXJhbShjb250ZXh0Lm9wdGlvbnMsIHBhZ2VzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoUGFnZShwYWdlcywgbWFudWFsLCBfcGFyYW0yKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGJ1aWxkTmV3UGFnZXMocGFnZXMsIG9sZFBhZ2VQYXJhbXNbaV0sIG9sZFBhZ2VzW2ldKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBvbGRQYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBfbG9vcChpKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSgpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgdmFyIGZpbmFsUHJvbWlzZSA9IHByb21pc2UudGhlbihmdW5jdGlvbiAocGFnZXMpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGFnZXM6IHBhZ2VzLFxuICAgICAgICAgICAgcGFnZVBhcmFtczogbmV3UGFnZVBhcmFtc1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgZmluYWxQcm9taXNlQXNBbnkgPSBmaW5hbFByb21pc2U7XG5cbiAgICAgICAgZmluYWxQcm9taXNlQXNBbnkuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgYWJvcnRDb250cm9sbGVyID09IG51bGwgPyB2b2lkIDAgOiBhYm9ydENvbnRyb2xsZXIuYWJvcnQoKTtcblxuICAgICAgICAgIGlmIChpc0NhbmNlbGFibGUocHJvbWlzZSkpIHtcbiAgICAgICAgICAgIHByb21pc2UuY2FuY2VsKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmaW5hbFByb21pc2U7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0UGFnZVBhcmFtKG9wdGlvbnMsIHBhZ2VzKSB7XG4gIHJldHVybiBvcHRpb25zLmdldE5leHRQYWdlUGFyYW0gPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuZ2V0TmV4dFBhZ2VQYXJhbShwYWdlc1twYWdlcy5sZW5ndGggLSAxXSwgcGFnZXMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldFByZXZpb3VzUGFnZVBhcmFtKG9wdGlvbnMsIHBhZ2VzKSB7XG4gIHJldHVybiBvcHRpb25zLmdldFByZXZpb3VzUGFnZVBhcmFtID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLmdldFByZXZpb3VzUGFnZVBhcmFtKHBhZ2VzWzBdLCBwYWdlcyk7XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGVyZSBpcyBhIG5leHQgcGFnZS5cbiAqIFJldHVybnMgYHVuZGVmaW5lZGAgaWYgaXQgY2Fubm90IGJlIGRldGVybWluZWQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc05leHRQYWdlKG9wdGlvbnMsIHBhZ2VzKSB7XG4gIGlmIChvcHRpb25zLmdldE5leHRQYWdlUGFyYW0gJiYgQXJyYXkuaXNBcnJheShwYWdlcykpIHtcbiAgICB2YXIgbmV4dFBhZ2VQYXJhbSA9IGdldE5leHRQYWdlUGFyYW0ob3B0aW9ucywgcGFnZXMpO1xuICAgIHJldHVybiB0eXBlb2YgbmV4dFBhZ2VQYXJhbSAhPT0gJ3VuZGVmaW5lZCcgJiYgbmV4dFBhZ2VQYXJhbSAhPT0gbnVsbCAmJiBuZXh0UGFnZVBhcmFtICE9PSBmYWxzZTtcbiAgfVxufVxuLyoqXG4gKiBDaGVja3MgaWYgdGhlcmUgaXMgYSBwcmV2aW91cyBwYWdlLlxuICogUmV0dXJucyBgdW5kZWZpbmVkYCBpZiBpdCBjYW5ub3QgYmUgZGV0ZXJtaW5lZC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzUHJldmlvdXNQYWdlKG9wdGlvbnMsIHBhZ2VzKSB7XG4gIGlmIChvcHRpb25zLmdldFByZXZpb3VzUGFnZVBhcmFtICYmIEFycmF5LmlzQXJyYXkocGFnZXMpKSB7XG4gICAgdmFyIHByZXZpb3VzUGFnZVBhcmFtID0gZ2V0UHJldmlvdXNQYWdlUGFyYW0ob3B0aW9ucywgcGFnZXMpO1xuICAgIHJldHVybiB0eXBlb2YgcHJldmlvdXNQYWdlUGFyYW0gIT09ICd1bmRlZmluZWQnICYmIHByZXZpb3VzUGFnZVBhcmFtICE9PSBudWxsICYmIHByZXZpb3VzUGFnZVBhcmFtICE9PSBmYWxzZTtcbiAgfVxufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgaGFzaFF1ZXJ5S2V5LCBub29wLCBwYXJzZUZpbHRlckFyZ3MsIHBhcnNlUXVlcnlBcmdzLCBwYXJ0aWFsTWF0Y2hLZXksIGhhc2hRdWVyeUtleUJ5T3B0aW9ucyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgUXVlcnlDYWNoZSB9IGZyb20gJy4vcXVlcnlDYWNoZSc7XG5pbXBvcnQgeyBNdXRhdGlvbkNhY2hlIH0gZnJvbSAnLi9tdXRhdGlvbkNhY2hlJztcbmltcG9ydCB7IGZvY3VzTWFuYWdlciB9IGZyb20gJy4vZm9jdXNNYW5hZ2VyJztcbmltcG9ydCB7IG9ubGluZU1hbmFnZXIgfSBmcm9tICcuL29ubGluZU1hbmFnZXInO1xuaW1wb3J0IHsgbm90aWZ5TWFuYWdlciB9IGZyb20gJy4vbm90aWZ5TWFuYWdlcic7XG5pbXBvcnQgeyBpbmZpbml0ZVF1ZXJ5QmVoYXZpb3IgfSBmcm9tICcuL2luZmluaXRlUXVlcnlCZWhhdmlvcic7XG4vLyBDTEFTU1xuZXhwb3J0IHZhciBRdWVyeUNsaWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFF1ZXJ5Q2xpZW50KGNvbmZpZykge1xuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkge1xuICAgICAgY29uZmlnID0ge307XG4gICAgfVxuXG4gICAgdGhpcy5xdWVyeUNhY2hlID0gY29uZmlnLnF1ZXJ5Q2FjaGUgfHwgbmV3IFF1ZXJ5Q2FjaGUoKTtcbiAgICB0aGlzLm11dGF0aW9uQ2FjaGUgPSBjb25maWcubXV0YXRpb25DYWNoZSB8fCBuZXcgTXV0YXRpb25DYWNoZSgpO1xuICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSBjb25maWcuZGVmYXVsdE9wdGlvbnMgfHwge307XG4gICAgdGhpcy5xdWVyeURlZmF1bHRzID0gW107XG4gICAgdGhpcy5tdXRhdGlvbkRlZmF1bHRzID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUXVlcnlDbGllbnQucHJvdG90eXBlO1xuXG4gIF9wcm90by5tb3VudCA9IGZ1bmN0aW9uIG1vdW50KCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB0aGlzLnVuc3Vic2NyaWJlRm9jdXMgPSBmb2N1c01hbmFnZXIuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChmb2N1c01hbmFnZXIuaXNGb2N1c2VkKCkgJiYgb25saW5lTWFuYWdlci5pc09ubGluZSgpKSB7XG4gICAgICAgIF90aGlzLm11dGF0aW9uQ2FjaGUub25Gb2N1cygpO1xuXG4gICAgICAgIF90aGlzLnF1ZXJ5Q2FjaGUub25Gb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMudW5zdWJzY3JpYmVPbmxpbmUgPSBvbmxpbmVNYW5hZ2VyLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZm9jdXNNYW5hZ2VyLmlzRm9jdXNlZCgpICYmIG9ubGluZU1hbmFnZXIuaXNPbmxpbmUoKSkge1xuICAgICAgICBfdGhpcy5tdXRhdGlvbkNhY2hlLm9uT25saW5lKCk7XG5cbiAgICAgICAgX3RoaXMucXVlcnlDYWNoZS5vbk9ubGluZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by51bm1vdW50ID0gZnVuY3Rpb24gdW5tb3VudCgpIHtcbiAgICB2YXIgX3RoaXMkdW5zdWJzY3JpYmVGb2N1LCBfdGhpcyR1bnN1YnNjcmliZU9ubGk7XG5cbiAgICAoX3RoaXMkdW5zdWJzY3JpYmVGb2N1ID0gdGhpcy51bnN1YnNjcmliZUZvY3VzKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkdW5zdWJzY3JpYmVGb2N1LmNhbGwodGhpcyk7XG4gICAgKF90aGlzJHVuc3Vic2NyaWJlT25saSA9IHRoaXMudW5zdWJzY3JpYmVPbmxpbmUpID09IG51bGwgPyB2b2lkIDAgOiBfdGhpcyR1bnN1YnNjcmliZU9ubGkuY2FsbCh0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8uaXNGZXRjaGluZyA9IGZ1bmN0aW9uIGlzRmV0Y2hpbmcoYXJnMSwgYXJnMikge1xuICAgIHZhciBfcGFyc2VGaWx0ZXJBcmdzID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnc1swXTtcblxuICAgIGZpbHRlcnMuZmV0Y2hpbmcgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5Q2FjaGUuZmluZEFsbChmaWx0ZXJzKS5sZW5ndGg7XG4gIH07XG5cbiAgX3Byb3RvLmlzTXV0YXRpbmcgPSBmdW5jdGlvbiBpc011dGF0aW5nKGZpbHRlcnMpIHtcbiAgICByZXR1cm4gdGhpcy5tdXRhdGlvbkNhY2hlLmZpbmRBbGwoX2V4dGVuZHMoe30sIGZpbHRlcnMsIHtcbiAgICAgIGZldGNoaW5nOiB0cnVlXG4gICAgfSkpLmxlbmd0aDtcbiAgfTtcblxuICBfcHJvdG8uZ2V0UXVlcnlEYXRhID0gZnVuY3Rpb24gZ2V0UXVlcnlEYXRhKHF1ZXJ5S2V5LCBmaWx0ZXJzKSB7XG4gICAgdmFyIF90aGlzJHF1ZXJ5Q2FjaGUkZmluZDtcblxuICAgIHJldHVybiAoX3RoaXMkcXVlcnlDYWNoZSRmaW5kID0gdGhpcy5xdWVyeUNhY2hlLmZpbmQocXVlcnlLZXksIGZpbHRlcnMpKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkcXVlcnlDYWNoZSRmaW5kLnN0YXRlLmRhdGE7XG4gIH07XG5cbiAgX3Byb3RvLmdldFF1ZXJpZXNEYXRhID0gZnVuY3Rpb24gZ2V0UXVlcmllc0RhdGEocXVlcnlLZXlPckZpbHRlcnMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRRdWVyeUNhY2hlKCkuZmluZEFsbChxdWVyeUtleU9yRmlsdGVycykubWFwKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgcXVlcnlLZXkgPSBfcmVmLnF1ZXJ5S2V5LFxuICAgICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcbiAgICAgIHZhciBkYXRhID0gc3RhdGUuZGF0YTtcbiAgICAgIHJldHVybiBbcXVlcnlLZXksIGRhdGFdO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zZXRRdWVyeURhdGEgPSBmdW5jdGlvbiBzZXRRdWVyeURhdGEocXVlcnlLZXksIHVwZGF0ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgcGFyc2VkT3B0aW9ucyA9IHBhcnNlUXVlcnlBcmdzKHF1ZXJ5S2V5KTtcbiAgICB2YXIgZGVmYXVsdGVkT3B0aW9ucyA9IHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucyhwYXJzZWRPcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5xdWVyeUNhY2hlLmJ1aWxkKHRoaXMsIGRlZmF1bHRlZE9wdGlvbnMpLnNldERhdGEodXBkYXRlciwgb3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLnNldFF1ZXJpZXNEYXRhID0gZnVuY3Rpb24gc2V0UXVlcmllc0RhdGEocXVlcnlLZXlPckZpbHRlcnMsIHVwZGF0ZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHJldHVybiBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpczIuZ2V0UXVlcnlDYWNoZSgpLmZpbmRBbGwocXVlcnlLZXlPckZpbHRlcnMpLm1hcChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgdmFyIHF1ZXJ5S2V5ID0gX3JlZjIucXVlcnlLZXk7XG4gICAgICAgIHJldHVybiBbcXVlcnlLZXksIF90aGlzMi5zZXRRdWVyeURhdGEocXVlcnlLZXksIHVwZGF0ZXIsIG9wdGlvbnMpXTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5nZXRRdWVyeVN0YXRlID0gZnVuY3Rpb24gZ2V0UXVlcnlTdGF0ZShxdWVyeUtleSwgZmlsdGVycykge1xuICAgIHZhciBfdGhpcyRxdWVyeUNhY2hlJGZpbmQyO1xuXG4gICAgcmV0dXJuIChfdGhpcyRxdWVyeUNhY2hlJGZpbmQyID0gdGhpcy5xdWVyeUNhY2hlLmZpbmQocXVlcnlLZXksIGZpbHRlcnMpKSA9PSBudWxsID8gdm9pZCAwIDogX3RoaXMkcXVlcnlDYWNoZSRmaW5kMi5zdGF0ZTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlUXVlcmllcyA9IGZ1bmN0aW9uIHJlbW92ZVF1ZXJpZXMoYXJnMSwgYXJnMikge1xuICAgIHZhciBfcGFyc2VGaWx0ZXJBcmdzMiA9IHBhcnNlRmlsdGVyQXJncyhhcmcxLCBhcmcyKSxcbiAgICAgICAgZmlsdGVycyA9IF9wYXJzZUZpbHRlckFyZ3MyWzBdO1xuXG4gICAgdmFyIHF1ZXJ5Q2FjaGUgPSB0aGlzLnF1ZXJ5Q2FjaGU7XG4gICAgbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBxdWVyeUNhY2hlLmZpbmRBbGwoZmlsdGVycykuZm9yRWFjaChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgcXVlcnlDYWNoZS5yZW1vdmUocXVlcnkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlc2V0UXVlcmllcyA9IGZ1bmN0aW9uIHJlc2V0UXVlcmllcyhhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgX3BhcnNlRmlsdGVyQXJnczMgPSBwYXJzZUZpbHRlckFyZ3MoYXJnMSwgYXJnMiwgYXJnMyksXG4gICAgICAgIGZpbHRlcnMgPSBfcGFyc2VGaWx0ZXJBcmdzM1swXSxcbiAgICAgICAgb3B0aW9ucyA9IF9wYXJzZUZpbHRlckFyZ3MzWzFdO1xuXG4gICAgdmFyIHF1ZXJ5Q2FjaGUgPSB0aGlzLnF1ZXJ5Q2FjaGU7XG5cbiAgICB2YXIgcmVmZXRjaEZpbHRlcnMgPSBfZXh0ZW5kcyh7fSwgZmlsdGVycywge1xuICAgICAgYWN0aXZlOiB0cnVlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbm90aWZ5TWFuYWdlci5iYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICBxdWVyeUNhY2hlLmZpbmRBbGwoZmlsdGVycykuZm9yRWFjaChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgcXVlcnkucmVzZXQoKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF90aGlzMy5yZWZldGNoUXVlcmllcyhyZWZldGNoRmlsdGVycywgb3B0aW9ucyk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbFF1ZXJpZXMgPSBmdW5jdGlvbiBjYW5jZWxRdWVyaWVzKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBfcGFyc2VGaWx0ZXJBcmdzNCA9IHBhcnNlRmlsdGVyQXJncyhhcmcxLCBhcmcyLCBhcmczKSxcbiAgICAgICAgZmlsdGVycyA9IF9wYXJzZUZpbHRlckFyZ3M0WzBdLFxuICAgICAgICBfcGFyc2VGaWx0ZXJBcmdzNCQgPSBfcGFyc2VGaWx0ZXJBcmdzNFsxXSxcbiAgICAgICAgY2FuY2VsT3B0aW9ucyA9IF9wYXJzZUZpbHRlckFyZ3M0JCA9PT0gdm9pZCAwID8ge30gOiBfcGFyc2VGaWx0ZXJBcmdzNCQ7XG5cbiAgICBpZiAodHlwZW9mIGNhbmNlbE9wdGlvbnMucmV2ZXJ0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY2FuY2VsT3B0aW9ucy5yZXZlcnQgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlcyA9IG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzNC5xdWVyeUNhY2hlLmZpbmRBbGwoZmlsdGVycykubWFwKGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICByZXR1cm4gcXVlcnkuY2FuY2VsKGNhbmNlbE9wdGlvbnMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKG5vb3ApLmNhdGNoKG5vb3ApO1xuICB9O1xuXG4gIF9wcm90by5pbnZhbGlkYXRlUXVlcmllcyA9IGZ1bmN0aW9uIGludmFsaWRhdGVRdWVyaWVzKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgX3JlZjMsXG4gICAgICAgIF9maWx0ZXJzJHJlZmV0Y2hBY3RpdixcbiAgICAgICAgX2ZpbHRlcnMkcmVmZXRjaEluYWN0LFxuICAgICAgICBfdGhpczUgPSB0aGlzO1xuXG4gICAgdmFyIF9wYXJzZUZpbHRlckFyZ3M1ID0gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIsIGFyZzMpLFxuICAgICAgICBmaWx0ZXJzID0gX3BhcnNlRmlsdGVyQXJnczVbMF0sXG4gICAgICAgIG9wdGlvbnMgPSBfcGFyc2VGaWx0ZXJBcmdzNVsxXTtcblxuICAgIHZhciByZWZldGNoRmlsdGVycyA9IF9leHRlbmRzKHt9LCBmaWx0ZXJzLCB7XG4gICAgICAvLyBpZiBmaWx0ZXJzLnJlZmV0Y2hBY3RpdmUgaXMgbm90IHByb3ZpZGVkIGFuZCBmaWx0ZXJzLmFjdGl2ZSBpcyBleHBsaWNpdGx5IGZhbHNlLFxuICAgICAgLy8gZS5nLiBpbnZhbGlkYXRlUXVlcmllcyh7IGFjdGl2ZTogZmFsc2UgfSksIHdlIGRvbid0IHdhbnQgdG8gcmVmZXRjaCBhY3RpdmUgcXVlcmllc1xuICAgICAgYWN0aXZlOiAoX3JlZjMgPSAoX2ZpbHRlcnMkcmVmZXRjaEFjdGl2ID0gZmlsdGVycy5yZWZldGNoQWN0aXZlKSAhPSBudWxsID8gX2ZpbHRlcnMkcmVmZXRjaEFjdGl2IDogZmlsdGVycy5hY3RpdmUpICE9IG51bGwgPyBfcmVmMyA6IHRydWUsXG4gICAgICBpbmFjdGl2ZTogKF9maWx0ZXJzJHJlZmV0Y2hJbmFjdCA9IGZpbHRlcnMucmVmZXRjaEluYWN0aXZlKSAhPSBudWxsID8gX2ZpbHRlcnMkcmVmZXRjaEluYWN0IDogZmFsc2VcbiAgICB9KTtcblxuICAgIHJldHVybiBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzNS5xdWVyeUNhY2hlLmZpbmRBbGwoZmlsdGVycykuZm9yRWFjaChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgcXVlcnkuaW52YWxpZGF0ZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBfdGhpczUucmVmZXRjaFF1ZXJpZXMocmVmZXRjaEZpbHRlcnMsIG9wdGlvbnMpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZWZldGNoUXVlcmllcyA9IGZ1bmN0aW9uIHJlZmV0Y2hRdWVyaWVzKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgIHZhciBfcGFyc2VGaWx0ZXJBcmdzNiA9IHBhcnNlRmlsdGVyQXJncyhhcmcxLCBhcmcyLCBhcmczKSxcbiAgICAgICAgZmlsdGVycyA9IF9wYXJzZUZpbHRlckFyZ3M2WzBdLFxuICAgICAgICBvcHRpb25zID0gX3BhcnNlRmlsdGVyQXJnczZbMV07XG5cbiAgICB2YXIgcHJvbWlzZXMgPSBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBfdGhpczYucXVlcnlDYWNoZS5maW5kQWxsKGZpbHRlcnMpLm1hcChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIHF1ZXJ5LmZldGNoKHVuZGVmaW5lZCwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICByZWZldGNoUGFnZTogZmlsdGVycyA9PSBudWxsID8gdm9pZCAwIDogZmlsdGVycy5yZWZldGNoUGFnZVxuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihub29wKTtcblxuICAgIGlmICghKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMudGhyb3dPbkVycm9yKSkge1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UuY2F0Y2gobm9vcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgX3Byb3RvLmZldGNoUXVlcnkgPSBmdW5jdGlvbiBmZXRjaFF1ZXJ5KGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICB2YXIgcGFyc2VkT3B0aW9ucyA9IHBhcnNlUXVlcnlBcmdzKGFyZzEsIGFyZzIsIGFyZzMpO1xuICAgIHZhciBkZWZhdWx0ZWRPcHRpb25zID0gdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zKHBhcnNlZE9wdGlvbnMpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vdGFubmVybGluc2xleS9yZWFjdC1xdWVyeS9pc3N1ZXMvNjUyXG5cbiAgICBpZiAodHlwZW9mIGRlZmF1bHRlZE9wdGlvbnMucmV0cnkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkZWZhdWx0ZWRPcHRpb25zLnJldHJ5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHF1ZXJ5ID0gdGhpcy5xdWVyeUNhY2hlLmJ1aWxkKHRoaXMsIGRlZmF1bHRlZE9wdGlvbnMpO1xuICAgIHJldHVybiBxdWVyeS5pc1N0YWxlQnlUaW1lKGRlZmF1bHRlZE9wdGlvbnMuc3RhbGVUaW1lKSA/IHF1ZXJ5LmZldGNoKGRlZmF1bHRlZE9wdGlvbnMpIDogUHJvbWlzZS5yZXNvbHZlKHF1ZXJ5LnN0YXRlLmRhdGEpO1xuICB9O1xuXG4gIF9wcm90by5wcmVmZXRjaFF1ZXJ5ID0gZnVuY3Rpb24gcHJlZmV0Y2hRdWVyeShhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hRdWVyeShhcmcxLCBhcmcyLCBhcmczKS50aGVuKG5vb3ApLmNhdGNoKG5vb3ApO1xuICB9O1xuXG4gIF9wcm90by5mZXRjaEluZmluaXRlUXVlcnkgPSBmdW5jdGlvbiBmZXRjaEluZmluaXRlUXVlcnkoYXJnMSwgYXJnMiwgYXJnMykge1xuICAgIHZhciBwYXJzZWRPcHRpb25zID0gcGFyc2VRdWVyeUFyZ3MoYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgcGFyc2VkT3B0aW9ucy5iZWhhdmlvciA9IGluZmluaXRlUXVlcnlCZWhhdmlvcigpO1xuICAgIHJldHVybiB0aGlzLmZldGNoUXVlcnkocGFyc2VkT3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLnByZWZldGNoSW5maW5pdGVRdWVyeSA9IGZ1bmN0aW9uIHByZWZldGNoSW5maW5pdGVRdWVyeShhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2hJbmZpbml0ZVF1ZXJ5KGFyZzEsIGFyZzIsIGFyZzMpLnRoZW4obm9vcCkuY2F0Y2gobm9vcCk7XG4gIH07XG5cbiAgX3Byb3RvLmNhbmNlbE11dGF0aW9ucyA9IGZ1bmN0aW9uIGNhbmNlbE11dGF0aW9ucygpIHtcbiAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgIHZhciBwcm9taXNlcyA9IG5vdGlmeU1hbmFnZXIuYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzNy5tdXRhdGlvbkNhY2hlLmdldEFsbCgpLm1hcChmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgcmV0dXJuIG11dGF0aW9uLmNhbmNlbCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKG5vb3ApLmNhdGNoKG5vb3ApO1xuICB9O1xuXG4gIF9wcm90by5yZXN1bWVQYXVzZWRNdXRhdGlvbnMgPSBmdW5jdGlvbiByZXN1bWVQYXVzZWRNdXRhdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TXV0YXRpb25DYWNoZSgpLnJlc3VtZVBhdXNlZE11dGF0aW9ucygpO1xuICB9O1xuXG4gIF9wcm90by5leGVjdXRlTXV0YXRpb24gPSBmdW5jdGlvbiBleGVjdXRlTXV0YXRpb24ob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLm11dGF0aW9uQ2FjaGUuYnVpbGQodGhpcywgb3B0aW9ucykuZXhlY3V0ZSgpO1xuICB9O1xuXG4gIF9wcm90by5nZXRRdWVyeUNhY2hlID0gZnVuY3Rpb24gZ2V0UXVlcnlDYWNoZSgpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeUNhY2hlO1xuICB9O1xuXG4gIF9wcm90by5nZXRNdXRhdGlvbkNhY2hlID0gZnVuY3Rpb24gZ2V0TXV0YXRpb25DYWNoZSgpIHtcbiAgICByZXR1cm4gdGhpcy5tdXRhdGlvbkNhY2hlO1xuICB9O1xuXG4gIF9wcm90by5nZXREZWZhdWx0T3B0aW9ucyA9IGZ1bmN0aW9uIGdldERlZmF1bHRPcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmRlZmF1bHRPcHRpb25zO1xuICB9O1xuXG4gIF9wcm90by5zZXREZWZhdWx0T3B0aW9ucyA9IGZ1bmN0aW9uIHNldERlZmF1bHRPcHRpb25zKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZmF1bHRPcHRpb25zID0gb3B0aW9ucztcbiAgfTtcblxuICBfcHJvdG8uc2V0UXVlcnlEZWZhdWx0cyA9IGZ1bmN0aW9uIHNldFF1ZXJ5RGVmYXVsdHMocXVlcnlLZXksIG9wdGlvbnMpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5xdWVyeURlZmF1bHRzLmZpbmQoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBoYXNoUXVlcnlLZXkocXVlcnlLZXkpID09PSBoYXNoUXVlcnlLZXkoeC5xdWVyeUtleSk7XG4gICAgfSk7XG5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXN1bHQuZGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnF1ZXJ5RGVmYXVsdHMucHVzaCh7XG4gICAgICAgIHF1ZXJ5S2V5OiBxdWVyeUtleSxcbiAgICAgICAgZGVmYXVsdE9wdGlvbnM6IG9wdGlvbnNcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0UXVlcnlEZWZhdWx0cyA9IGZ1bmN0aW9uIGdldFF1ZXJ5RGVmYXVsdHMocXVlcnlLZXkpIHtcbiAgICB2YXIgX3RoaXMkcXVlcnlEZWZhdWx0cyRmO1xuXG4gICAgcmV0dXJuIHF1ZXJ5S2V5ID8gKF90aGlzJHF1ZXJ5RGVmYXVsdHMkZiA9IHRoaXMucXVlcnlEZWZhdWx0cy5maW5kKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcGFydGlhbE1hdGNoS2V5KHF1ZXJ5S2V5LCB4LnF1ZXJ5S2V5KTtcbiAgICB9KSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJHF1ZXJ5RGVmYXVsdHMkZi5kZWZhdWx0T3B0aW9ucyA6IHVuZGVmaW5lZDtcbiAgfTtcblxuICBfcHJvdG8uc2V0TXV0YXRpb25EZWZhdWx0cyA9IGZ1bmN0aW9uIHNldE11dGF0aW9uRGVmYXVsdHMobXV0YXRpb25LZXksIG9wdGlvbnMpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5tdXRhdGlvbkRlZmF1bHRzLmZpbmQoZnVuY3Rpb24gKHgpIHtcbiAgICAgIHJldHVybiBoYXNoUXVlcnlLZXkobXV0YXRpb25LZXkpID09PSBoYXNoUXVlcnlLZXkoeC5tdXRhdGlvbktleSk7XG4gICAgfSk7XG5cbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICByZXN1bHQuZGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm11dGF0aW9uRGVmYXVsdHMucHVzaCh7XG4gICAgICAgIG11dGF0aW9uS2V5OiBtdXRhdGlvbktleSxcbiAgICAgICAgZGVmYXVsdE9wdGlvbnM6IG9wdGlvbnNcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0TXV0YXRpb25EZWZhdWx0cyA9IGZ1bmN0aW9uIGdldE11dGF0aW9uRGVmYXVsdHMobXV0YXRpb25LZXkpIHtcbiAgICB2YXIgX3RoaXMkbXV0YXRpb25EZWZhdWx0O1xuXG4gICAgcmV0dXJuIG11dGF0aW9uS2V5ID8gKF90aGlzJG11dGF0aW9uRGVmYXVsdCA9IHRoaXMubXV0YXRpb25EZWZhdWx0cy5maW5kKGZ1bmN0aW9uICh4KSB7XG4gICAgICByZXR1cm4gcGFydGlhbE1hdGNoS2V5KG11dGF0aW9uS2V5LCB4Lm11dGF0aW9uS2V5KTtcbiAgICB9KSkgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzJG11dGF0aW9uRGVmYXVsdC5kZWZhdWx0T3B0aW9ucyA6IHVuZGVmaW5lZDtcbiAgfTtcblxuICBfcHJvdG8uZGVmYXVsdFF1ZXJ5T3B0aW9ucyA9IGZ1bmN0aW9uIGRlZmF1bHRRdWVyeU9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLl9kZWZhdWx0ZWQpIHtcbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0ZWRPcHRpb25zID0gX2V4dGVuZHMoe30sIHRoaXMuZGVmYXVsdE9wdGlvbnMucXVlcmllcywgdGhpcy5nZXRRdWVyeURlZmF1bHRzKG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMucXVlcnlLZXkpLCBvcHRpb25zLCB7XG4gICAgICBfZGVmYXVsdGVkOiB0cnVlXG4gICAgfSk7XG5cbiAgICBpZiAoIWRlZmF1bHRlZE9wdGlvbnMucXVlcnlIYXNoICYmIGRlZmF1bHRlZE9wdGlvbnMucXVlcnlLZXkpIHtcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMucXVlcnlIYXNoID0gaGFzaFF1ZXJ5S2V5QnlPcHRpb25zKGRlZmF1bHRlZE9wdGlvbnMucXVlcnlLZXksIGRlZmF1bHRlZE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZhdWx0ZWRPcHRpb25zO1xuICB9O1xuXG4gIF9wcm90by5kZWZhdWx0UXVlcnlPYnNlcnZlck9wdGlvbnMgPSBmdW5jdGlvbiBkZWZhdWx0UXVlcnlPYnNlcnZlck9wdGlvbnMob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMob3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLmRlZmF1bHRNdXRhdGlvbk9wdGlvbnMgPSBmdW5jdGlvbiBkZWZhdWx0TXV0YXRpb25PcHRpb25zKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5fZGVmYXVsdGVkKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRoaXMuZGVmYXVsdE9wdGlvbnMubXV0YXRpb25zLCB0aGlzLmdldE11dGF0aW9uRGVmYXVsdHMob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5tdXRhdGlvbktleSksIG9wdGlvbnMsIHtcbiAgICAgIF9kZWZhdWx0ZWQ6IHRydWVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2xlYXIgPSBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICB0aGlzLnF1ZXJ5Q2FjaGUuY2xlYXIoKTtcbiAgICB0aGlzLm11dGF0aW9uQ2FjaGUuY2xlYXIoKTtcbiAgfTtcblxuICByZXR1cm4gUXVlcnlDbGllbnQ7XG59KCk7IiwiaW1wb3J0IHsgZm9jdXNNYW5hZ2VyIH0gZnJvbSAnLi9mb2N1c01hbmFnZXInO1xuaW1wb3J0IHsgb25saW5lTWFuYWdlciB9IGZyb20gJy4vb25saW5lTWFuYWdlcic7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJy4vdXRpbHMnO1xuXG5mdW5jdGlvbiBkZWZhdWx0UmV0cnlEZWxheShmYWlsdXJlQ291bnQpIHtcbiAgcmV0dXJuIE1hdGgubWluKDEwMDAgKiBNYXRoLnBvdygyLCBmYWlsdXJlQ291bnQpLCAzMDAwMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NhbmNlbGFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiAodmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLmNhbmNlbCkgPT09ICdmdW5jdGlvbic7XG59XG5leHBvcnQgdmFyIENhbmNlbGxlZEVycm9yID0gZnVuY3Rpb24gQ2FuY2VsbGVkRXJyb3Iob3B0aW9ucykge1xuICB0aGlzLnJldmVydCA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMucmV2ZXJ0O1xuICB0aGlzLnNpbGVudCA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuc2lsZW50O1xufTtcbmV4cG9ydCBmdW5jdGlvbiBpc0NhbmNlbGxlZEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIENhbmNlbGxlZEVycm9yO1xufSAvLyBDTEFTU1xuXG5leHBvcnQgdmFyIFJldHJ5ZXIgPSBmdW5jdGlvbiBSZXRyeWVyKGNvbmZpZykge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHZhciBjYW5jZWxSZXRyeSA9IGZhbHNlO1xuICB2YXIgY2FuY2VsRm47XG4gIHZhciBjb250aW51ZUZuO1xuICB2YXIgcHJvbWlzZVJlc29sdmU7XG4gIHZhciBwcm9taXNlUmVqZWN0O1xuICB0aGlzLmFib3J0ID0gY29uZmlnLmFib3J0O1xuXG4gIHRoaXMuY2FuY2VsID0gZnVuY3Rpb24gKGNhbmNlbE9wdGlvbnMpIHtcbiAgICByZXR1cm4gY2FuY2VsRm4gPT0gbnVsbCA/IHZvaWQgMCA6IGNhbmNlbEZuKGNhbmNlbE9wdGlvbnMpO1xuICB9O1xuXG4gIHRoaXMuY2FuY2VsUmV0cnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgY2FuY2VsUmV0cnkgPSB0cnVlO1xuICB9O1xuXG4gIHRoaXMuY29udGludWVSZXRyeSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYW5jZWxSZXRyeSA9IGZhbHNlO1xuICB9O1xuXG4gIHRoaXMuY29udGludWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNvbnRpbnVlRm4gPT0gbnVsbCA/IHZvaWQgMCA6IGNvbnRpbnVlRm4oKTtcbiAgfTtcblxuICB0aGlzLmZhaWx1cmVDb3VudCA9IDA7XG4gIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgdGhpcy5pc1Jlc29sdmVkID0gZmFsc2U7XG4gIHRoaXMuaXNUcmFuc3BvcnRDYW5jZWxhYmxlID0gZmFsc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChvdXRlclJlc29sdmUsIG91dGVyUmVqZWN0KSB7XG4gICAgcHJvbWlzZVJlc29sdmUgPSBvdXRlclJlc29sdmU7XG4gICAgcHJvbWlzZVJlamVjdCA9IG91dGVyUmVqZWN0O1xuICB9KTtcblxuICB2YXIgcmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUodmFsdWUpIHtcbiAgICBpZiAoIV90aGlzLmlzUmVzb2x2ZWQpIHtcbiAgICAgIF90aGlzLmlzUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgY29uZmlnLm9uU3VjY2VzcyA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLm9uU3VjY2Vzcyh2YWx1ZSk7XG4gICAgICBjb250aW51ZUZuID09IG51bGwgPyB2b2lkIDAgOiBjb250aW51ZUZuKCk7XG4gICAgICBwcm9taXNlUmVzb2x2ZSh2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZWplY3QgPSBmdW5jdGlvbiByZWplY3QodmFsdWUpIHtcbiAgICBpZiAoIV90aGlzLmlzUmVzb2x2ZWQpIHtcbiAgICAgIF90aGlzLmlzUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgY29uZmlnLm9uRXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGNvbmZpZy5vbkVycm9yKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlRm4gPT0gbnVsbCA/IHZvaWQgMCA6IGNvbnRpbnVlRm4oKTtcbiAgICAgIHByb21pc2VSZWplY3QodmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcGF1c2UgPSBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGNvbnRpbnVlUmVzb2x2ZSkge1xuICAgICAgY29udGludWVGbiA9IGNvbnRpbnVlUmVzb2x2ZTtcbiAgICAgIF90aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy5vblBhdXNlID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcub25QYXVzZSgpO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY29udGludWVGbiA9IHVuZGVmaW5lZDtcbiAgICAgIF90aGlzLmlzUGF1c2VkID0gZmFsc2U7XG4gICAgICBjb25maWcub25Db250aW51ZSA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLm9uQ29udGludWUoKTtcbiAgICB9KTtcbiAgfTsgLy8gQ3JlYXRlIGxvb3AgZnVuY3Rpb25cblxuXG4gIHZhciBydW4gPSBmdW5jdGlvbiBydW4oKSB7XG4gICAgLy8gRG8gbm90aGluZyBpZiBhbHJlYWR5IHJlc29sdmVkXG4gICAgaWYgKF90aGlzLmlzUmVzb2x2ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgcHJvbWlzZU9yVmFsdWU7IC8vIEV4ZWN1dGUgcXVlcnlcblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlT3JWYWx1ZSA9IGNvbmZpZy5mbigpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBwcm9taXNlT3JWYWx1ZSA9IFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9IC8vIENyZWF0ZSBjYWxsYmFjayB0byBjYW5jZWwgdGhpcyBmZXRjaFxuXG5cbiAgICBjYW5jZWxGbiA9IGZ1bmN0aW9uIGNhbmNlbEZuKGNhbmNlbE9wdGlvbnMpIHtcbiAgICAgIGlmICghX3RoaXMuaXNSZXNvbHZlZCkge1xuICAgICAgICByZWplY3QobmV3IENhbmNlbGxlZEVycm9yKGNhbmNlbE9wdGlvbnMpKTtcbiAgICAgICAgX3RoaXMuYWJvcnQgPT0gbnVsbCA/IHZvaWQgMCA6IF90aGlzLmFib3J0KCk7IC8vIENhbmNlbCB0cmFuc3BvcnQgaWYgc3VwcG9ydGVkXG5cbiAgICAgICAgaWYgKGlzQ2FuY2VsYWJsZShwcm9taXNlT3JWYWx1ZSkpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvbWlzZU9yVmFsdWUuY2FuY2VsKCk7XG4gICAgICAgICAgfSBjYXRjaCAoX3VudXNlZCkge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07IC8vIENoZWNrIGlmIHRoZSB0cmFuc3BvcnQgbGF5ZXIgc3VwcG9ydCBjYW5jZWxsYXRpb25cblxuXG4gICAgX3RoaXMuaXNUcmFuc3BvcnRDYW5jZWxhYmxlID0gaXNDYW5jZWxhYmxlKHByb21pc2VPclZhbHVlKTtcbiAgICBQcm9taXNlLnJlc29sdmUocHJvbWlzZU9yVmFsdWUpLnRoZW4ocmVzb2x2ZSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICB2YXIgX2NvbmZpZyRyZXRyeSwgX2NvbmZpZyRyZXRyeURlbGF5O1xuXG4gICAgICAvLyBTdG9wIGlmIHRoZSBmZXRjaCBpcyBhbHJlYWR5IHJlc29sdmVkXG4gICAgICBpZiAoX3RoaXMuaXNSZXNvbHZlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIERvIHdlIG5lZWQgdG8gcmV0cnkgdGhlIHJlcXVlc3Q/XG5cblxuICAgICAgdmFyIHJldHJ5ID0gKF9jb25maWckcmV0cnkgPSBjb25maWcucmV0cnkpICE9IG51bGwgPyBfY29uZmlnJHJldHJ5IDogMztcbiAgICAgIHZhciByZXRyeURlbGF5ID0gKF9jb25maWckcmV0cnlEZWxheSA9IGNvbmZpZy5yZXRyeURlbGF5KSAhPSBudWxsID8gX2NvbmZpZyRyZXRyeURlbGF5IDogZGVmYXVsdFJldHJ5RGVsYXk7XG4gICAgICB2YXIgZGVsYXkgPSB0eXBlb2YgcmV0cnlEZWxheSA9PT0gJ2Z1bmN0aW9uJyA/IHJldHJ5RGVsYXkoX3RoaXMuZmFpbHVyZUNvdW50LCBlcnJvcikgOiByZXRyeURlbGF5O1xuICAgICAgdmFyIHNob3VsZFJldHJ5ID0gcmV0cnkgPT09IHRydWUgfHwgdHlwZW9mIHJldHJ5ID09PSAnbnVtYmVyJyAmJiBfdGhpcy5mYWlsdXJlQ291bnQgPCByZXRyeSB8fCB0eXBlb2YgcmV0cnkgPT09ICdmdW5jdGlvbicgJiYgcmV0cnkoX3RoaXMuZmFpbHVyZUNvdW50LCBlcnJvcik7XG5cbiAgICAgIGlmIChjYW5jZWxSZXRyeSB8fCAhc2hvdWxkUmV0cnkpIHtcbiAgICAgICAgLy8gV2UgYXJlIGRvbmUgaWYgdGhlIHF1ZXJ5IGRvZXMgbm90IG5lZWQgdG8gYmUgcmV0cmllZFxuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIF90aGlzLmZhaWx1cmVDb3VudCsrOyAvLyBOb3RpZnkgb24gZmFpbFxuXG4gICAgICBjb25maWcub25GYWlsID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcub25GYWlsKF90aGlzLmZhaWx1cmVDb3VudCwgZXJyb3IpOyAvLyBEZWxheVxuXG4gICAgICBzbGVlcChkZWxheSkgLy8gUGF1c2UgaWYgdGhlIGRvY3VtZW50IGlzIG5vdCB2aXNpYmxlIG9yIHdoZW4gdGhlIGRldmljZSBpcyBvZmZsaW5lXG4gICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZm9jdXNNYW5hZ2VyLmlzRm9jdXNlZCgpIHx8ICFvbmxpbmVNYW5hZ2VyLmlzT25saW5lKCkpIHtcbiAgICAgICAgICByZXR1cm4gcGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjYW5jZWxSZXRyeSkge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcnVuKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9OyAvLyBTdGFydCBsb29wXG5cblxuICBydW4oKTtcbn07IiwiZXhwb3J0IHZhciBTdWJzY3JpYmFibGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpYmFibGUoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpYmFibGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGNhbGxiYWNrID0gbGlzdGVuZXIgfHwgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuXG4gICAgdGhpcy5saXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gICAgdGhpcy5vblN1YnNjcmliZSgpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5saXN0ZW5lcnMgPSBfdGhpcy5saXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiB4ICE9PSBjYWxsYmFjaztcbiAgICAgIH0pO1xuXG4gICAgICBfdGhpcy5vblVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24gaGFzTGlzdGVuZXJzKCkge1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5sZW5ndGggPiAwO1xuICB9O1xuXG4gIF9wcm90by5vblN1YnNjcmliZSA9IGZ1bmN0aW9uIG9uU3Vic2NyaWJlKCkgey8vIERvIG5vdGhpbmdcbiAgfTtcblxuICBfcHJvdG8ub25VbnN1YnNjcmliZSA9IGZ1bmN0aW9uIG9uVW5zdWJzY3JpYmUoKSB7Ly8gRG8gbm90aGluZ1xuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpYmFibGU7XG59KCk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG4vLyBUWVBFU1xuLy8gVVRJTFNcbmV4cG9ydCB2YXIgaXNTZXJ2ZXIgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJztcbmV4cG9ydCBmdW5jdGlvbiBub29wKCkge1xuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZ1bmN0aW9uYWxVcGRhdGUodXBkYXRlciwgaW5wdXQpIHtcbiAgcmV0dXJuIHR5cGVvZiB1cGRhdGVyID09PSAnZnVuY3Rpb24nID8gdXBkYXRlcihpbnB1dCkgOiB1cGRhdGVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRUaW1lb3V0KHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlID49IDAgJiYgdmFsdWUgIT09IEluZmluaXR5O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZVF1ZXJ5S2V5QXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZlcmVuY2UoYXJyYXkxLCBhcnJheTIpIHtcbiAgcmV0dXJuIGFycmF5MS5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gYXJyYXkyLmluZGV4T2YoeCkgPT09IC0xO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlQXQoYXJyYXksIGluZGV4LCB2YWx1ZSkge1xuICB2YXIgY29weSA9IGFycmF5LnNsaWNlKDApO1xuICBjb3B5W2luZGV4XSA9IHZhbHVlO1xuICByZXR1cm4gY29weTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0aW1lVW50aWxTdGFsZSh1cGRhdGVkQXQsIHN0YWxlVGltZSkge1xuICByZXR1cm4gTWF0aC5tYXgodXBkYXRlZEF0ICsgKHN0YWxlVGltZSB8fCAwKSAtIERhdGUubm93KCksIDApO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUXVlcnlBcmdzKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKCFpc1F1ZXJ5S2V5KGFyZzEpKSB7XG4gICAgcmV0dXJuIGFyZzE7XG4gIH1cblxuICBpZiAodHlwZW9mIGFyZzIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGFyZzMsIHtcbiAgICAgIHF1ZXJ5S2V5OiBhcmcxLFxuICAgICAgcXVlcnlGbjogYXJnMlxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBhcmcyLCB7XG4gICAgcXVlcnlLZXk6IGFyZzFcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNdXRhdGlvbkFyZ3MoYXJnMSwgYXJnMiwgYXJnMykge1xuICBpZiAoaXNRdWVyeUtleShhcmcxKSkge1xuICAgIGlmICh0eXBlb2YgYXJnMiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBhcmczLCB7XG4gICAgICAgIG11dGF0aW9uS2V5OiBhcmcxLFxuICAgICAgICBtdXRhdGlvbkZuOiBhcmcyXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGFyZzIsIHtcbiAgICAgIG11dGF0aW9uS2V5OiBhcmcxXG4gICAgfSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFyZzEgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGFyZzIsIHtcbiAgICAgIG11dGF0aW9uRm46IGFyZzFcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgYXJnMSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VGaWx0ZXJBcmdzKGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgcmV0dXJuIGlzUXVlcnlLZXkoYXJnMSkgPyBbX2V4dGVuZHMoe30sIGFyZzIsIHtcbiAgICBxdWVyeUtleTogYXJnMVxuICB9KSwgYXJnM10gOiBbYXJnMSB8fCB7fSwgYXJnMl07XG59XG5leHBvcnQgZnVuY3Rpb24gcGFyc2VNdXRhdGlvbkZpbHRlckFyZ3MoYXJnMSwgYXJnMikge1xuICByZXR1cm4gaXNRdWVyeUtleShhcmcxKSA/IF9leHRlbmRzKHt9LCBhcmcyLCB7XG4gICAgbXV0YXRpb25LZXk6IGFyZzFcbiAgfSkgOiBhcmcxO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcFF1ZXJ5U3RhdHVzRmlsdGVyKGFjdGl2ZSwgaW5hY3RpdmUpIHtcbiAgaWYgKGFjdGl2ZSA9PT0gdHJ1ZSAmJiBpbmFjdGl2ZSA9PT0gdHJ1ZSB8fCBhY3RpdmUgPT0gbnVsbCAmJiBpbmFjdGl2ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuICdhbGwnO1xuICB9IGVsc2UgaWYgKGFjdGl2ZSA9PT0gZmFsc2UgJiYgaW5hY3RpdmUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuICdub25lJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50LCBhY3RpdmV8aW5hY3RpdmUgY2FuIG9ubHkgYmUgdHJ1ZXxmYWxzZSBvciBmYWxzZXx0cnVlXG4gICAgLy8gc28sIHdoZW4gb25seSBvbmUgdmFsdWUgaXMgcHJvdmlkZWQsIHRoZSBtaXNzaW5nIG9uZSBoYXMgdG8gYmUgdGhlIG5lZ2F0ZWQgdmFsdWVcbiAgICB2YXIgaXNBY3RpdmUgPSBhY3RpdmUgIT0gbnVsbCA/IGFjdGl2ZSA6ICFpbmFjdGl2ZTtcbiAgICByZXR1cm4gaXNBY3RpdmUgPyAnYWN0aXZlJyA6ICdpbmFjdGl2ZSc7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFF1ZXJ5KGZpbHRlcnMsIHF1ZXJ5KSB7XG4gIHZhciBhY3RpdmUgPSBmaWx0ZXJzLmFjdGl2ZSxcbiAgICAgIGV4YWN0ID0gZmlsdGVycy5leGFjdCxcbiAgICAgIGZldGNoaW5nID0gZmlsdGVycy5mZXRjaGluZyxcbiAgICAgIGluYWN0aXZlID0gZmlsdGVycy5pbmFjdGl2ZSxcbiAgICAgIHByZWRpY2F0ZSA9IGZpbHRlcnMucHJlZGljYXRlLFxuICAgICAgcXVlcnlLZXkgPSBmaWx0ZXJzLnF1ZXJ5S2V5LFxuICAgICAgc3RhbGUgPSBmaWx0ZXJzLnN0YWxlO1xuXG4gIGlmIChpc1F1ZXJ5S2V5KHF1ZXJ5S2V5KSkge1xuICAgIGlmIChleGFjdCkge1xuICAgICAgaWYgKHF1ZXJ5LnF1ZXJ5SGFzaCAhPT0gaGFzaFF1ZXJ5S2V5QnlPcHRpb25zKHF1ZXJ5S2V5LCBxdWVyeS5vcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghcGFydGlhbE1hdGNoS2V5KHF1ZXJ5LnF1ZXJ5S2V5LCBxdWVyeUtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICB2YXIgcXVlcnlTdGF0dXNGaWx0ZXIgPSBtYXBRdWVyeVN0YXR1c0ZpbHRlcihhY3RpdmUsIGluYWN0aXZlKTtcblxuICBpZiAocXVlcnlTdGF0dXNGaWx0ZXIgPT09ICdub25lJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChxdWVyeVN0YXR1c0ZpbHRlciAhPT0gJ2FsbCcpIHtcbiAgICB2YXIgaXNBY3RpdmUgPSBxdWVyeS5pc0FjdGl2ZSgpO1xuXG4gICAgaWYgKHF1ZXJ5U3RhdHVzRmlsdGVyID09PSAnYWN0aXZlJyAmJiAhaXNBY3RpdmUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocXVlcnlTdGF0dXNGaWx0ZXIgPT09ICdpbmFjdGl2ZScgJiYgaXNBY3RpdmUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHN0YWxlID09PSAnYm9vbGVhbicgJiYgcXVlcnkuaXNTdGFsZSgpICE9PSBzdGFsZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZmV0Y2hpbmcgPT09ICdib29sZWFuJyAmJiBxdWVyeS5pc0ZldGNoaW5nKCkgIT09IGZldGNoaW5nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHByZWRpY2F0ZSAmJiAhcHJlZGljYXRlKHF1ZXJ5KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoTXV0YXRpb24oZmlsdGVycywgbXV0YXRpb24pIHtcbiAgdmFyIGV4YWN0ID0gZmlsdGVycy5leGFjdCxcbiAgICAgIGZldGNoaW5nID0gZmlsdGVycy5mZXRjaGluZyxcbiAgICAgIHByZWRpY2F0ZSA9IGZpbHRlcnMucHJlZGljYXRlLFxuICAgICAgbXV0YXRpb25LZXkgPSBmaWx0ZXJzLm11dGF0aW9uS2V5O1xuXG4gIGlmIChpc1F1ZXJ5S2V5KG11dGF0aW9uS2V5KSkge1xuICAgIGlmICghbXV0YXRpb24ub3B0aW9ucy5tdXRhdGlvbktleSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChleGFjdCkge1xuICAgICAgaWYgKGhhc2hRdWVyeUtleShtdXRhdGlvbi5vcHRpb25zLm11dGF0aW9uS2V5KSAhPT0gaGFzaFF1ZXJ5S2V5KG11dGF0aW9uS2V5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghcGFydGlhbE1hdGNoS2V5KG11dGF0aW9uLm9wdGlvbnMubXV0YXRpb25LZXksIG11dGF0aW9uS2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgZmV0Y2hpbmcgPT09ICdib29sZWFuJyAmJiBtdXRhdGlvbi5zdGF0ZS5zdGF0dXMgPT09ICdsb2FkaW5nJyAhPT0gZmV0Y2hpbmcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocHJlZGljYXRlICYmICFwcmVkaWNhdGUobXV0YXRpb24pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5leHBvcnQgZnVuY3Rpb24gaGFzaFF1ZXJ5S2V5QnlPcHRpb25zKHF1ZXJ5S2V5LCBvcHRpb25zKSB7XG4gIHZhciBoYXNoRm4gPSAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5xdWVyeUtleUhhc2hGbikgfHwgaGFzaFF1ZXJ5S2V5O1xuICByZXR1cm4gaGFzaEZuKHF1ZXJ5S2V5KTtcbn1cbi8qKlxuICogRGVmYXVsdCBxdWVyeSBrZXlzIGhhc2ggZnVuY3Rpb24uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc2hRdWVyeUtleShxdWVyeUtleSkge1xuICB2YXIgYXNBcnJheSA9IGVuc3VyZVF1ZXJ5S2V5QXJyYXkocXVlcnlLZXkpO1xuICByZXR1cm4gc3RhYmxlVmFsdWVIYXNoKGFzQXJyYXkpO1xufVxuLyoqXG4gKiBIYXNoZXMgdGhlIHZhbHVlIGludG8gYSBzdGFibGUgaGFzaC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RhYmxlVmFsdWVIYXNoKHZhbHVlKSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgZnVuY3Rpb24gKF8sIHZhbCkge1xuICAgIHJldHVybiBpc1BsYWluT2JqZWN0KHZhbCkgPyBPYmplY3Qua2V5cyh2YWwpLnNvcnQoKS5yZWR1Y2UoZnVuY3Rpb24gKHJlc3VsdCwga2V5KSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbFtrZXldO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LCB7fSkgOiB2YWw7XG4gIH0pO1xufVxuLyoqXG4gKiBDaGVja3MgaWYga2V5IGBiYCBwYXJ0aWFsbHkgbWF0Y2hlcyB3aXRoIGtleSBgYWAuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnRpYWxNYXRjaEtleShhLCBiKSB7XG4gIHJldHVybiBwYXJ0aWFsRGVlcEVxdWFsKGVuc3VyZVF1ZXJ5S2V5QXJyYXkoYSksIGVuc3VyZVF1ZXJ5S2V5QXJyYXkoYikpO1xufVxuLyoqXG4gKiBDaGVja3MgaWYgYGJgIHBhcnRpYWxseSBtYXRjaGVzIHdpdGggYGFgLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0aWFsRGVlcEVxdWFsKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYSAhPT0gdHlwZW9mIGIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gIU9iamVjdC5rZXlzKGIpLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuICFwYXJ0aWFsRGVlcEVxdWFsKGFba2V5XSwgYltrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGBhYCBpZiBgYmAgaXMgZGVlcGx5IGVxdWFsLlxuICogSWYgbm90LCBpdCB3aWxsIHJlcGxhY2UgYW55IGRlZXBseSBlcXVhbCBjaGlsZHJlbiBvZiBgYmAgd2l0aCB0aG9zZSBvZiBgYWAuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIGZvciBzdHJ1Y3R1cmFsIHNoYXJpbmcgYmV0d2VlbiBKU09OIHZhbHVlcyBmb3IgZXhhbXBsZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmVwbGFjZUVxdWFsRGVlcChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIGE7XG4gIH1cblxuICB2YXIgYXJyYXkgPSBBcnJheS5pc0FycmF5KGEpICYmIEFycmF5LmlzQXJyYXkoYik7XG5cbiAgaWYgKGFycmF5IHx8IGlzUGxhaW5PYmplY3QoYSkgJiYgaXNQbGFpbk9iamVjdChiKSkge1xuICAgIHZhciBhU2l6ZSA9IGFycmF5ID8gYS5sZW5ndGggOiBPYmplY3Qua2V5cyhhKS5sZW5ndGg7XG4gICAgdmFyIGJJdGVtcyA9IGFycmF5ID8gYiA6IE9iamVjdC5rZXlzKGIpO1xuICAgIHZhciBiU2l6ZSA9IGJJdGVtcy5sZW5ndGg7XG4gICAgdmFyIGNvcHkgPSBhcnJheSA/IFtdIDoge307XG4gICAgdmFyIGVxdWFsSXRlbXMgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiU2l6ZTsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gYXJyYXkgPyBpIDogYkl0ZW1zW2ldO1xuICAgICAgY29weVtrZXldID0gcmVwbGFjZUVxdWFsRGVlcChhW2tleV0sIGJba2V5XSk7XG5cbiAgICAgIGlmIChjb3B5W2tleV0gPT09IGFba2V5XSkge1xuICAgICAgICBlcXVhbEl0ZW1zKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFTaXplID09PSBiU2l6ZSAmJiBlcXVhbEl0ZW1zID09PSBhU2l6ZSA/IGEgOiBjb3B5O1xuICB9XG5cbiAgcmV0dXJuIGI7XG59XG4vKipcbiAqIFNoYWxsb3cgY29tcGFyZSBvYmplY3RzLiBPbmx5IHdvcmtzIHdpdGggb2JqZWN0cyB0aGF0IGFsd2F5cyBoYXZlIHRoZSBzYW1lIHByb3BlcnRpZXMuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbE9iamVjdHMoYSwgYikge1xuICBpZiAoYSAmJiAhYiB8fCBiICYmICFhKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIga2V5IGluIGEpIHtcbiAgICBpZiAoYVtrZXldICE9PSBiW2tleV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0gLy8gQ29waWVkIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9qb25zY2hsaW5rZXJ0L2lzLXBsYWluLW9iamVjdFxuXG5leHBvcnQgZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvKSB7XG4gIGlmICghaGFzT2JqZWN0UHJvdG90eXBlKG8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIElmIGhhcyBtb2RpZmllZCBjb25zdHJ1Y3RvclxuXG5cbiAgdmFyIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuXG4gIGlmICh0eXBlb2YgY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJZiBoYXMgbW9kaWZpZWQgcHJvdG90eXBlXG5cblxuICB2YXIgcHJvdCA9IGN0b3IucHJvdG90eXBlO1xuXG4gIGlmICghaGFzT2JqZWN0UHJvdG90eXBlKHByb3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIElmIGNvbnN0cnVjdG9yIGRvZXMgbm90IGhhdmUgYW4gT2JqZWN0LXNwZWNpZmljIG1ldGhvZFxuXG5cbiAgaWYgKCFwcm90Lmhhc093blByb3BlcnR5KCdpc1Byb3RvdHlwZU9mJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gTW9zdCBsaWtlbHkgYSBwbGFpbiBPYmplY3RcblxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBoYXNPYmplY3RQcm90b3R5cGUobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pID09PSAnW29iamVjdCBPYmplY3RdJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUXVlcnlLZXkodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBFcnJvcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzbGVlcCh0aW1lb3V0KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCk7XG4gIH0pO1xufVxuLyoqXG4gKiBTY2hlZHVsZXMgYSBtaWNyb3Rhc2suXG4gKiBUaGlzIGNhbiBiZSB1c2VmdWwgdG8gc2NoZWR1bGUgc3RhdGUgdXBkYXRlcyBhZnRlciByZW5kZXJpbmcuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlTWljcm90YXNrKGNhbGxiYWNrKSB7XG4gIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oY2FsbGJhY2spLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0pO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRBYm9ydENvbnRyb2xsZXIoKSB7XG4gIGlmICh0eXBlb2YgQWJvcnRDb250cm9sbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgfVxufSIsImltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuZXhwb3J0IHZhciB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyA9IFJlYWN0RE9NLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOyIsImltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIH0gZnJvbSAnLi9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbm5vdGlmeU1hbmFnZXIuc2V0QmF0Y2hOb3RpZnlGdW5jdGlvbih1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyk7IiwiZXhwb3J0IHZhciBsb2dnZXIgPSBjb25zb2xlOyIsImltcG9ydCB7IHNldExvZ2dlciB9IGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXInO1xuc2V0TG9nZ2VyKGxvZ2dlcik7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciBkZWZhdWx0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHVuZGVmaW5lZCk7XG52YXIgUXVlcnlDbGllbnRTaGFyaW5nQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KGZhbHNlKTsgLy8gaWYgY29udGV4dFNoYXJpbmcgaXMgb24sIHdlIHNoYXJlIHRoZSBmaXJzdCBhbmQgYXQgbGVhc3Qgb25lXG4vLyBpbnN0YW5jZSBvZiB0aGUgY29udGV4dCBhY3Jvc3MgdGhlIHdpbmRvd1xuLy8gdG8gZW5zdXJlIHRoYXQgaWYgUmVhY3QgUXVlcnkgaXMgdXNlZCBhY3Jvc3Ncbi8vIGRpZmZlcmVudCBidW5kbGVzIG9yIG1pY3JvZnJvbnRlbmRzIHRoZXkgd2lsbFxuLy8gYWxsIHVzZSB0aGUgc2FtZSAqKmluc3RhbmNlKiogb2YgY29udGV4dCwgcmVnYXJkbGVzc1xuLy8gb2YgbW9kdWxlIHNjb3BpbmcuXG5cbmZ1bmN0aW9uIGdldFF1ZXJ5Q2xpZW50Q29udGV4dChjb250ZXh0U2hhcmluZykge1xuICBpZiAoY29udGV4dFNoYXJpbmcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoIXdpbmRvdy5SZWFjdFF1ZXJ5Q2xpZW50Q29udGV4dCkge1xuICAgICAgd2luZG93LlJlYWN0UXVlcnlDbGllbnRDb250ZXh0ID0gZGVmYXVsdENvbnRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdpbmRvdy5SZWFjdFF1ZXJ5Q2xpZW50Q29udGV4dDtcbiAgfVxuXG4gIHJldHVybiBkZWZhdWx0Q29udGV4dDtcbn1cblxuZXhwb3J0IHZhciB1c2VRdWVyeUNsaWVudCA9IGZ1bmN0aW9uIHVzZVF1ZXJ5Q2xpZW50KCkge1xuICB2YXIgcXVlcnlDbGllbnQgPSBSZWFjdC51c2VDb250ZXh0KGdldFF1ZXJ5Q2xpZW50Q29udGV4dChSZWFjdC51c2VDb250ZXh0KFF1ZXJ5Q2xpZW50U2hhcmluZ0NvbnRleHQpKSk7XG5cbiAgaWYgKCFxdWVyeUNsaWVudCkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gUXVlcnlDbGllbnQgc2V0LCB1c2UgUXVlcnlDbGllbnRQcm92aWRlciB0byBzZXQgb25lJyk7XG4gIH1cblxuICByZXR1cm4gcXVlcnlDbGllbnQ7XG59O1xuZXhwb3J0IHZhciBRdWVyeUNsaWVudFByb3ZpZGVyID0gZnVuY3Rpb24gUXVlcnlDbGllbnRQcm92aWRlcihfcmVmKSB7XG4gIHZhciBjbGllbnQgPSBfcmVmLmNsaWVudCxcbiAgICAgIF9yZWYkY29udGV4dFNoYXJpbmcgPSBfcmVmLmNvbnRleHRTaGFyaW5nLFxuICAgICAgY29udGV4dFNoYXJpbmcgPSBfcmVmJGNvbnRleHRTaGFyaW5nID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkY29udGV4dFNoYXJpbmcsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgY2xpZW50Lm1vdW50KCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsaWVudC51bm1vdW50KCk7XG4gICAgfTtcbiAgfSwgW2NsaWVudF0pO1xuICB2YXIgQ29udGV4dCA9IGdldFF1ZXJ5Q2xpZW50Q29udGV4dChjb250ZXh0U2hhcmluZyk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChRdWVyeUNsaWVudFNoYXJpbmdDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRTaGFyaW5nXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY2xpZW50XG4gIH0sIGNoaWxkcmVuKSk7XG59OyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgeyBpc1NlcnZlciwgaXNWYWxpZFRpbWVvdXQsIG5vb3AsIHJlcGxhY2VFcXVhbERlZXAsIHNoYWxsb3dFcXVhbE9iamVjdHMsIHRpbWVVbnRpbFN0YWxlIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSAnLi9ub3RpZnlNYW5hZ2VyJztcbmltcG9ydCB7IGZvY3VzTWFuYWdlciB9IGZyb20gJy4vZm9jdXNNYW5hZ2VyJztcbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gJy4vc3Vic2NyaWJhYmxlJztcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IGlzQ2FuY2VsbGVkRXJyb3IgfSBmcm9tICcuL3JldHJ5ZXInO1xuZXhwb3J0IHZhciBRdWVyeU9ic2VydmVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfU3Vic2NyaWJhYmxlKSB7XG4gIF9pbmhlcml0c0xvb3NlKFF1ZXJ5T2JzZXJ2ZXIsIF9TdWJzY3JpYmFibGUpO1xuXG4gIGZ1bmN0aW9uIFF1ZXJ5T2JzZXJ2ZXIoY2xpZW50LCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfU3Vic2NyaWJhYmxlLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICBfdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgX3RoaXMudHJhY2tlZFByb3BzID0gW107XG4gICAgX3RoaXMuc2VsZWN0RXJyb3IgPSBudWxsO1xuXG4gICAgX3RoaXMuYmluZE1ldGhvZHMoKTtcblxuICAgIF90aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUXVlcnlPYnNlcnZlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmJpbmRNZXRob2RzID0gZnVuY3Rpb24gYmluZE1ldGhvZHMoKSB7XG4gICAgdGhpcy5yZW1vdmUgPSB0aGlzLnJlbW92ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVmZXRjaCA9IHRoaXMucmVmZXRjaC5iaW5kKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5vblN1YnNjcmliZSA9IGZ1bmN0aW9uIG9uU3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLmxpc3RlbmVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMuY3VycmVudFF1ZXJ5LmFkZE9ic2VydmVyKHRoaXMpO1xuXG4gICAgICBpZiAoc2hvdWxkRmV0Y2hPbk1vdW50KHRoaXMuY3VycmVudFF1ZXJ5LCB0aGlzLm9wdGlvbnMpKSB7XG4gICAgICAgIHRoaXMuZXhlY3V0ZUZldGNoKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudXBkYXRlVGltZXJzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vblVuc3Vic2NyaWJlID0gZnVuY3Rpb24gb25VbnN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zaG91bGRGZXRjaE9uUmVjb25uZWN0ID0gZnVuY3Rpb24gc2hvdWxkRmV0Y2hPblJlY29ubmVjdCgpIHtcbiAgICByZXR1cm4gc2hvdWxkRmV0Y2hPbih0aGlzLmN1cnJlbnRRdWVyeSwgdGhpcy5vcHRpb25zLCB0aGlzLm9wdGlvbnMucmVmZXRjaE9uUmVjb25uZWN0KTtcbiAgfTtcblxuICBfcHJvdG8uc2hvdWxkRmV0Y2hPbldpbmRvd0ZvY3VzID0gZnVuY3Rpb24gc2hvdWxkRmV0Y2hPbldpbmRvd0ZvY3VzKCkge1xuICAgIHJldHVybiBzaG91bGRGZXRjaE9uKHRoaXMuY3VycmVudFF1ZXJ5LCB0aGlzLm9wdGlvbnMsIHRoaXMub3B0aW9ucy5yZWZldGNoT25XaW5kb3dGb2N1cyk7XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHRoaXMubGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5jbGVhclRpbWVycygpO1xuICAgIHRoaXMuY3VycmVudFF1ZXJ5LnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5zZXRPcHRpb25zID0gZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zLCBub3RpZnlPcHRpb25zKSB7XG4gICAgdmFyIHByZXZPcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgIHZhciBwcmV2UXVlcnkgPSB0aGlzLmN1cnJlbnRRdWVyeTtcbiAgICB0aGlzLm9wdGlvbnMgPSB0aGlzLmNsaWVudC5kZWZhdWx0UXVlcnlPYnNlcnZlck9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5lbmFibGVkICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgdGhpcy5vcHRpb25zLmVuYWJsZWQgIT09ICdib29sZWFuJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBlbmFibGVkIHRvIGJlIGEgYm9vbGVhbicpO1xuICAgIH0gLy8gS2VlcCBwcmV2aW91cyBxdWVyeSBrZXkgaWYgdGhlIHVzZXIgZG9lcyBub3Qgc3VwcGx5IG9uZVxuXG5cbiAgICBpZiAoIXRoaXMub3B0aW9ucy5xdWVyeUtleSkge1xuICAgICAgdGhpcy5vcHRpb25zLnF1ZXJ5S2V5ID0gcHJldk9wdGlvbnMucXVlcnlLZXk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVRdWVyeSgpO1xuICAgIHZhciBtb3VudGVkID0gdGhpcy5oYXNMaXN0ZW5lcnMoKTsgLy8gRmV0Y2ggaWYgdGhlcmUgYXJlIHN1YnNjcmliZXJzXG5cbiAgICBpZiAobW91bnRlZCAmJiBzaG91bGRGZXRjaE9wdGlvbmFsbHkodGhpcy5jdXJyZW50UXVlcnksIHByZXZRdWVyeSwgdGhpcy5vcHRpb25zLCBwcmV2T3B0aW9ucykpIHtcbiAgICAgIHRoaXMuZXhlY3V0ZUZldGNoKCk7XG4gICAgfSAvLyBVcGRhdGUgcmVzdWx0XG5cblxuICAgIHRoaXMudXBkYXRlUmVzdWx0KG5vdGlmeU9wdGlvbnMpOyAvLyBVcGRhdGUgc3RhbGUgaW50ZXJ2YWwgaWYgbmVlZGVkXG5cbiAgICBpZiAobW91bnRlZCAmJiAodGhpcy5jdXJyZW50UXVlcnkgIT09IHByZXZRdWVyeSB8fCB0aGlzLm9wdGlvbnMuZW5hYmxlZCAhPT0gcHJldk9wdGlvbnMuZW5hYmxlZCB8fCB0aGlzLm9wdGlvbnMuc3RhbGVUaW1lICE9PSBwcmV2T3B0aW9ucy5zdGFsZVRpbWUpKSB7XG4gICAgICB0aGlzLnVwZGF0ZVN0YWxlVGltZW91dCgpO1xuICAgIH1cblxuICAgIHZhciBuZXh0UmVmZXRjaEludGVydmFsID0gdGhpcy5jb21wdXRlUmVmZXRjaEludGVydmFsKCk7IC8vIFVwZGF0ZSByZWZldGNoIGludGVydmFsIGlmIG5lZWRlZFxuXG4gICAgaWYgKG1vdW50ZWQgJiYgKHRoaXMuY3VycmVudFF1ZXJ5ICE9PSBwcmV2UXVlcnkgfHwgdGhpcy5vcHRpb25zLmVuYWJsZWQgIT09IHByZXZPcHRpb25zLmVuYWJsZWQgfHwgbmV4dFJlZmV0Y2hJbnRlcnZhbCAhPT0gdGhpcy5jdXJyZW50UmVmZXRjaEludGVydmFsKSkge1xuICAgICAgdGhpcy51cGRhdGVSZWZldGNoSW50ZXJ2YWwobmV4dFJlZmV0Y2hJbnRlcnZhbCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXRPcHRpbWlzdGljUmVzdWx0ID0gZnVuY3Rpb24gZ2V0T3B0aW1pc3RpY1Jlc3VsdChvcHRpb25zKSB7XG4gICAgdmFyIGRlZmF1bHRlZE9wdGlvbnMgPSB0aGlzLmNsaWVudC5kZWZhdWx0UXVlcnlPYnNlcnZlck9wdGlvbnMob3B0aW9ucyk7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpcy5jbGllbnQuZ2V0UXVlcnlDYWNoZSgpLmJ1aWxkKHRoaXMuY2xpZW50LCBkZWZhdWx0ZWRPcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVSZXN1bHQocXVlcnksIGRlZmF1bHRlZE9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by5nZXRDdXJyZW50UmVzdWx0ID0gZnVuY3Rpb24gZ2V0Q3VycmVudFJlc3VsdCgpIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50UmVzdWx0O1xuICB9O1xuXG4gIF9wcm90by50cmFja1Jlc3VsdCA9IGZ1bmN0aW9uIHRyYWNrUmVzdWx0KHJlc3VsdCwgZGVmYXVsdGVkT3B0aW9ucykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHRyYWNrZWRSZXN1bHQgPSB7fTtcblxuICAgIHZhciB0cmFja1Byb3AgPSBmdW5jdGlvbiB0cmFja1Byb3Aoa2V5KSB7XG4gICAgICBpZiAoIV90aGlzMi50cmFja2VkUHJvcHMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBfdGhpczIudHJhY2tlZFByb3BzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0cmFja2VkUmVzdWx0LCBrZXksIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgdHJhY2tQcm9wKGtleSk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdFtrZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGlmIChkZWZhdWx0ZWRPcHRpb25zLnVzZUVycm9yQm91bmRhcnkgfHwgZGVmYXVsdGVkT3B0aW9ucy5zdXNwZW5zZSkge1xuICAgICAgdHJhY2tQcm9wKCdlcnJvcicpO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFja2VkUmVzdWx0O1xuICB9O1xuXG4gIF9wcm90by5nZXROZXh0UmVzdWx0ID0gZnVuY3Rpb24gZ2V0TmV4dFJlc3VsdChvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHVuc3Vic2NyaWJlID0gX3RoaXMzLnN1YnNjcmliZShmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIGlmICghcmVzdWx0LmlzRmV0Y2hpbmcpIHtcbiAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuXG4gICAgICAgICAgaWYgKHJlc3VsdC5pc0Vycm9yICYmIChvcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBvcHRpb25zLnRocm93T25FcnJvcikpIHtcbiAgICAgICAgICAgIHJlamVjdChyZXN1bHQuZXJyb3IpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0Q3VycmVudFF1ZXJ5ID0gZnVuY3Rpb24gZ2V0Q3VycmVudFF1ZXJ5KCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRRdWVyeTtcbiAgfTtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgIHRoaXMuY2xpZW50LmdldFF1ZXJ5Q2FjaGUoKS5yZW1vdmUodGhpcy5jdXJyZW50UXVlcnkpO1xuICB9O1xuXG4gIF9wcm90by5yZWZldGNoID0gZnVuY3Rpb24gcmVmZXRjaChvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgcmVmZXRjaFBhZ2U6IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMucmVmZXRjaFBhZ2VcbiAgICAgIH1cbiAgICB9KSk7XG4gIH07XG5cbiAgX3Byb3RvLmZldGNoT3B0aW1pc3RpYyA9IGZ1bmN0aW9uIGZldGNoT3B0aW1pc3RpYyhvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgZGVmYXVsdGVkT3B0aW9ucyA9IHRoaXMuY2xpZW50LmRlZmF1bHRRdWVyeU9ic2VydmVyT3B0aW9ucyhvcHRpb25zKTtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLmNsaWVudC5nZXRRdWVyeUNhY2hlKCkuYnVpbGQodGhpcy5jbGllbnQsIGRlZmF1bHRlZE9wdGlvbnMpO1xuICAgIHJldHVybiBxdWVyeS5mZXRjaCgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzNC5jcmVhdGVSZXN1bHQocXVlcnksIGRlZmF1bHRlZE9wdGlvbnMpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5mZXRjaCA9IGZ1bmN0aW9uIGZldGNoKGZldGNoT3B0aW9ucykge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZUZldGNoKGZldGNoT3B0aW9ucykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczUudXBkYXRlUmVzdWx0KCk7XG5cbiAgICAgIHJldHVybiBfdGhpczUuY3VycmVudFJlc3VsdDtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZXhlY3V0ZUZldGNoID0gZnVuY3Rpb24gZXhlY3V0ZUZldGNoKGZldGNoT3B0aW9ucykge1xuICAgIC8vIE1ha2Ugc3VyZSB3ZSByZWZlcmVuY2UgdGhlIGxhdGVzdCBxdWVyeSBhcyB0aGUgY3VycmVudCBvbmUgbWlnaHQgaGF2ZSBiZWVuIHJlbW92ZWRcbiAgICB0aGlzLnVwZGF0ZVF1ZXJ5KCk7IC8vIEZldGNoXG5cbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMuY3VycmVudFF1ZXJ5LmZldGNoKHRoaXMub3B0aW9ucywgZmV0Y2hPcHRpb25zKTtcblxuICAgIGlmICghKGZldGNoT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogZmV0Y2hPcHRpb25zLnRocm93T25FcnJvcikpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLmNhdGNoKG5vb3ApO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNlO1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGFsZVRpbWVvdXQgPSBmdW5jdGlvbiB1cGRhdGVTdGFsZVRpbWVvdXQoKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICB0aGlzLmNsZWFyU3RhbGVUaW1lb3V0KCk7XG5cbiAgICBpZiAoaXNTZXJ2ZXIgfHwgdGhpcy5jdXJyZW50UmVzdWx0LmlzU3RhbGUgfHwgIWlzVmFsaWRUaW1lb3V0KHRoaXMub3B0aW9ucy5zdGFsZVRpbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRpbWUgPSB0aW1lVW50aWxTdGFsZSh0aGlzLmN1cnJlbnRSZXN1bHQuZGF0YVVwZGF0ZWRBdCwgdGhpcy5vcHRpb25zLnN0YWxlVGltZSk7IC8vIFRoZSB0aW1lb3V0IGlzIHNvbWV0aW1lcyB0cmlnZ2VyZWQgMSBtcyBiZWZvcmUgdGhlIHN0YWxlIHRpbWUgZXhwaXJhdGlvbi5cbiAgICAvLyBUbyBtaXRpZ2F0ZSB0aGlzIGlzc3VlIHdlIGFsd2F5cyBhZGQgMSBtcyB0byB0aGUgdGltZW91dC5cblxuICAgIHZhciB0aW1lb3V0ID0gdGltZSArIDE7XG4gICAgdGhpcy5zdGFsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFfdGhpczYuY3VycmVudFJlc3VsdC5pc1N0YWxlKSB7XG4gICAgICAgIF90aGlzNi51cGRhdGVSZXN1bHQoKTtcbiAgICAgIH1cbiAgICB9LCB0aW1lb3V0KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcHV0ZVJlZmV0Y2hJbnRlcnZhbCA9IGZ1bmN0aW9uIGNvbXB1dGVSZWZldGNoSW50ZXJ2YWwoKSB7XG4gICAgdmFyIF90aGlzJG9wdGlvbnMkcmVmZXRjaDtcblxuICAgIHJldHVybiB0eXBlb2YgdGhpcy5vcHRpb25zLnJlZmV0Y2hJbnRlcnZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMub3B0aW9ucy5yZWZldGNoSW50ZXJ2YWwodGhpcy5jdXJyZW50UmVzdWx0LmRhdGEsIHRoaXMuY3VycmVudFF1ZXJ5KSA6IChfdGhpcyRvcHRpb25zJHJlZmV0Y2ggPSB0aGlzLm9wdGlvbnMucmVmZXRjaEludGVydmFsKSAhPSBudWxsID8gX3RoaXMkb3B0aW9ucyRyZWZldGNoIDogZmFsc2U7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVJlZmV0Y2hJbnRlcnZhbCA9IGZ1bmN0aW9uIHVwZGF0ZVJlZmV0Y2hJbnRlcnZhbChuZXh0SW50ZXJ2YWwpIHtcbiAgICB2YXIgX3RoaXM3ID0gdGhpcztcblxuICAgIHRoaXMuY2xlYXJSZWZldGNoSW50ZXJ2YWwoKTtcbiAgICB0aGlzLmN1cnJlbnRSZWZldGNoSW50ZXJ2YWwgPSBuZXh0SW50ZXJ2YWw7XG5cbiAgICBpZiAoaXNTZXJ2ZXIgfHwgdGhpcy5vcHRpb25zLmVuYWJsZWQgPT09IGZhbHNlIHx8ICFpc1ZhbGlkVGltZW91dCh0aGlzLmN1cnJlbnRSZWZldGNoSW50ZXJ2YWwpIHx8IHRoaXMuY3VycmVudFJlZmV0Y2hJbnRlcnZhbCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVmZXRjaEludGVydmFsSWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoX3RoaXM3Lm9wdGlvbnMucmVmZXRjaEludGVydmFsSW5CYWNrZ3JvdW5kIHx8IGZvY3VzTWFuYWdlci5pc0ZvY3VzZWQoKSkge1xuICAgICAgICBfdGhpczcuZXhlY3V0ZUZldGNoKCk7XG4gICAgICB9XG4gICAgfSwgdGhpcy5jdXJyZW50UmVmZXRjaEludGVydmFsKTtcbiAgfTtcblxuICBfcHJvdG8udXBkYXRlVGltZXJzID0gZnVuY3Rpb24gdXBkYXRlVGltZXJzKCkge1xuICAgIHRoaXMudXBkYXRlU3RhbGVUaW1lb3V0KCk7XG4gICAgdGhpcy51cGRhdGVSZWZldGNoSW50ZXJ2YWwodGhpcy5jb21wdXRlUmVmZXRjaEludGVydmFsKCkpO1xuICB9O1xuXG4gIF9wcm90by5jbGVhclRpbWVycyA9IGZ1bmN0aW9uIGNsZWFyVGltZXJzKCkge1xuICAgIHRoaXMuY2xlYXJTdGFsZVRpbWVvdXQoKTtcbiAgICB0aGlzLmNsZWFyUmVmZXRjaEludGVydmFsKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyU3RhbGVUaW1lb3V0ID0gZnVuY3Rpb24gY2xlYXJTdGFsZVRpbWVvdXQoKSB7XG4gICAgaWYgKHRoaXMuc3RhbGVUaW1lb3V0SWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnN0YWxlVGltZW91dElkKTtcbiAgICAgIHRoaXMuc3RhbGVUaW1lb3V0SWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jbGVhclJlZmV0Y2hJbnRlcnZhbCA9IGZ1bmN0aW9uIGNsZWFyUmVmZXRjaEludGVydmFsKCkge1xuICAgIGlmICh0aGlzLnJlZmV0Y2hJbnRlcnZhbElkKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMucmVmZXRjaEludGVydmFsSWQpO1xuICAgICAgdGhpcy5yZWZldGNoSW50ZXJ2YWxJZCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNyZWF0ZVJlc3VsdCA9IGZ1bmN0aW9uIGNyZWF0ZVJlc3VsdChxdWVyeSwgb3B0aW9ucykge1xuICAgIHZhciBwcmV2UXVlcnkgPSB0aGlzLmN1cnJlbnRRdWVyeTtcbiAgICB2YXIgcHJldk9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgdmFyIHByZXZSZXN1bHQgPSB0aGlzLmN1cnJlbnRSZXN1bHQ7XG4gICAgdmFyIHByZXZSZXN1bHRTdGF0ZSA9IHRoaXMuY3VycmVudFJlc3VsdFN0YXRlO1xuICAgIHZhciBwcmV2UmVzdWx0T3B0aW9ucyA9IHRoaXMuY3VycmVudFJlc3VsdE9wdGlvbnM7XG4gICAgdmFyIHF1ZXJ5Q2hhbmdlID0gcXVlcnkgIT09IHByZXZRdWVyeTtcbiAgICB2YXIgcXVlcnlJbml0aWFsU3RhdGUgPSBxdWVyeUNoYW5nZSA/IHF1ZXJ5LnN0YXRlIDogdGhpcy5jdXJyZW50UXVlcnlJbml0aWFsU3RhdGU7XG4gICAgdmFyIHByZXZRdWVyeVJlc3VsdCA9IHF1ZXJ5Q2hhbmdlID8gdGhpcy5jdXJyZW50UmVzdWx0IDogdGhpcy5wcmV2aW91c1F1ZXJ5UmVzdWx0O1xuICAgIHZhciBzdGF0ZSA9IHF1ZXJ5LnN0YXRlO1xuICAgIHZhciBkYXRhVXBkYXRlZEF0ID0gc3RhdGUuZGF0YVVwZGF0ZWRBdCxcbiAgICAgICAgZXJyb3IgPSBzdGF0ZS5lcnJvcixcbiAgICAgICAgZXJyb3JVcGRhdGVkQXQgPSBzdGF0ZS5lcnJvclVwZGF0ZWRBdCxcbiAgICAgICAgaXNGZXRjaGluZyA9IHN0YXRlLmlzRmV0Y2hpbmcsXG4gICAgICAgIHN0YXR1cyA9IHN0YXRlLnN0YXR1cztcbiAgICB2YXIgaXNQcmV2aW91c0RhdGEgPSBmYWxzZTtcbiAgICB2YXIgaXNQbGFjZWhvbGRlckRhdGEgPSBmYWxzZTtcbiAgICB2YXIgZGF0YTsgLy8gT3B0aW1pc3RpY2FsbHkgc2V0IHJlc3VsdCBpbiBmZXRjaGluZyBzdGF0ZSBpZiBuZWVkZWRcblxuICAgIGlmIChvcHRpb25zLm9wdGltaXN0aWNSZXN1bHRzKSB7XG4gICAgICB2YXIgbW91bnRlZCA9IHRoaXMuaGFzTGlzdGVuZXJzKCk7XG4gICAgICB2YXIgZmV0Y2hPbk1vdW50ID0gIW1vdW50ZWQgJiYgc2hvdWxkRmV0Y2hPbk1vdW50KHF1ZXJ5LCBvcHRpb25zKTtcbiAgICAgIHZhciBmZXRjaE9wdGlvbmFsbHkgPSBtb3VudGVkICYmIHNob3VsZEZldGNoT3B0aW9uYWxseShxdWVyeSwgcHJldlF1ZXJ5LCBvcHRpb25zLCBwcmV2T3B0aW9ucyk7XG5cbiAgICAgIGlmIChmZXRjaE9uTW91bnQgfHwgZmV0Y2hPcHRpb25hbGx5KSB7XG4gICAgICAgIGlzRmV0Y2hpbmcgPSB0cnVlO1xuXG4gICAgICAgIGlmICghZGF0YVVwZGF0ZWRBdCkge1xuICAgICAgICAgIHN0YXR1cyA9ICdsb2FkaW5nJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gS2VlcCBwcmV2aW91cyBkYXRhIGlmIG5lZWRlZFxuXG5cbiAgICBpZiAob3B0aW9ucy5rZWVwUHJldmlvdXNEYXRhICYmICFzdGF0ZS5kYXRhVXBkYXRlQ291bnQgJiYgKHByZXZRdWVyeVJlc3VsdCA9PSBudWxsID8gdm9pZCAwIDogcHJldlF1ZXJ5UmVzdWx0LmlzU3VjY2VzcykgJiYgc3RhdHVzICE9PSAnZXJyb3InKSB7XG4gICAgICBkYXRhID0gcHJldlF1ZXJ5UmVzdWx0LmRhdGE7XG4gICAgICBkYXRhVXBkYXRlZEF0ID0gcHJldlF1ZXJ5UmVzdWx0LmRhdGFVcGRhdGVkQXQ7XG4gICAgICBzdGF0dXMgPSBwcmV2UXVlcnlSZXN1bHQuc3RhdHVzO1xuICAgICAgaXNQcmV2aW91c0RhdGEgPSB0cnVlO1xuICAgIH0gLy8gU2VsZWN0IGRhdGEgaWYgbmVlZGVkXG4gICAgZWxzZSBpZiAob3B0aW9ucy5zZWxlY3QgJiYgdHlwZW9mIHN0YXRlLmRhdGEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIC8vIE1lbW9pemUgc2VsZWN0IHJlc3VsdFxuICAgICAgICBpZiAocHJldlJlc3VsdCAmJiBzdGF0ZS5kYXRhID09PSAocHJldlJlc3VsdFN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UmVzdWx0U3RhdGUuZGF0YSkgJiYgb3B0aW9ucy5zZWxlY3QgPT09IHRoaXMuc2VsZWN0Rm4pIHtcbiAgICAgICAgICBkYXRhID0gdGhpcy5zZWxlY3RSZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0Rm4gPSBvcHRpb25zLnNlbGVjdDtcbiAgICAgICAgICAgIGRhdGEgPSBvcHRpb25zLnNlbGVjdChzdGF0ZS5kYXRhKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RydWN0dXJhbFNoYXJpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIGRhdGEgPSByZXBsYWNlRXF1YWxEZWVwKHByZXZSZXN1bHQgPT0gbnVsbCA/IHZvaWQgMCA6IHByZXZSZXN1bHQuZGF0YSwgZGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2VsZWN0UmVzdWx0ID0gZGF0YTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0RXJyb3IgPSBudWxsO1xuICAgICAgICAgIH0gY2F0Y2ggKHNlbGVjdEVycm9yKSB7XG4gICAgICAgICAgICBnZXRMb2dnZXIoKS5lcnJvcihzZWxlY3RFcnJvcik7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdEVycm9yID0gc2VsZWN0RXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIFVzZSBxdWVyeSBkYXRhXG4gICAgICBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gc3RhdGUuZGF0YTtcbiAgICAgICAgfSAvLyBTaG93IHBsYWNlaG9sZGVyIGRhdGEgaWYgbmVlZGVkXG5cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wbGFjZWhvbGRlckRhdGEgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkYXRhID09PSAndW5kZWZpbmVkJyAmJiAoc3RhdHVzID09PSAnbG9hZGluZycgfHwgc3RhdHVzID09PSAnaWRsZScpKSB7XG4gICAgICB2YXIgcGxhY2Vob2xkZXJEYXRhOyAvLyBNZW1vaXplIHBsYWNlaG9sZGVyIGRhdGFcblxuICAgICAgaWYgKChwcmV2UmVzdWx0ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UmVzdWx0LmlzUGxhY2Vob2xkZXJEYXRhKSAmJiBvcHRpb25zLnBsYWNlaG9sZGVyRGF0YSA9PT0gKHByZXZSZXN1bHRPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBwcmV2UmVzdWx0T3B0aW9ucy5wbGFjZWhvbGRlckRhdGEpKSB7XG4gICAgICAgIHBsYWNlaG9sZGVyRGF0YSA9IHByZXZSZXN1bHQuZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBsYWNlaG9sZGVyRGF0YSA9IHR5cGVvZiBvcHRpb25zLnBsYWNlaG9sZGVyRGF0YSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbnMucGxhY2Vob2xkZXJEYXRhKCkgOiBvcHRpb25zLnBsYWNlaG9sZGVyRGF0YTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zZWxlY3QgJiYgdHlwZW9mIHBsYWNlaG9sZGVyRGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcGxhY2Vob2xkZXJEYXRhID0gb3B0aW9ucy5zZWxlY3QocGxhY2Vob2xkZXJEYXRhKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3RydWN0dXJhbFNoYXJpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyRGF0YSA9IHJlcGxhY2VFcXVhbERlZXAocHJldlJlc3VsdCA9PSBudWxsID8gdm9pZCAwIDogcHJldlJlc3VsdC5kYXRhLCBwbGFjZWhvbGRlckRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNlbGVjdEVycm9yID0gbnVsbDtcbiAgICAgICAgICB9IGNhdGNoIChzZWxlY3RFcnJvcikge1xuICAgICAgICAgICAgZ2V0TG9nZ2VyKCkuZXJyb3Ioc2VsZWN0RXJyb3IpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RFcnJvciA9IHNlbGVjdEVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHBsYWNlaG9sZGVyRGF0YSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc3RhdHVzID0gJ3N1Y2Nlc3MnO1xuICAgICAgICBkYXRhID0gcGxhY2Vob2xkZXJEYXRhO1xuICAgICAgICBpc1BsYWNlaG9sZGVyRGF0YSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2VsZWN0RXJyb3IpIHtcbiAgICAgIGVycm9yID0gdGhpcy5zZWxlY3RFcnJvcjtcbiAgICAgIGRhdGEgPSB0aGlzLnNlbGVjdFJlc3VsdDtcbiAgICAgIGVycm9yVXBkYXRlZEF0ID0gRGF0ZS5ub3coKTtcbiAgICAgIHN0YXR1cyA9ICdlcnJvcic7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgaXNMb2FkaW5nOiBzdGF0dXMgPT09ICdsb2FkaW5nJyxcbiAgICAgIGlzU3VjY2Vzczogc3RhdHVzID09PSAnc3VjY2VzcycsXG4gICAgICBpc0Vycm9yOiBzdGF0dXMgPT09ICdlcnJvcicsXG4gICAgICBpc0lkbGU6IHN0YXR1cyA9PT0gJ2lkbGUnLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIGRhdGFVcGRhdGVkQXQ6IGRhdGFVcGRhdGVkQXQsXG4gICAgICBlcnJvcjogZXJyb3IsXG4gICAgICBlcnJvclVwZGF0ZWRBdDogZXJyb3JVcGRhdGVkQXQsXG4gICAgICBmYWlsdXJlQ291bnQ6IHN0YXRlLmZldGNoRmFpbHVyZUNvdW50LFxuICAgICAgZXJyb3JVcGRhdGVDb3VudDogc3RhdGUuZXJyb3JVcGRhdGVDb3VudCxcbiAgICAgIGlzRmV0Y2hlZDogc3RhdGUuZGF0YVVwZGF0ZUNvdW50ID4gMCB8fCBzdGF0ZS5lcnJvclVwZGF0ZUNvdW50ID4gMCxcbiAgICAgIGlzRmV0Y2hlZEFmdGVyTW91bnQ6IHN0YXRlLmRhdGFVcGRhdGVDb3VudCA+IHF1ZXJ5SW5pdGlhbFN0YXRlLmRhdGFVcGRhdGVDb3VudCB8fCBzdGF0ZS5lcnJvclVwZGF0ZUNvdW50ID4gcXVlcnlJbml0aWFsU3RhdGUuZXJyb3JVcGRhdGVDb3VudCxcbiAgICAgIGlzRmV0Y2hpbmc6IGlzRmV0Y2hpbmcsXG4gICAgICBpc1JlZmV0Y2hpbmc6IGlzRmV0Y2hpbmcgJiYgc3RhdHVzICE9PSAnbG9hZGluZycsXG4gICAgICBpc0xvYWRpbmdFcnJvcjogc3RhdHVzID09PSAnZXJyb3InICYmIHN0YXRlLmRhdGFVcGRhdGVkQXQgPT09IDAsXG4gICAgICBpc1BsYWNlaG9sZGVyRGF0YTogaXNQbGFjZWhvbGRlckRhdGEsXG4gICAgICBpc1ByZXZpb3VzRGF0YTogaXNQcmV2aW91c0RhdGEsXG4gICAgICBpc1JlZmV0Y2hFcnJvcjogc3RhdHVzID09PSAnZXJyb3InICYmIHN0YXRlLmRhdGFVcGRhdGVkQXQgIT09IDAsXG4gICAgICBpc1N0YWxlOiBpc1N0YWxlKHF1ZXJ5LCBvcHRpb25zKSxcbiAgICAgIHJlZmV0Y2g6IHRoaXMucmVmZXRjaCxcbiAgICAgIHJlbW92ZTogdGhpcy5yZW1vdmVcbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLnNob3VsZE5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIHNob3VsZE5vdGlmeUxpc3RlbmVycyhyZXN1bHQsIHByZXZSZXN1bHQpIHtcbiAgICBpZiAoIXByZXZSZXN1bHQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBub3RpZnlPbkNoYW5nZVByb3BzID0gX3RoaXMkb3B0aW9ucy5ub3RpZnlPbkNoYW5nZVByb3BzLFxuICAgICAgICBub3RpZnlPbkNoYW5nZVByb3BzRXhjbHVzaW9ucyA9IF90aGlzJG9wdGlvbnMubm90aWZ5T25DaGFuZ2VQcm9wc0V4Y2x1c2lvbnM7XG5cbiAgICBpZiAoIW5vdGlmeU9uQ2hhbmdlUHJvcHMgJiYgIW5vdGlmeU9uQ2hhbmdlUHJvcHNFeGNsdXNpb25zKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAobm90aWZ5T25DaGFuZ2VQcm9wcyA9PT0gJ3RyYWNrZWQnICYmICF0aGlzLnRyYWNrZWRQcm9wcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpbmNsdWRlZFByb3BzID0gbm90aWZ5T25DaGFuZ2VQcm9wcyA9PT0gJ3RyYWNrZWQnID8gdGhpcy50cmFja2VkUHJvcHMgOiBub3RpZnlPbkNoYW5nZVByb3BzO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhyZXN1bHQpLnNvbWUoZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIHR5cGVkS2V5ID0ga2V5O1xuICAgICAgdmFyIGNoYW5nZWQgPSByZXN1bHRbdHlwZWRLZXldICE9PSBwcmV2UmVzdWx0W3R5cGVkS2V5XTtcbiAgICAgIHZhciBpc0luY2x1ZGVkID0gaW5jbHVkZWRQcm9wcyA9PSBudWxsID8gdm9pZCAwIDogaW5jbHVkZWRQcm9wcy5zb21lKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiB4ID09PSBrZXk7XG4gICAgICB9KTtcbiAgICAgIHZhciBpc0V4Y2x1ZGVkID0gbm90aWZ5T25DaGFuZ2VQcm9wc0V4Y2x1c2lvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG5vdGlmeU9uQ2hhbmdlUHJvcHNFeGNsdXNpb25zLnNvbWUoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHggPT09IGtleTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNoYW5nZWQgJiYgIWlzRXhjbHVkZWQgJiYgKCFpbmNsdWRlZFByb3BzIHx8IGlzSW5jbHVkZWQpO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVSZXN1bHQgPSBmdW5jdGlvbiB1cGRhdGVSZXN1bHQobm90aWZ5T3B0aW9ucykge1xuICAgIHZhciBwcmV2UmVzdWx0ID0gdGhpcy5jdXJyZW50UmVzdWx0O1xuICAgIHRoaXMuY3VycmVudFJlc3VsdCA9IHRoaXMuY3JlYXRlUmVzdWx0KHRoaXMuY3VycmVudFF1ZXJ5LCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuY3VycmVudFJlc3VsdFN0YXRlID0gdGhpcy5jdXJyZW50UXVlcnkuc3RhdGU7XG4gICAgdGhpcy5jdXJyZW50UmVzdWx0T3B0aW9ucyA9IHRoaXMub3B0aW9uczsgLy8gT25seSBub3RpZnkgaWYgc29tZXRoaW5nIGhhcyBjaGFuZ2VkXG5cbiAgICBpZiAoc2hhbGxvd0VxdWFsT2JqZWN0cyh0aGlzLmN1cnJlbnRSZXN1bHQsIHByZXZSZXN1bHQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBEZXRlcm1pbmUgd2hpY2ggY2FsbGJhY2tzIHRvIHRyaWdnZXJcblxuXG4gICAgdmFyIGRlZmF1bHROb3RpZnlPcHRpb25zID0ge1xuICAgICAgY2FjaGU6IHRydWVcbiAgICB9O1xuXG4gICAgaWYgKChub3RpZnlPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBub3RpZnlPcHRpb25zLmxpc3RlbmVycykgIT09IGZhbHNlICYmIHRoaXMuc2hvdWxkTm90aWZ5TGlzdGVuZXJzKHRoaXMuY3VycmVudFJlc3VsdCwgcHJldlJlc3VsdCkpIHtcbiAgICAgIGRlZmF1bHROb3RpZnlPcHRpb25zLmxpc3RlbmVycyA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5ub3RpZnkoX2V4dGVuZHMoe30sIGRlZmF1bHROb3RpZnlPcHRpb25zLCBub3RpZnlPcHRpb25zKSk7XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVF1ZXJ5ID0gZnVuY3Rpb24gdXBkYXRlUXVlcnkoKSB7XG4gICAgdmFyIHF1ZXJ5ID0gdGhpcy5jbGllbnQuZ2V0UXVlcnlDYWNoZSgpLmJ1aWxkKHRoaXMuY2xpZW50LCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgaWYgKHF1ZXJ5ID09PSB0aGlzLmN1cnJlbnRRdWVyeSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwcmV2UXVlcnkgPSB0aGlzLmN1cnJlbnRRdWVyeTtcbiAgICB0aGlzLmN1cnJlbnRRdWVyeSA9IHF1ZXJ5O1xuICAgIHRoaXMuY3VycmVudFF1ZXJ5SW5pdGlhbFN0YXRlID0gcXVlcnkuc3RhdGU7XG4gICAgdGhpcy5wcmV2aW91c1F1ZXJ5UmVzdWx0ID0gdGhpcy5jdXJyZW50UmVzdWx0O1xuXG4gICAgaWYgKHRoaXMuaGFzTGlzdGVuZXJzKCkpIHtcbiAgICAgIHByZXZRdWVyeSA9PSBudWxsID8gdm9pZCAwIDogcHJldlF1ZXJ5LnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuICAgICAgcXVlcnkuYWRkT2JzZXJ2ZXIodGhpcyk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vblF1ZXJ5VXBkYXRlID0gZnVuY3Rpb24gb25RdWVyeVVwZGF0ZShhY3Rpb24pIHtcbiAgICB2YXIgbm90aWZ5T3B0aW9ucyA9IHt9O1xuXG4gICAgaWYgKGFjdGlvbi50eXBlID09PSAnc3VjY2VzcycpIHtcbiAgICAgIG5vdGlmeU9wdGlvbnMub25TdWNjZXNzID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGFjdGlvbi50eXBlID09PSAnZXJyb3InICYmICFpc0NhbmNlbGxlZEVycm9yKGFjdGlvbi5lcnJvcikpIHtcbiAgICAgIG5vdGlmeU9wdGlvbnMub25FcnJvciA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVSZXN1bHQobm90aWZ5T3B0aW9ucyk7XG5cbiAgICBpZiAodGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgdGhpcy51cGRhdGVUaW1lcnMoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeShub3RpZnlPcHRpb25zKSB7XG4gICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICBub3RpZnlNYW5hZ2VyLmJhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIEZpcnN0IHRyaWdnZXIgdGhlIGNvbmZpZ3VyYXRpb24gY2FsbGJhY2tzXG4gICAgICBpZiAobm90aWZ5T3B0aW9ucy5vblN1Y2Nlc3MpIHtcbiAgICAgICAgX3RoaXM4Lm9wdGlvbnMub25TdWNjZXNzID09IG51bGwgPyB2b2lkIDAgOiBfdGhpczgub3B0aW9ucy5vblN1Y2Nlc3MoX3RoaXM4LmN1cnJlbnRSZXN1bHQuZGF0YSk7XG4gICAgICAgIF90aGlzOC5vcHRpb25zLm9uU2V0dGxlZCA9PSBudWxsID8gdm9pZCAwIDogX3RoaXM4Lm9wdGlvbnMub25TZXR0bGVkKF90aGlzOC5jdXJyZW50UmVzdWx0LmRhdGEsIG51bGwpO1xuICAgICAgfSBlbHNlIGlmIChub3RpZnlPcHRpb25zLm9uRXJyb3IpIHtcbiAgICAgICAgX3RoaXM4Lm9wdGlvbnMub25FcnJvciA9PSBudWxsID8gdm9pZCAwIDogX3RoaXM4Lm9wdGlvbnMub25FcnJvcihfdGhpczguY3VycmVudFJlc3VsdC5lcnJvcik7XG4gICAgICAgIF90aGlzOC5vcHRpb25zLm9uU2V0dGxlZCA9PSBudWxsID8gdm9pZCAwIDogX3RoaXM4Lm9wdGlvbnMub25TZXR0bGVkKHVuZGVmaW5lZCwgX3RoaXM4LmN1cnJlbnRSZXN1bHQuZXJyb3IpO1xuICAgICAgfSAvLyBUaGVuIHRyaWdnZXIgdGhlIGxpc3RlbmVyc1xuXG5cbiAgICAgIGlmIChub3RpZnlPcHRpb25zLmxpc3RlbmVycykge1xuICAgICAgICBfdGhpczgubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICAgICAgbGlzdGVuZXIoX3RoaXM4LmN1cnJlbnRSZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gLy8gVGhlbiB0aGUgY2FjaGUgbGlzdGVuZXJzXG5cblxuICAgICAgaWYgKG5vdGlmeU9wdGlvbnMuY2FjaGUpIHtcbiAgICAgICAgX3RoaXM4LmNsaWVudC5nZXRRdWVyeUNhY2hlKCkubm90aWZ5KHtcbiAgICAgICAgICBxdWVyeTogX3RoaXM4LmN1cnJlbnRRdWVyeSxcbiAgICAgICAgICB0eXBlOiAnb2JzZXJ2ZXJSZXN1bHRzVXBkYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFF1ZXJ5T2JzZXJ2ZXI7XG59KFN1YnNjcmliYWJsZSk7XG5cbmZ1bmN0aW9uIHNob3VsZExvYWRPbk1vdW50KHF1ZXJ5LCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmVuYWJsZWQgIT09IGZhbHNlICYmICFxdWVyeS5zdGF0ZS5kYXRhVXBkYXRlZEF0ICYmICEocXVlcnkuc3RhdGUuc3RhdHVzID09PSAnZXJyb3InICYmIG9wdGlvbnMucmV0cnlPbk1vdW50ID09PSBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZEZldGNoT25Nb3VudChxdWVyeSwgb3B0aW9ucykge1xuICByZXR1cm4gc2hvdWxkTG9hZE9uTW91bnQocXVlcnksIG9wdGlvbnMpIHx8IHF1ZXJ5LnN0YXRlLmRhdGFVcGRhdGVkQXQgPiAwICYmIHNob3VsZEZldGNoT24ocXVlcnksIG9wdGlvbnMsIG9wdGlvbnMucmVmZXRjaE9uTW91bnQpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRGZXRjaE9uKHF1ZXJ5LCBvcHRpb25zLCBmaWVsZCkge1xuICBpZiAob3B0aW9ucy5lbmFibGVkICE9PSBmYWxzZSkge1xuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiBmaWVsZCA9PT0gJ2Z1bmN0aW9uJyA/IGZpZWxkKHF1ZXJ5KSA6IGZpZWxkO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gJ2Fsd2F5cycgfHwgdmFsdWUgIT09IGZhbHNlICYmIGlzU3RhbGUocXVlcnksIG9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzaG91bGRGZXRjaE9wdGlvbmFsbHkocXVlcnksIHByZXZRdWVyeSwgb3B0aW9ucywgcHJldk9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZW5hYmxlZCAhPT0gZmFsc2UgJiYgKHF1ZXJ5ICE9PSBwcmV2UXVlcnkgfHwgcHJldk9wdGlvbnMuZW5hYmxlZCA9PT0gZmFsc2UpICYmICghb3B0aW9ucy5zdXNwZW5zZSB8fCBxdWVyeS5zdGF0ZS5zdGF0dXMgIT09ICdlcnJvcicpICYmIGlzU3RhbGUocXVlcnksIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBpc1N0YWxlKHF1ZXJ5LCBvcHRpb25zKSB7XG4gIHJldHVybiBxdWVyeS5pc1N0YWxlQnlUaW1lKG9wdGlvbnMuc3RhbGVUaW1lKTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnOyAvLyBDT05URVhUXG5cbmZ1bmN0aW9uIGNyZWF0ZVZhbHVlKCkge1xuICB2YXIgX2lzUmVzZXQgPSBmYWxzZTtcbiAgcmV0dXJuIHtcbiAgICBjbGVhclJlc2V0OiBmdW5jdGlvbiBjbGVhclJlc2V0KCkge1xuICAgICAgX2lzUmVzZXQgPSBmYWxzZTtcbiAgICB9LFxuICAgIHJlc2V0OiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIF9pc1Jlc2V0ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGlzUmVzZXQ6IGZ1bmN0aW9uIGlzUmVzZXQoKSB7XG4gICAgICByZXR1cm4gX2lzUmVzZXQ7XG4gICAgfVxuICB9O1xufVxuXG52YXIgUXVlcnlFcnJvclJlc2V0Qm91bmRhcnlDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoY3JlYXRlVmFsdWUoKSk7IC8vIEhPT0tcblxuZXhwb3J0IHZhciB1c2VRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSA9IGZ1bmN0aW9uIHVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChRdWVyeUVycm9yUmVzZXRCb3VuZGFyeUNvbnRleHQpO1xufTsgLy8gQ09NUE9ORU5UXG5cbmV4cG9ydCB2YXIgUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkgPSBmdW5jdGlvbiBRdWVyeUVycm9yUmVzZXRCb3VuZGFyeShfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciB2YWx1ZSA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjcmVhdGVWYWx1ZSgpO1xuICB9LCBbXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChRdWVyeUVycm9yUmVzZXRCb3VuZGFyeUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdmFsdWVcbiAgfSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4odmFsdWUpIDogY2hpbGRyZW4pO1xufTsiLCJpbXBvcnQgeyBRdWVyeU9ic2VydmVyIH0gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgeyBwYXJzZVF1ZXJ5QXJncyB9IGZyb20gJy4uL2NvcmUvdXRpbHMnO1xuaW1wb3J0IHsgdXNlQmFzZVF1ZXJ5IH0gZnJvbSAnLi91c2VCYXNlUXVlcnknOyAvLyBIT09LXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VRdWVyeShhcmcxLCBhcmcyLCBhcmczKSB7XG4gIHZhciBwYXJzZWRPcHRpb25zID0gcGFyc2VRdWVyeUFyZ3MoYXJnMSwgYXJnMiwgYXJnMyk7XG4gIHJldHVybiB1c2VCYXNlUXVlcnkocGFyc2VkT3B0aW9ucywgUXVlcnlPYnNlcnZlcik7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tICcuLi9jb3JlL25vdGlmeU1hbmFnZXInO1xuaW1wb3J0IHsgdXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkgfSBmcm9tICcuL1F1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5JztcbmltcG9ydCB7IHVzZVF1ZXJ5Q2xpZW50IH0gZnJvbSAnLi9RdWVyeUNsaWVudFByb3ZpZGVyJztcbmltcG9ydCB7IHNob3VsZFRocm93RXJyb3IgfSBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCBmdW5jdGlvbiB1c2VCYXNlUXVlcnkob3B0aW9ucywgT2JzZXJ2ZXIpIHtcbiAgdmFyIG1vdW50ZWRSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZSgwKSxcbiAgICAgIGZvcmNlVXBkYXRlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBxdWVyeUNsaWVudCA9IHVzZVF1ZXJ5Q2xpZW50KCk7XG4gIHZhciBlcnJvclJlc2V0Qm91bmRhcnkgPSB1c2VRdWVyeUVycm9yUmVzZXRCb3VuZGFyeSgpO1xuICB2YXIgZGVmYXVsdGVkT3B0aW9ucyA9IHF1ZXJ5Q2xpZW50LmRlZmF1bHRRdWVyeU9ic2VydmVyT3B0aW9ucyhvcHRpb25zKTsgLy8gTWFrZSBzdXJlIHJlc3VsdHMgYXJlIG9wdGltaXN0aWNhbGx5IHNldCBpbiBmZXRjaGluZyBzdGF0ZSBiZWZvcmUgc3Vic2NyaWJpbmcgb3IgdXBkYXRpbmcgb3B0aW9uc1xuXG4gIGRlZmF1bHRlZE9wdGlvbnMub3B0aW1pc3RpY1Jlc3VsdHMgPSB0cnVlOyAvLyBJbmNsdWRlIGNhbGxiYWNrcyBpbiBiYXRjaCByZW5kZXJzXG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMub25FcnJvcikge1xuICAgIGRlZmF1bHRlZE9wdGlvbnMub25FcnJvciA9IG5vdGlmeU1hbmFnZXIuYmF0Y2hDYWxscyhkZWZhdWx0ZWRPcHRpb25zLm9uRXJyb3IpO1xuICB9XG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMub25TdWNjZXNzKSB7XG4gICAgZGVmYXVsdGVkT3B0aW9ucy5vblN1Y2Nlc3MgPSBub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMoZGVmYXVsdGVkT3B0aW9ucy5vblN1Y2Nlc3MpO1xuICB9XG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkKSB7XG4gICAgZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQgPSBub3RpZnlNYW5hZ2VyLmJhdGNoQ2FsbHMoZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQpO1xuICB9XG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMuc3VzcGVuc2UpIHtcbiAgICAvLyBBbHdheXMgc2V0IHN0YWxlIHRpbWUgd2hlbiB1c2luZyBzdXNwZW5zZSB0byBwcmV2ZW50XG4gICAgLy8gZmV0Y2hpbmcgYWdhaW4gd2hlbiBkaXJlY3RseSBtb3VudGluZyBhZnRlciBzdXNwZW5kaW5nXG4gICAgaWYgKHR5cGVvZiBkZWZhdWx0ZWRPcHRpb25zLnN0YWxlVGltZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMuc3RhbGVUaW1lID0gMTAwMDtcbiAgICB9IC8vIFNldCBjYWNoZSB0aW1lIHRvIDEgaWYgdGhlIG9wdGlvbiBoYXMgYmVlbiBzZXQgdG8gMFxuICAgIC8vIHdoZW4gdXNpbmcgc3VzcGVuc2UgdG8gcHJldmVudCBpbmZpbml0ZSBsb29wIG9mIGZldGNoZXNcblxuXG4gICAgaWYgKGRlZmF1bHRlZE9wdGlvbnMuY2FjaGVUaW1lID09PSAwKSB7XG4gICAgICBkZWZhdWx0ZWRPcHRpb25zLmNhY2hlVGltZSA9IDE7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRlZmF1bHRlZE9wdGlvbnMuc3VzcGVuc2UgfHwgZGVmYXVsdGVkT3B0aW9ucy51c2VFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gUHJldmVudCByZXRyeWluZyBmYWlsZWQgcXVlcnkgaWYgdGhlIGVycm9yIGJvdW5kYXJ5IGhhcyBub3QgYmVlbiByZXNldCB5ZXRcbiAgICBpZiAoIWVycm9yUmVzZXRCb3VuZGFyeS5pc1Jlc2V0KCkpIHtcbiAgICAgIGRlZmF1bHRlZE9wdGlvbnMucmV0cnlPbk1vdW50ID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZTIgPSBSZWFjdC51c2VTdGF0ZShmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZlcihxdWVyeUNsaWVudCwgZGVmYXVsdGVkT3B0aW9ucyk7XG4gIH0pLFxuICAgICAgb2JzZXJ2ZXIgPSBfUmVhY3QkdXNlU3RhdGUyWzBdO1xuXG4gIHZhciByZXN1bHQgPSBvYnNlcnZlci5nZXRPcHRpbWlzdGljUmVzdWx0KGRlZmF1bHRlZE9wdGlvbnMpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIG1vdW50ZWRSZWYuY3VycmVudCA9IHRydWU7XG4gICAgZXJyb3JSZXNldEJvdW5kYXJ5LmNsZWFyUmVzZXQoKTtcbiAgICB2YXIgdW5zdWJzY3JpYmUgPSBvYnNlcnZlci5zdWJzY3JpYmUobm90aWZ5TWFuYWdlci5iYXRjaENhbGxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChtb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgICAgZm9yY2VVcGRhdGUoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICByZXR1cm4geCArIDE7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pKTsgLy8gVXBkYXRlIHJlc3VsdCB0byBtYWtlIHN1cmUgd2UgZGlkIG5vdCBtaXNzIGFueSBxdWVyeSB1cGRhdGVzXG4gICAgLy8gYmV0d2VlbiBjcmVhdGluZyB0aGUgb2JzZXJ2ZXIgYW5kIHN1YnNjcmliaW5nIHRvIGl0LlxuXG4gICAgb2JzZXJ2ZXIudXBkYXRlUmVzdWx0KCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vdW50ZWRSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbZXJyb3JSZXNldEJvdW5kYXJ5LCBvYnNlcnZlcl0pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIC8vIERvIG5vdCBub3RpZnkgb24gdXBkYXRlcyBiZWNhdXNlIG9mIGNoYW5nZXMgaW4gdGhlIG9wdGlvbnMgYmVjYXVzZVxuICAgIC8vIHRoZXNlIGNoYW5nZXMgc2hvdWxkIGFscmVhZHkgYmUgcmVmbGVjdGVkIGluIHRoZSBvcHRpbWlzdGljIHJlc3VsdC5cbiAgICBvYnNlcnZlci5zZXRPcHRpb25zKGRlZmF1bHRlZE9wdGlvbnMsIHtcbiAgICAgIGxpc3RlbmVyczogZmFsc2VcbiAgICB9KTtcbiAgfSwgW2RlZmF1bHRlZE9wdGlvbnMsIG9ic2VydmVyXSk7IC8vIEhhbmRsZSBzdXNwZW5zZVxuXG4gIGlmIChkZWZhdWx0ZWRPcHRpb25zLnN1c3BlbnNlICYmIHJlc3VsdC5pc0xvYWRpbmcpIHtcbiAgICB0aHJvdyBvYnNlcnZlci5mZXRjaE9wdGltaXN0aWMoZGVmYXVsdGVkT3B0aW9ucykudGhlbihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGRhdGEgPSBfcmVmLmRhdGE7XG4gICAgICBkZWZhdWx0ZWRPcHRpb25zLm9uU3VjY2VzcyA9PSBudWxsID8gdm9pZCAwIDogZGVmYXVsdGVkT3B0aW9ucy5vblN1Y2Nlc3MoZGF0YSk7XG4gICAgICBkZWZhdWx0ZWRPcHRpb25zLm9uU2V0dGxlZCA9PSBudWxsID8gdm9pZCAwIDogZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQoZGF0YSwgbnVsbCk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBlcnJvclJlc2V0Qm91bmRhcnkuY2xlYXJSZXNldCgpO1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5vbkVycm9yID09IG51bGwgPyB2b2lkIDAgOiBkZWZhdWx0ZWRPcHRpb25zLm9uRXJyb3IoZXJyb3IpO1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5vblNldHRsZWQgPT0gbnVsbCA/IHZvaWQgMCA6IGRlZmF1bHRlZE9wdGlvbnMub25TZXR0bGVkKHVuZGVmaW5lZCwgZXJyb3IpO1xuICAgIH0pO1xuICB9IC8vIEhhbmRsZSBlcnJvciBib3VuZGFyeVxuXG5cbiAgaWYgKHJlc3VsdC5pc0Vycm9yICYmICFlcnJvclJlc2V0Qm91bmRhcnkuaXNSZXNldCgpICYmICFyZXN1bHQuaXNGZXRjaGluZyAmJiBzaG91bGRUaHJvd0Vycm9yKGRlZmF1bHRlZE9wdGlvbnMuc3VzcGVuc2UsIGRlZmF1bHRlZE9wdGlvbnMudXNlRXJyb3JCb3VuZGFyeSwgW3Jlc3VsdC5lcnJvciwgb2JzZXJ2ZXIuZ2V0Q3VycmVudFF1ZXJ5KCldKSkge1xuICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgfSAvLyBIYW5kbGUgcmVzdWx0IHByb3BlcnR5IHVzYWdlIHRyYWNraW5nXG5cblxuICBpZiAoZGVmYXVsdGVkT3B0aW9ucy5ub3RpZnlPbkNoYW5nZVByb3BzID09PSAndHJhY2tlZCcpIHtcbiAgICByZXN1bHQgPSBvYnNlcnZlci50cmFja1Jlc3VsdChyZXN1bHQsIGRlZmF1bHRlZE9wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn0iLCJleHBvcnQgZnVuY3Rpb24gc2hvdWxkVGhyb3dFcnJvcihzdXNwZW5zZSwgX3VzZUVycm9yQm91bmRhcnksIHBhcmFtcykge1xuICAvLyBBbGxvdyB1c2VFcnJvckJvdW5kYXJ5IGZ1bmN0aW9uIHRvIG92ZXJyaWRlIHRocm93aW5nIGJlaGF2aW9yIG9uIGEgcGVyLWVycm9yIGJhc2lzXG4gIGlmICh0eXBlb2YgX3VzZUVycm9yQm91bmRhcnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gX3VzZUVycm9yQm91bmRhcnkuYXBwbHkodm9pZCAwLCBwYXJhbXMpO1xuICB9IC8vIEFsbG93IHVzZUVycm9yQm91bmRhcnkgdG8gb3ZlcnJpZGUgc3VzcGVuc2UncyB0aHJvd2luZyBiZWhhdmlvclxuXG5cbiAgaWYgKHR5cGVvZiBfdXNlRXJyb3JCb3VuZGFyeSA9PT0gJ2Jvb2xlYW4nKSByZXR1cm4gX3VzZUVycm9yQm91bmRhcnk7IC8vIElmIHN1c3BlbnNlIGlzIGVuYWJsZWQgZGVmYXVsdCB0byB0aHJvd2luZyBlcnJvcnNcblxuICByZXR1cm4gISFzdXNwZW5zZTtcbn0iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0JztmdW5jdGlvbiBmKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDswPGM7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZigwPGcoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIGgoYSl7cmV0dXJuIDA9PT1hLmxlbmd0aD9udWxsOmFbMF19ZnVuY3Rpb24gayhhKXtpZigwPT09YS5sZW5ndGgpcmV0dXJuIG51bGw7dmFyIGI9YVswXSxjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGgsdz1lPj4+MTtkPHc7KXt2YXIgbT0yKihkKzEpLTEsQz1hW21dLG49bSsxLHg9YVtuXTtpZigwPmcoQyxjKSluPGUmJjA+Zyh4LEMpPyhhW2RdPXgsYVtuXT1jLGQ9bik6KGFbZF09QyxhW21dPWMsZD1tKTtlbHNlIGlmKG48ZSYmMD5nKHgsYykpYVtkXT14LGFbbl09YyxkPW47ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGcoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fXZhciByPVtdLHQ9W10sdT0xLHY9bnVsbCx5PTMsej0hMSxBPSExLEI9ITEsRD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om51bGwsRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpudWxsLEY9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOm51bGw7XG5cInVuZGVmaW5lZFwiIT09dHlwZW9mIG5hdmlnYXRvciYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcmJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nJiZuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtmdW5jdGlvbiBHKGEpe2Zvcih2YXIgYj1oKHQpO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spayh0KTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKWsodCksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxmKHIsYik7ZWxzZSBicmVhaztiPWgodCl9fWZ1bmN0aW9uIEgoYSl7Qj0hMTtHKGEpO2lmKCFBKWlmKG51bGwhPT1oKHIpKUE9ITAsSShKKTtlbHNle3ZhciBiPWgodCk7bnVsbCE9PWImJksoSCxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBKKGEsYil7QT0hMTtCJiYoQj0hMSxFKEwpLEw9LTEpO3o9ITA7dmFyIGM9eTt0cnl7RyhiKTtmb3Iodj1oKHIpO251bGwhPT12JiYoISh2LmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhTSgpKTspe3ZhciBkPXYuY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3YuY2FsbGJhY2s9bnVsbDt5PXYucHJpb3JpdHlMZXZlbDt2YXIgZT1kKHYuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT92LmNhbGxiYWNrPWU6dj09PWgocikmJmsocik7RyhiKX1lbHNlIGsocik7dj1oKHIpfWlmKG51bGwhPT12KXZhciB3PSEwO2Vsc2V7dmFyIG09aCh0KTtudWxsIT09bSYmSyhILG0uc3RhcnRUaW1lLWIpO3c9ITF9cmV0dXJuIHd9ZmluYWxseXt2PW51bGwseT1jLHo9ITF9fXZhciBOPSExLE89bnVsbCxMPS0xLFA9NSxRPS0xO1xuZnVuY3Rpb24gTSgpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpLVE8UD8hMTohMH1mdW5jdGlvbiBSKCl7aWYobnVsbCE9PU8pe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7UT1hO3ZhciBiPSEwO3RyeXtiPU8oITAsYSl9ZmluYWxseXtiP1MoKTooTj0hMSxPPW51bGwpfX1lbHNlIE49ITF9dmFyIFM7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEYpUz1mdW5jdGlvbigpe0YoUil9O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIFQ9bmV3IE1lc3NhZ2VDaGFubmVsLFU9VC5wb3J0MjtULnBvcnQxLm9ubWVzc2FnZT1SO1M9ZnVuY3Rpb24oKXtVLnBvc3RNZXNzYWdlKG51bGwpfX1lbHNlIFM9ZnVuY3Rpb24oKXtEKFIsMCl9O2Z1bmN0aW9uIEkoYSl7Tz1hO058fChOPSEwLFMoKSl9ZnVuY3Rpb24gSyhhLGIpe0w9RChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfVxuZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe0F8fHp8fChBPSEwLEkoSikpfTtcbmV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOlA9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4geX07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBoKHIpfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKHkpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPXl9dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXt5PWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtcbmV4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPXk7eT1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7eT1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOnUrKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLGYodCxhKSxudWxsPT09aChyKSYmYT09PWgodCkmJihCPyhFKEwpLEw9LTEpOkI9ITAsSyhILGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxmKHIsYSksQXx8enx8KEE9ITAsSShKKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9TTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj15O3JldHVybiBmdW5jdGlvbigpe3ZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXt5PWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLy9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQiwgY29tcGFyZSwgY29tcGFyZUNvbnRleHQpIHtcbiAgdmFyIHJldCA9IGNvbXBhcmUgPyBjb21wYXJlLmNhbGwoY29tcGFyZUNvbnRleHQsIG9iakEsIG9iakIpIDogdm9pZCAwO1xuXG4gIGlmIChyZXQgIT09IHZvaWQgMCkge1xuICAgIHJldHVybiAhIXJldDtcbiAgfVxuXG4gIGlmIChvYmpBID09PSBvYmpCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09IFwib2JqZWN0XCIgfHwgIW9iakEgfHwgdHlwZW9mIG9iakIgIT09IFwib2JqZWN0XCIgfHwgIW9iakIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGJIYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuYmluZChvYmpCKTtcblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBrZXlzQS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNBW2lkeF07XG5cbiAgICBpZiAoIWJIYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQSA9IG9iakFba2V5XTtcbiAgICB2YXIgdmFsdWVCID0gb2JqQltrZXldO1xuXG4gICAgcmV0ID0gY29tcGFyZSA/IGNvbXBhcmUuY2FsbChjb21wYXJlQ29udGV4dCwgdmFsdWVBLCB2YWx1ZUIsIGtleSkgOiB2b2lkIDA7XG5cbiAgICBpZiAocmV0ID09PSBmYWxzZSB8fCAocmV0ID09PSB2b2lkIDAgJiYgdmFsdWVBICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGU9cmVxdWlyZShcInJlYWN0XCIpO2Z1bmN0aW9uIGgoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBrPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOmgsbD1lLnVzZVN0YXRlLG09ZS51c2VFZmZlY3Qsbj1lLnVzZUxheW91dEVmZmVjdCxwPWUudXNlRGVidWdWYWx1ZTtmdW5jdGlvbiBxKGEsYil7dmFyIGQ9YigpLGY9bCh7aW5zdDp7dmFsdWU6ZCxnZXRTbmFwc2hvdDpifX0pLGM9ZlswXS5pbnN0LGc9ZlsxXTtuKGZ1bmN0aW9uKCl7Yy52YWx1ZT1kO2MuZ2V0U25hcHNob3Q9YjtyKGMpJiZnKHtpbnN0OmN9KX0sW2EsZCxiXSk7bShmdW5jdGlvbigpe3IoYykmJmcoe2luc3Q6Y30pO3JldHVybiBhKGZ1bmN0aW9uKCl7cihjKSYmZyh7aW5zdDpjfSl9KX0sW2FdKTtwKGQpO3JldHVybiBkfVxuZnVuY3Rpb24gcihhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGQ9YigpO3JldHVybiFrKGEsZCl9Y2F0Y2goZil7cmV0dXJuITB9fWZ1bmN0aW9uIHQoYSxiKXtyZXR1cm4gYigpfXZhciB1PVwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudD90OnE7ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT12b2lkIDAhPT1lLnVzZVN5bmNFeHRlcm5hbFN0b3JlP2UudXNlU3luY0V4dGVybmFsU3RvcmU6dTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHVzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGg9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcInVzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW1cIik7ZnVuY3Rpb24gcChhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6cCxyPW4udXNlU3luY0V4dGVybmFsU3RvcmUsdD1oLnVzZVJlZix1PWgudXNlRWZmZWN0LHY9aC51c2VNZW1vLHc9aC51c2VEZWJ1Z1ZhbHVlO1xuZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZVdpdGhTZWxlY3Rvcj1mdW5jdGlvbihhLGIsZSxsLGcpe3ZhciBjPXQobnVsbCk7aWYobnVsbD09PWMuY3VycmVudCl7dmFyIGY9e2hhc1ZhbHVlOiExLHZhbHVlOm51bGx9O2MuY3VycmVudD1mfWVsc2UgZj1jLmN1cnJlbnQ7Yz12KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhKXtpZighYyl7Yz0hMDtkPWE7YT1sKGEpO2lmKHZvaWQgMCE9PWcmJmYuaGFzVmFsdWUpe3ZhciBiPWYudmFsdWU7aWYoZyhiLGEpKXJldHVybiBrPWJ9cmV0dXJuIGs9YX1iPWs7aWYocShkLGEpKXJldHVybiBiO3ZhciBlPWwoYSk7aWYodm9pZCAwIT09ZyYmZyhiLGUpKXJldHVybiBiO2Q9YTtyZXR1cm4gaz1lfXZhciBjPSExLGQsayxtPXZvaWQgMD09PWU/bnVsbDplO3JldHVybltmdW5jdGlvbigpe3JldHVybiBhKGIoKSl9LG51bGw9PT1tP3ZvaWQgMDpmdW5jdGlvbigpe3JldHVybiBhKG0oKSl9XX0sW2IsZSxsLGddKTt2YXIgZD1yKGEsY1swXSxjWzFdKTtcbnUoZnVuY3Rpb24oKXtmLmhhc1ZhbHVlPSEwO2YudmFsdWU9ZH0sW2RdKTt3KGQpO3JldHVybiBkfTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9janMvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL2Nqcy91c2Utc3luYy1leHRlcm5hbC1zdG9yZS1zaGltL3dpdGgtc2VsZWN0b3IucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vY2pzL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW0vd2l0aC1zZWxlY3Rvci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG5sZXQgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgY29uc3Qgc2V0QmF0Y2ggPSBuZXdCYXRjaCA9PiBiYXRjaCA9IG5ld0JhdGNoOyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IGNvbnN0IGdldEJhdGNoID0gKCkgPT4gYmF0Y2g7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBjb25zdCBSZWFjdFJlZHV4Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBSZWFjdFJlZHV4Q29udGV4dC5kaXNwbGF5TmFtZSA9ICdSZWFjdFJlZHV4Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RSZWR1eENvbnRleHQ7IiwiaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcblxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgLiBUaGlzIGlzIGEgbG93LWxldmVsXHJcbiAqIGhvb2sgdGhhdCB5b3Ugc2hvdWxkIHVzdWFsbHkgbm90IG5lZWQgdG8gY2FsbCBkaXJlY3RseS5cclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHZhbHVlIG9mIHRoZSBgUmVhY3RSZWR1eENvbnRleHRgXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IHsgc3RvcmUgfSA9IHVzZVJlZHV4Q29udGV4dCgpXHJcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XHJcbiAqIH1cclxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVkdXhDb250ZXh0KCkge1xuICBjb25zdCBjb250ZXh0VmFsdWUgPSB1c2VDb250ZXh0KFJlYWN0UmVkdXhDb250ZXh0KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29udGV4dFZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgZmluZCByZWFjdC1yZWR1eCBjb250ZXh0IHZhbHVlOyBwbGVhc2UgZW5zdXJlIHRoZSBjb21wb25lbnQgaXMgd3JhcHBlZCBpbiBhIDxQcm92aWRlcj4nKTtcbiAgfVxuXG4gIHJldHVybiBjb250ZXh0VmFsdWU7XG59IiwiaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlRGVidWdWYWx1ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVJlZHV4Q29udGV4dCBhcyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi91c2VSZWR1eENvbnRleHQnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgbm90SW5pdGlhbGl6ZWQgfSBmcm9tICcuLi91dGlscy91c2VTeW5jRXh0ZXJuYWxTdG9yZSc7XG5sZXQgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgPSBub3RJbml0aWFsaXplZDtcbmV4cG9ydCBjb25zdCBpbml0aWFsaXplVXNlU2VsZWN0b3IgPSBmbiA9PiB7XG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yID0gZm47XG59O1xuXG5jb25zdCByZWZFcXVhbGl0eSA9IChhLCBiKSA9PiBhID09PSBiO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZVNlbGVjdG9yYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9ySG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogKCkgPT4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuID0gcmVmRXF1YWxpdHkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvcmApO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGEgc2VsZWN0b3IgdG8gdXNlU2VsZWN0b3JgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlcXVhbGl0eUZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgWW91IG11c3QgcGFzcyBhIGZ1bmN0aW9uIGFzIGFuIGVxdWFsaXR5IGZ1bmN0aW9uIHRvIHVzZVNlbGVjdG9yYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qge1xuICAgICAgc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb24sXG4gICAgICBnZXRTZXJ2ZXJTdGF0ZVxuICAgIH0gPSB1c2VSZWR1eENvbnRleHQoKTtcbiAgICBjb25zdCBzZWxlY3RlZFN0YXRlID0gdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3Ioc3Vic2NyaXB0aW9uLmFkZE5lc3RlZFN1Yiwgc3RvcmUuZ2V0U3RhdGUsIGdldFNlcnZlclN0YXRlIHx8IHN0b3JlLmdldFN0YXRlLCBzZWxlY3RvciwgZXF1YWxpdHlGbik7XG4gICAgdXNlRGVidWdWYWx1ZShzZWxlY3RlZFN0YXRlKTtcbiAgICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZSdzIHN0YXRlLiBUaGlzIGhvb2sgdGFrZXMgYSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBhcyBhbiBhcmd1bWVudC4gVGhlIHNlbGVjdG9yIGlzIGNhbGxlZCB3aXRoIHRoZSBzdG9yZSBzdGF0ZS5cclxuICpcclxuICogVGhpcyBob29rIHRha2VzIGFuIG9wdGlvbmFsIGVxdWFsaXR5IGNvbXBhcmlzb24gZnVuY3Rpb24gYXMgdGhlIHNlY29uZCBwYXJhbWV0ZXJcclxuICogdGhhdCBhbGxvd3MgeW91IHRvIGN1c3RvbWl6ZSB0aGUgd2F5IHRoZSBzZWxlY3RlZCBzdGF0ZSBpcyBjb21wYXJlZCB0byBkZXRlcm1pbmVcclxuICogd2hldGhlciB0aGUgY29tcG9uZW50IG5lZWRzIHRvIGJlIHJlLXJlbmRlcmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZWxlY3RvciB0aGUgc2VsZWN0b3IgZnVuY3Rpb25cclxuICogQHBhcmFtIHtGdW5jdGlvbj19IGVxdWFsaXR5Rm4gdGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGRldGVybWluZSBlcXVhbGl0eVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgc2VsZWN0ZWQgc3RhdGVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTZWxlY3RvciB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgQ291bnRlckNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBjb3VudGVyID0gdXNlU2VsZWN0b3Ioc3RhdGUgPT4gc3RhdGUuY291bnRlcilcclxuICogICByZXR1cm4gPGRpdj57Y291bnRlcn08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGNvbnN0IHVzZVNlbGVjdG9yID0gLyojX19QVVJFX18qL2NyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImV4cG9ydCBjb25zdCBub3RJbml0aWFsaXplZCA9ICgpID0+IHtcbiAgdGhyb3cgbmV3IEVycm9yKCd1U0VTIG5vdCBpbml0aWFsaXplZCEnKTtcbn07IiwiaW1wb3J0IHsgZ2V0QmF0Y2ggfSBmcm9tICcuL2JhdGNoJzsgLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxuZnVuY3Rpb24gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCkge1xuICBjb25zdCBiYXRjaCA9IGdldEJhdGNoKCk7XG4gIGxldCBmaXJzdCA9IG51bGw7XG4gIGxldCBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcigpIHtcbiAgICAgIGZpcnN0ID0gbnVsbDtcbiAgICAgIGxhc3QgPSBudWxsO1xuICAgIH0sXG5cbiAgICBub3RpZnkoKSB7XG4gICAgICBiYXRjaCgoKSA9PiB7XG4gICAgICAgIGxldCBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICAgIHdoaWxlIChsaXN0ZW5lcikge1xuICAgICAgICAgIGxpc3RlbmVyLmNhbGxiYWNrKCk7XG4gICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgZ2V0KCkge1xuICAgICAgbGV0IGxpc3RlbmVycyA9IFtdO1xuICAgICAgbGV0IGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgIHdoaWxlIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpc3RlbmVycztcbiAgICB9LFxuXG4gICAgc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICBsZXQgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIGxldCBsaXN0ZW5lciA9IGxhc3QgPSB7XG4gICAgICAgIGNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsLFxuICAgICAgICBwcmV2OiBsYXN0XG4gICAgICB9O1xuXG4gICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpcnN0ID0gbGlzdGVuZXI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQgfHwgZmlyc3QgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLm5leHQpIHtcbiAgICAgICAgICBsaXN0ZW5lci5uZXh0LnByZXYgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxhc3QgPSBsaXN0ZW5lci5wcmV2O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgICBsaXN0ZW5lci5wcmV2Lm5leHQgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZpcnN0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgfTtcbn1cblxuY29uc3QgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5KCkge30sXG5cbiAgZ2V0OiAoKSA9PiBbXVxufTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmUsIHBhcmVudFN1Yikge1xuICBsZXQgdW5zdWJzY3JpYmU7XG4gIGxldCBsaXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuXG4gIGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiBsaXN0ZW5lcnMuc3Vic2NyaWJlKGxpc3RlbmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vdGlmeU5lc3RlZFN1YnMoKSB7XG4gICAgbGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlV3JhcHBlcigpIHtcbiAgICBpZiAoc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgIHJldHVybiBCb29sZWFuKHVuc3Vic2NyaWJlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXVuc3Vic2NyaWJlKSB7XG4gICAgICB1bnN1YnNjcmliZSA9IHBhcmVudFN1YiA/IHBhcmVudFN1Yi5hZGROZXN0ZWRTdWIoaGFuZGxlQ2hhbmdlV3JhcHBlcikgOiBzdG9yZS5zdWJzY3JpYmUoaGFuZGxlQ2hhbmdlV3JhcHBlcik7XG4gICAgICBsaXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0cnlVbnN1YnNjcmliZSgpIHtcbiAgICBpZiAodW5zdWJzY3JpYmUpIHtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICB1bnN1YnNjcmliZSA9IHVuZGVmaW5lZDtcbiAgICAgIGxpc3RlbmVycy5jbGVhcigpO1xuICAgICAgbGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH1cblxuICBjb25zdCBzdWJzY3JpcHRpb24gPSB7XG4gICAgYWRkTmVzdGVkU3ViLFxuICAgIG5vdGlmeU5lc3RlZFN1YnMsXG4gICAgaGFuZGxlQ2hhbmdlV3JhcHBlcixcbiAgICBpc1N1YnNjcmliZWQsXG4gICAgdHJ5U3Vic2NyaWJlLFxuICAgIHRyeVVuc3Vic2NyaWJlLFxuICAgIGdldExpc3RlbmVyczogKCkgPT4gbGlzdGVuZXJzXG4gIH07XG4gIHJldHVybiBzdWJzY3JpcHRpb247XG59IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG4vLyBNYXRjaGVzIGxvZ2ljIGluIFJlYWN0J3MgYHNoYXJlZC9FeGVjdXRpb25FbnZpcm9ubWVudGAgZmlsZVxuXG5leHBvcnQgY29uc3QgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyk7XG5leHBvcnQgY29uc3QgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGNhblVzZURPTSA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1wicmVhY3RSZWR1eEZvcndhcmRlZFJlZlwiXTtcblxuLyogZXNsaW50LWRpc2FibGUgdmFsaWQtanNkb2MsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlLCBpc0NvbnRleHRDb25zdW1lciB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4uL2Nvbm5lY3Qvc2VsZWN0b3JGYWN0b3J5JztcbmltcG9ydCB7IG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcnkgfSBmcm9tICcuLi9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgeyBtYXBTdGF0ZVRvUHJvcHNGYWN0b3J5IH0gZnJvbSAnLi4vY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IHsgbWVyZ2VQcm9wc0ZhY3RvcnkgfSBmcm9tICcuLi9jb25uZWN0L21lcmdlUHJvcHMnO1xuaW1wb3J0IHsgY3JlYXRlU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJy4uL3V0aWxzL3dhcm5pbmcnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IHsgbm90SW5pdGlhbGl6ZWQgfSBmcm9tICcuLi91dGlscy91c2VTeW5jRXh0ZXJuYWxTdG9yZSc7XG5sZXQgdXNlU3luY0V4dGVybmFsU3RvcmUgPSBub3RJbml0aWFsaXplZDtcbmV4cG9ydCBjb25zdCBpbml0aWFsaXplQ29ubmVjdCA9IGZuID0+IHtcbiAgdXNlU3luY0V4dGVybmFsU3RvcmUgPSBmbjtcbn07IC8vIERlZmluZSBzb21lIGNvbnN0YW50IGFycmF5cyBqdXN0IHRvIGF2b2lkIHJlLWNyZWF0aW5nIHRoZXNlXG5cbmNvbnN0IEVNUFRZX0FSUkFZID0gW251bGwsIDBdO1xuY29uc3QgTk9fU1VCU0NSSVBUSU9OX0FSUkFZID0gW251bGwsIG51bGxdOyAvLyBBdHRlbXB0cyB0byBzdHJpbmdpZnkgd2hhdGV2ZXIgbm90LXJlYWxseS1hLWNvbXBvbmVudCB2YWx1ZSB3ZSB3ZXJlIGdpdmVuXG4vLyBmb3IgbG9nZ2luZyBpbiBhbiBlcnJvciBtZXNzYWdlXG5cbmNvbnN0IHN0cmluZ2lmeUNvbXBvbmVudCA9IENvbXAgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcblxuLy8gVGhpcyBpcyBcImp1c3RcIiBhIGB1c2VMYXlvdXRFZmZlY3RgLCBidXQgd2l0aCB0d28gbW9kaWZpY2F0aW9uczpcbi8vIC0gd2UgbmVlZCB0byBmYWxsIGJhY2sgdG8gYHVzZUVmZmVjdGAgaW4gU1NSIHRvIGF2b2lkIGFubm95aW5nIHdhcm5pbmdzXG4vLyAtIHdlIGV4dHJhY3QgdGhpcyB0byBhIHNlcGFyYXRlIGZ1bmN0aW9uIHRvIGF2b2lkIGNsb3Npbmcgb3ZlciB2YWx1ZXNcbi8vICAgYW5kIGNhdXNpbmcgbWVtb3J5IGxlYWtzXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoZWZmZWN0RnVuYywgZWZmZWN0QXJncywgZGVwZW5kZW5jaWVzKSB7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4gZWZmZWN0RnVuYyguLi5lZmZlY3RBcmdzKSwgZGVwZW5kZW5jaWVzKTtcbn0gLy8gRWZmZWN0IGNhbGxiYWNrLCBleHRyYWN0ZWQ6IGFzc2lnbiB0aGUgbGF0ZXN0IHByb3BzIHZhbHVlcyB0byByZWZzIGZvciBsYXRlciB1c2FnZVxuXG5cbmZ1bmN0aW9uIGNhcHR1cmVXcmFwcGVyUHJvcHMobGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIC8vIGFjdHVhbENoaWxkUHJvcHM6IHVua25vd24sXG5jaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzKSB7XG4gIC8vIFdlIHdhbnQgdG8gY2FwdHVyZSB0aGUgd3JhcHBlciBwcm9wcyBhbmQgY2hpbGQgcHJvcHMgd2UgdXNlZCBmb3IgbGF0ZXIgY29tcGFyaXNvbnNcbiAgbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50ID0gd3JhcHBlclByb3BzO1xuICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH1cbn0gLy8gRWZmZWN0IGNhbGxiYWNrLCBleHRyYWN0ZWQ6IHN1YnNjcmliZSB0byB0aGUgUmVkdXggc3RvcmUgb3IgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IsXG4vLyBjaGVjayBmb3IgdXBkYXRlcyBhZnRlciBkaXNwYXRjaGVkIGFjdGlvbnMsIGFuZCB0cmlnZ2VyIHJlLXJlbmRlcnMuXG5cblxuZnVuY3Rpb24gc3Vic2NyaWJlVXBkYXRlcyhzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBpc01vdW50ZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIC8vIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2g6IFJlYWN0LkRpc3BhdGNoPGFueT4sXG5hZGRpdGlvbmFsU3Vic2NyaWJlTGlzdGVuZXIpIHtcbiAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiAoKSA9PiB7fTsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgbGV0IGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIGxldCBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgY29uc3QgY2hlY2tGb3JVcGRhdGVzID0gKCkgPT4ge1xuICAgIGlmIChkaWRVbnN1YnNjcmliZSB8fCAhaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICByZXR1cm47XG4gICAgfSAvLyBUT0RPIFdlJ3JlIGN1cnJlbnRseSBjYWxsaW5nIGdldFN0YXRlIG91cnNlbHZlcyBoZXJlLCByYXRoZXIgdGhhbiBsZXR0aW5nIGB1U0VTYCBkbyBpdFxuXG5cbiAgICBjb25zdCBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBsZXQgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQWN0dWFsbHkgcnVuIHRoZSBzZWxlY3RvciB3aXRoIHRoZSBtb3N0IHJlY2VudCBzdG9yZSBzdGF0ZSBhbmQgd3JhcHBlciBwcm9wc1xuICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZVxuICAgICAgbmV3Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHNTZWxlY3RvcihsYXRlc3RTdG9yZVN0YXRlLCBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yID0gZTtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IGU7XG4gICAgfVxuXG4gICAgaWYgKCFlcnJvcikge1xuICAgICAgbGFzdFRocm93bkVycm9yID0gbnVsbDtcbiAgICB9IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBoYXZlbid0IGNoYW5nZWQsIG5vdGhpbmcgdG8gZG8gaGVyZSAtIGNhc2NhZGUgdGhlIHN1YnNjcmlwdGlvbiB1cGRhdGVcblxuXG4gICAgaWYgKG5ld0NoaWxkUHJvcHMgPT09IGxhc3RDaGlsZFByb3BzLmN1cnJlbnQpIHtcbiAgICAgIGlmICghcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCkge1xuICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNhdmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IGNoaWxkIHByb3BzLiAgTm90ZSB0aGF0IHdlIHRyYWNrIHRoZSBcImNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlXCJcbiAgICAgIC8vIGFzIGEgcmVmIGluc3RlYWQgb2YgYSB1c2VTdGF0ZS91c2VSZWR1Y2VyIGJlY2F1c2Ugd2UgbmVlZCBhIHdheSB0byBkZXRlcm1pbmUgaWYgdGhhdCB2YWx1ZSBoYXNcbiAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLiAgSWYgdGhpcyB3ZW50IGludG8gdXNlU3RhdGUvdXNlUmVkdWNlciwgd2UgY291bGRuJ3QgY2xlYXIgb3V0IHRoZSB2YWx1ZSB3aXRob3V0XG4gICAgICAvLyBmb3JjaW5nIGFub3RoZXIgcmUtcmVuZGVyLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7IC8vIFRPRE8gVGhpcyBpcyBoYWNreSBhbmQgbm90IGhvdyBgdVNFU2AgaXMgbWVhbnQgdG8gYmUgdXNlZFxuICAgICAgLy8gVHJpZ2dlciB0aGUgUmVhY3QgYHVzZVN5bmNFeHRlcm5hbFN0b3JlYCBzdWJzY3JpYmVyXG5cbiAgICAgIGFkZGl0aW9uYWxTdWJzY3JpYmVMaXN0ZW5lcigpO1xuICAgIH1cbiAgfTsgLy8gQWN0dWFsbHkgc3Vic2NyaWJlIHRvIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3RvciAob3Igc3RvcmUpXG5cblxuICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpOyAvLyBQdWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUgYWZ0ZXIgZmlyc3QgcmVuZGVyIGluIGNhc2UgdGhlIHN0b3JlIGhhc1xuICAvLyBjaGFuZ2VkIHNpbmNlIHdlIGJlZ2FuLlxuXG4gIGNoZWNrRm9yVXBkYXRlcygpO1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlV3JhcHBlciA9ICgpID0+IHtcbiAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuXG4gICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xufSAvLyBSZWR1Y2VyIGluaXRpYWwgc3RhdGUgY3JlYXRpb24gZm9yIG91ciB1cGRhdGUgcmVkdWNlclxuXG5cbmNvbnN0IGluaXRTdGF0ZVVwZGF0ZXMgPSAoKSA9PiBFTVBUWV9BUlJBWTtcblxuZnVuY3Rpb24gc3RyaWN0RXF1YWwoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn1cbi8qKlxyXG4gKiBJbmZlcnMgdGhlIHR5cGUgb2YgcHJvcHMgdGhhdCBhIGNvbm5lY3RvciB3aWxsIGluamVjdCBpbnRvIGEgY29tcG9uZW50LlxyXG4gKi9cblxuXG5sZXQgaGFzV2FybmVkQWJvdXREZXByZWNhdGVkUHVyZU9wdGlvbiA9IGZhbHNlO1xuLyoqXHJcbiAqIENvbm5lY3RzIGEgUmVhY3QgY29tcG9uZW50IHRvIGEgUmVkdXggc3RvcmUuXHJcbiAqXHJcbiAqIC0gV2l0aG91dCBhcmd1bWVudHMsIGp1c3Qgd3JhcHMgdGhlIGNvbXBvbmVudCwgd2l0aG91dCBjaGFuZ2luZyB0aGUgYmVoYXZpb3IgLyBwcm9wc1xyXG4gKlxyXG4gKiAtIElmIDIgcGFyYW1zIGFyZSBwYXNzZWQgKDNyZCBwYXJhbSwgbWVyZ2VQcm9wcywgaXMgc2tpcHBlZCksIGRlZmF1bHQgYmVoYXZpb3JcclxuICogaXMgdG8gb3ZlcnJpZGUgb3duUHJvcHMgKGFzIHN0YXRlZCBpbiB0aGUgZG9jcyksIHNvIHdoYXQgcmVtYWlucyBpcyBldmVyeXRoaW5nIHRoYXQnc1xyXG4gKiBub3QgYSBzdGF0ZSBvciBkaXNwYXRjaCBwcm9wXHJcbiAqXHJcbiAqIC0gV2hlbiAzcmQgcGFyYW0gaXMgcGFzc2VkLCB3ZSBkb24ndCBrbm93IGlmIG93blByb3BzIHByb3BhZ2F0ZSBhbmQgd2hldGhlciB0aGV5XHJcbiAqIHNob3VsZCBiZSB2YWxpZCBjb21wb25lbnQgcHJvcHMsIGJlY2F1c2UgaXQgZGVwZW5kcyBvbiBtZXJnZVByb3BzIGltcGxlbWVudGF0aW9uLlxyXG4gKiBBcyBzdWNoLCBpdCBpcyB0aGUgdXNlcidzIHJlc3BvbnNpYmlsaXR5IHRvIGV4dGVuZCBvd25Qcm9wcyBpbnRlcmZhY2UgZnJvbSBzdGF0ZSBvclxyXG4gKiBkaXNwYXRjaCBwcm9wcyBvciBib3RoIHdoZW4gYXBwbGljYWJsZVxyXG4gKlxyXG4gKiBAcGFyYW0gbWFwU3RhdGVUb1Byb3BzIEEgZnVuY3Rpb24gdGhhdCBleHRyYWN0cyB2YWx1ZXMgZnJvbSBzdGF0ZVxyXG4gKiBAcGFyYW0gbWFwRGlzcGF0Y2hUb1Byb3BzIFNldHVwIGZvciBkaXNwYXRjaGluZyBhY3Rpb25zXHJcbiAqIEBwYXJhbSBtZXJnZVByb3BzIE9wdGlvbmFsIGNhbGxiYWNrIHRvIG1lcmdlIHN0YXRlIGFuZCBkaXNwYXRjaCBwcm9wcyB0b2dldGhlclxyXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIGZvciBjb25maWd1cmluZyB0aGUgY29ubmVjdGlvblxyXG4gKlxyXG4gKi9cblxuZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywge1xuICAvLyBUaGUgYHB1cmVgIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkLCBzbyBUUyBkb2Vzbid0IGxpa2UgdXMgZGVzdHJ1Y3R1cmluZyB0aGlzIHRvIGNoZWNrIGl0cyBleGlzdGVuY2UuXG4gIC8vIEB0cy1pZ25vcmVcbiAgcHVyZSxcbiAgYXJlU3RhdGVzRXF1YWwgPSBzdHJpY3RFcXVhbCxcbiAgYXJlT3duUHJvcHNFcXVhbCA9IHNoYWxsb3dFcXVhbCxcbiAgYXJlU3RhdGVQcm9wc0VxdWFsID0gc2hhbGxvd0VxdWFsLFxuICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gc2hhbGxvd0VxdWFsLFxuICAvLyB1c2UgUmVhY3QncyBmb3J3YXJkUmVmIHRvIGV4cG9zZSBhIHJlZiBvZiB0aGUgd3JhcHBlZCBjb21wb25lbnRcbiAgZm9yd2FyZFJlZiA9IGZhbHNlLFxuICAvLyB0aGUgY29udGV4dCBjb25zdW1lciB0byB1c2VcbiAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0XG59ID0ge30pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAocHVyZSAhPT0gdW5kZWZpbmVkICYmICFoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRQdXJlT3B0aW9uKSB7XG4gICAgICBoYXNXYXJuZWRBYm91dERlcHJlY2F0ZWRQdXJlT3B0aW9uID0gdHJ1ZTtcbiAgICAgIHdhcm5pbmcoJ1RoZSBgcHVyZWAgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWQuIGBjb25uZWN0YCBpcyBub3cgYWx3YXlzIGEgXCJwdXJlL21lbW9pemVkXCIgY29tcG9uZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgQ29udGV4dCA9IGNvbnRleHQ7XG4gIGNvbnN0IGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHNGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcyk7XG4gIGNvbnN0IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3J5KG1hcERpc3BhdGNoVG9Qcm9wcyk7XG4gIGNvbnN0IGluaXRNZXJnZVByb3BzID0gbWVyZ2VQcm9wc0ZhY3RvcnkobWVyZ2VQcm9wcyk7XG4gIGNvbnN0IHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyA9IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKTtcblxuICBjb25zdCB3cmFwV2l0aENvbm5lY3QgPSBXcmFwcGVkQ29tcG9uZW50ID0+IHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKFdyYXBwZWRDb21wb25lbnQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBtdXN0IHBhc3MgYSBjb21wb25lbnQgdG8gdGhlIGZ1bmN0aW9uIHJldHVybmVkIGJ5IGNvbm5lY3QuIEluc3RlYWQgcmVjZWl2ZWQgJHtzdHJpbmdpZnlDb21wb25lbnQoV3JhcHBlZENvbXBvbmVudCl9YCk7XG4gICAgfVxuXG4gICAgY29uc3Qgd3JhcHBlZENvbXBvbmVudE5hbWUgPSBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICBjb25zdCBkaXNwbGF5TmFtZSA9IGBDb25uZWN0KCR7d3JhcHBlZENvbXBvbmVudE5hbWV9KWA7XG4gICAgY29uc3Qgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyA9IHtcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcyxcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWUsXG4gICAgICBXcmFwcGVkQ29tcG9uZW50LFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wcyxcbiAgICAgIGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICBjb25zdCBbcHJvcHNDb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIERpc3Rpbmd1aXNoIGJldHdlZW4gYWN0dWFsIFwiZGF0YVwiIHByb3BzIHRoYXQgd2VyZSBwYXNzZWQgdG8gdGhlIHdyYXBwZXIgY29tcG9uZW50LFxuICAgICAgICAvLyBhbmQgdmFsdWVzIG5lZWRlZCB0byBjb250cm9sIGJlaGF2aW9yIChmb3J3YXJkZWQgcmVmcywgYWx0ZXJuYXRlIGNvbnRleHQgaW5zdGFuY2VzKS5cbiAgICAgICAgLy8gVG8gbWFpbnRhaW4gdGhlIHdyYXBwZXJQcm9wcyBvYmplY3QgcmVmZXJlbmNlLCBtZW1vaXplIHRoaXMgZGVzdHJ1Y3R1cmluZy5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgfSA9IHByb3BzLFxuICAgICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkKTtcblxuICAgICAgICByZXR1cm4gW3Byb3BzLmNvbnRleHQsIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc107XG4gICAgICB9LCBbcHJvcHNdKTtcbiAgICAgIGNvbnN0IENvbnRleHRUb1VzZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlzQ29udGV4dENvbnN1bWVyKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpKSA/IHByb3BzQ29udGV4dCA6IENvbnRleHQ7XG4gICAgICB9LCBbcHJvcHNDb250ZXh0LCBDb250ZXh0XSk7IC8vIFJldHJpZXZlIHRoZSBzdG9yZSBhbmQgYW5jZXN0b3Igc3Vic2NyaXB0aW9uIHZpYSBjb250ZXh0LCBpZiBhdmFpbGFibGVcblxuICAgICAgY29uc3QgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChDb250ZXh0VG9Vc2UpOyAvLyBUaGUgc3RvcmUgX211c3RfIGV4aXN0IGFzIGVpdGhlciBhIHByb3Agb3IgaW4gY29udGV4dC5cbiAgICAgIC8vIFdlJ2xsIGNoZWNrIHRvIHNlZSBpZiBpdCBfbG9va3NfIGxpa2UgYSBSZWR1eCBzdG9yZSBmaXJzdC5cbiAgICAgIC8vIFRoaXMgYWxsb3dzIHVzIHRvIHBhc3MgdGhyb3VnaCBhIGBzdG9yZWAgcHJvcCB0aGF0IGlzIGp1c3QgYSBwbGFpbiB2YWx1ZS5cblxuICAgICAgY29uc3QgZGlkU3RvcmVDb21lRnJvbVByb3BzID0gQm9vbGVhbihwcm9wcy5zdG9yZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5nZXRTdGF0ZSkgJiYgQm9vbGVhbihwcm9wcy5zdG9yZS5kaXNwYXRjaCk7XG4gICAgICBjb25zdCBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9IEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZS5zdG9yZSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFkaWRTdG9yZUNvbWVGcm9tUHJvcHMgJiYgIWRpZFN0b3JlQ29tZUZyb21Db250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgXCJzdG9yZVwiIGluIHRoZSBjb250ZXh0IG9mIGAgKyBgXCIke2Rpc3BsYXlOYW1lfVwiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCBgICsgYG9yIHBhc3MgYSBjdXN0b20gUmVhY3QgY29udGV4dCBwcm92aWRlciB0byA8UHJvdmlkZXI+IGFuZCB0aGUgY29ycmVzcG9uZGluZyBgICsgYFJlYWN0IGNvbnRleHQgY29uc3VtZXIgdG8gJHtkaXNwbGF5TmFtZX0gaW4gY29ubmVjdCBvcHRpb25zLmApO1xuICAgICAgfSAvLyBCYXNlZCBvbiB0aGUgcHJldmlvdXMgY2hlY2ssIG9uZSBvZiB0aGVzZSBtdXN0IGJlIHRydWVcblxuXG4gICAgICBjb25zdCBzdG9yZSA9IGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHByb3BzLnN0b3JlIDogY29udGV4dFZhbHVlLnN0b3JlO1xuICAgICAgY29uc3QgZ2V0U2VydmVyU3RhdGUgPSBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA/IGNvbnRleHRWYWx1ZS5nZXRTZXJ2ZXJTdGF0ZSA6IHN0b3JlLmdldFN0YXRlO1xuICAgICAgY29uc3QgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbygoKSA9PiB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRTZWxlY3RvckZhY3Rvcnkoc3RvcmUuZGlzcGF0Y2gsIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMpO1xuICAgICAgfSwgW3N0b3JlXSk7XG4gICAgICBjb25zdCBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTsgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cblxuICAgICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBjcmVhdGVTdWJzY3JpcHRpb24oc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA/IHVuZGVmaW5lZCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIGNvbnN0IG5vdGlmeU5lc3RlZFN1YnMgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3Vicy5iaW5kKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIHJldHVybiBbc3Vic2NyaXB0aW9uLCBub3RpZnlOZXN0ZWRTdWJzXTtcbiAgICAgIH0sIFtzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzLCBjb250ZXh0VmFsdWVdKTsgLy8gRGV0ZXJtaW5lIHdoYXQge3N0b3JlLCBzdWJzY3JpcHRpb259IHZhbHVlIHNob3VsZCBiZSBwdXQgaW50byBuZXN0ZWQgY29udGV4dCwgaWYgbmVjZXNzYXJ5LFxuICAgICAgLy8gYW5kIG1lbW9pemUgdGhhdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSBjb250ZXh0IHVwZGF0ZXMuXG5cbiAgICAgIGNvbnN0IG92ZXJyaWRkZW5Db250ZXh0VmFsdWUgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKGRpZFN0b3JlQ29tZUZyb21Qcm9wcykge1xuICAgICAgICAgIC8vIFRoaXMgY29tcG9uZW50IGlzIGRpcmVjdGx5IHN1YnNjcmliZWQgdG8gYSBzdG9yZSBmcm9tIHByb3BzLlxuICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgZGVzY2VuZGFudHMgcmVhZGluZyBmcm9tIHRoaXMgc3RvcmUgLSBwYXNzIGRvd24gd2hhdGV2ZXJcbiAgICAgICAgICAvLyB0aGUgZXhpc3RpbmcgY29udGV4dCB2YWx1ZSBpcyBmcm9tIHRoZSBuZWFyZXN0IGNvbm5lY3RlZCBhbmNlc3Rvci5cbiAgICAgICAgICByZXR1cm4gY29udGV4dFZhbHVlO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcHV0IHRoaXMgY29tcG9uZW50J3Mgc3Vic2NyaXB0aW9uIGluc3RhbmNlIGludG8gY29udGV4dCwgc28gdGhhdFxuICAgICAgICAvLyBjb25uZWN0ZWQgZGVzY2VuZGFudHMgd29uJ3QgdXBkYXRlIHVudGlsIGFmdGVyIHRoaXMgY29tcG9uZW50IGlzIGRvbmVcblxuXG4gICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dFZhbHVlLCB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gU2V0IHVwIHJlZnMgdG8gY29vcmRpbmF0ZSB2YWx1ZXMgYmV0d2VlbiB0aGUgc3Vic2NyaXB0aW9uIGVmZmVjdCBhbmQgdGhlIHJlbmRlciBsb2dpY1xuXG4gICAgICBjb25zdCBsYXN0Q2hpbGRQcm9wcyA9IHVzZVJlZigpO1xuICAgICAgY29uc3QgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgY29uc3QgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSA9IHVzZVJlZigpO1xuICAgICAgY29uc3QgcmVuZGVySXNTY2hlZHVsZWQgPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgY29uc3QgaXNQcm9jZXNzaW5nRGlzcGF0Y2ggPSB1c2VSZWYoZmFsc2UpO1xuICAgICAgY29uc3QgaXNNb3VudGVkID0gdXNlUmVmKGZhbHNlKTtcbiAgICAgIGNvbnN0IGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IgPSB1c2VSZWYoKTtcbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpc01vdW50ZWQuY3VycmVudCA9IHRydWU7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgIH0sIFtdKTtcbiAgICAgIGNvbnN0IGFjdHVhbENoaWxkUHJvcHNTZWxlY3RvciA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICBjb25zdCBzZWxlY3RvciA9ICgpID0+IHtcbiAgICAgICAgICAvLyBUcmlja3kgbG9naWMgaGVyZTpcbiAgICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgICAgLy8gLSBIb3dldmVyLCB3ZSBtYXkgaGF2ZSBnb3R0ZW4gbmV3IHdyYXBwZXIgcHJvcHMgYWZ0ZXIgdGhhdFxuICAgICAgICAgIC8vIElmIHdlIGhhdmUgbmV3IGNoaWxkIHByb3BzLCBhbmQgdGhlIHNhbWUgd3JhcHBlciBwcm9wcywgd2Uga25vdyB3ZSBzaG91bGQgdXNlIHRoZSBuZXcgY2hpbGQgcHJvcHMgYXMtaXMuXG4gICAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgICAvLyBTbywgd2UnbGwgdXNlIHRoZSBjaGlsZCBwcm9wcyBmcm9tIHN0b3JlIHVwZGF0ZSBvbmx5IGlmIHRoZSB3cmFwcGVyIHByb3BzIGFyZSB0aGUgc2FtZSBhcyBsYXN0IHRpbWUuXG4gICAgICAgICAgaWYgKGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCAmJiB3cmFwcGVyUHJvcHMgPT09IGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgICB9IC8vIFRPRE8gV2UncmUgcmVhZGluZyB0aGUgc3RvcmUgZGlyZWN0bHkgaW4gcmVuZGVyKCkgaGVyZS4gQmFkIGlkZWE/XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIGxpa2VseSBjYXVzZSBCYWQgVGhpbmdzIChUTSkgdG8gaGFwcGVuIGluIENvbmN1cnJlbnQgTW9kZS5cbiAgICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAgIC8vIHRvIGRldGVybWluZSB3aGF0IHRoZSBjaGlsZCBwcm9wcyBzaG91bGQgYmUuXG5cblxuICAgICAgICAgIHJldHVybiBjaGlsZFByb3BzU2VsZWN0b3Ioc3RvcmUuZ2V0U3RhdGUoKSwgd3JhcHBlclByb3BzKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgICB9LCBbc3RvcmUsIHdyYXBwZXJQcm9wc10pOyAvLyBXZSBuZWVkIHRoaXMgdG8gZXhlY3V0ZSBzeW5jaHJvbm91c2x5IGV2ZXJ5IHRpbWUgd2UgcmUtcmVuZGVyLiBIb3dldmVyLCBSZWFjdCB3YXJuc1xuICAgICAgLy8gYWJvdXQgdXNlTGF5b3V0RWZmZWN0IGluIFNTUiwgc28gd2UgdHJ5IHRvIGRldGVjdCBlbnZpcm9ubWVudCBhbmQgZmFsbCBiYWNrIHRvXG4gICAgICAvLyBqdXN0IHVzZUVmZmVjdCBpbnN0ZWFkIHRvIGF2b2lkIHRoZSB3YXJuaW5nLCBzaW5jZSBuZWl0aGVyIHdpbGwgcnVuIGFueXdheS5cblxuICAgICAgY29uc3Qgc3Vic2NyaWJlRm9yUmVhY3QgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgY29uc3Qgc3Vic2NyaWJlID0gcmVhY3RMaXN0ZW5lciA9PiB7XG4gICAgICAgICAgaWYgKCFzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7fTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3Vic2NyaWJlVXBkYXRlcyhzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBjaGlsZFByb3BzU2VsZWN0b3IsIGxhc3RXcmFwcGVyUHJvcHMsIGxhc3RDaGlsZFByb3BzLCByZW5kZXJJc1NjaGVkdWxlZCwgaXNNb3VudGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCByZWFjdExpc3RlbmVyKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc3Vic2NyaWJlO1xuICAgICAgfSwgW3N1YnNjcmlwdGlvbl0pO1xuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKGNhcHR1cmVXcmFwcGVyUHJvcHMsIFtsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vic10pO1xuICAgICAgbGV0IGFjdHVhbENoaWxkUHJvcHM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGFjdHVhbENoaWxkUHJvcHMgPSB1c2VTeW5jRXh0ZXJuYWxTdG9yZSggLy8gVE9ETyBXZSdyZSBwYXNzaW5nIHRocm91Z2ggYSBiaWcgd3JhcHBlciB0aGF0IGRvZXMgYSBidW5jaCBvZiBleHRyYSBzaWRlIGVmZmVjdHMgYmVzaWRlcyBzdWJzY3JpYmluZ1xuICAgICAgICBzdWJzY3JpYmVGb3JSZWFjdCwgLy8gVE9ETyBUaGlzIGlzIGluY3JlZGlibHkgaGFja3kuIFdlJ3ZlIGFscmVhZHkgcHJvY2Vzc2VkIHRoZSBzdG9yZSB1cGRhdGUgYW5kIGNhbGN1bGF0ZWQgbmV3IGNoaWxkIHByb3BzLFxuICAgICAgICAvLyBUT0RPIGFuZCB3ZSdyZSBqdXN0IHBhc3NpbmcgdGhhdCB0aHJvdWdoIHNvIGl0IHRyaWdnZXJzIGEgcmUtcmVuZGVyIGZvciB1cyByYXRoZXIgdGhhbiByZWx5aW5nIG9uIGB1U0VTYC5cbiAgICAgICAgYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yLCBnZXRTZXJ2ZXJTdGF0ZSA/ICgpID0+IGNoaWxkUHJvcHNTZWxlY3RvcihnZXRTZXJ2ZXJTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpIDogYWN0dWFsQ2hpbGRQcm9wc1NlbGVjdG9yKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICAgICAgO1xuICAgICAgICAgIGVyci5tZXNzYWdlICs9IGBcXG5UaGUgZXJyb3IgbWF5IGJlIGNvcnJlbGF0ZWQgd2l0aCB0aGlzIHByZXZpb3VzIGVycm9yOlxcbiR7bGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50LnN0YWNrfVxcblxcbmA7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlcnI7XG4gICAgICB9XG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gICAgICB9KTsgLy8gTm93IHRoYXQgYWxsIHRoYXQncyBkb25lLCB3ZSBjYW4gZmluYWxseSB0cnkgdG8gYWN0dWFsbHkgcmVuZGVyIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAgICAvLyBXZSBtZW1vaXplIHRoZSBlbGVtZW50cyBmb3IgdGhlIHJlbmRlcmVkIGNoaWxkIGNvbXBvbmVudCBhcyBhbiBvcHRpbWl6YXRpb24uXG5cbiAgICAgIGNvbnN0IHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgICAgcmVmOiByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmXG4gICAgICAgICAgfSkpXG4gICAgICAgICk7XG4gICAgICB9LCBbcmVhY3RSZWR1eEZvcndhcmRlZFJlZiwgV3JhcHBlZENvbXBvbmVudCwgYWN0dWFsQ2hpbGRQcm9wc10pOyAvLyBJZiBSZWFjdCBzZWVzIHRoZSBleGFjdCBzYW1lIGVsZW1lbnQgcmVmZXJlbmNlIGFzIGxhc3QgdGltZSwgaXQgYmFpbHMgb3V0IG9mIHJlLXJlbmRlcmluZ1xuICAgICAgLy8gdGhhdCBjaGlsZCwgc2FtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBSZWFjdC5tZW1vKCkgb3IgcmV0dXJuZWQgZmFsc2UgZnJvbSBzaG91bGRDb21wb25lbnRVcGRhdGUuXG5cbiAgICAgIGNvbnN0IHJlbmRlcmVkQ2hpbGQgPSB1c2VNZW1vKCgpID0+IHtcbiAgICAgICAgaWYgKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykge1xuICAgICAgICAgIC8vIElmIHRoaXMgY29tcG9uZW50IGlzIHN1YnNjcmliZWQgdG8gc3RvcmUgdXBkYXRlcywgd2UgbmVlZCB0byBwYXNzIGl0cyBvd25cbiAgICAgICAgICAvLyBzdWJzY3JpcHRpb24gaW5zdGFuY2UgZG93biB0byBvdXIgZGVzY2VuZGFudHMuIFRoYXQgbWVhbnMgcmVuZGVyaW5nIHRoZSBzYW1lXG4gICAgICAgICAgLy8gQ29udGV4dCBpbnN0YW5jZSwgYW5kIHB1dHRpbmcgYSBkaWZmZXJlbnQgdmFsdWUgaW50byB0aGUgY29udGV4dC5cbiAgICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dFRvVXNlLlByb3ZpZGVyLCB7XG4gICAgICAgICAgICB2YWx1ZTogb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZVxuICAgICAgICAgIH0sIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgfSwgW0NvbnRleHRUb1VzZSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50LCBvdmVycmlkZGVuQ29udGV4dFZhbHVlXSk7XG4gICAgICByZXR1cm4gcmVuZGVyZWRDaGlsZDtcbiAgICB9XG5cbiAgICBjb25zdCBfQ29ubmVjdCA9IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKTtcblxuICAgIC8vIEFkZCBhIGhhY2t5IGNhc3QgdG8gZ2V0IHRoZSByaWdodCBvdXRwdXQgdHlwZVxuICAgIGNvbnN0IENvbm5lY3QgPSBfQ29ubmVjdDtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBDb25uZWN0RnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICBjb25zdCBfZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbm5lY3QsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgICAgIHJlYWN0UmVkdXhGb3J3YXJkZWRSZWY6IHJlZlxuICAgICAgICB9KSk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZm9yd2FyZGVkID0gX2ZvcndhcmRlZDtcbiAgICAgIGZvcndhcmRlZC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICAgICAgZm9yd2FyZGVkLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgICAgcmV0dXJuIGhvaXN0U3RhdGljcyhmb3J3YXJkZWQsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBob2lzdFN0YXRpY3MoQ29ubmVjdCwgV3JhcHBlZENvbXBvbmVudCk7XG4gIH07XG5cbiAgcmV0dXJuIHdyYXBXaXRoQ29ubmVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdDsiLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQpIHtcbiAgY29uc3QgdXNlUmVkdXhDb250ZXh0ID0gLy8gQHRzLWlnbm9yZVxuICBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRSZWR1eENvbnRleHQgOiAoKSA9PiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU3RvcmUoKSB7XG4gICAgY29uc3Qge1xuICAgICAgc3RvcmVcbiAgICB9ID0gdXNlUmVkdXhDb250ZXh0KCk7IC8vIEB0cy1pZ25vcmVcblxuICAgIHJldHVybiBzdG9yZTtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBzdG9yZS5cclxuICpcclxuICogQHJldHVybnMge2FueX0gdGhlIHJlZHV4IHN0b3JlXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqXHJcbiAqIGltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlU3RvcmUgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IEV4YW1wbGVDb21wb25lbnQgPSAoKSA9PiB7XHJcbiAqICAgY29uc3Qgc3RvcmUgPSB1c2VTdG9yZSgpXHJcbiAqICAgcmV0dXJuIDxkaXY+e3N0b3JlLmdldFN0YXRlKCl9PC9kaXY+XHJcbiAqIH1cclxuICovXG5cbmV4cG9ydCBjb25zdCB1c2VTdG9yZSA9IC8qI19fUFVSRV9fKi9jcmVhdGVTdG9yZUhvb2soKTsiLCJpbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VTdG9yZSBhcyB1c2VEZWZhdWx0U3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vdXNlU3RvcmUnO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaEhvb2soY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0KSB7XG4gIGNvbnN0IHVzZVN0b3JlID0gLy8gQHRzLWlnbm9yZVxuICBjb250ZXh0ID09PSBSZWFjdFJlZHV4Q29udGV4dCA/IHVzZURlZmF1bHRTdG9yZSA6IGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZURpc3BhdGNoKCkge1xuICAgIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKTsgLy8gQHRzLWlnbm9yZVxuXG4gICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IGBkaXNwYXRjaGAgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl8ZnVuY3Rpb259IHJlZHV4IHN0b3JlJ3MgYGRpc3BhdGNoYCBmdW5jdGlvblxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCdcclxuICogaW1wb3J0IHsgdXNlRGlzcGF0Y2ggfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAqICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXHJcbiAqICAgY29uc3QgaW5jcmVhc2VDb3VudGVyID0gdXNlQ2FsbGJhY2soKCkgPT4gZGlzcGF0Y2goeyB0eXBlOiAnaW5jcmVhc2UtY291bnRlcicgfSksIFtdKVxyXG4gKiAgIHJldHVybiAoXHJcbiAqICAgICA8ZGl2PlxyXG4gKiAgICAgICA8c3Bhbj57dmFsdWV9PC9zcGFuPlxyXG4gKiAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2luY3JlYXNlQ291bnRlcn0+SW5jcmVhc2UgY291bnRlcjwvYnV0dG9uPlxyXG4gKiAgICAgPC9kaXY+XHJcbiAqICAgKVxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgY29uc3QgdXNlRGlzcGF0Y2ggPSAvKiNfX1BVUkVfXyovY3JlYXRlRGlzcGF0Y2hIb29rKCk7IiwiLy8gVGhlIHByaW1hcnkgZW50cnkgcG9pbnQgYXNzdW1lcyB3ZSdyZSB3b3JraW5nIHdpdGggc3RhbmRhcmQgUmVhY3RET00vUk4sIGJ1dFxuLy8gb2xkZXIgdmVyc2lvbnMgdGhhdCBkbyBub3QgaW5jbHVkZSBgdXNlU3luY0V4dGVybmFsU3RvcmVgIChSZWFjdCAxNi45IC0gMTcueCkuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoZSB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBjb21wYXQgc2hpbSBpcyBuZWVkZWQuXG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSB9IGZyb20gJ3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlL3NoaW0nO1xuaW1wb3J0IHsgdXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IgfSBmcm9tICd1c2Utc3luYy1leHRlcm5hbC1zdG9yZS9zaGltL3dpdGgtc2VsZWN0b3InO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IGluaXRpYWxpemVVc2VTZWxlY3RvciB9IGZyb20gJy4vaG9va3MvdXNlU2VsZWN0b3InO1xuaW1wb3J0IHsgaW5pdGlhbGl6ZUNvbm5lY3QgfSBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdCc7XG5pbml0aWFsaXplVXNlU2VsZWN0b3IodXNlU3luY0V4dGVybmFsU3RvcmVXaXRoU2VsZWN0b3IpO1xuaW5pdGlhbGl6ZUNvbm5lY3QodXNlU3luY0V4dGVybmFsU3RvcmUpOyAvLyBFbmFibGUgYmF0Y2hlZCB1cGRhdGVzIGluIG91ciBzdWJzY3JpcHRpb25zIGZvciB1c2Vcbi8vIHdpdGggc3RhbmRhcmQgUmVhY3QgcmVuZGVyZXJzIChSZWFjdERPTSwgUmVhY3QgTmF0aXZlKVxuXG5zZXRCYXRjaChiYXRjaCk7XG5leHBvcnQgeyBiYXRjaCB9O1xuZXhwb3J0ICogZnJvbSAnLi9leHBvcnRzJzsiLCJmdW5jdGlvbiBzdHlsaXNfbWluIChXKSB7XG4gIGZ1bmN0aW9uIE0oZCwgYywgZSwgaCwgYSkge1xuICAgIGZvciAodmFyIG0gPSAwLCBiID0gMCwgdiA9IDAsIG4gPSAwLCBxLCBnLCB4ID0gMCwgSyA9IDAsIGssIHUgPSBrID0gcSA9IDAsIGwgPSAwLCByID0gMCwgSSA9IDAsIHQgPSAwLCBCID0gZS5sZW5ndGgsIEogPSBCIC0gMSwgeSwgZiA9ICcnLCBwID0gJycsIEYgPSAnJywgRyA9ICcnLCBDOyBsIDwgQjspIHtcbiAgICAgIGcgPSBlLmNoYXJDb2RlQXQobCk7XG4gICAgICBsID09PSBKICYmIDAgIT09IGIgKyBuICsgdiArIG0gJiYgKDAgIT09IGIgJiYgKGcgPSA0NyA9PT0gYiA/IDEwIDogNDcpLCBuID0gdiA9IG0gPSAwLCBCKyssIEorKyk7XG5cbiAgICAgIGlmICgwID09PSBiICsgbiArIHYgKyBtKSB7XG4gICAgICAgIGlmIChsID09PSBKICYmICgwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpLCAwIDwgZi50cmltKCkubGVuZ3RoKSkge1xuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgIGNhc2UgNTk6XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGYgKz0gZS5jaGFyQXQobCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZyA9IDU5O1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpdGNoIChnKSB7XG4gICAgICAgICAgY2FzZSAxMjM6XG4gICAgICAgICAgICBmID0gZi50cmltKCk7XG4gICAgICAgICAgICBxID0gZi5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgayA9IDE7XG5cbiAgICAgICAgICAgIGZvciAodCA9ICsrbDsgbCA8IEI7KSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMTIzOlxuICAgICAgICAgICAgICAgICAgaysrO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICAgICAgICAgIGstLTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZyA9IGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0NzpcbiAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHUgPSBsICsgMTsgdSA8IEo7ICsrdSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGUuY2hhckNvZGVBdCh1KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDIgPT09IGcgJiYgNDIgPT09IGUuY2hhckNvZGVBdCh1IC0gMSkgJiYgbCArIDIgIT09IHUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoNDcgPT09IGcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHUgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHU7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA5MTpcbiAgICAgICAgICAgICAgICAgIGcrKztcblxuICAgICAgICAgICAgICAgIGNhc2UgNDA6XG4gICAgICAgICAgICAgICAgICBnKys7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgICAgICBmb3IgKDsgbCsrIDwgSiAmJiBlLmNoYXJDb2RlQXQobCkgIT09IGc7KSB7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICgwID09PSBrKSBicmVhaztcbiAgICAgICAgICAgICAgbCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrID0gZS5zdWJzdHJpbmcodCwgbCk7XG4gICAgICAgICAgICAwID09PSBxICYmIChxID0gKGYgPSBmLnJlcGxhY2UoY2EsICcnKS50cmltKCkpLmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKHEpIHtcbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICAwIDwgciAmJiAoZiA9IGYucmVwbGFjZShOLCAnJykpO1xuICAgICAgICAgICAgICAgIGcgPSBmLmNoYXJDb2RlQXQoMSk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTAwOlxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDk6XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgIGNhc2UgNDU6XG4gICAgICAgICAgICAgICAgICAgIHIgPSBjO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgciA9IE87XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgayA9IE0oYywgciwgaywgZywgYSArIDEpO1xuICAgICAgICAgICAgICAgIHQgPSBrLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAwIDwgQSAmJiAociA9IFgoTywgZiwgSSksIEMgPSBIKDMsIGssIHIsIGMsIEQsIHosIHQsIGcsIGEsIGgpLCBmID0gci5qb2luKCcnKSwgdm9pZCAwICE9PSBDICYmIDAgPT09ICh0ID0gKGsgPSBDLnRyaW0oKSkubGVuZ3RoKSAmJiAoZyA9IDAsIGsgPSAnJykpO1xuICAgICAgICAgICAgICAgIGlmICgwIDwgdCkgc3dpdGNoIChnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYucmVwbGFjZShkYSwgZWEpO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIDEwMDpcbiAgICAgICAgICAgICAgICAgIGNhc2UgMTA5OlxuICAgICAgICAgICAgICAgICAgY2FzZSA0NTpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyAneycgKyBrICsgJ30nO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgICAgICAgICAgICAgIGYgPSBmLnJlcGxhY2UoZmEsICckMSAkMicpO1xuICAgICAgICAgICAgICAgICAgICBrID0gZiArICd7JyArIGsgKyAnfSc7XG4gICAgICAgICAgICAgICAgICAgIGsgPSAxID09PSB3IHx8IDIgPT09IHcgJiYgTCgnQCcgKyBrLCAzKSA/ICdALXdlYmtpdC0nICsgayArICdAJyArIGsgOiAnQCcgKyBrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgayA9IGYgKyBrLCAxMTIgPT09IGggJiYgKGsgPSAocCArPSBrLCAnJykpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBrID0gJyc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBrID0gTShjLCBYKGMsIGYsIEkpLCBrLCBoLCBhICsgMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEYgKz0gaztcbiAgICAgICAgICAgIGsgPSBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxMjU6XG4gICAgICAgICAgY2FzZSA1OTpcbiAgICAgICAgICAgIGYgPSAoMCA8IHIgPyBmLnJlcGxhY2UoTiwgJycpIDogZikudHJpbSgpO1xuICAgICAgICAgICAgaWYgKDEgPCAodCA9IGYubGVuZ3RoKSkgc3dpdGNoICgwID09PSB1ICYmIChxID0gZi5jaGFyQ29kZUF0KDApLCA0NSA9PT0gcSB8fCA5NiA8IHEgJiYgMTIzID4gcSkgJiYgKHQgPSAoZiA9IGYucmVwbGFjZSgnICcsICc6JykpLmxlbmd0aCksIDAgPCBBICYmIHZvaWQgMCAhPT0gKEMgPSBIKDEsIGYsIGMsIGQsIEQsIHosIHAubGVuZ3RoLCBoLCBhLCBoKSkgJiYgMCA9PT0gKHQgPSAoZiA9IEMudHJpbSgpKS5sZW5ndGgpICYmIChmID0gJ1xceDAwXFx4MDAnKSwgcSA9IGYuY2hhckNvZGVBdCgwKSwgZyA9IGYuY2hhckNvZGVBdCgxKSwgcSkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSA2NDpcbiAgICAgICAgICAgICAgICBpZiAoMTA1ID09PSBnIHx8IDk5ID09PSBnKSB7XG4gICAgICAgICAgICAgICAgICBHICs9IGYgKyBlLmNoYXJBdChsKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIDU4ICE9PSBmLmNoYXJDb2RlQXQodCAtIDEpICYmIChwICs9IFAoZiwgcSwgZywgZi5jaGFyQ29kZUF0KDIpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJID0gciA9IHUgPSBxID0gMDtcbiAgICAgICAgICAgIGYgPSAnJztcbiAgICAgICAgICAgIGcgPSBlLmNoYXJDb2RlQXQoKytsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGcpIHtcbiAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICA0NyA9PT0gYiA/IGIgPSAwIDogMCA9PT0gMSArIHEgJiYgMTA3ICE9PSBoICYmIDAgPCBmLmxlbmd0aCAmJiAociA9IDEsIGYgKz0gJ1xceDAwJyk7XG4gICAgICAgICAgMCA8IEEgKiBZICYmIEgoMCwgZiwgYywgZCwgRCwgeiwgcC5sZW5ndGgsIGgsIGEsIGgpO1xuICAgICAgICAgIHogPSAxO1xuICAgICAgICAgIEQrKztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU5OlxuICAgICAgICBjYXNlIDEyNTpcbiAgICAgICAgICBpZiAoMCA9PT0gYiArIG4gKyB2ICsgbSkge1xuICAgICAgICAgICAgeisrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgeisrO1xuICAgICAgICAgIHkgPSBlLmNoYXJBdChsKTtcblxuICAgICAgICAgIHN3aXRjaCAoZykge1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgY2FzZSAzMjpcbiAgICAgICAgICAgICAgaWYgKDAgPT09IG4gKyBtICsgYikgc3dpdGNoICh4KSB7XG4gICAgICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgICBjYXNlIDU4OlxuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBjYXNlIDMyOlxuICAgICAgICAgICAgICAgICAgeSA9ICcnO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgMzIgIT09IGcgJiYgKHkgPSAnICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgIHkgPSAnXFxcXDAnO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgeSA9ICdcXFxcZic7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICB5ID0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMzg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAociA9IEkgPSAxLCB5ID0gJ1xcZicgKyB5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMTA4OlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtICsgRSAmJiAwIDwgdSkgc3dpdGNoIChsIC0gdSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIDExMiA9PT0geCAmJiA1OCA9PT0gZS5jaGFyQ29kZUF0KGwgLSAzKSAmJiAoRSA9IHgpO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgMTExID09PSBLICYmIChFID0gSyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNTg6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiAodSA9IGwpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0NDpcbiAgICAgICAgICAgICAgMCA9PT0gYiArIHYgKyBuICsgbSAmJiAociA9IDEsIHkgKz0gJ1xccicpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICAgIDAgPT09IGIgJiYgKG4gPSBuID09PSBnID8gMCA6IDAgPT09IG4gPyBnIDogbik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDkxOlxuICAgICAgICAgICAgICAwID09PSBuICsgYiArIHYgJiYgbSsrO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA5MzpcbiAgICAgICAgICAgICAgMCA9PT0gbiArIGIgKyB2ICYmIG0tLTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNDE6XG4gICAgICAgICAgICAgIDAgPT09IG4gKyBiICsgbSAmJiB2LS07XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgICBpZiAoMCA9PT0gbiArIGIgKyBtKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPT09IHEpIHN3aXRjaCAoMiAqIHggKyAzICogSykge1xuICAgICAgICAgICAgICAgICAgY2FzZSA1MzM6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBxID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdisrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgNjQ6XG4gICAgICAgICAgICAgIDAgPT09IGIgKyB2ICsgbiArIG0gKyB1ICsgayAmJiAoayA9IDEpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgICAgIGlmICghKDAgPCBuICsgbSArIHYpKSBzd2l0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICBzd2l0Y2ggKDIgKiBnICsgMyAqIGUuY2hhckNvZGVBdChsICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyMzU6XG4gICAgICAgICAgICAgICAgICAgICAgYiA9IDQ3O1xuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjIwOlxuICAgICAgICAgICAgICAgICAgICAgIHQgPSBsLCBiID0gNDI7XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0MjpcbiAgICAgICAgICAgICAgICAgIDQ3ID09PSBnICYmIDQyID09PSB4ICYmIHQgKyAyICE9PSBsICYmICgzMyA9PT0gZS5jaGFyQ29kZUF0KHQgKyAyKSAmJiAocCArPSBlLnN1YnN0cmluZyh0LCBsICsgMSkpLCB5ID0gJycsIGIgPSAwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIDAgPT09IGIgJiYgKGYgKz0geSk7XG4gICAgICB9XG5cbiAgICAgIEsgPSB4O1xuICAgICAgeCA9IGc7XG4gICAgICBsKys7XG4gICAgfVxuXG4gICAgdCA9IHAubGVuZ3RoO1xuXG4gICAgaWYgKDAgPCB0KSB7XG4gICAgICByID0gYztcbiAgICAgIGlmICgwIDwgQSAmJiAoQyA9IEgoMiwgcCwgciwgZCwgRCwgeiwgdCwgaCwgYSwgaCksIHZvaWQgMCAhPT0gQyAmJiAwID09PSAocCA9IEMpLmxlbmd0aCkpIHJldHVybiBHICsgcCArIEY7XG4gICAgICBwID0gci5qb2luKCcsJykgKyAneycgKyBwICsgJ30nO1xuXG4gICAgICBpZiAoMCAhPT0gdyAqIEUpIHtcbiAgICAgICAgMiAhPT0gdyB8fCBMKHAsIDIpIHx8IChFID0gMCk7XG5cbiAgICAgICAgc3dpdGNoIChFKSB7XG4gICAgICAgICAgY2FzZSAxMTE6XG4gICAgICAgICAgICBwID0gcC5yZXBsYWNlKGhhLCAnOi1tb3otJDEnKSArIHA7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTEyOlxuICAgICAgICAgICAgcCA9IHAucmVwbGFjZShRLCAnOjotd2Via2l0LWlucHV0LSQxJykgKyBwLnJlcGxhY2UoUSwgJzo6LW1vei0kMScpICsgcC5yZXBsYWNlKFEsICc6LW1zLWlucHV0LSQxJykgKyBwO1xuICAgICAgICB9XG5cbiAgICAgICAgRSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIEcgKyBwICsgRjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFgoZCwgYywgZSkge1xuICAgIHZhciBoID0gYy50cmltKCkuc3BsaXQoaWEpO1xuICAgIGMgPSBoO1xuICAgIHZhciBhID0gaC5sZW5ndGgsXG4gICAgICAgIG0gPSBkLmxlbmd0aDtcblxuICAgIHN3aXRjaCAobSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgY2FzZSAxOlxuICAgICAgICB2YXIgYiA9IDA7XG5cbiAgICAgICAgZm9yIChkID0gMCA9PT0gbSA/ICcnIDogZFswXSArICcgJzsgYiA8IGE7ICsrYikge1xuICAgICAgICAgIGNbYl0gPSBaKGQsIGNbYl0sIGUpLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YXIgdiA9IGIgPSAwO1xuXG4gICAgICAgIGZvciAoYyA9IFtdOyBiIDwgYTsgKytiKSB7XG4gICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBtOyArK24pIHtcbiAgICAgICAgICAgIGNbdisrXSA9IFooZFtuXSArICcgJywgaFtiXSwgZSkudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIGM7XG4gIH1cblxuICBmdW5jdGlvbiBaKGQsIGMsIGUpIHtcbiAgICB2YXIgaCA9IGMuY2hhckNvZGVBdCgwKTtcbiAgICAzMyA+IGggJiYgKGggPSAoYyA9IGMudHJpbSgpKS5jaGFyQ29kZUF0KDApKTtcblxuICAgIHN3aXRjaCAoaCkge1xuICAgICAgY2FzZSAzODpcbiAgICAgICAgcmV0dXJuIGMucmVwbGFjZShGLCAnJDEnICsgZC50cmltKCkpO1xuXG4gICAgICBjYXNlIDU4OlxuICAgICAgICByZXR1cm4gZC50cmltKCkgKyBjLnJlcGxhY2UoRiwgJyQxJyArIGQudHJpbSgpKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKDAgPCAxICogZSAmJiAwIDwgYy5pbmRleE9mKCdcXGYnKSkgcmV0dXJuIGMucmVwbGFjZShGLCAoNTggPT09IGQuY2hhckNvZGVBdCgwKSA/ICcnIDogJyQxJykgKyBkLnRyaW0oKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGQgKyBjO1xuICB9XG5cbiAgZnVuY3Rpb24gUChkLCBjLCBlLCBoKSB7XG4gICAgdmFyIGEgPSBkICsgJzsnLFxuICAgICAgICBtID0gMiAqIGMgKyAzICogZSArIDQgKiBoO1xuXG4gICAgaWYgKDk0NCA9PT0gbSkge1xuICAgICAgZCA9IGEuaW5kZXhPZignOicsIDkpICsgMTtcbiAgICAgIHZhciBiID0gYS5zdWJzdHJpbmcoZCwgYS5sZW5ndGggLSAxKS50cmltKCk7XG4gICAgICBiID0gYS5zdWJzdHJpbmcoMCwgZCkudHJpbSgpICsgYiArICc7JztcbiAgICAgIHJldHVybiAxID09PSB3IHx8IDIgPT09IHcgJiYgTChiLCAxKSA/ICctd2Via2l0LScgKyBiICsgYiA6IGI7XG4gICAgfVxuXG4gICAgaWYgKDAgPT09IHcgfHwgMiA9PT0gdyAmJiAhTChhLCAxKSkgcmV0dXJuIGE7XG5cbiAgICBzd2l0Y2ggKG0pIHtcbiAgICAgIGNhc2UgMTAxNTpcbiAgICAgICAgcmV0dXJuIDk3ID09PSBhLmNoYXJDb2RlQXQoMTApID8gJy13ZWJraXQtJyArIGEgKyBhIDogYTtcblxuICAgICAgY2FzZSA5NTE6XG4gICAgICAgIHJldHVybiAxMTYgPT09IGEuY2hhckNvZGVBdCgzKSA/ICctd2Via2l0LScgKyBhICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgOTYzOlxuICAgICAgICByZXR1cm4gMTEwID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLXdlYmtpdC0nICsgYSArIGEgOiBhO1xuXG4gICAgICBjYXNlIDEwMDk6XG4gICAgICAgIGlmICgxMDAgIT09IGEuY2hhckNvZGVBdCg0KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTY5OlxuICAgICAgY2FzZSA5NDI6XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgOTc4OlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArIGE7XG5cbiAgICAgIGNhc2UgMTAxOTpcbiAgICAgIGNhc2UgOTgzOlxuICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1vei0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDg4MzpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoOCkpIHJldHVybiAnLXdlYmtpdC0nICsgYSArIGE7XG4gICAgICAgIGlmICgwIDwgYS5pbmRleE9mKCdpbWFnZS1zZXQoJywgMTEpKSByZXR1cm4gYS5yZXBsYWNlKGphLCAnJDEtd2Via2l0LSQyJykgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5MzI6XG4gICAgICAgIGlmICg0NSA9PT0gYS5jaGFyQ29kZUF0KDQpKSBzd2l0Y2ggKGEuY2hhckNvZGVBdCg1KSkge1xuICAgICAgICAgIGNhc2UgMTAzOlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LWJveC0nICsgYS5yZXBsYWNlKCctZ3JvdycsICcnKSArICctd2Via2l0LScgKyBhICsgJy1tcy0nICsgYS5yZXBsYWNlKCdncm93JywgJ3Bvc2l0aXZlJykgKyBhO1xuXG4gICAgICAgICAgY2FzZSAxMTU6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ3NocmluaycsICduZWdhdGl2ZScpICsgYTtcblxuICAgICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgICByZXR1cm4gJy13ZWJraXQtJyArIGEgKyAnLW1zLScgKyBhLnJlcGxhY2UoJ2Jhc2lzJywgJ3ByZWZlcnJlZC1zaXplJykgKyBhO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGEgKyBhO1xuXG4gICAgICBjYXNlIDk2NDpcbiAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LScgKyBhICsgYTtcblxuICAgICAgY2FzZSAxMDIzOlxuICAgICAgICBpZiAoOTkgIT09IGEuY2hhckNvZGVBdCg4KSkgYnJlYWs7XG4gICAgICAgIGIgPSBhLnN1YnN0cmluZyhhLmluZGV4T2YoJzonLCAxNSkpLnJlcGxhY2UoJ2ZsZXgtJywgJycpLnJlcGxhY2UoJ3NwYWNlLWJldHdlZW4nLCAnanVzdGlmeScpO1xuICAgICAgICByZXR1cm4gJy13ZWJraXQtYm94LXBhY2snICsgYiArICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LXBhY2snICsgYiArIGE7XG5cbiAgICAgIGNhc2UgMTAwNTpcbiAgICAgICAgcmV0dXJuIGthLnRlc3QoYSkgPyBhLnJlcGxhY2UoYWEsICc6LXdlYmtpdC0nKSArIGEucmVwbGFjZShhYSwgJzotbW96LScpICsgYSA6IGE7XG5cbiAgICAgIGNhc2UgMWUzOlxuICAgICAgICBiID0gYS5zdWJzdHJpbmcoMTMpLnRyaW0oKTtcbiAgICAgICAgYyA9IGIuaW5kZXhPZignLScpICsgMTtcblxuICAgICAgICBzd2l0Y2ggKGIuY2hhckNvZGVBdCgwKSArIGIuY2hhckNvZGVBdChjKSkge1xuICAgICAgICAgIGNhc2UgMjI2OlxuICAgICAgICAgICAgYiA9IGEucmVwbGFjZShHLCAndGInKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyMzI6XG4gICAgICAgICAgICBiID0gYS5yZXBsYWNlKEcsICd0Yi1ybCcpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIyMDpcbiAgICAgICAgICAgIGIgPSBhLnJlcGxhY2UoRywgJ2xyJyk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtJyArIGIgKyBhO1xuXG4gICAgICBjYXNlIDEwMTc6XG4gICAgICAgIGlmICgtMSA9PT0gYS5pbmRleE9mKCdzdGlja3knLCA5KSkgYnJlYWs7XG5cbiAgICAgIGNhc2UgOTc1OlxuICAgICAgICBjID0gKGEgPSBkKS5sZW5ndGggLSAxMDtcbiAgICAgICAgYiA9ICgzMyA9PT0gYS5jaGFyQ29kZUF0KGMpID8gYS5zdWJzdHJpbmcoMCwgYykgOiBhKS5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JywgNykgKyAxKS50cmltKCk7XG5cbiAgICAgICAgc3dpdGNoIChtID0gYi5jaGFyQ29kZUF0KDApICsgKGIuY2hhckNvZGVBdCg3KSB8IDApKSB7XG4gICAgICAgICAgY2FzZSAyMDM6XG4gICAgICAgICAgICBpZiAoMTExID4gYi5jaGFyQ29kZUF0KDgpKSBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTE1OlxuICAgICAgICAgICAgYSA9IGEucmVwbGFjZShiLCAnLXdlYmtpdC0nICsgYikgKyAnOycgKyBhO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDIwNzpcbiAgICAgICAgICBjYXNlIDEwMjpcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoYiwgJy13ZWJraXQtJyArICgxMDIgPCBtID8gJ2lubGluZS0nIDogJycpICsgJ2JveCcpICsgJzsnICsgYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArICc7JyArIGEucmVwbGFjZShiLCAnLW1zLScgKyBiICsgJ2JveCcpICsgJzsnICsgYTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhICsgJzsnO1xuXG4gICAgICBjYXNlIDkzODpcbiAgICAgICAgaWYgKDQ1ID09PSBhLmNoYXJDb2RlQXQoNSkpIHN3aXRjaCAoYS5jaGFyQ29kZUF0KDYpKSB7XG4gICAgICAgICAgY2FzZSAxMDU6XG4gICAgICAgICAgICByZXR1cm4gYiA9IGEucmVwbGFjZSgnLWl0ZW1zJywgJycpLCAnLXdlYmtpdC0nICsgYSArICctd2Via2l0LWJveC0nICsgYiArICctbXMtZmxleC0nICsgYiArIGE7XG5cbiAgICAgICAgICBjYXNlIDExNTpcbiAgICAgICAgICAgIHJldHVybiAnLXdlYmtpdC0nICsgYSArICctbXMtZmxleC1pdGVtLScgKyBhLnJlcGxhY2UoYmEsICcnKSArIGE7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICctd2Via2l0LScgKyBhICsgJy1tcy1mbGV4LWxpbmUtcGFjaycgKyBhLnJlcGxhY2UoJ2FsaWduLWNvbnRlbnQnLCAnJykucmVwbGFjZShiYSwgJycpICsgYTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NzM6XG4gICAgICBjYXNlIDk4OTpcbiAgICAgICAgaWYgKDQ1ICE9PSBhLmNoYXJDb2RlQXQoMykgfHwgMTIyID09PSBhLmNoYXJDb2RlQXQoNCkpIGJyZWFrO1xuXG4gICAgICBjYXNlIDkzMTpcbiAgICAgIGNhc2UgOTUzOlxuICAgICAgICBpZiAoITAgPT09IGxhLnRlc3QoZCkpIHJldHVybiAxMTUgPT09IChiID0gZC5zdWJzdHJpbmcoZC5pbmRleE9mKCc6JykgKyAxKSkuY2hhckNvZGVBdCgwKSA/IFAoZC5yZXBsYWNlKCdzdHJldGNoJywgJ2ZpbGwtYXZhaWxhYmxlJyksIGMsIGUsIGgpLnJlcGxhY2UoJzpmaWxsLWF2YWlsYWJsZScsICc6c3RyZXRjaCcpIDogYS5yZXBsYWNlKGIsICctd2Via2l0LScgKyBiKSArIGEucmVwbGFjZShiLCAnLW1vei0nICsgYi5yZXBsYWNlKCdmaWxsLScsICcnKSkgKyBhO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5NjI6XG4gICAgICAgIGlmIChhID0gJy13ZWJraXQtJyArIGEgKyAoMTAyID09PSBhLmNoYXJDb2RlQXQoNSkgPyAnLW1zLScgKyBhIDogJycpICsgYSwgMjExID09PSBlICsgaCAmJiAxMDUgPT09IGEuY2hhckNvZGVBdCgxMykgJiYgMCA8IGEuaW5kZXhPZigndHJhbnNmb3JtJywgMTApKSByZXR1cm4gYS5zdWJzdHJpbmcoMCwgYS5pbmRleE9mKCc7JywgMjcpICsgMSkucmVwbGFjZShtYSwgJyQxLXdlYmtpdC0kMicpICsgYTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEwoZCwgYykge1xuICAgIHZhciBlID0gZC5pbmRleE9mKDEgPT09IGMgPyAnOicgOiAneycpLFxuICAgICAgICBoID0gZC5zdWJzdHJpbmcoMCwgMyAhPT0gYyA/IGUgOiAxMCk7XG4gICAgZSA9IGQuc3Vic3RyaW5nKGUgKyAxLCBkLmxlbmd0aCAtIDEpO1xuICAgIHJldHVybiBSKDIgIT09IGMgPyBoIDogaC5yZXBsYWNlKG5hLCAnJDEnKSwgZSwgYyk7XG4gIH1cblxuICBmdW5jdGlvbiBlYShkLCBjKSB7XG4gICAgdmFyIGUgPSBQKGMsIGMuY2hhckNvZGVBdCgwKSwgYy5jaGFyQ29kZUF0KDEpLCBjLmNoYXJDb2RlQXQoMikpO1xuICAgIHJldHVybiBlICE9PSBjICsgJzsnID8gZS5yZXBsYWNlKG9hLCAnIG9yICgkMSknKS5zdWJzdHJpbmcoNCkgOiAnKCcgKyBjICsgJyknO1xuICB9XG5cbiAgZnVuY3Rpb24gSChkLCBjLCBlLCBoLCBhLCBtLCBiLCB2LCBuLCBxKSB7XG4gICAgZm9yICh2YXIgZyA9IDAsIHggPSBjLCB3OyBnIDwgQTsgKytnKSB7XG4gICAgICBzd2l0Y2ggKHcgPSBTW2ddLmNhbGwoQiwgZCwgeCwgZSwgaCwgYSwgbSwgYiwgdiwgbiwgcSkpIHtcbiAgICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICAgIGNhc2UgITE6XG4gICAgICAgIGNhc2UgITA6XG4gICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHggPSB3O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh4ICE9PSBjKSByZXR1cm4geDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFQoZCkge1xuICAgIHN3aXRjaCAoZCkge1xuICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICBjYXNlIG51bGw6XG4gICAgICAgIEEgPSBTLmxlbmd0aCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGQpIFNbQSsrXSA9IGQ7ZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiBkKSBmb3IgKHZhciBjID0gMCwgZSA9IGQubGVuZ3RoOyBjIDwgZTsgKytjKSB7XG4gICAgICAgICAgVChkW2NdKTtcbiAgICAgICAgfSBlbHNlIFkgPSAhIWQgfCAwO1xuICAgIH1cblxuICAgIHJldHVybiBUO1xuICB9XG5cbiAgZnVuY3Rpb24gVShkKSB7XG4gICAgZCA9IGQucHJlZml4O1xuICAgIHZvaWQgMCAhPT0gZCAmJiAoUiA9IG51bGwsIGQgPyAnZnVuY3Rpb24nICE9PSB0eXBlb2YgZCA/IHcgPSAxIDogKHcgPSAyLCBSID0gZCkgOiB3ID0gMCk7XG4gICAgcmV0dXJuIFU7XG4gIH1cblxuICBmdW5jdGlvbiBCKGQsIGMpIHtcbiAgICB2YXIgZSA9IGQ7XG4gICAgMzMgPiBlLmNoYXJDb2RlQXQoMCkgJiYgKGUgPSBlLnRyaW0oKSk7XG4gICAgViA9IGU7XG4gICAgZSA9IFtWXTtcblxuICAgIGlmICgwIDwgQSkge1xuICAgICAgdmFyIGggPSBIKC0xLCBjLCBlLCBlLCBELCB6LCAwLCAwLCAwLCAwKTtcbiAgICAgIHZvaWQgMCAhPT0gaCAmJiAnc3RyaW5nJyA9PT0gdHlwZW9mIGggJiYgKGMgPSBoKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IE0oTywgZSwgYywgMCwgMCk7XG4gICAgMCA8IEEgJiYgKGggPSBIKC0yLCBhLCBlLCBlLCBELCB6LCBhLmxlbmd0aCwgMCwgMCwgMCksIHZvaWQgMCAhPT0gaCAmJiAoYSA9IGgpKTtcbiAgICBWID0gJyc7XG4gICAgRSA9IDA7XG4gICAgeiA9IEQgPSAxO1xuICAgIHJldHVybiBhO1xuICB9XG5cbiAgdmFyIGNhID0gL15cXDArL2csXG4gICAgICBOID0gL1tcXDBcXHJcXGZdL2csXG4gICAgICBhYSA9IC86ICovZyxcbiAgICAgIGthID0gL3pvb3xncmEvLFxuICAgICAgbWEgPSAvKFssOiBdKSh0cmFuc2Zvcm0pL2csXG4gICAgICBpYSA9IC8sXFxyKz8vZyxcbiAgICAgIEYgPSAvKFtcXHRcXHJcXG4gXSkqXFxmPyYvZyxcbiAgICAgIGZhID0gL0Aoa1xcdyspXFxzKihcXFMqKVxccyovLFxuICAgICAgUSA9IC86OihwbGFjZSkvZyxcbiAgICAgIGhhID0gLzoocmVhZC1vbmx5KS9nLFxuICAgICAgRyA9IC9bc3ZoXVxcdystW3RibHJdezJ9LyxcbiAgICAgIGRhID0gL1xcKFxccyooLiopXFxzKlxcKS9nLFxuICAgICAgb2EgPSAvKFtcXHNcXFNdKj8pOy9nLFxuICAgICAgYmEgPSAvLXNlbGZ8ZmxleC0vZyxcbiAgICAgIG5hID0gL1teXSo/KDpbcnBdW2VsXWFbXFx3LV0rKVteXSovLFxuICAgICAgbGEgPSAvc3RyZXRjaHw6XFxzKlxcdytcXC0oPzpjb250ZXxhdmFpbCkvLFxuICAgICAgamEgPSAvKFteLV0pKGltYWdlLXNldFxcKCkvLFxuICAgICAgeiA9IDEsXG4gICAgICBEID0gMSxcbiAgICAgIEUgPSAwLFxuICAgICAgdyA9IDEsXG4gICAgICBPID0gW10sXG4gICAgICBTID0gW10sXG4gICAgICBBID0gMCxcbiAgICAgIFIgPSBudWxsLFxuICAgICAgWSA9IDAsXG4gICAgICBWID0gJyc7XG4gIEIudXNlID0gVDtcbiAgQi5zZXQgPSBVO1xuICB2b2lkIDAgIT09IFcgJiYgVShXKTtcbiAgcmV0dXJuIEI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxpc19taW47XG4iLCJ2YXIgdW5pdGxlc3NLZXlzID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogMSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IDEsXG4gIGJvcmRlckltYWdlU2xpY2U6IDEsXG4gIGJvcmRlckltYWdlV2lkdGg6IDEsXG4gIGJveEZsZXg6IDEsXG4gIGJveEZsZXhHcm91cDogMSxcbiAgYm94T3JkaW5hbEdyb3VwOiAxLFxuICBjb2x1bW5Db3VudDogMSxcbiAgY29sdW1uczogMSxcbiAgZmxleDogMSxcbiAgZmxleEdyb3c6IDEsXG4gIGZsZXhQb3NpdGl2ZTogMSxcbiAgZmxleFNocmluazogMSxcbiAgZmxleE5lZ2F0aXZlOiAxLFxuICBmbGV4T3JkZXI6IDEsXG4gIGdyaWRSb3c6IDEsXG4gIGdyaWRSb3dFbmQ6IDEsXG4gIGdyaWRSb3dTcGFuOiAxLFxuICBncmlkUm93U3RhcnQ6IDEsXG4gIGdyaWRDb2x1bW46IDEsXG4gIGdyaWRDb2x1bW5FbmQ6IDEsXG4gIGdyaWRDb2x1bW5TcGFuOiAxLFxuICBncmlkQ29sdW1uU3RhcnQ6IDEsXG4gIG1zR3JpZFJvdzogMSxcbiAgbXNHcmlkUm93U3BhbjogMSxcbiAgbXNHcmlkQ29sdW1uOiAxLFxuICBtc0dyaWRDb2x1bW5TcGFuOiAxLFxuICBmb250V2VpZ2h0OiAxLFxuICBsaW5lSGVpZ2h0OiAxLFxuICBvcGFjaXR5OiAxLFxuICBvcmRlcjogMSxcbiAgb3JwaGFuczogMSxcbiAgdGFiU2l6ZTogMSxcbiAgd2lkb3dzOiAxLFxuICB6SW5kZXg6IDEsXG4gIHpvb206IDEsXG4gIFdlYmtpdExpbmVDbGFtcDogMSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogMSxcbiAgZmxvb2RPcGFjaXR5OiAxLFxuICBzdG9wT3BhY2l0eTogMSxcbiAgc3Ryb2tlRGFzaGFycmF5OiAxLFxuICBzdHJva2VEYXNob2Zmc2V0OiAxLFxuICBzdHJva2VNaXRlcmxpbWl0OiAxLFxuICBzdHJva2VPcGFjaXR5OiAxLFxuICBzdHJva2VXaWR0aDogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdW5pdGxlc3NLZXlzO1xuIiwiZnVuY3Rpb24gbWVtb2l6ZShmbikge1xuICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZykge1xuICAgIGlmIChjYWNoZVthcmddID09PSB1bmRlZmluZWQpIGNhY2hlW2FyZ10gPSBmbihhcmcpO1xuICAgIHJldHVybiBjYWNoZVthcmddO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnQGVtb3Rpb24vbWVtb2l6ZSc7XG5cbnZhciByZWFjdFByb3BzUmVnZXggPSAvXigoY2hpbGRyZW58ZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8a2V5fHJlZnxhdXRvRm9jdXN8ZGVmYXVsdFZhbHVlfGRlZmF1bHRDaGVja2VkfGlubmVySFRNTHxzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmd8c3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nfHZhbHVlTGlua3xhYmJyfGFjY2VwdHxhY2NlcHRDaGFyc2V0fGFjY2Vzc0tleXxhY3Rpb258YWxsb3d8YWxsb3dVc2VyTWVkaWF8YWxsb3dQYXltZW50UmVxdWVzdHxhbGxvd0Z1bGxTY3JlZW58YWxsb3dUcmFuc3BhcmVuY3l8YWx0fGFzeW5jfGF1dG9Db21wbGV0ZXxhdXRvUGxheXxjYXB0dXJlfGNlbGxQYWRkaW5nfGNlbGxTcGFjaW5nfGNoYWxsZW5nZXxjaGFyU2V0fGNoZWNrZWR8Y2l0ZXxjbGFzc0lEfGNsYXNzTmFtZXxjb2xzfGNvbFNwYW58Y29udGVudHxjb250ZW50RWRpdGFibGV8Y29udGV4dE1lbnV8Y29udHJvbHN8Y29udHJvbHNMaXN0fGNvb3Jkc3xjcm9zc09yaWdpbnxkYXRhfGRhdGVUaW1lfGRlY29kaW5nfGRlZmF1bHR8ZGVmZXJ8ZGlyfGRpc2FibGVkfGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlfGRvd25sb2FkfGRyYWdnYWJsZXxlbmNUeXBlfGVudGVyS2V5SGludHxmb3JtfGZvcm1BY3Rpb258Zm9ybUVuY1R5cGV8Zm9ybU1ldGhvZHxmb3JtTm9WYWxpZGF0ZXxmb3JtVGFyZ2V0fGZyYW1lQm9yZGVyfGhlYWRlcnN8aGVpZ2h0fGhpZGRlbnxoaWdofGhyZWZ8aHJlZkxhbmd8aHRtbEZvcnxodHRwRXF1aXZ8aWR8aW5wdXRNb2RlfGludGVncml0eXxpc3xrZXlQYXJhbXN8a2V5VHlwZXxraW5kfGxhYmVsfGxhbmd8bGlzdHxsb2FkaW5nfGxvb3B8bG93fG1hcmdpbkhlaWdodHxtYXJnaW5XaWR0aHxtYXh8bWF4TGVuZ3RofG1lZGlhfG1lZGlhR3JvdXB8bWV0aG9kfG1pbnxtaW5MZW5ndGh8bXVsdGlwbGV8bXV0ZWR8bmFtZXxub25jZXxub1ZhbGlkYXRlfG9wZW58b3B0aW11bXxwYXR0ZXJufHBsYWNlaG9sZGVyfHBsYXlzSW5saW5lfHBvc3RlcnxwcmVsb2FkfHByb2ZpbGV8cmFkaW9Hcm91cHxyZWFkT25seXxyZWZlcnJlclBvbGljeXxyZWx8cmVxdWlyZWR8cmV2ZXJzZWR8cm9sZXxyb3dzfHJvd1NwYW58c2FuZGJveHxzY29wZXxzY29wZWR8c2Nyb2xsaW5nfHNlYW1sZXNzfHNlbGVjdGVkfHNoYXBlfHNpemV8c2l6ZXN8c2xvdHxzcGFufHNwZWxsQ2hlY2t8c3JjfHNyY0RvY3xzcmNMYW5nfHNyY1NldHxzdGFydHxzdGVwfHN0eWxlfHN1bW1hcnl8dGFiSW5kZXh8dGFyZ2V0fHRpdGxlfHRyYW5zbGF0ZXx0eXBlfHVzZU1hcHx2YWx1ZXx3aWR0aHx3bW9kZXx3cmFwfGFib3V0fGRhdGF0eXBlfGlubGlzdHxwcmVmaXh8cHJvcGVydHl8cmVzb3VyY2V8dHlwZW9mfHZvY2FifGF1dG9DYXBpdGFsaXplfGF1dG9Db3JyZWN0fGF1dG9TYXZlfGNvbG9yfGluY3JlbWVudGFsfGZhbGxiYWNrfGluZXJ0fGl0ZW1Qcm9wfGl0ZW1TY29wZXxpdGVtVHlwZXxpdGVtSUR8aXRlbVJlZnxvbnxvcHRpb258cmVzdWx0c3xzZWN1cml0eXx1bnNlbGVjdGFibGV8YWNjZW50SGVpZ2h0fGFjY3VtdWxhdGV8YWRkaXRpdmV8YWxpZ25tZW50QmFzZWxpbmV8YWxsb3dSZW9yZGVyfGFscGhhYmV0aWN8YW1wbGl0dWRlfGFyYWJpY0Zvcm18YXNjZW50fGF0dHJpYnV0ZU5hbWV8YXR0cmlidXRlVHlwZXxhdXRvUmV2ZXJzZXxhemltdXRofGJhc2VGcmVxdWVuY3l8YmFzZWxpbmVTaGlmdHxiYXNlUHJvZmlsZXxiYm94fGJlZ2lufGJpYXN8Ynl8Y2FsY01vZGV8Y2FwSGVpZ2h0fGNsaXB8Y2xpcFBhdGhVbml0c3xjbGlwUGF0aHxjbGlwUnVsZXxjb2xvckludGVycG9sYXRpb258Y29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyc3xjb2xvclByb2ZpbGV8Y29sb3JSZW5kZXJpbmd8Y29udGVudFNjcmlwdFR5cGV8Y29udGVudFN0eWxlVHlwZXxjdXJzb3J8Y3h8Y3l8ZHxkZWNlbGVyYXRlfGRlc2NlbnR8ZGlmZnVzZUNvbnN0YW50fGRpcmVjdGlvbnxkaXNwbGF5fGRpdmlzb3J8ZG9taW5hbnRCYXNlbGluZXxkdXJ8ZHh8ZHl8ZWRnZU1vZGV8ZWxldmF0aW9ufGVuYWJsZUJhY2tncm91bmR8ZW5kfGV4cG9uZW50fGV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWR8ZmlsbHxmaWxsT3BhY2l0eXxmaWxsUnVsZXxmaWx0ZXJ8ZmlsdGVyUmVzfGZpbHRlclVuaXRzfGZsb29kQ29sb3J8Zmxvb2RPcGFjaXR5fGZvY3VzYWJsZXxmb250RmFtaWx5fGZvbnRTaXplfGZvbnRTaXplQWRqdXN0fGZvbnRTdHJldGNofGZvbnRTdHlsZXxmb250VmFyaWFudHxmb250V2VpZ2h0fGZvcm1hdHxmcm9tfGZyfGZ4fGZ5fGcxfGcyfGdseXBoTmFtZXxnbHlwaE9yaWVudGF0aW9uSG9yaXpvbnRhbHxnbHlwaE9yaWVudGF0aW9uVmVydGljYWx8Z2x5cGhSZWZ8Z3JhZGllbnRUcmFuc2Zvcm18Z3JhZGllbnRVbml0c3xoYW5naW5nfGhvcml6QWR2WHxob3Jpek9yaWdpblh8aWRlb2dyYXBoaWN8aW1hZ2VSZW5kZXJpbmd8aW58aW4yfGludGVyY2VwdHxrfGsxfGsyfGszfGs0fGtlcm5lbE1hdHJpeHxrZXJuZWxVbml0TGVuZ3RofGtlcm5pbmd8a2V5UG9pbnRzfGtleVNwbGluZXN8a2V5VGltZXN8bGVuZ3RoQWRqdXN0fGxldHRlclNwYWNpbmd8bGlnaHRpbmdDb2xvcnxsaW1pdGluZ0NvbmVBbmdsZXxsb2NhbHxtYXJrZXJFbmR8bWFya2VyTWlkfG1hcmtlclN0YXJ0fG1hcmtlckhlaWdodHxtYXJrZXJVbml0c3xtYXJrZXJXaWR0aHxtYXNrfG1hc2tDb250ZW50VW5pdHN8bWFza1VuaXRzfG1hdGhlbWF0aWNhbHxtb2RlfG51bU9jdGF2ZXN8b2Zmc2V0fG9wYWNpdHl8b3BlcmF0b3J8b3JkZXJ8b3JpZW50fG9yaWVudGF0aW9ufG9yaWdpbnxvdmVyZmxvd3xvdmVybGluZVBvc2l0aW9ufG92ZXJsaW5lVGhpY2tuZXNzfHBhbm9zZTF8cGFpbnRPcmRlcnxwYXRoTGVuZ3RofHBhdHRlcm5Db250ZW50VW5pdHN8cGF0dGVyblRyYW5zZm9ybXxwYXR0ZXJuVW5pdHN8cG9pbnRlckV2ZW50c3xwb2ludHN8cG9pbnRzQXRYfHBvaW50c0F0WXxwb2ludHNBdFp8cHJlc2VydmVBbHBoYXxwcmVzZXJ2ZUFzcGVjdFJhdGlvfHByaW1pdGl2ZVVuaXRzfHJ8cmFkaXVzfHJlZlh8cmVmWXxyZW5kZXJpbmdJbnRlbnR8cmVwZWF0Q291bnR8cmVwZWF0RHVyfHJlcXVpcmVkRXh0ZW5zaW9uc3xyZXF1aXJlZEZlYXR1cmVzfHJlc3RhcnR8cmVzdWx0fHJvdGF0ZXxyeHxyeXxzY2FsZXxzZWVkfHNoYXBlUmVuZGVyaW5nfHNsb3BlfHNwYWNpbmd8c3BlY3VsYXJDb25zdGFudHxzcGVjdWxhckV4cG9uZW50fHNwZWVkfHNwcmVhZE1ldGhvZHxzdGFydE9mZnNldHxzdGREZXZpYXRpb258c3RlbWh8c3RlbXZ8c3RpdGNoVGlsZXN8c3RvcENvbG9yfHN0b3BPcGFjaXR5fHN0cmlrZXRocm91Z2hQb3NpdGlvbnxzdHJpa2V0aHJvdWdoVGhpY2tuZXNzfHN0cmluZ3xzdHJva2V8c3Ryb2tlRGFzaGFycmF5fHN0cm9rZURhc2hvZmZzZXR8c3Ryb2tlTGluZWNhcHxzdHJva2VMaW5lam9pbnxzdHJva2VNaXRlcmxpbWl0fHN0cm9rZU9wYWNpdHl8c3Ryb2tlV2lkdGh8c3VyZmFjZVNjYWxlfHN5c3RlbUxhbmd1YWdlfHRhYmxlVmFsdWVzfHRhcmdldFh8dGFyZ2V0WXx0ZXh0QW5jaG9yfHRleHREZWNvcmF0aW9ufHRleHRSZW5kZXJpbmd8dGV4dExlbmd0aHx0b3x0cmFuc2Zvcm18dTF8dTJ8dW5kZXJsaW5lUG9zaXRpb258dW5kZXJsaW5lVGhpY2tuZXNzfHVuaWNvZGV8dW5pY29kZUJpZGl8dW5pY29kZVJhbmdlfHVuaXRzUGVyRW18dkFscGhhYmV0aWN8dkhhbmdpbmd8dklkZW9ncmFwaGljfHZNYXRoZW1hdGljYWx8dmFsdWVzfHZlY3RvckVmZmVjdHx2ZXJzaW9ufHZlcnRBZHZZfHZlcnRPcmlnaW5YfHZlcnRPcmlnaW5ZfHZpZXdCb3h8dmlld1RhcmdldHx2aXNpYmlsaXR5fHdpZHRoc3x3b3JkU3BhY2luZ3x3cml0aW5nTW9kZXx4fHhIZWlnaHR8eDF8eDJ8eENoYW5uZWxTZWxlY3Rvcnx4bGlua0FjdHVhdGV8eGxpbmtBcmNyb2xlfHhsaW5rSHJlZnx4bGlua1JvbGV8eGxpbmtTaG93fHhsaW5rVGl0bGV8eGxpbmtUeXBlfHhtbEJhc2V8eG1sbnN8eG1sbnNYbGlua3x4bWxMYW5nfHhtbFNwYWNlfHl8eTF8eTJ8eUNoYW5uZWxTZWxlY3Rvcnx6fHpvb21BbmRQYW58Zm9yfGNsYXNzfGF1dG9mb2N1cyl8KChbRGRdW0FhXVtUdF1bQWFdfFtBYV1bUnJdW0lpXVtBYV18eCktLiopKSQvOyAvLyBodHRwczovL2VzYmVuY2guY29tL2JlbmNoLzViZmVlNjhhNGNkN2U2MDA5ZWY2MWQyM1xuXG52YXIgaXNQcm9wVmFsaWQgPSAvKiAjX19QVVJFX18gKi9tZW1vaXplKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHJldHVybiByZWFjdFByb3BzUmVnZXgudGVzdChwcm9wKSB8fCBwcm9wLmNoYXJDb2RlQXQoMCkgPT09IDExMVxuICAvKiBvICovXG4gICYmIHByb3AuY2hhckNvZGVBdCgxKSA9PT0gMTEwXG4gIC8qIG4gKi9cbiAgJiYgcHJvcC5jaGFyQ29kZUF0KDIpIDwgOTE7XG59XG4vKiBaKzEgKi9cbik7XG5cbmV4cG9ydCBkZWZhdWx0IGlzUHJvcFZhbGlkO1xuIiwiaW1wb3J0e3R5cGVPZiBhcyBlLGlzRWxlbWVudCBhcyB0LGlzVmFsaWRFbGVtZW50VHlwZSBhcyBufWZyb21cInJlYWN0LWlzXCI7aW1wb3J0IHIse3VzZVN0YXRlIGFzIG8sdXNlQ29udGV4dCBhcyBzLHVzZU1lbW8gYXMgaSx1c2VFZmZlY3QgYXMgYSx1c2VSZWYgYXMgYyxjcmVhdGVFbGVtZW50IGFzIHUsdXNlRGVidWdWYWx1ZSBhcyBsLHVzZUxheW91dEVmZmVjdCBhcyBkfWZyb21cInJlYWN0XCI7aW1wb3J0IGggZnJvbVwic2hhbGxvd2VxdWFsXCI7aW1wb3J0IHAgZnJvbVwiQGVtb3Rpb24vc3R5bGlzXCI7aW1wb3J0IGYgZnJvbVwiQGVtb3Rpb24vdW5pdGxlc3NcIjtpbXBvcnQgbSBmcm9tXCJAZW1vdGlvbi9pcy1wcm9wLXZhbGlkXCI7aW1wb3J0IHkgZnJvbVwiaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NcIjtmdW5jdGlvbiB2KCl7cmV0dXJuKHY9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIG49YXJndW1lbnRzW3RdO2Zvcih2YXIgciBpbiBuKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHIpJiYoZVtyXT1uW3JdKX1yZXR1cm4gZX0pLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj1bZVswXV0scj0wLG89dC5sZW5ndGg7cjxvO3IrPTEpbi5wdXNoKHRbcl0sZVtyKzFdKTtyZXR1cm4gbn0sUz1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9PXQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZcIltvYmplY3QgT2JqZWN0XVwiPT09KHQudG9TdHJpbmc/dC50b1N0cmluZygpOk9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSkmJiFlKHQpfSx3PU9iamVjdC5mcmVlemUoW10pLEU9T2JqZWN0LmZyZWV6ZSh7fSk7ZnVuY3Rpb24gYihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfWZ1bmN0aW9uIF8oZSl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJzdHJpbmdcIj09dHlwZW9mIGUmJmV8fGUuZGlzcGxheU5hbWV8fGUubmFtZXx8XCJDb21wb25lbnRcIn1mdW5jdGlvbiBOKGUpe3JldHVybiBlJiZcInN0cmluZ1wiPT10eXBlb2YgZS5zdHlsZWRDb21wb25lbnRJZH12YXIgQT1cInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2VzcyYmKHByb2Nlc3MuZW52LlJFQUNUX0FQUF9TQ19BVFRSfHxwcm9jZXNzLmVudi5TQ19BVFRSKXx8XCJkYXRhLXN0eWxlZFwiLEM9XCI1LjMuNVwiLEk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmXCJIVE1MRWxlbWVudFwiaW4gd2luZG93LFA9Qm9vbGVhbihcImJvb2xlYW5cIj09dHlwZW9mIFNDX0RJU0FCTEVfU1BFRURZP1NDX0RJU0FCTEVfU1BFRURZOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZ2b2lkIDAhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFkmJlwiXCIhPT1wcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFk/XCJmYWxzZVwiIT09cHJvY2Vzcy5lbnYuUkVBQ1RfQVBQX1NDX0RJU0FCTEVfU1BFRURZJiZwcm9jZXNzLmVudi5SRUFDVF9BUFBfU0NfRElTQUJMRV9TUEVFRFk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJnZvaWQgMCE9PXByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZJiZcIlwiIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFk/XCJmYWxzZVwiIT09cHJvY2Vzcy5lbnYuU0NfRElTQUJMRV9TUEVFRFkmJnByb2Nlc3MuZW52LlNDX0RJU0FCTEVfU1BFRURZOlwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYpLE89e30sUj1cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3sxOlwiQ2Fubm90IGNyZWF0ZSBzdHlsZWQtY29tcG9uZW50IGZvciBjb21wb25lbnQ6ICVzLlxcblxcblwiLDI6XCJDYW4ndCBjb2xsZWN0IHN0eWxlcyBvbmNlIHlvdSd2ZSBjb25zdW1lZCBhIGBTZXJ2ZXJTdHlsZVNoZWV0YCdzIHN0eWxlcyEgYFNlcnZlclN0eWxlU2hlZXRgIGlzIGEgb25lIG9mZiBpbnN0YW5jZSBmb3IgZWFjaCBzZXJ2ZXItc2lkZSByZW5kZXIgY3ljbGUuXFxuXFxuLSBBcmUgeW91IHRyeWluZyB0byByZXVzZSBpdCBhY3Jvc3MgcmVuZGVycz9cXG4tIEFyZSB5b3UgYWNjaWRlbnRhbGx5IGNhbGxpbmcgY29sbGVjdFN0eWxlcyB0d2ljZT9cXG5cXG5cIiwzOlwiU3RyZWFtaW5nIFNTUiBpcyBvbmx5IHN1cHBvcnRlZCBpbiBhIE5vZGUuanMgZW52aXJvbm1lbnQ7IFBsZWFzZSBkbyBub3QgdHJ5IHRvIGNhbGwgdGhpcyBtZXRob2QgaW4gdGhlIGJyb3dzZXIuXFxuXFxuXCIsNDpcIlRoZSBgU3R5bGVTaGVldE1hbmFnZXJgIGV4cGVjdHMgYSB2YWxpZCB0YXJnZXQgb3Igc2hlZXQgcHJvcCFcXG5cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgY2xpZW50IGFuZCBpcyB5b3VyIHRhcmdldCBmYWxzeT9cXG4tIERvZXMgdGhpcyBlcnJvciBvY2N1ciBvbiB0aGUgc2VydmVyIGFuZCBpcyB0aGUgc2hlZXQgZmFsc3k/XFxuXFxuXCIsNTpcIlRoZSBjbG9uZSBtZXRob2QgY2Fubm90IGJlIHVzZWQgb24gdGhlIGNsaWVudCFcXG5cXG4tIEFyZSB5b3UgcnVubmluZyBpbiBhIGNsaWVudC1saWtlIGVudmlyb25tZW50IG9uIHRoZSBzZXJ2ZXI/XFxuLSBBcmUgeW91IHRyeWluZyB0byBydW4gU1NSIG9uIHRoZSBjbGllbnQ/XFxuXFxuXCIsNjpcIlRyeWluZyB0byBpbnNlcnQgYSBuZXcgc3R5bGUgdGFnLCBidXQgdGhlIGdpdmVuIE5vZGUgaXMgdW5tb3VudGVkIVxcblxcbi0gQXJlIHlvdSB1c2luZyBhIGN1c3RvbSB0YXJnZXQgdGhhdCBpc24ndCBtb3VudGVkP1xcbi0gRG9lcyB5b3VyIGRvY3VtZW50IG5vdCBoYXZlIGEgdmFsaWQgaGVhZCBlbGVtZW50P1xcbi0gSGF2ZSB5b3UgYWNjaWRlbnRhbGx5IHJlbW92ZWQgYSBzdHlsZSB0YWcgbWFudWFsbHk/XFxuXFxuXCIsNzonVGhlbWVQcm92aWRlcjogUGxlYXNlIHJldHVybiBhbiBvYmplY3QgZnJvbSB5b3VyIFwidGhlbWVcIiBwcm9wIGZ1bmN0aW9uLCBlLmcuXFxuXFxuYGBganNcXG50aGVtZT17KCkgPT4gKHt9KX1cXG5gYGBcXG5cXG4nLDg6J1RoZW1lUHJvdmlkZXI6IFBsZWFzZSBtYWtlIHlvdXIgXCJ0aGVtZVwiIHByb3AgYW4gb2JqZWN0LlxcblxcbicsOTpcIk1pc3NpbmcgZG9jdW1lbnQgYDxoZWFkPmBcXG5cXG5cIiwxMDpcIkNhbm5vdCBmaW5kIGEgU3R5bGVTaGVldCBpbnN0YW5jZS4gVXN1YWxseSB0aGlzIGhhcHBlbnMgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvcGllcyBvZiBzdHlsZWQtY29tcG9uZW50cyBsb2FkZWQgYXQgb25jZS4gQ2hlY2sgb3V0IHRoaXMgaXNzdWUgZm9yIGhvdyB0byB0cm91Ymxlc2hvb3QgYW5kIGZpeCB0aGUgY29tbW9uIGNhc2VzIHdoZXJlIHRoaXMgc2l0dWF0aW9uIGNhbiBoYXBwZW46IGh0dHBzOi8vZ2l0aHViLmNvbS9zdHlsZWQtY29tcG9uZW50cy9zdHlsZWQtY29tcG9uZW50cy9pc3N1ZXMvMTk0MSNpc3N1ZWNvbW1lbnQtNDE3ODYyMDIxXFxuXFxuXCIsMTE6XCJfVGhpcyBlcnJvciB3YXMgcmVwbGFjZWQgd2l0aCBhIGRldi10aW1lIHdhcm5pbmcsIGl0IHdpbGwgYmUgZGVsZXRlZCBmb3IgdjQgZmluYWwuXyBbY3JlYXRlR2xvYmFsU3R5bGVdIHJlY2VpdmVkIGNoaWxkcmVuIHdoaWNoIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBQbGVhc2UgdXNlIHRoZSBjb21wb25lbnQgd2l0aG91dCBwYXNzaW5nIGNoaWxkcmVuIGVsZW1lbnRzLlxcblxcblwiLDEyOlwiSXQgc2VlbXMgeW91IGFyZSBpbnRlcnBvbGF0aW5nIGEga2V5ZnJhbWUgZGVjbGFyYXRpb24gKCVzKSBpbnRvIGFuIHVudGFnZ2VkIHN0cmluZy4gVGhpcyB3YXMgc3VwcG9ydGVkIGluIHN0eWxlZC1jb21wb25lbnRzIHYzLCBidXQgaXMgbm90IGxvbmdlciBzdXBwb3J0ZWQgaW4gdjQgYXMga2V5ZnJhbWVzIGFyZSBub3cgaW5qZWN0ZWQgb24tZGVtYW5kLiBQbGVhc2Ugd3JhcCB5b3VyIHN0cmluZyBpbiB0aGUgY3NzXFxcXGBcXFxcYCBoZWxwZXIgd2hpY2ggZW5zdXJlcyB0aGUgc3R5bGVzIGFyZSBpbmplY3RlZCBjb3JyZWN0bHkuIFNlZSBodHRwczovL3d3dy5zdHlsZWQtY29tcG9uZW50cy5jb20vZG9jcy9hcGkjY3NzXFxuXFxuXCIsMTM6XCIlcyBpcyBub3QgYSBzdHlsZWQgY29tcG9uZW50IGFuZCBjYW5ub3QgYmUgcmVmZXJyZWQgdG8gdmlhIGNvbXBvbmVudCBzZWxlY3Rvci4gU2VlIGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2FkdmFuY2VkI3JlZmVycmluZy10by1vdGhlci1jb21wb25lbnRzIGZvciBtb3JlIGRldGFpbHMuXFxuXFxuXCIsMTQ6J1RoZW1lUHJvdmlkZXI6IFwidGhlbWVcIiBwcm9wIGlzIHJlcXVpcmVkLlxcblxcbicsMTU6XCJBIHN0eWxpcyBwbHVnaW4gaGFzIGJlZW4gc3VwcGxpZWQgdGhhdCBpcyBub3QgbmFtZWQuIFdlIG5lZWQgYSBuYW1lIGZvciBlYWNoIHBsdWdpbiB0byBiZSBhYmxlIHRvIHByZXZlbnQgc3R5bGluZyBjb2xsaXNpb25zIGJldHdlZW4gZGlmZmVyZW50IHN0eWxpcyBjb25maWd1cmF0aW9ucyB3aXRoaW4gdGhlIHNhbWUgYXBwLiBCZWZvcmUgeW91IHBhc3MgeW91ciBwbHVnaW4gdG8gYDxTdHlsZVNoZWV0TWFuYWdlciBzdHlsaXNQbHVnaW5zPXtbXX0+YCwgcGxlYXNlIG1ha2Ugc3VyZSBlYWNoIHBsdWdpbiBpcyB1bmlxdWVseS1uYW1lZCwgZS5nLlxcblxcbmBgYGpzXFxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGltcG9ydGVkUGx1Z2luLCAnbmFtZScsIHsgdmFsdWU6ICdzb21lLXVuaXF1ZS1uYW1lJyB9KTtcXG5gYGBcXG5cXG5cIiwxNjpcIlJlYWNoZWQgdGhlIGxpbWl0IG9mIGhvdyBtYW55IHN0eWxlZCBjb21wb25lbnRzIG1heSBiZSBjcmVhdGVkIGF0IGdyb3VwICVzLlxcbllvdSBtYXkgb25seSBjcmVhdGUgdXAgdG8gMSwwNzMsNzQxLDgyNCBjb21wb25lbnRzLiBJZiB5b3UncmUgY3JlYXRpbmcgY29tcG9uZW50cyBkeW5hbWljYWxseSxcXG5hcyBmb3IgaW5zdGFuY2UgaW4geW91ciByZW5kZXIgbWV0aG9kIHRoZW4geW91IG1heSBiZSBydW5uaW5nIGludG8gdGhpcyBsaW1pdGF0aW9uLlxcblxcblwiLDE3OlwiQ1NTU3R5bGVTaGVldCBjb3VsZCBub3QgYmUgZm91bmQgb24gSFRNTFN0eWxlRWxlbWVudC5cXG5IYXMgc3R5bGVkLWNvbXBvbmVudHMnIHN0eWxlIHRhZyBiZWVuIHVubW91bnRlZCBvciBhbHRlcmVkIGJ5IGFub3RoZXIgc2NyaXB0P1xcblwifTp7fTtmdW5jdGlvbiBEKCl7Zm9yKHZhciBlPWFyZ3VtZW50cy5sZW5ndGg8PTA/dm9pZCAwOmFyZ3VtZW50c1swXSx0PVtdLG49MSxyPWFyZ3VtZW50cy5sZW5ndGg7bjxyO24rPTEpdC5wdXNoKG48MHx8YXJndW1lbnRzLmxlbmd0aDw9bj92b2lkIDA6YXJndW1lbnRzW25dKTtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtlPWUucmVwbGFjZSgvJVthLXpdLyx0KX0pKSxlfWZ1bmN0aW9uIGooZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3Rocm93XCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOVj9uZXcgRXJyb3IoXCJBbiBlcnJvciBvY2N1cnJlZC4gU2VlIGh0dHBzOi8vZ2l0LmlvL0pVSWFFI1wiK2UrXCIgZm9yIG1vcmUgaW5mb3JtYXRpb24uXCIrKG4ubGVuZ3RoPjA/XCIgQXJnczogXCIrbi5qb2luKFwiLCBcIik6XCJcIikpOm5ldyBFcnJvcihELmFwcGx5KHZvaWQgMCxbUltlXV0uY29uY2F0KG4pKS50cmltKCkpfXZhciBUPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLmdyb3VwU2l6ZXM9bmV3IFVpbnQzMkFycmF5KDUxMiksdGhpcy5sZW5ndGg9NTEyLHRoaXMudGFnPWV9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5kZXhPZkdyb3VwPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49MDtuPGU7bisrKXQrPXRoaXMuZ3JvdXBTaXplc1tuXTtyZXR1cm4gdH0sdC5pbnNlcnRSdWxlcz1mdW5jdGlvbihlLHQpe2lmKGU+PXRoaXMuZ3JvdXBTaXplcy5sZW5ndGgpe2Zvcih2YXIgbj10aGlzLmdyb3VwU2l6ZXMscj1uLmxlbmd0aCxvPXI7ZT49bzspKG88PD0xKTwwJiZqKDE2LFwiXCIrZSk7dGhpcy5ncm91cFNpemVzPW5ldyBVaW50MzJBcnJheShvKSx0aGlzLmdyb3VwU2l6ZXMuc2V0KG4pLHRoaXMubGVuZ3RoPW87Zm9yKHZhciBzPXI7czxvO3MrKyl0aGlzLmdyb3VwU2l6ZXNbc109MH1mb3IodmFyIGk9dGhpcy5pbmRleE9mR3JvdXAoZSsxKSxhPTAsYz10Lmxlbmd0aDthPGM7YSsrKXRoaXMudGFnLmluc2VydFJ1bGUoaSx0W2FdKSYmKHRoaXMuZ3JvdXBTaXplc1tlXSsrLGkrKyl9LHQuY2xlYXJHcm91cD1mdW5jdGlvbihlKXtpZihlPHRoaXMubGVuZ3RoKXt2YXIgdD10aGlzLmdyb3VwU2l6ZXNbZV0sbj10aGlzLmluZGV4T2ZHcm91cChlKSxyPW4rdDt0aGlzLmdyb3VwU2l6ZXNbZV09MDtmb3IodmFyIG89bjtvPHI7bysrKXRoaXMudGFnLmRlbGV0ZVJ1bGUobil9fSx0LmdldEdyb3VwPWZ1bmN0aW9uKGUpe3ZhciB0PVwiXCI7aWYoZT49dGhpcy5sZW5ndGh8fDA9PT10aGlzLmdyb3VwU2l6ZXNbZV0pcmV0dXJuIHQ7Zm9yKHZhciBuPXRoaXMuZ3JvdXBTaXplc1tlXSxyPXRoaXMuaW5kZXhPZkdyb3VwKGUpLG89cituLHM9cjtzPG87cysrKXQrPXRoaXMudGFnLmdldFJ1bGUocykrXCIvKiFzYyovXFxuXCI7cmV0dXJuIHR9LGV9KCkseD1uZXcgTWFwLGs9bmV3IE1hcCxWPTEsQj1mdW5jdGlvbihlKXtpZih4LmhhcyhlKSlyZXR1cm4geC5nZXQoZSk7Zm9yKDtrLmhhcyhWKTspVisrO3ZhciB0PVYrKztyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiYoKDB8dCk8MHx8dD4xPDwzMCkmJmooMTYsXCJcIit0KSx4LnNldChlLHQpLGsuc2V0KHQsZSksdH0sej1mdW5jdGlvbihlKXtyZXR1cm4gay5nZXQoZSl9LE09ZnVuY3Rpb24oZSx0KXt0Pj1WJiYoVj10KzEpLHguc2V0KGUsdCksay5zZXQodCxlKX0sRz1cInN0eWxlW1wiK0ErJ11bZGF0YS1zdHlsZWQtdmVyc2lvbj1cIjUuMy41XCJdJyxMPW5ldyBSZWdFeHAoXCJeXCIrQSsnXFxcXC5nKFxcXFxkKylcXFxcW2lkPVwiKFtcXFxcd1xcXFxkLV0rKVwiXFxcXF0uKj9cIihbXlwiXSopJyksRj1mdW5jdGlvbihlLHQsbil7Zm9yKHZhciByLG89bi5zcGxpdChcIixcIikscz0wLGk9by5sZW5ndGg7czxpO3MrKykocj1vW3NdKSYmZS5yZWdpc3Rlck5hbWUodCxyKX0sWT1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0odC50ZXh0Q29udGVudHx8XCJcIikuc3BsaXQoXCIvKiFzYyovXFxuXCIpLHI9W10sbz0wLHM9bi5sZW5ndGg7bzxzO28rKyl7dmFyIGk9bltvXS50cmltKCk7aWYoaSl7dmFyIGE9aS5tYXRjaChMKTtpZihhKXt2YXIgYz0wfHBhcnNlSW50KGFbMV0sMTApLHU9YVsyXTswIT09YyYmKE0odSxjKSxGKGUsdSxhWzNdKSxlLmdldFRhZygpLmluc2VydFJ1bGVzKGMscikpLHIubGVuZ3RoPTB9ZWxzZSByLnB1c2goaSl9fX0scT1mdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJnZvaWQgMCE9PXdpbmRvdy5fX3dlYnBhY2tfbm9uY2VfXz93aW5kb3cuX193ZWJwYWNrX25vbmNlX186bnVsbH0sSD1mdW5jdGlvbihlKXt2YXIgdD1kb2N1bWVudC5oZWFkLG49ZXx8dCxyPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxvPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1lLmNoaWxkTm9kZXMsbj10Lmxlbmd0aDtuPj0wO24tLSl7dmFyIHI9dFtuXTtpZihyJiYxPT09ci5ub2RlVHlwZSYmci5oYXNBdHRyaWJ1dGUoQSkpcmV0dXJuIHJ9fShuKSxzPXZvaWQgMCE9PW8/by5uZXh0U2libGluZzpudWxsO3Iuc2V0QXR0cmlidXRlKEEsXCJhY3RpdmVcIiksci5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN0eWxlZC12ZXJzaW9uXCIsXCI1LjMuNVwiKTt2YXIgaT1xKCk7cmV0dXJuIGkmJnIuc2V0QXR0cmlidXRlKFwibm9uY2VcIixpKSxuLmluc2VydEJlZm9yZShyLHMpLHJ9LCQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3ZhciB0PXRoaXMuZWxlbWVudD1IKGUpO3QuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCJcIikpLHRoaXMuc2hlZXQ9ZnVuY3Rpb24oZSl7aWYoZS5zaGVldClyZXR1cm4gZS5zaGVldDtmb3IodmFyIHQ9ZG9jdW1lbnQuc3R5bGVTaGVldHMsbj0wLHI9dC5sZW5ndGg7bjxyO24rKyl7dmFyIG89dFtuXTtpZihvLm93bmVyTm9kZT09PWUpcmV0dXJuIG99aigxNyl9KHQpLHRoaXMubGVuZ3RoPTB9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe3RyeXtyZXR1cm4gdGhpcy5zaGVldC5pbnNlcnRSdWxlKHQsZSksdGhpcy5sZW5ndGgrKywhMH1jYXRjaChlKXtyZXR1cm4hMX19LHQuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLnNoZWV0LmRlbGV0ZVJ1bGUoZSksdGhpcy5sZW5ndGgtLX0sdC5nZXRSdWxlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuc2hlZXQuY3NzUnVsZXNbZV07cmV0dXJuIHZvaWQgMCE9PXQmJlwic3RyaW5nXCI9PXR5cGVvZiB0LmNzc1RleHQ/dC5jc3NUZXh0OlwiXCJ9LGV9KCksVz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSl7dmFyIHQ9dGhpcy5lbGVtZW50PUgoZSk7dGhpcy5ub2Rlcz10LmNoaWxkTm9kZXMsdGhpcy5sZW5ndGg9MH12YXIgdD1lLnByb3RvdHlwZTtyZXR1cm4gdC5pbnNlcnRSdWxlPWZ1bmN0aW9uKGUsdCl7aWYoZTw9dGhpcy5sZW5ndGgmJmU+PTApe3ZhciBuPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHQpLHI9dGhpcy5ub2Rlc1tlXTtyZXR1cm4gdGhpcy5lbGVtZW50Lmluc2VydEJlZm9yZShuLHJ8fG51bGwpLHRoaXMubGVuZ3RoKyssITB9cmV0dXJuITF9LHQuZGVsZXRlUnVsZT1mdW5jdGlvbihlKXt0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5ub2Rlc1tlXSksdGhpcy5sZW5ndGgtLX0sdC5nZXRSdWxlPWZ1bmN0aW9uKGUpe3JldHVybiBlPHRoaXMubGVuZ3RoP3RoaXMubm9kZXNbZV0udGV4dENvbnRlbnQ6XCJcIn0sZX0oKSxVPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt0aGlzLnJ1bGVzPVtdLHRoaXMubGVuZ3RoPTB9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuaW5zZXJ0UnVsZT1mdW5jdGlvbihlLHQpe3JldHVybiBlPD10aGlzLmxlbmd0aCYmKHRoaXMucnVsZXMuc3BsaWNlKGUsMCx0KSx0aGlzLmxlbmd0aCsrLCEwKX0sdC5kZWxldGVSdWxlPWZ1bmN0aW9uKGUpe3RoaXMucnVsZXMuc3BsaWNlKGUsMSksdGhpcy5sZW5ndGgtLX0sdC5nZXRSdWxlPWZ1bmN0aW9uKGUpe3JldHVybiBlPHRoaXMubGVuZ3RoP3RoaXMucnVsZXNbZV06XCJcIn0sZX0oKSxKPUksWD17aXNTZXJ2ZXI6IUksdXNlQ1NTT01JbmplY3Rpb246IVB9LFo9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCxuKXt2b2lkIDA9PT1lJiYoZT1FKSx2b2lkIDA9PT10JiYodD17fSksdGhpcy5vcHRpb25zPXYoe30sWCx7fSxlKSx0aGlzLmdzPXQsdGhpcy5uYW1lcz1uZXcgTWFwKG4pLHRoaXMuc2VydmVyPSEhZS5pc1NlcnZlciwhdGhpcy5zZXJ2ZXImJkkmJkomJihKPSExLGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKEcpLG49MCxyPXQubGVuZ3RoO248cjtuKyspe3ZhciBvPXRbbl07byYmXCJhY3RpdmVcIiE9PW8uZ2V0QXR0cmlidXRlKEEpJiYoWShlLG8pLG8ucGFyZW50Tm9kZSYmby5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG8pKX19KHRoaXMpKX1lLnJlZ2lzdGVySWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIEIoZSl9O3ZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LnJlY29uc3RydWN0V2l0aE9wdGlvbnM9ZnVuY3Rpb24odCxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49ITApLG5ldyBlKHYoe30sdGhpcy5vcHRpb25zLHt9LHQpLHRoaXMuZ3MsbiYmdGhpcy5uYW1lc3x8dm9pZCAwKX0sdC5hbGxvY2F0ZUdTSW5zdGFuY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZ3NbZV09KHRoaXMuZ3NbZV18fDApKzF9LHQuZ2V0VGFnPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGFnfHwodGhpcy50YWc9KG49KHQ9dGhpcy5vcHRpb25zKS5pc1NlcnZlcixyPXQudXNlQ1NTT01JbmplY3Rpb24sbz10LnRhcmdldCxlPW4/bmV3IFUobyk6cj9uZXcgJChvKTpuZXcgVyhvKSxuZXcgVChlKSkpO3ZhciBlLHQsbixyLG99LHQuaGFzTmFtZUZvcklkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubmFtZXMuaGFzKGUpJiZ0aGlzLm5hbWVzLmdldChlKS5oYXModCl9LHQucmVnaXN0ZXJOYW1lPWZ1bmN0aW9uKGUsdCl7aWYoQihlKSx0aGlzLm5hbWVzLmhhcyhlKSl0aGlzLm5hbWVzLmdldChlKS5hZGQodCk7ZWxzZXt2YXIgbj1uZXcgU2V0O24uYWRkKHQpLHRoaXMubmFtZXMuc2V0KGUsbil9fSx0Lmluc2VydFJ1bGVzPWZ1bmN0aW9uKGUsdCxuKXt0aGlzLnJlZ2lzdGVyTmFtZShlLHQpLHRoaXMuZ2V0VGFnKCkuaW5zZXJ0UnVsZXMoQihlKSxuKX0sdC5jbGVhck5hbWVzPWZ1bmN0aW9uKGUpe3RoaXMubmFtZXMuaGFzKGUpJiZ0aGlzLm5hbWVzLmdldChlKS5jbGVhcigpfSx0LmNsZWFyUnVsZXM9ZnVuY3Rpb24oZSl7dGhpcy5nZXRUYWcoKS5jbGVhckdyb3VwKEIoZSkpLHRoaXMuY2xlYXJOYW1lcyhlKX0sdC5jbGVhclRhZz1mdW5jdGlvbigpe3RoaXMudGFnPXZvaWQgMH0sdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtmb3IodmFyIHQ9ZS5nZXRUYWcoKSxuPXQubGVuZ3RoLHI9XCJcIixvPTA7bzxuO28rKyl7dmFyIHM9eihvKTtpZih2b2lkIDAhPT1zKXt2YXIgaT1lLm5hbWVzLmdldChzKSxhPXQuZ2V0R3JvdXAobyk7aWYoaSYmYSYmaS5zaXplKXt2YXIgYz1BK1wiLmdcIitvKydbaWQ9XCInK3MrJ1wiXScsdT1cIlwiO3ZvaWQgMCE9PWkmJmkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5sZW5ndGg+MCYmKHUrPWUrXCIsXCIpfSkpLHIrPVwiXCIrYStjKyd7Y29udGVudDpcIicrdSsnXCJ9Lyohc2MqL1xcbid9fX1yZXR1cm4gcn0odGhpcyl9LGV9KCksSz0vKGEpKGQpL2dpLFE9ZnVuY3Rpb24oZSl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoZSsoZT4yNT8zOTo5NykpfTtmdW5jdGlvbiBlZShlKXt2YXIgdCxuPVwiXCI7Zm9yKHQ9TWF0aC5hYnMoZSk7dD41Mjt0PXQvNTJ8MCluPVEodCU1MikrbjtyZXR1cm4oUSh0JTUyKStuKS5yZXBsYWNlKEssXCIkMS0kMlwiKX12YXIgdGU9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49dC5sZW5ndGg7bjspZT0zMyplXnQuY2hhckNvZGVBdCgtLW4pO3JldHVybiBlfSxuZT1mdW5jdGlvbihlKXtyZXR1cm4gdGUoNTM4MSxlKX07ZnVuY3Rpb24gcmUoZSl7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kz0xKXt2YXIgbj1lW3RdO2lmKGIobikmJiFOKG4pKXJldHVybiExfXJldHVybiEwfXZhciBvZT1uZShcIjUuMy41XCIpLHNlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQsbil7dGhpcy5ydWxlcz1lLHRoaXMuc3RhdGljUnVsZXNJZD1cIlwiLHRoaXMuaXNTdGF0aWM9XCJwcm9kdWN0aW9uXCI9PT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHZvaWQgMD09PW58fG4uaXNTdGF0aWMpJiZyZShlKSx0aGlzLmNvbXBvbmVudElkPXQsdGhpcy5iYXNlSGFzaD10ZShvZSx0KSx0aGlzLmJhc2VTdHlsZT1uLFoucmVnaXN0ZXJJZCh0KX1yZXR1cm4gZS5wcm90b3R5cGUuZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXM9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXRoaXMuY29tcG9uZW50SWQsbz1bXTtpZih0aGlzLmJhc2VTdHlsZSYmby5wdXNoKHRoaXMuYmFzZVN0eWxlLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKGUsdCxuKSksdGhpcy5pc1N0YXRpYyYmIW4uaGFzaClpZih0aGlzLnN0YXRpY1J1bGVzSWQmJnQuaGFzTmFtZUZvcklkKHIsdGhpcy5zdGF0aWNSdWxlc0lkKSlvLnB1c2godGhpcy5zdGF0aWNSdWxlc0lkKTtlbHNle3ZhciBzPU5lKHRoaXMucnVsZXMsZSx0LG4pLmpvaW4oXCJcIiksaT1lZSh0ZSh0aGlzLmJhc2VIYXNoLHMpPj4+MCk7aWYoIXQuaGFzTmFtZUZvcklkKHIsaSkpe3ZhciBhPW4ocyxcIi5cIitpLHZvaWQgMCxyKTt0Lmluc2VydFJ1bGVzKHIsaSxhKX1vLnB1c2goaSksdGhpcy5zdGF0aWNSdWxlc0lkPWl9ZWxzZXtmb3IodmFyIGM9dGhpcy5ydWxlcy5sZW5ndGgsdT10ZSh0aGlzLmJhc2VIYXNoLG4uaGFzaCksbD1cIlwiLGQ9MDtkPGM7ZCsrKXt2YXIgaD10aGlzLnJ1bGVzW2RdO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBoKWwrPWgsXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmKHU9dGUodSxoK2QpKTtlbHNlIGlmKGgpe3ZhciBwPU5lKGgsZSx0LG4pLGY9QXJyYXkuaXNBcnJheShwKT9wLmpvaW4oXCJcIik6cDt1PXRlKHUsZitkKSxsKz1mfX1pZihsKXt2YXIgbT1lZSh1Pj4+MCk7aWYoIXQuaGFzTmFtZUZvcklkKHIsbSkpe3ZhciB5PW4obCxcIi5cIittLHZvaWQgMCxyKTt0Lmluc2VydFJ1bGVzKHIsbSx5KX1vLnB1c2gobSl9fXJldHVybiBvLmpvaW4oXCIgXCIpfSxlfSgpLGllPS9eXFxzKlxcL1xcLy4qJC9nbSxhZT1bXCI6XCIsXCJbXCIsXCIuXCIsXCIjXCJdO2Z1bmN0aW9uIGNlKGUpe3ZhciB0LG4scixvLHM9dm9pZCAwPT09ZT9FOmUsaT1zLm9wdGlvbnMsYT12b2lkIDA9PT1pP0U6aSxjPXMucGx1Z2lucyx1PXZvaWQgMD09PWM/dzpjLGw9bmV3IHAoYSksZD1bXSxoPWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCl7aWYodCl0cnl7ZSh0K1wifVwiKX1jYXRjaChlKXt9fXJldHVybiBmdW5jdGlvbihuLHIsbyxzLGksYSxjLHUsbCxkKXtzd2l0Y2gobil7Y2FzZSAxOmlmKDA9PT1sJiY2ND09PXIuY2hhckNvZGVBdCgwKSlyZXR1cm4gZShyK1wiO1wiKSxcIlwiO2JyZWFrO2Nhc2UgMjppZigwPT09dSlyZXR1cm4gcitcIi8qfCovXCI7YnJlYWs7Y2FzZSAzOnN3aXRjaCh1KXtjYXNlIDEwMjpjYXNlIDExMjpyZXR1cm4gZShvWzBdK3IpLFwiXCI7ZGVmYXVsdDpyZXR1cm4gcisoMD09PWQ/XCIvKnwqL1wiOlwiXCIpfWNhc2UtMjpyLnNwbGl0KFwiLyp8Ki99XCIpLmZvckVhY2godCl9fX0oKGZ1bmN0aW9uKGUpe2QucHVzaChlKX0pKSxmPWZ1bmN0aW9uKGUscixzKXtyZXR1cm4gMD09PXImJi0xIT09YWUuaW5kZXhPZihzW24ubGVuZ3RoXSl8fHMubWF0Y2gobyk/ZTpcIi5cIit0fTtmdW5jdGlvbiBtKGUscyxpLGEpe3ZvaWQgMD09PWEmJihhPVwiJlwiKTt2YXIgYz1lLnJlcGxhY2UoaWUsXCJcIiksdT1zJiZpP2krXCIgXCIrcytcIiB7IFwiK2MrXCIgfVwiOmM7cmV0dXJuIHQ9YSxuPXMscj1uZXcgUmVnRXhwKFwiXFxcXFwiK24rXCJcXFxcYlwiLFwiZ1wiKSxvPW5ldyBSZWdFeHAoXCIoXFxcXFwiK24rXCJcXFxcYil7Mix9XCIpLGwoaXx8IXM/XCJcIjpzLHUpfXJldHVybiBsLnVzZShbXS5jb25jYXQodSxbZnVuY3Rpb24oZSx0LG8pezI9PT1lJiZvLmxlbmd0aCYmb1swXS5sYXN0SW5kZXhPZihuKT4wJiYob1swXT1vWzBdLnJlcGxhY2UocixmKSl9LGgsZnVuY3Rpb24oZSl7aWYoLTI9PT1lKXt2YXIgdD1kO3JldHVybiBkPVtdLHR9fV0pKSxtLmhhc2g9dS5sZW5ndGg/dS5yZWR1Y2UoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQubmFtZXx8aigxNSksdGUoZSx0Lm5hbWUpfSksNTM4MSkudG9TdHJpbmcoKTpcIlwiLG19dmFyIHVlPXIuY3JlYXRlQ29udGV4dCgpLGxlPXVlLkNvbnN1bWVyLGRlPXIuY3JlYXRlQ29udGV4dCgpLGhlPShkZS5Db25zdW1lcixuZXcgWikscGU9Y2UoKTtmdW5jdGlvbiBmZSgpe3JldHVybiBzKHVlKXx8aGV9ZnVuY3Rpb24gbWUoKXtyZXR1cm4gcyhkZSl8fHBlfWZ1bmN0aW9uIHllKGUpe3ZhciB0PW8oZS5zdHlsaXNQbHVnaW5zKSxuPXRbMF0scz10WzFdLGM9ZmUoKSx1PWkoKGZ1bmN0aW9uKCl7dmFyIHQ9YztyZXR1cm4gZS5zaGVldD90PWUuc2hlZXQ6ZS50YXJnZXQmJih0PXQucmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyh7dGFyZ2V0OmUudGFyZ2V0fSwhMSkpLGUuZGlzYWJsZUNTU09NSW5qZWN0aW9uJiYodD10LnJlY29uc3RydWN0V2l0aE9wdGlvbnMoe3VzZUNTU09NSW5qZWN0aW9uOiExfSkpLHR9KSxbZS5kaXNhYmxlQ1NTT01JbmplY3Rpb24sZS5zaGVldCxlLnRhcmdldF0pLGw9aSgoZnVuY3Rpb24oKXtyZXR1cm4gY2Uoe29wdGlvbnM6e3ByZWZpeDohZS5kaXNhYmxlVmVuZG9yUHJlZml4ZXN9LHBsdWdpbnM6bn0pfSksW2UuZGlzYWJsZVZlbmRvclByZWZpeGVzLG5dKTtyZXR1cm4gYSgoZnVuY3Rpb24oKXtoKG4sZS5zdHlsaXNQbHVnaW5zKXx8cyhlLnN0eWxpc1BsdWdpbnMpfSksW2Uuc3R5bGlzUGx1Z2luc10pLHIuY3JlYXRlRWxlbWVudCh1ZS5Qcm92aWRlcix7dmFsdWU6dX0sci5jcmVhdGVFbGVtZW50KGRlLlByb3ZpZGVyLHt2YWx1ZTpsfSxcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WP3IuQ2hpbGRyZW4ub25seShlLmNoaWxkcmVuKTplLmNoaWxkcmVuKSl9dmFyIHZlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe3ZhciBuPXRoaXM7dGhpcy5pbmplY3Q9ZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT10JiYodD1wZSk7dmFyIHI9bi5uYW1lK3QuaGFzaDtlLmhhc05hbWVGb3JJZChuLmlkLHIpfHxlLmluc2VydFJ1bGVzKG4uaWQscix0KG4ucnVsZXMscixcIkBrZXlmcmFtZXNcIikpfSx0aGlzLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIGooMTIsU3RyaW5nKG4ubmFtZSkpfSx0aGlzLm5hbWU9ZSx0aGlzLmlkPVwic2Mta2V5ZnJhbWVzLVwiK2UsdGhpcy5ydWxlcz10fXJldHVybiBlLnByb3RvdHlwZS5nZXROYW1lPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT1wZSksdGhpcy5uYW1lK2UuaGFzaH0sZX0oKSxnZT0vKFtBLVpdKS8sU2U9LyhbQS1aXSkvZyx3ZT0vXm1zLS8sRWU9ZnVuY3Rpb24oZSl7cmV0dXJuXCItXCIrZS50b0xvd2VyQ2FzZSgpfTtmdW5jdGlvbiBiZShlKXtyZXR1cm4gZ2UudGVzdChlKT9lLnJlcGxhY2UoU2UsRWUpLnJlcGxhY2Uod2UsXCItbXMtXCIpOmV9dmFyIF9lPWZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lfHwhMT09PWV8fFwiXCI9PT1lfTtmdW5jdGlvbiBOZShlLG4scixvKXtpZihBcnJheS5pc0FycmF5KGUpKXtmb3IodmFyIHMsaT1bXSxhPTAsYz1lLmxlbmd0aDthPGM7YSs9MSlcIlwiIT09KHM9TmUoZVthXSxuLHIsbykpJiYoQXJyYXkuaXNBcnJheShzKT9pLnB1c2guYXBwbHkoaSxzKTppLnB1c2gocykpO3JldHVybiBpfWlmKF9lKGUpKXJldHVyblwiXCI7aWYoTihlKSlyZXR1cm5cIi5cIitlLnN0eWxlZENvbXBvbmVudElkO2lmKGIoZSkpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mKGw9ZSl8fGwucHJvdG90eXBlJiZsLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50fHwhbilyZXR1cm4gZTt2YXIgdT1lKG4pO3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJnQodSkmJmNvbnNvbGUud2FybihfKGUpK1wiIGlzIG5vdCBhIHN0eWxlZCBjb21wb25lbnQgYW5kIGNhbm5vdCBiZSByZWZlcnJlZCB0byB2aWEgY29tcG9uZW50IHNlbGVjdG9yLiBTZWUgaHR0cHM6Ly93d3cuc3R5bGVkLWNvbXBvbmVudHMuY29tL2RvY3MvYWR2YW5jZWQjcmVmZXJyaW5nLXRvLW90aGVyLWNvbXBvbmVudHMgZm9yIG1vcmUgZGV0YWlscy5cIiksTmUodSxuLHIsbyl9dmFyIGw7cmV0dXJuIGUgaW5zdGFuY2VvZiB2ZT9yPyhlLmluamVjdChyLG8pLGUuZ2V0TmFtZShvKSk6ZTpTKGUpP2Z1bmN0aW9uIGUodCxuKXt2YXIgcixvLHM9W107Zm9yKHZhciBpIGluIHQpdC5oYXNPd25Qcm9wZXJ0eShpKSYmIV9lKHRbaV0pJiYoQXJyYXkuaXNBcnJheSh0W2ldKSYmdFtpXS5pc0Nzc3x8Yih0W2ldKT9zLnB1c2goYmUoaSkrXCI6XCIsdFtpXSxcIjtcIik6Uyh0W2ldKT9zLnB1c2guYXBwbHkocyxlKHRbaV0saSkpOnMucHVzaChiZShpKStcIjogXCIrKHI9aSxudWxsPT0obz10W2ldKXx8XCJib29sZWFuXCI9PXR5cGVvZiBvfHxcIlwiPT09bz9cIlwiOlwibnVtYmVyXCIhPXR5cGVvZiBvfHwwPT09b3x8ciBpbiBmP1N0cmluZyhvKS50cmltKCk6bytcInB4XCIpK1wiO1wiKSk7cmV0dXJuIG4/W24rXCIge1wiXS5jb25jYXQocyxbXCJ9XCJdKTpzfShlKTplLnRvU3RyaW5nKCl9dmFyIEFlPWZ1bmN0aW9uKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpJiYoZS5pc0Nzcz0hMCksZX07ZnVuY3Rpb24gQ2UoZSl7Zm9yKHZhciB0PWFyZ3VtZW50cy5sZW5ndGgsbj1uZXcgQXJyYXkodD4xP3QtMTowKSxyPTE7cjx0O3IrKyluW3ItMV09YXJndW1lbnRzW3JdO3JldHVybiBiKGUpfHxTKGUpP0FlKE5lKGcodyxbZV0uY29uY2F0KG4pKSkpOjA9PT1uLmxlbmd0aCYmMT09PWUubGVuZ3RoJiZcInN0cmluZ1wiPT10eXBlb2YgZVswXT9lOkFlKE5lKGcoZSxuKSkpfXZhciBJZT0vaW52YWxpZCBob29rIGNhbGwvaSxQZT1uZXcgU2V0LE9lPWZ1bmN0aW9uKGUsdCl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIG49XCJUaGUgY29tcG9uZW50IFwiK2UrKHQ/JyB3aXRoIHRoZSBpZCBvZiBcIicrdCsnXCInOlwiXCIpK1wiIGhhcyBiZWVuIGNyZWF0ZWQgZHluYW1pY2FsbHkuXFxuWW91IG1heSBzZWUgdGhpcyB3YXJuaW5nIGJlY2F1c2UgeW91J3ZlIGNhbGxlZCBzdHlsZWQgaW5zaWRlIGFub3RoZXIgY29tcG9uZW50LlxcblRvIHJlc29sdmUgdGhpcyBvbmx5IGNyZWF0ZSBuZXcgU3R5bGVkQ29tcG9uZW50cyBvdXRzaWRlIG9mIGFueSByZW5kZXIgbWV0aG9kIGFuZCBmdW5jdGlvbiBjb21wb25lbnQuXCIscj1jb25zb2xlLmVycm9yO3RyeXt2YXIgbz0hMDtjb25zb2xlLmVycm9yPWZ1bmN0aW9uKGUpe2lmKEllLnRlc3QoZSkpbz0hMSxQZS5kZWxldGUobik7ZWxzZXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxzPW5ldyBBcnJheSh0PjE/dC0xOjApLGk9MTtpPHQ7aSsrKXNbaS0xXT1hcmd1bWVudHNbaV07ci5hcHBseSh2b2lkIDAsW2VdLmNvbmNhdChzKSl9fSxjKCksbyYmIVBlLmhhcyhuKSYmKGNvbnNvbGUud2FybihuKSxQZS5hZGQobikpfWNhdGNoKGUpe0llLnRlc3QoZS5tZXNzYWdlKSYmUGUuZGVsZXRlKG4pfWZpbmFsbHl7Y29uc29sZS5lcnJvcj1yfX19LFJlPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49RSksZS50aGVtZSE9PW4udGhlbWUmJmUudGhlbWV8fHR8fG4udGhlbWV9LERlPS9bIVwiIyQlJicoKSorLC4vOjs8PT4/QFtcXFxcXFxdXmB7fH1+LV0rL2csamU9LyheLXwtJCkvZztmdW5jdGlvbiBUZShlKXtyZXR1cm4gZS5yZXBsYWNlKERlLFwiLVwiKS5yZXBsYWNlKGplLFwiXCIpfXZhciB4ZT1mdW5jdGlvbihlKXtyZXR1cm4gZWUobmUoZSk+Pj4wKX07ZnVuY3Rpb24ga2UoZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJihcInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxlLmNoYXJBdCgwKT09PWUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkpfXZhciBWZT1mdW5jdGlvbihlKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlfHxcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9PWUmJiFBcnJheS5pc0FycmF5KGUpfSxCZT1mdW5jdGlvbihlKXtyZXR1cm5cIl9fcHJvdG9fX1wiIT09ZSYmXCJjb25zdHJ1Y3RvclwiIT09ZSYmXCJwcm90b3R5cGVcIiE9PWV9O2Z1bmN0aW9uIHplKGUsdCxuKXt2YXIgcj1lW25dO1ZlKHQpJiZWZShyKT9NZShyLHQpOmVbbl09dH1mdW5jdGlvbiBNZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07Zm9yKHZhciBvPTAscz1uO288cy5sZW5ndGg7bysrKXt2YXIgaT1zW29dO2lmKFZlKGkpKWZvcih2YXIgYSBpbiBpKUJlKGEpJiZ6ZShlLGlbYV0sYSl9cmV0dXJuIGV9dmFyIEdlPXIuY3JlYXRlQ29udGV4dCgpLExlPUdlLkNvbnN1bWVyO2Z1bmN0aW9uIEZlKGUpe3ZhciB0PXMoR2UpLG49aSgoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSx0KXtpZighZSlyZXR1cm4gaigxNCk7aWYoYihlKSl7dmFyIG49ZSh0KTtyZXR1cm5cInByb2R1Y3Rpb25cIj09PXByb2Nlc3MuZW52Lk5PREVfRU5WfHxudWxsIT09biYmIUFycmF5LmlzQXJyYXkobikmJlwib2JqZWN0XCI9PXR5cGVvZiBuP246aig3KX1yZXR1cm4gQXJyYXkuaXNBcnJheShlKXx8XCJvYmplY3RcIiE9dHlwZW9mIGU/aig4KTp0P3Yoe30sdCx7fSxlKTplfShlLnRoZW1lLHQpfSksW2UudGhlbWUsdF0pO3JldHVybiBlLmNoaWxkcmVuP3IuY3JlYXRlRWxlbWVudChHZS5Qcm92aWRlcix7dmFsdWU6bn0sZS5jaGlsZHJlbik6bnVsbH12YXIgWWU9e307ZnVuY3Rpb24gcWUoZSx0LG4pe3ZhciBvPU4oZSksaT0ha2UoZSksYT10LmF0dHJzLGM9dm9pZCAwPT09YT93OmEsZD10LmNvbXBvbmVudElkLGg9dm9pZCAwPT09ZD9mdW5jdGlvbihlLHQpe3ZhciBuPVwic3RyaW5nXCIhPXR5cGVvZiBlP1wic2NcIjpUZShlKTtZZVtuXT0oWWVbbl18fDApKzE7dmFyIHI9bitcIi1cIit4ZShcIjUuMy41XCIrbitZZVtuXSk7cmV0dXJuIHQ/dCtcIi1cIityOnJ9KHQuZGlzcGxheU5hbWUsdC5wYXJlbnRDb21wb25lbnRJZCk6ZCxwPXQuZGlzcGxheU5hbWUsZj12b2lkIDA9PT1wP2Z1bmN0aW9uKGUpe3JldHVybiBrZShlKT9cInN0eWxlZC5cIitlOlwiU3R5bGVkKFwiK18oZSkrXCIpXCJ9KGUpOnAsZz10LmRpc3BsYXlOYW1lJiZ0LmNvbXBvbmVudElkP1RlKHQuZGlzcGxheU5hbWUpK1wiLVwiK3QuY29tcG9uZW50SWQ6dC5jb21wb25lbnRJZHx8aCxTPW8mJmUuYXR0cnM/QXJyYXkucHJvdG90eXBlLmNvbmNhdChlLmF0dHJzLGMpLmZpbHRlcihCb29sZWFuKTpjLEE9dC5zaG91bGRGb3J3YXJkUHJvcDtvJiZlLnNob3VsZEZvcndhcmRQcm9wJiYoQT10LnNob3VsZEZvcndhcmRQcm9wP2Z1bmN0aW9uKG4scixvKXtyZXR1cm4gZS5zaG91bGRGb3J3YXJkUHJvcChuLHIsbykmJnQuc2hvdWxkRm9yd2FyZFByb3AobixyLG8pfTplLnNob3VsZEZvcndhcmRQcm9wKTt2YXIgQyxJPW5ldyBzZShuLGcsbz9lLmNvbXBvbmVudFN0eWxlOnZvaWQgMCksUD1JLmlzU3RhdGljJiYwPT09Yy5sZW5ndGgsTz1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlLHQsbixyKXt2YXIgbz1lLmF0dHJzLGk9ZS5jb21wb25lbnRTdHlsZSxhPWUuZGVmYXVsdFByb3BzLGM9ZS5mb2xkZWRDb21wb25lbnRJZHMsZD1lLnNob3VsZEZvcndhcmRQcm9wLGg9ZS5zdHlsZWRDb21wb25lbnRJZCxwPWUudGFyZ2V0O1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJmwoaCk7dmFyIGY9ZnVuY3Rpb24oZSx0LG4pe3ZvaWQgMD09PWUmJihlPUUpO3ZhciByPXYoe30sdCx7dGhlbWU6ZX0pLG89e307cmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIHQsbixzLGk9ZTtmb3IodCBpbiBiKGkpJiYoaT1pKHIpKSxpKXJbdF09b1t0XT1cImNsYXNzTmFtZVwiPT09dD8obj1vW3RdLHM9aVt0XSxuJiZzP24rXCIgXCIrczpufHxzKTppW3RdfSkpLFtyLG9dfShSZSh0LHMoR2UpLGEpfHxFLHQsbykseT1mWzBdLGc9ZlsxXSxTPWZ1bmN0aW9uKGUsdCxuLHIpe3ZhciBvPWZlKCkscz1tZSgpLGk9dD9lLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKEUsbyxzKTplLmdlbmVyYXRlQW5kSW5qZWN0U3R5bGVzKG4sbyxzKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZsKGkpLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJiF0JiZyJiZyKGkpLGl9KGkscix5LFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlY/ZS53YXJuVG9vTWFueUNsYXNzZXM6dm9pZCAwKSx3PW4sXz1nLiRhc3x8dC4kYXN8fGcuYXN8fHQuYXN8fHAsTj1rZShfKSxBPWchPT10P3Yoe30sdCx7fSxnKTp0LEM9e307Zm9yKHZhciBJIGluIEEpXCIkXCIhPT1JWzBdJiZcImFzXCIhPT1JJiYoXCJmb3J3YXJkZWRBc1wiPT09ST9DLmFzPUFbSV06KGQ/ZChJLG0sXyk6IU58fG0oSSkpJiYoQ1tJXT1BW0ldKSk7cmV0dXJuIHQuc3R5bGUmJmcuc3R5bGUhPT10LnN0eWxlJiYoQy5zdHlsZT12KHt9LHQuc3R5bGUse30sZy5zdHlsZSkpLEMuY2xhc3NOYW1lPUFycmF5LnByb3RvdHlwZS5jb25jYXQoYyxoLFMhPT1oP1M6bnVsbCx0LmNsYXNzTmFtZSxnLmNsYXNzTmFtZSkuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpLEMucmVmPXcsdShfLEMpfShDLGUsdCxQKX07cmV0dXJuIE8uZGlzcGxheU5hbWU9ZiwoQz1yLmZvcndhcmRSZWYoTykpLmF0dHJzPVMsQy5jb21wb25lbnRTdHlsZT1JLEMuZGlzcGxheU5hbWU9ZixDLnNob3VsZEZvcndhcmRQcm9wPUEsQy5mb2xkZWRDb21wb25lbnRJZHM9bz9BcnJheS5wcm90b3R5cGUuY29uY2F0KGUuZm9sZGVkQ29tcG9uZW50SWRzLGUuc3R5bGVkQ29tcG9uZW50SWQpOncsQy5zdHlsZWRDb21wb25lbnRJZD1nLEMudGFyZ2V0PW8/ZS50YXJnZXQ6ZSxDLndpdGhDb21wb25lbnQ9ZnVuY3Rpb24oZSl7dmFyIHI9dC5jb21wb25lbnRJZCxvPWZ1bmN0aW9uKGUsdCl7aWYobnVsbD09ZSlyZXR1cm57fTt2YXIgbixyLG89e30scz1PYmplY3Qua2V5cyhlKTtmb3Iocj0wO3I8cy5sZW5ndGg7cisrKW49c1tyXSx0LmluZGV4T2Yobik+PTB8fChvW25dPWVbbl0pO3JldHVybiBvfSh0LFtcImNvbXBvbmVudElkXCJdKSxzPXImJnIrXCItXCIrKGtlKGUpP2U6VGUoXyhlKSkpO3JldHVybiBxZShlLHYoe30sbyx7YXR0cnM6Uyxjb21wb25lbnRJZDpzfSksbil9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDLFwiZGVmYXVsdFByb3BzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHN9LHNldDpmdW5jdGlvbih0KXt0aGlzLl9mb2xkZWREZWZhdWx0UHJvcHM9bz9NZSh7fSxlLmRlZmF1bHRQcm9wcyx0KTp0fX0pLFwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihPZShmLGcpLEMud2FyblRvb01hbnlDbGFzc2VzPWZ1bmN0aW9uKGUsdCl7dmFyIG49e30scj0hMTtyZXR1cm4gZnVuY3Rpb24obyl7aWYoIXImJihuW29dPSEwLE9iamVjdC5rZXlzKG4pLmxlbmd0aD49MjAwKSl7dmFyIHM9dD8nIHdpdGggdGhlIGlkIG9mIFwiJyt0KydcIic6XCJcIjtjb25zb2xlLndhcm4oXCJPdmVyIDIwMCBjbGFzc2VzIHdlcmUgZ2VuZXJhdGVkIGZvciBjb21wb25lbnQgXCIrZStzK1wiLlxcbkNvbnNpZGVyIHVzaW5nIHRoZSBhdHRycyBtZXRob2QsIHRvZ2V0aGVyIHdpdGggYSBzdHlsZSBvYmplY3QgZm9yIGZyZXF1ZW50bHkgY2hhbmdlZCBzdHlsZXMuXFxuRXhhbXBsZTpcXG4gIGNvbnN0IENvbXBvbmVudCA9IHN0eWxlZC5kaXYuYXR0cnMocHJvcHMgPT4gKHtcXG4gICAgc3R5bGU6IHtcXG4gICAgICBiYWNrZ3JvdW5kOiBwcm9wcy5iYWNrZ3JvdW5kLFxcbiAgICB9LFxcbiAgfSkpYHdpZHRoOiAxMDAlO2BcXG5cXG4gIDxDb21wb25lbnQgLz5cIikscj0hMCxuPXt9fX19KGYsZykpLEMudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIi5cIitDLnN0eWxlZENvbXBvbmVudElkfSxpJiZ5KEMsZSx7YXR0cnM6ITAsY29tcG9uZW50U3R5bGU6ITAsZGlzcGxheU5hbWU6ITAsZm9sZGVkQ29tcG9uZW50SWRzOiEwLHNob3VsZEZvcndhcmRQcm9wOiEwLHN0eWxlZENvbXBvbmVudElkOiEwLHRhcmdldDohMCx3aXRoQ29tcG9uZW50OiEwfSksQ312YXIgSGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uIGUodCxyLG8pe2lmKHZvaWQgMD09PW8mJihvPUUpLCFuKHIpKXJldHVybiBqKDEsU3RyaW5nKHIpKTt2YXIgcz1mdW5jdGlvbigpe3JldHVybiB0KHIsbyxDZS5hcHBseSh2b2lkIDAsYXJndW1lbnRzKSl9O3JldHVybiBzLndpdGhDb25maWc9ZnVuY3Rpb24obil7cmV0dXJuIGUodCxyLHYoe30sbyx7fSxuKSl9LHMuYXR0cnM9ZnVuY3Rpb24obil7cmV0dXJuIGUodCxyLHYoe30sbyx7YXR0cnM6QXJyYXkucHJvdG90eXBlLmNvbmNhdChvLmF0dHJzLG4pLmZpbHRlcihCb29sZWFuKX0pKX0sc30ocWUsZSl9O1tcImFcIixcImFiYnJcIixcImFkZHJlc3NcIixcImFyZWFcIixcImFydGljbGVcIixcImFzaWRlXCIsXCJhdWRpb1wiLFwiYlwiLFwiYmFzZVwiLFwiYmRpXCIsXCJiZG9cIixcImJpZ1wiLFwiYmxvY2txdW90ZVwiLFwiYm9keVwiLFwiYnJcIixcImJ1dHRvblwiLFwiY2FudmFzXCIsXCJjYXB0aW9uXCIsXCJjaXRlXCIsXCJjb2RlXCIsXCJjb2xcIixcImNvbGdyb3VwXCIsXCJkYXRhXCIsXCJkYXRhbGlzdFwiLFwiZGRcIixcImRlbFwiLFwiZGV0YWlsc1wiLFwiZGZuXCIsXCJkaWFsb2dcIixcImRpdlwiLFwiZGxcIixcImR0XCIsXCJlbVwiLFwiZW1iZWRcIixcImZpZWxkc2V0XCIsXCJmaWdjYXB0aW9uXCIsXCJmaWd1cmVcIixcImZvb3RlclwiLFwiZm9ybVwiLFwiaDFcIixcImgyXCIsXCJoM1wiLFwiaDRcIixcImg1XCIsXCJoNlwiLFwiaGVhZFwiLFwiaGVhZGVyXCIsXCJoZ3JvdXBcIixcImhyXCIsXCJodG1sXCIsXCJpXCIsXCJpZnJhbWVcIixcImltZ1wiLFwiaW5wdXRcIixcImluc1wiLFwia2JkXCIsXCJrZXlnZW5cIixcImxhYmVsXCIsXCJsZWdlbmRcIixcImxpXCIsXCJsaW5rXCIsXCJtYWluXCIsXCJtYXBcIixcIm1hcmtcIixcIm1hcnF1ZWVcIixcIm1lbnVcIixcIm1lbnVpdGVtXCIsXCJtZXRhXCIsXCJtZXRlclwiLFwibmF2XCIsXCJub3NjcmlwdFwiLFwib2JqZWN0XCIsXCJvbFwiLFwib3B0Z3JvdXBcIixcIm9wdGlvblwiLFwib3V0cHV0XCIsXCJwXCIsXCJwYXJhbVwiLFwicGljdHVyZVwiLFwicHJlXCIsXCJwcm9ncmVzc1wiLFwicVwiLFwicnBcIixcInJ0XCIsXCJydWJ5XCIsXCJzXCIsXCJzYW1wXCIsXCJzY3JpcHRcIixcInNlY3Rpb25cIixcInNlbGVjdFwiLFwic21hbGxcIixcInNvdXJjZVwiLFwic3BhblwiLFwic3Ryb25nXCIsXCJzdHlsZVwiLFwic3ViXCIsXCJzdW1tYXJ5XCIsXCJzdXBcIixcInRhYmxlXCIsXCJ0Ym9keVwiLFwidGRcIixcInRleHRhcmVhXCIsXCJ0Zm9vdFwiLFwidGhcIixcInRoZWFkXCIsXCJ0aW1lXCIsXCJ0aXRsZVwiLFwidHJcIixcInRyYWNrXCIsXCJ1XCIsXCJ1bFwiLFwidmFyXCIsXCJ2aWRlb1wiLFwid2JyXCIsXCJjaXJjbGVcIixcImNsaXBQYXRoXCIsXCJkZWZzXCIsXCJlbGxpcHNlXCIsXCJmb3JlaWduT2JqZWN0XCIsXCJnXCIsXCJpbWFnZVwiLFwibGluZVwiLFwibGluZWFyR3JhZGllbnRcIixcIm1hcmtlclwiLFwibWFza1wiLFwicGF0aFwiLFwicGF0dGVyblwiLFwicG9seWdvblwiLFwicG9seWxpbmVcIixcInJhZGlhbEdyYWRpZW50XCIsXCJyZWN0XCIsXCJzdG9wXCIsXCJzdmdcIixcInRleHRcIixcInRleHRQYXRoXCIsXCJ0c3BhblwiXS5mb3JFYWNoKChmdW5jdGlvbihlKXtIZVtlXT1IZShlKX0pKTt2YXIgJGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7dGhpcy5ydWxlcz1lLHRoaXMuY29tcG9uZW50SWQ9dCx0aGlzLmlzU3RhdGljPXJlKGUpLFoucmVnaXN0ZXJJZCh0aGlzLmNvbXBvbmVudElkKzEpfXZhciB0PWUucHJvdG90eXBlO3JldHVybiB0LmNyZWF0ZVN0eWxlcz1mdW5jdGlvbihlLHQsbixyKXt2YXIgbz1yKE5lKHRoaXMucnVsZXMsdCxuLHIpLmpvaW4oXCJcIiksXCJcIikscz10aGlzLmNvbXBvbmVudElkK2U7bi5pbnNlcnRSdWxlcyhzLHMsbyl9LHQucmVtb3ZlU3R5bGVzPWZ1bmN0aW9uKGUsdCl7dC5jbGVhclJ1bGVzKHRoaXMuY29tcG9uZW50SWQrZSl9LHQucmVuZGVyU3R5bGVzPWZ1bmN0aW9uKGUsdCxuLHIpe2U+MiYmWi5yZWdpc3RlcklkKHRoaXMuY29tcG9uZW50SWQrZSksdGhpcy5yZW1vdmVTdHlsZXMoZSxuKSx0aGlzLmNyZWF0ZVN0eWxlcyhlLHQsbixyKX0sZX0oKTtmdW5jdGlvbiBXZShlKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLG89MTtvPHQ7bysrKW5bby0xXT1hcmd1bWVudHNbb107dmFyIGk9Q2UuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobikpLGE9XCJzYy1nbG9iYWwtXCIreGUoSlNPTi5zdHJpbmdpZnkoaSkpLHU9bmV3ICRlKGksYSk7ZnVuY3Rpb24gbChlKXt2YXIgdD1mZSgpLG49bWUoKSxvPXMoR2UpLGw9Yyh0LmFsbG9jYXRlR1NJbnN0YW5jZShhKSkuY3VycmVudDtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZyLkNoaWxkcmVuLmNvdW50KGUuY2hpbGRyZW4pJiZjb25zb2xlLndhcm4oXCJUaGUgZ2xvYmFsIHN0eWxlIGNvbXBvbmVudCBcIithK1wiIHdhcyBnaXZlbiBjaGlsZCBKU1guIGNyZWF0ZUdsb2JhbFN0eWxlIGRvZXMgbm90IHJlbmRlciBjaGlsZHJlbi5cIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaS5zb21lKChmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZSYmLTEhPT1lLmluZGV4T2YoXCJAaW1wb3J0XCIpfSkpJiZjb25zb2xlLndhcm4oXCJQbGVhc2UgZG8gbm90IHVzZSBAaW1wb3J0IENTUyBzeW50YXggaW4gY3JlYXRlR2xvYmFsU3R5bGUgYXQgdGhpcyB0aW1lLCBhcyB0aGUgQ1NTT00gQVBJcyB3ZSB1c2UgaW4gcHJvZHVjdGlvbiBkbyBub3QgaGFuZGxlIGl0IHdlbGwuIEluc3RlYWQsIHdlIHJlY29tbWVuZCB1c2luZyBhIGxpYnJhcnkgc3VjaCBhcyByZWFjdC1oZWxtZXQgdG8gaW5qZWN0IGEgdHlwaWNhbCA8bGluaz4gbWV0YSB0YWcgdG8gdGhlIHN0eWxlc2hlZXQsIG9yIHNpbXBseSBlbWJlZGRpbmcgaXQgbWFudWFsbHkgaW4geW91ciBpbmRleC5odG1sIDxoZWFkPiBzZWN0aW9uIGZvciBhIHNpbXBsZXIgYXBwLlwiKSx0LnNlcnZlciYmaChsLGUsdCxvLG4pLGQoKGZ1bmN0aW9uKCl7aWYoIXQuc2VydmVyKXJldHVybiBoKGwsZSx0LG8sbiksZnVuY3Rpb24oKXtyZXR1cm4gdS5yZW1vdmVTdHlsZXMobCx0KX19KSxbbCxlLHQsbyxuXSksbnVsbH1mdW5jdGlvbiBoKGUsdCxuLHIsbyl7aWYodS5pc1N0YXRpYyl1LnJlbmRlclN0eWxlcyhlLE8sbixvKTtlbHNle3ZhciBzPXYoe30sdCx7dGhlbWU6UmUodCxyLGwuZGVmYXVsdFByb3BzKX0pO3UucmVuZGVyU3R5bGVzKGUscyxuLG8pfX1yZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZPZShhKSxyLm1lbW8obCl9ZnVuY3Rpb24gVWUoZSl7XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmXCJSZWFjdE5hdGl2ZVwiPT09bmF2aWdhdG9yLnByb2R1Y3QmJmNvbnNvbGUud2FybihcImBrZXlmcmFtZXNgIGNhbm5vdCBiZSB1c2VkIG9uIFJlYWN0TmF0aXZlLCBvbmx5IG9uIHRoZSB3ZWIuIFRvIGRvIGFuaW1hdGlvbiBpbiBSZWFjdE5hdGl2ZSBwbGVhc2UgdXNlIEFuaW1hdGVkLlwiKTtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxuPW5ldyBBcnJheSh0PjE/dC0xOjApLHI9MTtyPHQ7cisrKW5bci0xXT1hcmd1bWVudHNbcl07dmFyIG89Q2UuYXBwbHkodm9pZCAwLFtlXS5jb25jYXQobikpLmpvaW4oXCJcIikscz14ZShvKTtyZXR1cm4gbmV3IHZlKHMsbyl9dmFyIEplPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpe3ZhciBlPXRoaXM7dGhpcy5fZW1pdFNoZWV0Q1NTPWZ1bmN0aW9uKCl7dmFyIHQ9ZS5pbnN0YW5jZS50b1N0cmluZygpO2lmKCF0KXJldHVyblwiXCI7dmFyIG49cSgpO3JldHVyblwiPHN0eWxlIFwiK1tuJiYnbm9uY2U9XCInK24rJ1wiJyxBKyc9XCJ0cnVlXCInLCdkYXRhLXN0eWxlZC12ZXJzaW9uPVwiNS4zLjVcIiddLmZpbHRlcihCb29sZWFuKS5qb2luKFwiIFwiKStcIj5cIit0K1wiPC9zdHlsZT5cIn0sdGhpcy5nZXRTdHlsZVRhZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gZS5zZWFsZWQ/aigyKTplLl9lbWl0U2hlZXRDU1MoKX0sdGhpcy5nZXRTdHlsZUVsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgdDtpZihlLnNlYWxlZClyZXR1cm4gaigyKTt2YXIgbj0oKHQ9e30pW0FdPVwiXCIsdFtcImRhdGEtc3R5bGVkLXZlcnNpb25cIl09XCI1LjMuNVwiLHQuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e19faHRtbDplLmluc3RhbmNlLnRvU3RyaW5nKCl9LHQpLG89cSgpO3JldHVybiBvJiYobi5ub25jZT1vKSxbci5jcmVhdGVFbGVtZW50KFwic3R5bGVcIix2KHt9LG4se2tleTpcInNjLTAtMFwifSkpXX0sdGhpcy5zZWFsPWZ1bmN0aW9uKCl7ZS5zZWFsZWQ9ITB9LHRoaXMuaW5zdGFuY2U9bmV3IFooe2lzU2VydmVyOiEwfSksdGhpcy5zZWFsZWQ9ITF9dmFyIHQ9ZS5wcm90b3R5cGU7cmV0dXJuIHQuY29sbGVjdFN0eWxlcz1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zZWFsZWQ/aigyKTpyLmNyZWF0ZUVsZW1lbnQoeWUse3NoZWV0OnRoaXMuaW5zdGFuY2V9LGUpfSx0LmludGVybGVhdmVXaXRoTm9kZVN0cmVhbT1mdW5jdGlvbihlKXtyZXR1cm4gaigzKX0sZX0oKSxYZT1mdW5jdGlvbihlKXt2YXIgdD1yLmZvcndhcmRSZWYoKGZ1bmN0aW9uKHQsbil7dmFyIG89cyhHZSksaT1lLmRlZmF1bHRQcm9wcyxhPVJlKHQsbyxpKTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZ2b2lkIDA9PT1hJiZjb25zb2xlLndhcm4oJ1t3aXRoVGhlbWVdIFlvdSBhcmUgbm90IHVzaW5nIGEgVGhlbWVQcm92aWRlciBub3IgcGFzc2luZyBhIHRoZW1lIHByb3Agb3IgYSB0aGVtZSBpbiBkZWZhdWx0UHJvcHMgaW4gY29tcG9uZW50IGNsYXNzIFwiJytfKGUpKydcIicpLHIuY3JlYXRlRWxlbWVudChlLHYoe30sdCx7dGhlbWU6YSxyZWY6bn0pKX0pKTtyZXR1cm4geSh0LGUpLHQuZGlzcGxheU5hbWU9XCJXaXRoVGhlbWUoXCIrXyhlKStcIilcIix0fSxaZT1mdW5jdGlvbigpe3JldHVybiBzKEdlKX0sS2U9e1N0eWxlU2hlZXQ6WixtYXN0ZXJTaGVldDpoZX07XCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmXCJSZWFjdE5hdGl2ZVwiPT09bmF2aWdhdG9yLnByb2R1Y3QmJmNvbnNvbGUud2FybihcIkl0IGxvb2tzIGxpa2UgeW91J3ZlIGltcG9ydGVkICdzdHlsZWQtY29tcG9uZW50cycgb24gUmVhY3QgTmF0aXZlLlxcblBlcmhhcHMgeW91J3JlIGxvb2tpbmcgdG8gaW1wb3J0ICdzdHlsZWQtY29tcG9uZW50cy9uYXRpdmUnP1xcblJlYWQgbW9yZSBhYm91dCB0aGlzIGF0IGh0dHBzOi8vd3d3LnN0eWxlZC1jb21wb25lbnRzLmNvbS9kb2NzL2Jhc2ljcyNyZWFjdC1uYXRpdmVcIiksXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ0ZXN0XCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmKHdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdPXdpbmRvd1tcIl9fc3R5bGVkLWNvbXBvbmVudHMtaW5pdF9fXCJdfHwwLDE9PT13aW5kb3dbXCJfX3N0eWxlZC1jb21wb25lbnRzLWluaXRfX1wiXSYmY29uc29sZS53YXJuKFwiSXQgbG9va3MgbGlrZSB0aGVyZSBhcmUgc2V2ZXJhbCBpbnN0YW5jZXMgb2YgJ3N0eWxlZC1jb21wb25lbnRzJyBpbml0aWFsaXplZCBpbiB0aGlzIGFwcGxpY2F0aW9uLiBUaGlzIG1heSBjYXVzZSBkeW5hbWljIHN0eWxlcyB0byBub3QgcmVuZGVyIHByb3Blcmx5LCBlcnJvcnMgZHVyaW5nIHRoZSByZWh5ZHJhdGlvbiBwcm9jZXNzLCBhIG1pc3NpbmcgdGhlbWUgcHJvcCwgYW5kIG1ha2VzIHlvdXIgYXBwbGljYXRpb24gYmlnZ2VyIHdpdGhvdXQgZ29vZCByZWFzb24uXFxuXFxuU2VlIGh0dHBzOi8vcy1jLnNoLzJCQVh6ZWQgZm9yIG1vcmUgaW5mby5cIiksd2luZG93W1wiX19zdHlsZWQtY29tcG9uZW50cy1pbml0X19cIl0rPTEpO2V4cG9ydCBkZWZhdWx0IEhlO2V4cG9ydHtKZSBhcyBTZXJ2ZXJTdHlsZVNoZWV0LGxlIGFzIFN0eWxlU2hlZXRDb25zdW1lcix1ZSBhcyBTdHlsZVNoZWV0Q29udGV4dCx5ZSBhcyBTdHlsZVNoZWV0TWFuYWdlcixMZSBhcyBUaGVtZUNvbnN1bWVyLEdlIGFzIFRoZW1lQ29udGV4dCxGZSBhcyBUaGVtZVByb3ZpZGVyLEtlIGFzIF9fUFJJVkFURV9fLFdlIGFzIGNyZWF0ZUdsb2JhbFN0eWxlLENlIGFzIGNzcyxOIGFzIGlzU3R5bGVkQ29tcG9uZW50LFVlIGFzIGtleWZyYW1lcyxaZSBhcyB1c2VUaGVtZSxDIGFzIHZlcnNpb24sWGUgYXMgd2l0aFRoZW1lfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlZC1jb21wb25lbnRzLmJyb3dzZXIuZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgY3JlYXRlR2xvYmFsU3R5bGUgfSBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBHbG9iYWxTdHlsZSA9IGNyZWF0ZUdsb2JhbFN0eWxlYFxyXG5pbnB1dCwgbGFiZWwge1xyXG4gICAgZGlzcGxheTpibG9jaztcclxufVxyXG5cclxuYm9keSB7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gICAgZm9udC1mYW1pbHk6IFJvYm90bywgSGVsdmV0aWNhLCBzYW5zLXNlcmlmO1xyXG59XHJcbkBrZXlmcmFtZXMgZ3JhZGllbnQge1xyXG4gICAgMCUge1xyXG4gICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDAlIDUwJTtcclxuICAgIH1cclxuIFxyXG4gICAgNTAlIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAxMDAlIDUwJTtcclxuICAgIH1cclxuIFxyXG4gICAgMTAwJSB7XHJcbiAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCUgNTAlO1xyXG4gICAgfVxyXG59YDtcclxuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuXG4vKipcclxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjYWN0aW9uXHJcbiAqL1xudmFyIEFjdGlvbjtcblxuKGZ1bmN0aW9uIChBY3Rpb24pIHtcbiAgLyoqXHJcbiAgICogQSBQT1AgaW5kaWNhdGVzIGEgY2hhbmdlIHRvIGFuIGFyYml0cmFyeSBpbmRleCBpbiB0aGUgaGlzdG9yeSBzdGFjaywgc3VjaFxyXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXHJcbiAgICogbmF2aWdhdGlvbiwgb25seSB0aGF0IHRoZSBjdXJyZW50IGluZGV4IGNoYW5nZWQuXHJcbiAgICpcclxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXHJcbiAgICovXG4gIEFjdGlvbltcIlBvcFwiXSA9IFwiUE9QXCI7XG4gIC8qKlxyXG4gICAqIEEgUFVTSCBpbmRpY2F0ZXMgYSBuZXcgZW50cnkgYmVpbmcgYWRkZWQgdG8gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2ggYXMgd2hlblxyXG4gICAqIGEgbGluayBpcyBjbGlja2VkIGFuZCBhIG5ldyBwYWdlIGxvYWRzLiBXaGVuIHRoaXMgaGFwcGVucywgYWxsIHN1YnNlcXVlbnRcclxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cclxuICAgKi9cblxuICBBY3Rpb25bXCJQdXNoXCJdID0gXCJQVVNIXCI7XG4gIC8qKlxyXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXHJcbiAgICogYmVpbmcgcmVwbGFjZWQgYnkgYSBuZXcgb25lLlxyXG4gICAqL1xuXG4gIEFjdGlvbltcIlJlcGxhY2VcIl0gPSBcIlJFUExBQ0VcIjtcbn0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTtcblxudmFyIHJlYWRPbmx5ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmZyZWV6ZShvYmopO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iajtcbn07XG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cblxudmFyIEJlZm9yZVVubG9hZEV2ZW50VHlwZSA9ICdiZWZvcmV1bmxvYWQnO1xudmFyIEhhc2hDaGFuZ2VFdmVudFR5cGUgPSAnaGFzaGNoYW5nZSc7XG52YXIgUG9wU3RhdGVFdmVudFR5cGUgPSAncG9wc3RhdGUnO1xuLyoqXHJcbiAqIEJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGxvY2F0aW9uIGluIHJlZ3VsYXIgVVJMcy4gVGhpcyBpcyB0aGUgc3RhbmRhcmQgZm9yXHJcbiAqIG1vc3Qgd2ViIGFwcHMsIGJ1dCBpdCByZXF1aXJlcyBzb21lIGNvbmZpZ3VyYXRpb24gb24gdGhlIHNlcnZlciB0byBlbnN1cmUgeW91XHJcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZWJyb3dzZXJoaXN0b3J5XHJcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVCcm93c2VySGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkd2luZG93ID0gX29wdGlvbnMud2luZG93LFxuICAgICAgd2luZG93ID0gX29wdGlvbnMkd2luZG93ID09PSB2b2lkIDAgPyBkb2N1bWVudC5kZWZhdWx0VmlldyA6IF9vcHRpb25zJHdpbmRvdztcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcblxuICBmdW5jdGlvbiBnZXRJbmRleEFuZExvY2F0aW9uKCkge1xuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge307XG4gICAgcmV0dXJuIFtzdGF0ZS5pZHgsIHJlYWRPbmx5KHtcbiAgICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICAgIHNlYXJjaDogc2VhcmNoLFxuICAgICAgaGFzaDogaGFzaCxcbiAgICAgIHN0YXRlOiBzdGF0ZS51c3IgfHwgbnVsbCxcbiAgICAgIGtleTogc3RhdGUua2V5IHx8ICdkZWZhdWx0J1xuICAgIH0pXTtcbiAgfVxuXG4gIHZhciBibG9ja2VkUG9wVHggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBpZiAoYmxvY2tlZFBvcFR4KSB7XG4gICAgICBibG9ja2Vycy5jYWxsKGJsb2NrZWRQb3BUeCk7XG4gICAgICBibG9ja2VkUG9wVHggPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgICAgICBuZXh0SW5kZXggPSBfZ2V0SW5kZXhBbmRMb2NhdGlvblswXSxcbiAgICAgICAgICBuZXh0TG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvblsxXTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCkge1xuICAgICAgICBpZiAobmV4dEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgZGVsdGEgPSBpbmRleCAtIG5leHRJbmRleDtcblxuICAgICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgICAgLy8gUmV2ZXJ0IHRoZSBQT1BcbiAgICAgICAgICAgIGJsb2NrZWRQb3BUeCA9IHtcbiAgICAgICAgICAgICAgYWN0aW9uOiBuZXh0QWN0aW9uLFxuICAgICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgICAgICByZXRyeTogZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICAgICAgICAgICAgZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbyhkZWx0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRyeWluZyB0byBQT1AgdG8gYSBsb2NhdGlvbiB3aXRoIG5vIGluZGV4LiBXZSBkaWQgbm90IGNyZWF0ZVxuICAgICAgICAgIC8vIHRoaXMgbG9jYXRpb24sIHNvIHdlIGNhbid0IGVmZmVjdGl2ZWx5IGJsb2NrIHRoZSBuYXZpZ2F0aW9uLlxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIC8vIFRPRE86IFdyaXRlIHVwIGEgZG9jIHRoYXQgZXhwbGFpbnMgb3VyIGJsb2NraW5nIHN0cmF0ZWd5IGluXG4gICAgICAgICAgLy8gZGV0YWlsIGFuZCBsaW5rIHRvIGl0IGhlcmUgc28gcGVvcGxlIGNhbiB1bmRlcnN0YW5kIGJldHRlciB3aGF0XG4gICAgICAgICAgLy8gaXMgZ29pbmcgb24gYW5kIGhvdyB0byBhdm9pZCBpdC5cbiAgICAgICAgICBcIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgXCIgKyBcImNyZWF0ZWQgYnkgdGhlIGhpc3RvcnkgbGlicmFyeS4gVGhlIGJsb2NrIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbiwgYnV0IGluIGdlbmVyYWwgeW91IHNob3VsZCBkbyBhbGwgbmF2aWdhdGlvbiB3aXRoIHRoZSBcIiArIFwiaGlzdG9yeSBsaWJyYXJ5IChpbnN0ZWFkIG9mIHVzaW5nIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBkaXJlY3RseSkgXCIgKyBcInRvIGF2b2lkIHRoaXMgc2l0dWF0aW9uLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgdmFyIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uMiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb24yWzBdLFxuICAgICAgbG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjJbMV07XG5cbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9IC8vIHN0YXRlIGRlZmF1bHRzIHRvIGBudWxsYCBiZWNhdXNlIGB3aW5kb3cuaGlzdG9yeS5zdGF0ZWAgZG9lc1xuXG5cbiAgZnVuY3Rpb24gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlYWRPbmx5KF9leHRlbmRzKHtcbiAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgc2VhcmNoOiAnJ1xuICAgIH0sIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGtleTogY3JlYXRlS2V5KClcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCkge1xuICAgIHJldHVybiBbe1xuICAgICAgdXNyOiBuZXh0TG9jYXRpb24uc3RhdGUsXG4gICAgICBrZXk6IG5leHRMb2NhdGlvbi5rZXksXG4gICAgICBpZHg6IGluZGV4XG4gICAgfSwgY3JlYXRlSHJlZihuZXh0TG9jYXRpb24pXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFsbG93VHgoYWN0aW9uLCBsb2NhdGlvbiwgcmV0cnkpIHtcbiAgICByZXR1cm4gIWJsb2NrZXJzLmxlbmd0aCB8fCAoYmxvY2tlcnMuY2FsbCh7XG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgIHJldHJ5OiByZXRyeVxuICAgIH0pLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseVR4KG5leHRBY3Rpb24pIHtcbiAgICBhY3Rpb24gPSBuZXh0QWN0aW9uO1xuXG4gICAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uMyA9IGdldEluZGV4QW5kTG9jYXRpb24oKTtcblxuICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb24zWzBdO1xuICAgIGxvY2F0aW9uID0gX2dldEluZGV4QW5kTG9jYXRpb24zWzFdO1xuICAgIGxpc3RlbmVycy5jYWxsKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgdmFyIG5leHRMb2NhdGlvbiA9IGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICBwdXNoKHRvLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKGFsbG93VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uLCByZXRyeSkpIHtcbiAgICAgIHZhciBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIgPSBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCArIDEpLFxuICAgICAgICAgIGhpc3RvcnlTdGF0ZSA9IF9nZXRIaXN0b3J5U3RhdGVBbmRVclswXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXJbMV07IC8vIFRPRE86IFN1cHBvcnQgZm9yY2VkIHJlbG9hZGluZ1xuICAgICAgLy8gdHJ5Li4uY2F0Y2ggYmVjYXVzZSBpT1MgbGltaXRzIHVzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHMgOi9cblxuXG4gICAgICB0cnkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZShoaXN0b3J5U3RhdGUsICcnLCB1cmwpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgICAvLyB3YXkgdG8gd2FybiB0aGVtIGFib3V0IGl0IHNpbmNlIHRoZSBwYWdlIHdpbGwgcmVmcmVzaC4uLlxuICAgICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHVybCk7XG4gICAgICB9XG5cbiAgICAgIGFwcGx5VHgobmV4dEFjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZSh0bywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKTtcblxuICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgcmVwbGFjZSh0bywgc3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICB2YXIgX2dldEhpc3RvcnlTdGF0ZUFuZFVyMiA9IGdldEhpc3RvcnlTdGF0ZUFuZFVybChuZXh0TG9jYXRpb24sIGluZGV4KSxcbiAgICAgICAgICBoaXN0b3J5U3RhdGUgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIyWzBdLFxuICAgICAgICAgIHVybCA9IF9nZXRIaXN0b3J5U3RhdGVBbmRVcjJbMV07IC8vIFRPRE86IFN1cHBvcnQgZm9yY2VkIHJlbG9hZGluZ1xuXG5cbiAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKGhpc3RvcnlTdGF0ZSwgJycsIHVybCk7XG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGRlbHRhKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhkZWx0YSk7XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgYmFjazogZnVuY3Rpb24gYmFjaygpIHtcbiAgICAgIGdvKC0xKTtcbiAgICB9LFxuICAgIGZvcndhcmQ6IGZ1bmN0aW9uIGZvcndhcmQoKSB7XG4gICAgICBnbygxKTtcbiAgICB9LFxuICAgIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0sXG4gICAgYmxvY2s6IGZ1bmN0aW9uIGJsb2NrKGJsb2NrZXIpIHtcbiAgICAgIHZhciB1bmJsb2NrID0gYmxvY2tlcnMucHVzaChibG9ja2VyKTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihCZWZvcmVVbmxvYWRFdmVudFR5cGUsIHByb21wdEJlZm9yZVVubG9hZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVuYmxvY2soKTsgLy8gUmVtb3ZlIHRoZSBiZWZvcmV1bmxvYWQgbGlzdGVuZXIgc28gdGhlIGRvY3VtZW50IG1heVxuICAgICAgICAvLyBzdGlsbCBiZSBzYWx2YWdlYWJsZSBpbiB0aGUgcGFnZWhpZGUgZXZlbnQuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyN1bmxvYWRpbmctZG9jdW1lbnRzXG5cbiAgICAgICAgaWYgKCFibG9ja2Vycy5sZW5ndGgpIHtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihCZWZvcmVVbmxvYWRFdmVudFR5cGUsIHByb21wdEJlZm9yZVVubG9hZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8qKlxyXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxyXG4gKiBmb3Igc2l0dWF0aW9ucyB3aGVyZSB5b3UgZG9uJ3Qgd2FudCB0byBzZW5kIHRoZSBsb2NhdGlvbiB0byB0aGUgc2VydmVyIGZvclxyXG4gKiBzb21lIHJlYXNvbiwgZWl0aGVyIGJlY2F1c2UgeW91IGRvIGNhbm5vdCBjb25maWd1cmUgaXQgb3IgdGhlIFVSTCBzcGFjZSBpc1xyXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlaGFzaGhpc3RvcnlcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9uczIgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMyJHdpbmRvdyA9IF9vcHRpb25zMi53aW5kb3csXG4gICAgICB3aW5kb3cgPSBfb3B0aW9uczIkd2luZG93ID09PSB2b2lkIDAgPyBkb2N1bWVudC5kZWZhdWx0VmlldyA6IF9vcHRpb25zMiR3aW5kb3c7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG5cbiAgZnVuY3Rpb24gZ2V0SW5kZXhBbmRMb2NhdGlvbigpIHtcbiAgICB2YXIgX3BhcnNlUGF0aCA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpLFxuICAgICAgICBfcGFyc2VQYXRoJHBhdGhuYW1lID0gX3BhcnNlUGF0aC5wYXRobmFtZSxcbiAgICAgICAgcGF0aG5hbWUgPSBfcGFyc2VQYXRoJHBhdGhuYW1lID09PSB2b2lkIDAgPyAnLycgOiBfcGFyc2VQYXRoJHBhdGhuYW1lLFxuICAgICAgICBfcGFyc2VQYXRoJHNlYXJjaCA9IF9wYXJzZVBhdGguc2VhcmNoLFxuICAgICAgICBzZWFyY2ggPSBfcGFyc2VQYXRoJHNlYXJjaCA9PT0gdm9pZCAwID8gJycgOiBfcGFyc2VQYXRoJHNlYXJjaCxcbiAgICAgICAgX3BhcnNlUGF0aCRoYXNoID0gX3BhcnNlUGF0aC5oYXNoLFxuICAgICAgICBoYXNoID0gX3BhcnNlUGF0aCRoYXNoID09PSB2b2lkIDAgPyAnJyA6IF9wYXJzZVBhdGgkaGFzaDtcblxuICAgIHZhciBzdGF0ZSA9IGdsb2JhbEhpc3Rvcnkuc3RhdGUgfHwge307XG4gICAgcmV0dXJuIFtzdGF0ZS5pZHgsIHJlYWRPbmx5KHtcbiAgICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICAgIHNlYXJjaDogc2VhcmNoLFxuICAgICAgaGFzaDogaGFzaCxcbiAgICAgIHN0YXRlOiBzdGF0ZS51c3IgfHwgbnVsbCxcbiAgICAgIGtleTogc3RhdGUua2V5IHx8ICdkZWZhdWx0J1xuICAgIH0pXTtcbiAgfVxuXG4gIHZhciBibG9ja2VkUG9wVHggPSBudWxsO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBpZiAoYmxvY2tlZFBvcFR4KSB7XG4gICAgICBibG9ja2Vycy5jYWxsKGJsb2NrZWRQb3BUeCk7XG4gICAgICBibG9ja2VkUG9wVHggPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjQgPSBnZXRJbmRleEFuZExvY2F0aW9uKCksXG4gICAgICAgICAgbmV4dEluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb240WzBdLFxuICAgICAgICAgIG5leHRMb2NhdGlvbiA9IF9nZXRJbmRleEFuZExvY2F0aW9uNFsxXTtcblxuICAgICAgaWYgKGJsb2NrZXJzLmxlbmd0aCkge1xuICAgICAgICBpZiAobmV4dEluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgZGVsdGEgPSBpbmRleCAtIG5leHRJbmRleDtcblxuICAgICAgICAgIGlmIChkZWx0YSkge1xuICAgICAgICAgICAgLy8gUmV2ZXJ0IHRoZSBQT1BcbiAgICAgICAgICAgIGJsb2NrZWRQb3BUeCA9IHtcbiAgICAgICAgICAgICAgYWN0aW9uOiBuZXh0QWN0aW9uLFxuICAgICAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgICAgICByZXRyeTogZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICAgICAgICAgICAgZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbyhkZWx0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRyeWluZyB0byBQT1AgdG8gYSBsb2NhdGlvbiB3aXRoIG5vIGluZGV4LiBXZSBkaWQgbm90IGNyZWF0ZVxuICAgICAgICAgIC8vIHRoaXMgbG9jYXRpb24sIHNvIHdlIGNhbid0IGVmZmVjdGl2ZWx5IGJsb2NrIHRoZSBuYXZpZ2F0aW9uLlxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsIC8vIFRPRE86IFdyaXRlIHVwIGEgZG9jIHRoYXQgZXhwbGFpbnMgb3VyIGJsb2NraW5nIHN0cmF0ZWd5IGluXG4gICAgICAgICAgLy8gZGV0YWlsIGFuZCBsaW5rIHRvIGl0IGhlcmUgc28gcGVvcGxlIGNhbiB1bmRlcnN0YW5kIGJldHRlclxuICAgICAgICAgIC8vIHdoYXQgaXMgZ29pbmcgb24gYW5kIGhvdyB0byBhdm9pZCBpdC5cbiAgICAgICAgICBcIllvdSBhcmUgdHJ5aW5nIHRvIGJsb2NrIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiB0aGF0IHdhcyBub3QgXCIgKyBcImNyZWF0ZWQgYnkgdGhlIGhpc3RvcnkgbGlicmFyeS4gVGhlIGJsb2NrIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbiwgYnV0IGluIGdlbmVyYWwgeW91IHNob3VsZCBkbyBhbGwgbmF2aWdhdGlvbiB3aXRoIHRoZSBcIiArIFwiaGlzdG9yeSBsaWJyYXJ5IChpbnN0ZWFkIG9mIHVzaW5nIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSBkaXJlY3RseSkgXCIgKyBcInRvIGF2b2lkIHRoaXMgc2l0dWF0aW9uLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTsgLy8gcG9wc3RhdGUgZG9lcyBub3QgZmlyZSBvbiBoYXNoY2hhbmdlIGluIElFIDExIGFuZCBvbGQgKHRyaWRlbnQpIEVkZ2VcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZGUvZG9jcy9XZWIvQVBJL1dpbmRvdy9wb3BzdGF0ZV9ldmVudFxuXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudFR5cGUsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2dldEluZGV4QW5kTG9jYXRpb241ID0gZ2V0SW5kZXhBbmRMb2NhdGlvbigpLFxuICAgICAgICBuZXh0TG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjVbMV07IC8vIElnbm9yZSBleHRyYW5lb3VzIGhhc2hjaGFuZ2UgZXZlbnRzLlxuXG5cbiAgICBpZiAoY3JlYXRlUGF0aChuZXh0TG9jYXRpb24pICE9PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkge1xuICAgICAgaGFuZGxlUG9wKCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG5cbiAgdmFyIF9nZXRJbmRleEFuZExvY2F0aW9uNiA9IGdldEluZGV4QW5kTG9jYXRpb24oKSxcbiAgICAgIGluZGV4ID0gX2dldEluZGV4QW5kTG9jYXRpb242WzBdLFxuICAgICAgbG9jYXRpb24gPSBfZ2V0SW5kZXhBbmRMb2NhdGlvbjZbMV07XG5cbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCAnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRCYXNlSHJlZigpIHtcbiAgICB2YXIgYmFzZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2UgJiYgYmFzZS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgdmFyIHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZih0bykge1xuICAgIHJldHVybiBnZXRCYXNlSHJlZigpICsgJyMnICsgKHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZWFkT25seShfZXh0ZW5kcyh7XG4gICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBoYXNoOiAnJyxcbiAgICAgIHNlYXJjaDogJydcbiAgICB9LCB0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBrZXk6IGNyZWF0ZUtleSgpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlQW5kVXJsKG5leHRMb2NhdGlvbiwgaW5kZXgpIHtcbiAgICByZXR1cm4gW3tcbiAgICAgIHVzcjogbmV4dExvY2F0aW9uLnN0YXRlLFxuICAgICAga2V5OiBuZXh0TG9jYXRpb24ua2V5LFxuICAgICAgaWR4OiBpbmRleFxuICAgIH0sIGNyZWF0ZUhyZWYobmV4dExvY2F0aW9uKV07XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvd1R4KGFjdGlvbiwgbG9jYXRpb24sIHJldHJ5KSB7XG4gICAgcmV0dXJuICFibG9ja2Vycy5sZW5ndGggfHwgKGJsb2NrZXJzLmNhbGwoe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByZXRyeTogcmV0cnlcbiAgICB9KSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlUeChuZXh0QWN0aW9uKSB7XG4gICAgYWN0aW9uID0gbmV4dEFjdGlvbjtcblxuICAgIHZhciBfZ2V0SW5kZXhBbmRMb2NhdGlvbjcgPSBnZXRJbmRleEFuZExvY2F0aW9uKCk7XG5cbiAgICBpbmRleCA9IF9nZXRJbmRleEFuZExvY2F0aW9uN1swXTtcbiAgICBsb2NhdGlvbiA9IF9nZXRJbmRleEFuZExvY2F0aW9uN1sxXTtcbiAgICBsaXN0ZW5lcnMuY2FsbCh7XG4gICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaCh0bywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dEFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBnZXROZXh0TG9jYXRpb24odG8sIHN0YXRlKTtcblxuICAgIGZ1bmN0aW9uIHJldHJ5KCkge1xuICAgICAgcHVzaCh0bywgc3RhdGUpO1xuICAgIH1cblxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobmV4dExvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLCBcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKSA6IHZvaWQgMDtcblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICB2YXIgX2dldEhpc3RvcnlTdGF0ZUFuZFVyMyA9IGdldEhpc3RvcnlTdGF0ZUFuZFVybChuZXh0TG9jYXRpb24sIGluZGV4ICsgMSksXG4gICAgICAgICAgaGlzdG9yeVN0YXRlID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyM1swXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXIzWzFdOyAvLyBUT0RPOiBTdXBwb3J0IGZvcmNlZCByZWxvYWRpbmdcbiAgICAgIC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG5cblxuICAgICAgdHJ5IHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoaGlzdG9yeVN0YXRlLCAnJywgdXJsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIFRoZXkgYXJlIGdvaW5nIHRvIGxvc2Ugc3RhdGUgaGVyZSwgYnV0IHRoZXJlIGlzIG5vIHJlYWxcbiAgICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbih1cmwpO1xuICAgICAgfVxuXG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSk7XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIHJlcGxhY2UodG8sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG5leHRMb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJywgXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gaGFzaCBoaXN0b3J5LnJlcGxhY2UoXCIgKyBKU09OLnN0cmluZ2lmeSh0bykgKyBcIilcIikgOiB2b2lkIDA7XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgdmFyIF9nZXRIaXN0b3J5U3RhdGVBbmRVcjQgPSBnZXRIaXN0b3J5U3RhdGVBbmRVcmwobmV4dExvY2F0aW9uLCBpbmRleCksXG4gICAgICAgICAgaGlzdG9yeVN0YXRlID0gX2dldEhpc3RvcnlTdGF0ZUFuZFVyNFswXSxcbiAgICAgICAgICB1cmwgPSBfZ2V0SGlzdG9yeVN0YXRlQW5kVXI0WzFdOyAvLyBUT0RPOiBTdXBwb3J0IGZvcmNlZCByZWxvYWRpbmdcblxuXG4gICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsICcnLCB1cmwpO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnbyhkZWx0YSkge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28oZGVsdGEpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcblxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBsb2NhdGlvbjtcbiAgICB9LFxuXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGJhY2s6IGZ1bmN0aW9uIGJhY2soKSB7XG4gICAgICBnbygtMSk7XG4gICAgfSxcbiAgICBmb3J3YXJkOiBmdW5jdGlvbiBmb3J3YXJkKCkge1xuICAgICAgZ28oMSk7XG4gICAgfSxcbiAgICBsaXN0ZW46IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9LFxuICAgIGJsb2NrOiBmdW5jdGlvbiBibG9jayhibG9ja2VyKSB7XG4gICAgICB2YXIgdW5ibG9jayA9IGJsb2NrZXJzLnB1c2goYmxvY2tlcik7XG5cbiAgICAgIGlmIChibG9ja2Vycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB1bmJsb2NrKCk7IC8vIFJlbW92ZSB0aGUgYmVmb3JldW5sb2FkIGxpc3RlbmVyIHNvIHRoZSBkb2N1bWVudCBtYXlcbiAgICAgICAgLy8gc3RpbGwgYmUgc2FsdmFnZWFibGUgaW4gdGhlIHBhZ2VoaWRlIGV2ZW50LlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jdW5sb2FkaW5nLWRvY3VtZW50c1xuXG4gICAgICAgIGlmICghYmxvY2tlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoQmVmb3JlVW5sb2FkRXZlbnRUeXBlLCBwcm9tcHRCZWZvcmVVbmxvYWQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vKipcclxuICogTWVtb3J5IGhpc3Rvcnkgc3RvcmVzIHRoZSBjdXJyZW50IGxvY2F0aW9uIGluIG1lbW9yeS4gSXQgaXMgZGVzaWduZWQgZm9yIHVzZVxyXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZW1lbW9yeWhpc3RvcnlcclxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zMyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9uczMkaW5pdGlhbEVudHIgPSBfb3B0aW9uczMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9vcHRpb25zMyRpbml0aWFsRW50ciA9PT0gdm9pZCAwID8gWycvJ10gOiBfb3B0aW9uczMkaW5pdGlhbEVudHIsXG4gICAgICBpbml0aWFsSW5kZXggPSBfb3B0aW9uczMuaW5pdGlhbEluZGV4O1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICB2YXIgbG9jYXRpb24gPSByZWFkT25seShfZXh0ZW5kcyh7XG4gICAgICBwYXRobmFtZTogJy8nLFxuICAgICAgc2VhcmNoOiAnJyxcbiAgICAgIGhhc2g6ICcnLFxuICAgICAgc3RhdGU6IG51bGwsXG4gICAgICBrZXk6IGNyZWF0ZUtleSgpXG4gICAgfSwgdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IHBhcnNlUGF0aChlbnRyeSkgOiBlbnRyeSkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycsIFwiUmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGNyZWF0ZU1lbW9yeUhpc3RvcnkoeyBpbml0aWFsRW50cmllcyB9KSAoaW52YWxpZCBlbnRyeTogXCIgKyBKU09OLnN0cmluZ2lmeShlbnRyeSkgKyBcIilcIikgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9KTtcbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4ID09IG51bGwgPyBlbnRyaWVzLmxlbmd0aCAtIDEgOiBpbml0aWFsSW5kZXgsIDAsIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICB2YXIgbG9jYXRpb24gPSBlbnRyaWVzW2luZGV4XTtcbiAgdmFyIGxpc3RlbmVycyA9IGNyZWF0ZUV2ZW50cygpO1xuICB2YXIgYmxvY2tlcnMgPSBjcmVhdGVFdmVudHMoKTtcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlYWRPbmx5KF9leHRlbmRzKHtcbiAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaDogJycsXG4gICAgICBoYXNoOiAnJ1xuICAgIH0sIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgPyBwYXJzZVBhdGgodG8pIDogdG8sIHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGtleTogY3JlYXRlS2V5KClcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvd1R4KGFjdGlvbiwgbG9jYXRpb24sIHJldHJ5KSB7XG4gICAgcmV0dXJuICFibG9ja2Vycy5sZW5ndGggfHwgKGJsb2NrZXJzLmNhbGwoe1xuICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICByZXRyeTogcmV0cnlcbiAgICB9KSwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pIHtcbiAgICBhY3Rpb24gPSBuZXh0QWN0aW9uO1xuICAgIGxvY2F0aW9uID0gbmV4dExvY2F0aW9uO1xuICAgIGxpc3RlbmVycy5jYWxsKHtcbiAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIHZhciBuZXh0QWN0aW9uID0gQWN0aW9uLlB1c2g7XG4gICAgdmFyIG5leHRMb2NhdGlvbiA9IGdldE5leHRMb2NhdGlvbih0bywgc3RhdGUpO1xuXG4gICAgZnVuY3Rpb24gcmV0cnkoKSB7XG4gICAgICBwdXNoKHRvLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJywgXCJSZWxhdGl2ZSBwYXRobmFtZXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gbWVtb3J5IGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKSA6IHZvaWQgMDtcblxuICAgIGlmIChhbGxvd1R4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbiwgcmV0cnkpKSB7XG4gICAgICBpbmRleCArPSAxO1xuICAgICAgZW50cmllcy5zcGxpY2UoaW5kZXgsIGVudHJpZXMubGVuZ3RoLCBuZXh0TG9jYXRpb24pO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB2YXIgbmV4dExvY2F0aW9uID0gZ2V0TmV4dExvY2F0aW9uKHRvLCBzdGF0ZSk7XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIHJlcGxhY2UodG8sIHN0YXRlKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nLCBcIlJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBtZW1vcnkgaGlzdG9yeS5yZXBsYWNlKFwiICsgSlNPTi5zdHJpbmdpZnkodG8pICsgXCIpXCIpIDogdm9pZCAwO1xuXG4gICAgaWYgKGFsbG93VHgobmV4dEFjdGlvbiwgbmV4dExvY2F0aW9uLCByZXRyeSkpIHtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgYXBwbHlUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKGRlbHRhKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGluZGV4ICsgZGVsdGEsIDAsIGVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIG5leHRBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHZhciBuZXh0TG9jYXRpb24gPSBlbnRyaWVzW25leHRJbmRleF07XG5cbiAgICBmdW5jdGlvbiByZXRyeSgpIHtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG5cbiAgICBpZiAoYWxsb3dUeChuZXh0QWN0aW9uLCBuZXh0TG9jYXRpb24sIHJldHJ5KSkge1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBhcHBseVR4KG5leHRBY3Rpb24sIG5leHRMb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgZ2V0IGluZGV4KCkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG5cbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGxvY2F0aW9uO1xuICAgIH0sXG5cbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgYmFjazogZnVuY3Rpb24gYmFjaygpIHtcbiAgICAgIGdvKC0xKTtcbiAgICB9LFxuICAgIGZvcndhcmQ6IGZ1bmN0aW9uIGZvcndhcmQoKSB7XG4gICAgICBnbygxKTtcbiAgICB9LFxuICAgIGxpc3RlbjogZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0sXG4gICAgYmxvY2s6IGZ1bmN0aW9uIGJsb2NrKGJsb2NrZXIpIHtcbiAgICAgIHJldHVybiBibG9ja2Vycy5wdXNoKGJsb2NrZXIpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufVxuXG5mdW5jdGlvbiBwcm9tcHRCZWZvcmVVbmxvYWQoZXZlbnQpIHtcbiAgLy8gQ2FuY2VsIHRoZSBldmVudC5cbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gQ2hyb21lIChhbmQgbGVnYWN5IElFKSByZXF1aXJlcyByZXR1cm5WYWx1ZSB0byBiZSBzZXQuXG5cbiAgZXZlbnQucmV0dXJuVmFsdWUgPSAnJztcbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRzKCkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIGhhbmRsZXJzLmxlbmd0aDtcbiAgICB9LFxuXG4gICAgcHVzaDogZnVuY3Rpb24gcHVzaChmbikge1xuICAgICAgaGFuZGxlcnMucHVzaChmbik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgIHJldHVybiBoYW5kbGVyICE9PSBmbjtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0sXG4gICAgY2FsbDogZnVuY3Rpb24gY2FsbChhcmcpIHtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbiAmJiBmbihhcmcpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOCk7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIHN0cmluZyBVUkwgcGF0aCBmcm9tIHRoZSBnaXZlbiBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxyXG4gKlxyXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vaGlzdG9yeS90cmVlL21haW4vZG9jcy9hcGktcmVmZXJlbmNlLm1kI2NyZWF0ZXBhdGhcclxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlUGF0aChfcmVmKSB7XG4gIHZhciBfcmVmJHBhdGhuYW1lID0gX3JlZi5wYXRobmFtZSxcbiAgICAgIHBhdGhuYW1lID0gX3JlZiRwYXRobmFtZSA9PT0gdm9pZCAwID8gJy8nIDogX3JlZiRwYXRobmFtZSxcbiAgICAgIF9yZWYkc2VhcmNoID0gX3JlZi5zZWFyY2gsXG4gICAgICBzZWFyY2ggPSBfcmVmJHNlYXJjaCA9PT0gdm9pZCAwID8gJycgOiBfcmVmJHNlYXJjaCxcbiAgICAgIF9yZWYkaGFzaCA9IF9yZWYuaGFzaCxcbiAgICAgIGhhc2ggPSBfcmVmJGhhc2ggPT09IHZvaWQgMCA/ICcnIDogX3JlZiRoYXNoO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRobmFtZSArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aG5hbWUgKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuICByZXR1cm4gcGF0aG5hbWU7XG59XG4vKipcclxuICogUGFyc2VzIGEgc3RyaW5nIFVSTCBwYXRoIGludG8gaXRzIHNlcGFyYXRlIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXHJcbiAqXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjcGFyc2VwYXRoXHJcbiAqL1xuXG5mdW5jdGlvbiBwYXJzZVBhdGgocGF0aCkge1xuICB2YXIgcGFyc2VkUGF0aCA9IHt9O1xuXG4gIGlmIChwYXRoKSB7XG4gICAgdmFyIGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZignIycpO1xuXG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKCc/Jyk7XG5cbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cblxuZXhwb3J0IHsgQWN0aW9uLCBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZU1lbW9yeUhpc3RvcnksIGNyZWF0ZVBhdGgsIHBhcnNlUGF0aCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciB2Ni4zLjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0IHsgcGFyc2VQYXRoLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBBY3Rpb24gfSBmcm9tICdoaXN0b3J5JztcbmV4cG9ydCB7IEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgcGFyc2VQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VNZW1vLCB1c2VSZWYsIHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2ssIGNyZWF0ZUVsZW1lbnQsIHVzZVN0YXRlLCB1c2VMYXlvdXRFZmZlY3QsIENoaWxkcmVuLCBpc1ZhbGlkRWxlbWVudCwgRnJhZ21lbnQgfSBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IE5hdmlnYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2aWdhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIk5hdmlnYXRpb25cIjtcbn1cblxuY29uc3QgTG9jYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL2NyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTG9jYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJMb2NhdGlvblwiO1xufVxuXG5jb25zdCBSb3V0ZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dCh7XG4gIG91dGxldDogbnVsbCxcbiAgbWF0Y2hlczogW11cbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVcIjtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG59XG5mdW5jdGlvbiB3YXJuaW5nKGNvbmQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxufVxuY29uc3QgYWxyZWFkeVdhcm5lZCA9IHt9O1xuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBtZXNzYWdlKSA6IHZvaWQgMDtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI2dlbmVyYXRlcGF0aFxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCwgcGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGgucmVwbGFjZSgvOihcXHcrKS9nLCAoXywga2V5KSA9PiB7XG4gICAgIShwYXJhbXNba2V5XSAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJNaXNzaW5nIFxcXCI6XCIgKyBrZXkgKyBcIlxcXCIgcGFyYW1cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBwYXJhbXNba2V5XTtcbiAgfSkucmVwbGFjZSgvXFwvKlxcKiQvLCBfID0+IHBhcmFtc1tcIipcIl0gPT0gbnVsbCA/IFwiXCIgOiBwYXJhbXNbXCIqXCJdLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpKTtcbn1cbi8qKlxuICogQSBSb3V0ZU1hdGNoIGNvbnRhaW5zIGluZm8gYWJvdXQgaG93IGEgcm91dGUgbWF0Y2hlZCBhIFVSTC5cbiAqL1xuXG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbWF0Y2hyb3V0ZXNcbiAqL1xuZnVuY3Rpb24gbWF0Y2hSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZywgYmFzZW5hbWUpIHtcbiAgaWYgKGJhc2VuYW1lID09PSB2b2lkIDApIHtcbiAgICBiYXNlbmFtZSA9IFwiL1wiO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uID0gdHlwZW9mIGxvY2F0aW9uQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uQXJnKSA6IGxvY2F0aW9uQXJnO1xuICBsZXQgcGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiLCBiYXNlbmFtZSk7XG5cbiAgaWYgKHBhdGhuYW1lID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBicmFuY2hlcyA9IGZsYXR0ZW5Sb3V0ZXMocm91dGVzKTtcbiAgcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXMpO1xuICBsZXQgbWF0Y2hlcyA9IG51bGw7XG5cbiAgZm9yIChsZXQgaSA9IDA7IG1hdGNoZXMgPT0gbnVsbCAmJiBpIDwgYnJhbmNoZXMubGVuZ3RoOyArK2kpIHtcbiAgICBtYXRjaGVzID0gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2hlc1tpXSwgcGF0aG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5Sb3V0ZXMocm91dGVzLCBicmFuY2hlcywgcGFyZW50c01ldGEsIHBhcmVudFBhdGgpIHtcbiAgaWYgKGJyYW5jaGVzID09PSB2b2lkIDApIHtcbiAgICBicmFuY2hlcyA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG5cbiAgaWYgKHBhcmVudFBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhcmVudFBhdGggPSBcIlwiO1xuICB9XG5cbiAgcm91dGVzLmZvckVhY2goKHJvdXRlLCBpbmRleCkgPT4ge1xuICAgIGxldCBtZXRhID0ge1xuICAgICAgcmVsYXRpdmVQYXRoOiByb3V0ZS5wYXRoIHx8IFwiXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlOiByb3V0ZS5jYXNlU2Vuc2l0aXZlID09PSB0cnVlLFxuICAgICAgY2hpbGRyZW5JbmRleDogaW5kZXgsXG4gICAgICByb3V0ZVxuICAgIH07XG5cbiAgICBpZiAobWV0YS5yZWxhdGl2ZVBhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgICFtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKHBhcmVudFBhdGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIkFic29sdXRlIHJvdXRlIHBhdGggXFxcIlwiICsgbWV0YS5yZWxhdGl2ZVBhdGggKyBcIlxcXCIgbmVzdGVkIHVuZGVyIHBhdGggXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiIGlzIG5vdCB2YWxpZC4gQW4gYWJzb2x1dGUgY2hpbGQgcm91dGUgcGF0aCBcIikgKyBcIm11c3Qgc3RhcnQgd2l0aCB0aGUgY29tYmluZWQgcGF0aCBvZiBhbGwgaXRzIHBhcmVudCByb3V0ZXMuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIG1ldGEucmVsYXRpdmVQYXRoID0gbWV0YS5yZWxhdGl2ZVBhdGguc2xpY2UocGFyZW50UGF0aC5sZW5ndGgpO1xuICAgIH1cblxuICAgIGxldCBwYXRoID0gam9pblBhdGhzKFtwYXJlbnRQYXRoLCBtZXRhLnJlbGF0aXZlUGF0aF0pO1xuICAgIGxldCByb3V0ZXNNZXRhID0gcGFyZW50c01ldGEuY29uY2F0KG1ldGEpOyAvLyBBZGQgdGhlIGNoaWxkcmVuIGJlZm9yZSBhZGRpbmcgdGhpcyByb3V0ZSB0byB0aGUgYXJyYXkgc28gd2UgdHJhdmVyc2UgdGhlXG4gICAgLy8gcm91dGUgdHJlZSBkZXB0aC1maXJzdCBhbmQgY2hpbGQgcm91dGVzIGFwcGVhciBiZWZvcmUgdGhlaXIgcGFyZW50cyBpblxuICAgIC8vIHRoZSBcImZsYXR0ZW5lZFwiIHZlcnNpb24uXG5cbiAgICBpZiAocm91dGUuY2hpbGRyZW4gJiYgcm91dGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgIShyb3V0ZS5pbmRleCAhPT0gdHJ1ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlIFwiICsgKFwiYWxsIGNoaWxkIHJvdXRlcyBmcm9tIHJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIi5cIikpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGZsYXR0ZW5Sb3V0ZXMocm91dGUuY2hpbGRyZW4sIGJyYW5jaGVzLCByb3V0ZXNNZXRhLCBwYXRoKTtcbiAgICB9IC8vIFJvdXRlcyB3aXRob3V0IGEgcGF0aCBzaG91bGRuJ3QgZXZlciBtYXRjaCBieSB0aGVtc2VsdmVzIHVubGVzcyB0aGV5IGFyZVxuICAgIC8vIGluZGV4IHJvdXRlcywgc28gZG9uJ3QgYWRkIHRoZW0gdG8gdGhlIGxpc3Qgb2YgcG9zc2libGUgYnJhbmNoZXMuXG5cblxuICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gYnJhbmNoZXM7XG59XG5cbmZ1bmN0aW9uIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKSB7XG4gIGJyYW5jaGVzLnNvcnQoKGEsIGIpID0+IGEuc2NvcmUgIT09IGIuc2NvcmUgPyBiLnNjb3JlIC0gYS5zY29yZSAvLyBIaWdoZXIgc2NvcmUgZmlyc3RcbiAgOiBjb21wYXJlSW5kZXhlcyhhLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSwgYi5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCkpKTtcbn1cblxuY29uc3QgcGFyYW1SZSA9IC9eOlxcdyskLztcbmNvbnN0IGR5bmFtaWNTZWdtZW50VmFsdWUgPSAzO1xuY29uc3QgaW5kZXhSb3V0ZVZhbHVlID0gMjtcbmNvbnN0IGVtcHR5U2VnbWVudFZhbHVlID0gMTtcbmNvbnN0IHN0YXRpY1NlZ21lbnRWYWx1ZSA9IDEwO1xuY29uc3Qgc3BsYXRQZW5hbHR5ID0gLTI7XG5cbmNvbnN0IGlzU3BsYXQgPSBzID0+IHMgPT09IFwiKlwiO1xuXG5mdW5jdGlvbiBjb21wdXRlU2NvcmUocGF0aCwgaW5kZXgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGxldCBpbml0aWFsU2NvcmUgPSBzZWdtZW50cy5sZW5ndGg7XG5cbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG5cbiAgaWYgKGluZGV4KSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWdtZW50cy5maWx0ZXIocyA9PiAhaXNTcGxhdChzKSkucmVkdWNlKChzY29yZSwgc2VnbWVudCkgPT4gc2NvcmUgKyAocGFyYW1SZS50ZXN0KHNlZ21lbnQpID8gZHluYW1pY1NlZ21lbnRWYWx1ZSA6IHNlZ21lbnQgPT09IFwiXCIgPyBlbXB0eVNlZ21lbnRWYWx1ZSA6IHN0YXRpY1NlZ21lbnRWYWx1ZSksIGluaXRpYWxTY29yZSk7XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVJbmRleGVzKGEsIGIpIHtcbiAgbGV0IHNpYmxpbmdzID0gYS5sZW5ndGggPT09IGIubGVuZ3RoICYmIGEuc2xpY2UoMCwgLTEpLmV2ZXJ5KChuLCBpKSA9PiBuID09PSBiW2ldKTtcbiAgcmV0dXJuIHNpYmxpbmdzID8gLy8gSWYgdHdvIHJvdXRlcyBhcmUgc2libGluZ3MsIHdlIHNob3VsZCB0cnkgdG8gbWF0Y2ggdGhlIGVhcmxpZXIgc2libGluZ1xuICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgLy8gYmVoYXZpb3IgYnkgc2ltcGx5IHB1dHRpbmcgcm91dGVzIHdpdGggaWRlbnRpY2FsIHBhdGhzIGluIHRoZSBvcmRlciB0aGV5XG4gIC8vIHdhbnQgdGhlbSB0cmllZC5cbiAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdIDogLy8gT3RoZXJ3aXNlLCBpdCBkb2Vzbid0IHJlYWxseSBtYWtlIHNlbnNlIHRvIHJhbmsgbm9uLXNpYmxpbmdzIGJ5IGluZGV4LFxuICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgMDtcbn1cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2gsIHBhdGhuYW1lKSB7XG4gIGxldCB7XG4gICAgcm91dGVzTWV0YVxuICB9ID0gYnJhbmNoO1xuICBsZXQgbWF0Y2hlZFBhcmFtcyA9IHt9O1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gXCIvXCI7XG4gIGxldCBtYXRjaGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXNNZXRhLmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IG1ldGEgPSByb3V0ZXNNZXRhW2ldO1xuICAgIGxldCBlbmQgPSBpID09PSByb3V0ZXNNZXRhLmxlbmd0aCAtIDE7XG4gICAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gbWF0Y2hlZFBhdGhuYW1lID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UobWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCkgfHwgXCIvXCI7XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hQYXRoKHtcbiAgICAgIHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogbWV0YS5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZW5kXG4gICAgfSwgcmVtYWluaW5nUGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcbiAgICBsZXQgcm91dGUgPSBtZXRhLnJvdXRlO1xuICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICBwYXJhbXM6IG1hdGNoZWRQYXJhbXMsXG4gICAgICBwYXRobmFtZTogam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lXSksXG4gICAgICBwYXRobmFtZUJhc2U6IG5vcm1hbGl6ZVBhdGhuYW1lKGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKSksXG4gICAgICByb3V0ZVxuICAgIH0pO1xuXG4gICAgaWYgKG1hdGNoLnBhdGhuYW1lQmFzZSAhPT0gXCIvXCIpIHtcbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZUJhc2VdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlcztcbn1cbi8qKlxuICogQSBQYXRoUGF0dGVybiBpcyB1c2VkIHRvIG1hdGNoIG9uIHNvbWUgcG9ydGlvbiBvZiBhIFVSTCBwYXRobmFtZS5cbiAqL1xuXG5cbi8qKlxuICogUGVyZm9ybXMgcGF0dGVybiBtYXRjaGluZyBvbiBhIFVSTCBwYXRobmFtZSBhbmQgcmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dFxuICogdGhlIG1hdGNoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbWF0Y2hwYXRoXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXR0ZXJuLCBwYXRobmFtZSkge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0ge1xuICAgICAgcGF0aDogcGF0dGVybixcbiAgICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICAgICAgZW5kOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGxldCBbbWF0Y2hlciwgcGFyYW1OYW1lc10gPSBjb21waWxlUGF0aChwYXR0ZXJuLnBhdGgsIHBhdHRlcm4uY2FzZVNlbnNpdGl2ZSwgcGF0dGVybi5lbmQpO1xuICBsZXQgbWF0Y2ggPSBwYXRobmFtZS5tYXRjaChtYXRjaGVyKTtcbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBtYXRjaFswXTtcbiAgbGV0IHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5yZXBsYWNlKC8oLilcXC8rJC8sIFwiJDFcIik7XG4gIGxldCBjYXB0dXJlR3JvdXBzID0gbWF0Y2guc2xpY2UoMSk7XG4gIGxldCBwYXJhbXMgPSBwYXJhbU5hbWVzLnJlZHVjZSgobWVtbywgcGFyYW1OYW1lLCBpbmRleCkgPT4ge1xuICAgIC8vIFdlIG5lZWQgdG8gY29tcHV0ZSB0aGUgcGF0aG5hbWVCYXNlIGhlcmUgdXNpbmcgdGhlIHJhdyBzcGxhdCB2YWx1ZVxuICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgcGFyYW1zW1wiKlwiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuXG4gICAgaWYgKHBhcmFtTmFtZSA9PT0gXCIqXCIpIHtcbiAgICAgIGxldCBzcGxhdFZhbHVlID0gY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIjtcbiAgICAgIHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZS5zbGljZSgwLCBtYXRjaGVkUGF0aG5hbWUubGVuZ3RoIC0gc3BsYXRWYWx1ZS5sZW5ndGgpLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgICB9XG5cbiAgICBtZW1vW3BhcmFtTmFtZV0gPSBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQoY2FwdHVyZUdyb3Vwc1tpbmRleF0gfHwgXCJcIiwgcGFyYW1OYW1lKTtcbiAgICByZXR1cm4gbWVtbztcbiAgfSwge30pO1xuICByZXR1cm4ge1xuICAgIHBhcmFtcyxcbiAgICBwYXRobmFtZTogbWF0Y2hlZFBhdGhuYW1lLFxuICAgIHBhdGhuYW1lQmFzZSxcbiAgICBwYXR0ZXJuXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIGNhc2VTZW5zaXRpdmUsIGVuZCkge1xuICBpZiAoY2FzZVNlbnNpdGl2ZSA9PT0gdm9pZCAwKSB7XG4gICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgZW5kID0gdHJ1ZTtcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocGF0aCA9PT0gXCIqXCIgfHwgIXBhdGguZW5kc1dpdGgoXCIqXCIpIHx8IHBhdGguZW5kc1dpdGgoXCIvKlwiKSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpIDogdm9pZCAwO1xuICBsZXQgcGFyYW1OYW1lcyA9IFtdO1xuICBsZXQgcmVnZXhwU291cmNlID0gXCJeXCIgKyBwYXRoLnJlcGxhY2UoL1xcLypcXCo/JC8sIFwiXCIpIC8vIElnbm9yZSB0cmFpbGluZyAvIGFuZCAvKiwgd2UnbGwgaGFuZGxlIGl0IGJlbG93XG4gIC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSAvLyBNYWtlIHN1cmUgaXQgaGFzIGEgbGVhZGluZyAvXG4gIC5yZXBsYWNlKC9bXFxcXC4qK14kP3t9fCgpW1xcXV0vZywgXCJcXFxcJCZcIikgLy8gRXNjYXBlIHNwZWNpYWwgcmVnZXggY2hhcnNcbiAgLnJlcGxhY2UoLzooXFx3KykvZywgKF8sIHBhcmFtTmFtZSkgPT4ge1xuICAgIHBhcmFtTmFtZXMucHVzaChwYXJhbU5hbWUpO1xuICAgIHJldHVybiBcIihbXlxcXFwvXSspXCI7XG4gIH0pO1xuXG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSkge1xuICAgIHBhcmFtTmFtZXMucHVzaChcIipcIik7XG4gICAgcmVnZXhwU291cmNlICs9IHBhdGggPT09IFwiKlwiIHx8IHBhdGggPT09IFwiLypcIiA/IFwiKC4qKSRcIiAvLyBBbHJlYWR5IG1hdGNoZWQgdGhlIGluaXRpYWwgLywganVzdCBtYXRjaCB0aGUgcmVzdFxuICAgIDogXCIoPzpcXFxcLyguKyl8XFxcXC8qKSRcIjsgLy8gRG9uJ3QgaW5jbHVkZSB0aGUgLyBpbiBwYXJhbXNbXCIqXCJdXG4gIH0gZWxzZSB7XG4gICAgcmVnZXhwU291cmNlICs9IGVuZCA/IFwiXFxcXC8qJFwiIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICA6IC8vIE90aGVyd2lzZSwgbWF0Y2ggYSB3b3JkIGJvdW5kYXJ5IG9yIGEgcHJvY2VlZGluZyAvLiBUaGUgd29yZCBib3VuZGFyeSByZXN0cmljdHNcbiAgICAvLyBwYXJlbnQgcm91dGVzIHRvIG1hdGNoaW5nIG9ubHkgdGhlaXIgb3duIHdvcmRzIGFuZCBub3RoaW5nIG1vcmUsIGUuZy4gcGFyZW50XG4gICAgLy8gcm91dGUgXCIvaG9tZVwiIHNob3VsZCBub3QgbWF0Y2ggXCIvaG9tZTJcIi5cbiAgICAvLyBBZGRpdGlvbmFsbHksIGFsbG93IHBhdGhzIHN0YXJ0aW5nIHdpdGggYC5gLCBgLWAsIGB+YCwgYW5kIHVybC1lbmNvZGVkIGVudGl0aWVzLFxuICAgIC8vIGJ1dCBkbyBub3QgY29uc3VtZSB0aGUgY2hhcmFjdGVyIGluIHRoZSBtYXRjaGVkIHBhdGggc28gdGhleSBjYW4gbWF0Y2ggYWdhaW5zdFxuICAgIC8vIG5lc3RlZCBwYXRocy5cbiAgICBcIig/Oig/PVsufi1dfCVbMC05QS1GXXsyfSl8XFxcXGJ8XFxcXC98JClcIjtcbiAgfVxuXG4gIGxldCBtYXRjaGVyID0gbmV3IFJlZ0V4cChyZWdleHBTb3VyY2UsIGNhc2VTZW5zaXRpdmUgPyB1bmRlZmluZWQgOiBcImlcIik7XG4gIHJldHVybiBbbWF0Y2hlciwgcGFyYW1OYW1lc107XG59XG5cbmZ1bmN0aW9uIHNhZmVseURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSwgcGFyYW1OYW1lKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJUaGUgdmFsdWUgZm9yIHRoZSBVUkwgcGFyYW0gXFxcIlwiICsgcGFyYW1OYW1lICsgXCJcXFwiIHdpbGwgbm90IGJlIGRlY29kZWQgYmVjYXVzZVwiICsgKFwiIHRoZSBzdHJpbmcgXFxcIlwiICsgdmFsdWUgKyBcIlxcXCIgaXMgYSBtYWxmb3JtZWQgVVJMIHNlZ21lbnQuIFRoaXMgaXMgcHJvYmFibHlcIikgKyAoXCIgZHVlIHRvIGEgYmFkIHBlcmNlbnQgZW5jb2RpbmcgKFwiICsgZXJyb3IgKyBcIikuXCIpKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIHJlc29sdmVkIHBhdGggb2JqZWN0IHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBwYXRobmFtZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3Jlc29sdmVwYXRoXG4gKi9cblxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aCh0bywgZnJvbVBhdGhuYW1lKSB7XG4gIGlmIChmcm9tUGF0aG5hbWUgPT09IHZvaWQgMCkge1xuICAgIGZyb21QYXRobmFtZSA9IFwiL1wiO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWUgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZSA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpIDogZnJvbVBhdGhuYW1lO1xuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKVxuICB9O1xufVxuXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUocmVsYXRpdmVQYXRoLCBmcm9tUGF0aG5hbWUpIHtcbiAgbGV0IHNlZ21lbnRzID0gZnJvbVBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICBsZXQgcmVsYXRpdmVTZWdtZW50cyA9IHJlbGF0aXZlUGF0aC5zcGxpdChcIi9cIik7XG4gIHJlbGF0aXZlU2VnbWVudHMuZm9yRWFjaChzZWdtZW50ID0+IHtcbiAgICBpZiAoc2VnbWVudCA9PT0gXCIuLlwiKSB7XG4gICAgICAvLyBLZWVwIHRoZSByb290IFwiXCIgc2VnbWVudCBzbyB0aGUgcGF0aG5hbWUgc3RhcnRzIGF0IC9cbiAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSBzZWdtZW50cy5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09IFwiLlwiKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHNlZ21lbnQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWdtZW50cy5sZW5ndGggPiAxID8gc2VnbWVudHMuam9pbihcIi9cIikgOiBcIi9cIjtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVRvKHRvQXJnLCByb3V0ZVBhdGhuYW1lcywgbG9jYXRpb25QYXRobmFtZSkge1xuICBsZXQgdG8gPSB0eXBlb2YgdG9BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG9BcmcpIDogdG9Bcmc7XG4gIGxldCB0b1BhdGhuYW1lID0gdG9BcmcgPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHRvLnBhdGhuYW1lOyAvLyBJZiBhIHBhdGhuYW1lIGlzIGV4cGxpY2l0bHkgcHJvdmlkZWQgaW4gYHRvYCwgaXQgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZVxuICAvLyByb3V0ZSBjb250ZXh0LiBUaGlzIGlzIGV4cGxhaW5lZCBpbiBgTm90ZSBvbiBgPExpbmsgdG8+YCB2YWx1ZXNgIGluIG91clxuICAvLyBtaWdyYXRpb24gZ3VpZGUgZnJvbSB2NSBhcyBhIG1lYW5zIG9mIGRpc2FtYmlndWF0aW9uIGJldHdlZW4gYHRvYCB2YWx1ZXNcbiAgLy8gdGhhdCBiZWdpbiB3aXRoIGAvYCBhbmQgdGhvc2UgdGhhdCBkbyBub3QuIEhvd2V2ZXIsIHRoaXMgaXMgcHJvYmxlbWF0aWMgZm9yXG4gIC8vIGB0b2AgdmFsdWVzIHRoYXQgZG8gbm90IHByb3ZpZGUgYSBwYXRobmFtZS4gYHRvYCBjYW4gc2ltcGx5IGJlIGEgc2VhcmNoIG9yXG4gIC8vIGhhc2ggc3RyaW5nLCBpbiB3aGljaCBjYXNlIHdlIHNob3VsZCBhc3N1bWUgdGhhdCB0aGUgbmF2aWdhdGlvbiBpcyByZWxhdGl2ZVxuICAvLyB0byB0aGUgY3VycmVudCBsb2NhdGlvbidzIHBhdGhuYW1lIGFuZCAqbm90KiB0aGUgcm91dGUgcGF0aG5hbWUuXG5cbiAgbGV0IGZyb207XG5cbiAgaWYgKHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuXG4gICAgaWYgKHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICBsZXQgdG9TZWdtZW50cyA9IHRvUGF0aG5hbWUuc3BsaXQoXCIvXCIpOyAvLyBFYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFucyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmVcbiAgICAgIC8vIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5IGRpZmZlcmVuY2UgZnJvbSBob3cgPGEgaHJlZj4gd29ya3MgYW5kIGFcbiAgICAgIC8vIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYSBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuXG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG5cbiAgICAgIHRvLnBhdGhuYW1lID0gdG9TZWdtZW50cy5qb2luKFwiL1wiKTtcbiAgICB9IC8vIElmIHRoZXJlIGFyZSBtb3JlIFwiLi5cIiBzZWdtZW50cyB0aGFuIHBhcmVudCByb3V0ZXMsIHJlc29sdmUgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgcm9vdCAvIFVSTC5cblxuXG4gICAgZnJvbSA9IHJvdXRlUGF0aG5hbWVJbmRleCA+PSAwID8gcm91dGVQYXRobmFtZXNbcm91dGVQYXRobmFtZUluZGV4XSA6IFwiL1wiO1xuICB9XG5cbiAgbGV0IHBhdGggPSByZXNvbHZlUGF0aCh0bywgZnJvbSk7IC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIHRvIHZhbHVlIGhhZCBvbmUuXG5cbiAgaWYgKHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIikgJiYgIXBhdGgucGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgcGF0aC5wYXRobmFtZSArPSBcIi9cIjtcbiAgfVxuXG4gIHJldHVybiBwYXRoO1xufVxuZnVuY3Rpb24gZ2V0VG9QYXRobmFtZSh0bykge1xuICAvLyBFbXB0eSBzdHJpbmdzIHNob3VsZCBiZSB0cmVhdGVkIHRoZSBzYW1lIGFzIC8gcGF0aHNcbiAgcmV0dXJuIHRvID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiID8gXCIvXCIgOiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pLnBhdGhuYW1lIDogdG8ucGF0aG5hbWU7XG59XG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSkge1xuICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSByZXR1cm4gcGF0aG5hbWU7XG5cbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxldCBuZXh0Q2hhciA9IHBhdGhuYW1lLmNoYXJBdChiYXNlbmFtZS5sZW5ndGgpO1xuXG4gIGlmIChuZXh0Q2hhciAmJiBuZXh0Q2hhciAhPT0gXCIvXCIpIHtcbiAgICAvLyBwYXRobmFtZSBkb2VzIG5vdCBzdGFydCB3aXRoIGJhc2VuYW1lL1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKGJhc2VuYW1lLmxlbmd0aCkgfHwgXCIvXCI7XG59XG5jb25zdCBqb2luUGF0aHMgPSBwYXRocyA9PiBwYXRocy5qb2luKFwiL1wiKS5yZXBsYWNlKC9cXC9cXC8rL2csIFwiL1wiKTtcbmNvbnN0IG5vcm1hbGl6ZVBhdGhuYW1lID0gcGF0aG5hbWUgPT4gcGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcblxuY29uc3Qgbm9ybWFsaXplU2VhcmNoID0gc2VhcmNoID0+ICFzZWFyY2ggfHwgc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBzZWFyY2guc3RhcnRzV2l0aChcIj9cIikgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcblxuY29uc3Qgbm9ybWFsaXplSGFzaCA9IGhhc2ggPT4gIWhhc2ggfHwgaGFzaCA9PT0gXCIjXCIgPyBcIlwiIDogaGFzaC5zdGFydHNXaXRoKFwiI1wiKSA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZnVsbCBocmVmIGZvciB0aGUgZ2l2ZW4gXCJ0b1wiIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCBmb3IgYnVpbGRpbmdcbiAqIGN1c3RvbSBsaW5rcyB0aGF0IGFyZSBhbHNvIGFjY2Vzc2libGUgYW5kIHByZXNlcnZlIHJpZ2h0LWNsaWNrIGJlaGF2aW9yLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlaHJlZlxuICovXG5cbmZ1bmN0aW9uIHVzZUhyZWYodG8pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSB1c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBoYXNoLFxuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaFxuICB9ID0gdXNlUmVzb2x2ZWRQYXRoKHRvKTtcbiAgbGV0IGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWU7XG5cbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIGxldCB0b1BhdGhuYW1lID0gZ2V0VG9QYXRobmFtZSh0byk7XG4gICAgbGV0IGVuZHNXaXRoU2xhc2ggPSB0b1BhdGhuYW1lICE9IG51bGwgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gICAgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSArIChlbmRzV2l0aFNsYXNoID8gXCIvXCIgOiBcIlwiKSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhuYW1lXSk7XG4gIH1cblxuICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoe1xuICAgIHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSxcbiAgICBzZWFyY2gsXG4gICAgaGFzaFxuICB9KTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBhIDxSb3V0ZXI+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlaW5yb3V0ZXJjb250ZXh0XG4gKi9cblxuZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCkge1xuICByZXR1cm4gdXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbG9jYXRpb24gb2JqZWN0LCB3aGljaCByZXByZXNlbnRzIHRoZSBjdXJyZW50IFVSTCBpbiB3ZWJcbiAqIGJyb3dzZXJzLlxuICpcbiAqIE5vdGU6IElmIHlvdSdyZSB1c2luZyB0aGlzIGl0IG1heSBtZWFuIHlvdSdyZSBkb2luZyBzb21lIG9mIHlvdXIgb3duXG4gKiBcInJvdXRpbmdcIiBpbiB5b3VyIGFwcCwgYW5kIHdlJ2QgbGlrZSB0byBrbm93IHdoYXQgeW91ciB1c2UgY2FzZSBpcy4gV2UgbWF5XG4gKiBiZSBhYmxlIHRvIHByb3ZpZGUgc29tZXRoaW5nIGhpZ2hlci1sZXZlbCB0byBiZXR0ZXIgc3VpdCB5b3VyIG5lZWRzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbG9jYXRpb25cbiAqL1xuXG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUxvY2F0aW9uKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gdXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gYWN0aW9uIHdoaWNoIGRlc2NyaWJlcyBob3cgdGhlIHJvdXRlciBjYW1lIHRvXG4gKiB0aGUgY3VycmVudCBsb2NhdGlvbiwgZWl0aGVyIGJ5IGEgcG9wLCBwdXNoLCBvciByZXBsYWNlIG9uIHRoZSBoaXN0b3J5IHN0YWNrLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbmF2aWdhdGlvbnR5cGVcbiAqL1xuXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uVHlwZSgpIHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5uYXZpZ2F0aW9uVHlwZTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBVUkwgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUgbWF0Y2hlcyB0aGUgY3VycmVudCBVUkwuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyBcImFjdGl2ZVwiIHN0YXRlLCBlLmcuXG4gKiA8TmF2TGluaz4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VtYXRjaFxuICovXG5cbmZ1bmN0aW9uIHVzZU1hdGNoKHBhdHRlcm4pIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIHBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICByZXR1cm4gdXNlTWVtbygoKSA9PiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpLCBbcGF0aG5hbWUsIHBhdHRlcm5dKTtcbn1cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgdGhlIG5hdmlnYXRlKCkgZnVuY3Rpb24gcmV0dXJuZWQgZnJvbSB1c2VOYXZpZ2F0ZSgpLlxuICovXG5cbi8qKlxuICogUmV0dXJucyBhbiBpbXBlcmF0aXZlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGxvY2F0aW9uLiBVc2VkIGJ5IDxMaW5rPnMsIGJ1dFxuICogbWF5IGFsc28gYmUgdXNlZCBieSBvdGhlciBlbGVtZW50cyB0byBjaGFuZ2UgdGhlIGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGUoKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VOYXZpZ2F0ZSgpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IHVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHJvdXRlUGF0aG5hbWVzSnNvbiA9IEpTT04uc3RyaW5naWZ5KG1hdGNoZXMubWFwKG1hdGNoID0+IG1hdGNoLnBhdGhuYW1lQmFzZSkpO1xuICBsZXQgYWN0aXZlUmVmID0gdXNlUmVmKGZhbHNlKTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgXCJZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBcIiArIFwieW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuXCIpIDogdm9pZCAwO1xuICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSk7XG5cbiAgICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICBwYXRoLnBhdGhuYW1lID0gam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cblxuICAgICghIW9wdGlvbnMucmVwbGFjZSA/IG5hdmlnYXRvci5yZXBsYWNlIDogbmF2aWdhdG9yLnB1c2gpKHBhdGgsIG9wdGlvbnMuc3RhdGUpO1xuICB9LCBbYmFzZW5hbWUsIG5hdmlnYXRvciwgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lXSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IE91dGxldENvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcbi8qKlxuICogUmV0dXJucyB0aGUgY29udGV4dCAoaWYgcHJvdmlkZWQpIGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS5cbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlb3V0bGV0Y29udGV4dFxuICovXG5cbmZ1bmN0aW9uIHVzZU91dGxldENvbnRleHQoKSB7XG4gIHJldHVybiB1c2VDb250ZXh0KE91dGxldENvbnRleHQpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IDxPdXRsZXQ+IHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VvdXRsZXRcbiAqL1xuXG5mdW5jdGlvbiB1c2VPdXRsZXQoY29udGV4dCkge1xuICBsZXQgb3V0bGV0ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLm91dGxldDtcblxuICBpZiAob3V0bGV0KSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KE91dGxldENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgIHZhbHVlOiBjb250ZXh0XG4gICAgfSwgb3V0bGV0KTtcbiAgfVxuXG4gIHJldHVybiBvdXRsZXQ7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IG9mIGtleS92YWx1ZSBwYWlycyBvZiB0aGUgZHluYW1pYyBwYXJhbXMgZnJvbSB0aGUgY3VycmVudFxuICogVVJMIHRoYXQgd2VyZSBtYXRjaGVkIGJ5IHRoZSByb3V0ZSBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjdXNlcGFyYW1zXG4gKi9cblxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IHVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbn1cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGhuYW1lIG9mIHRoZSBnaXZlbiBgdG9gIHZhbHVlIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSN1c2VyZXNvbHZlZHBhdGhcbiAqL1xuXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8pIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSB1c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShtYXRjaGVzLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpKTtcbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZV0pO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSByb3V0ZSB0aGF0IG1hdGNoZWQgdGhlIGN1cnJlbnQgbG9jYXRpb24sIHByZXBhcmVkXG4gKiB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQgdG8gcmVuZGVyIHRoZSByZW1haW5kZXIgb2YgdGhlIHJvdXRlIHRyZWUuIFJvdXRlXG4gKiBlbGVtZW50cyBpbiB0aGUgdHJlZSBtdXN0IHJlbmRlciBhbiA8T3V0bGV0PiB0byByZW5kZXIgdGhlaXIgY2hpbGQgcm91dGUnc1xuICogZWxlbWVudC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3VzZXJvdXRlc1xuICovXG5cbmZ1bmN0aW9uIHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VSb3V0ZXMoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlc1xuICB9ID0gdXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgbGV0IHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xuICBsZXQgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50UGF0aG5hbWVCYXNlID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWVCYXNlIDogXCIvXCI7XG4gIGxldCBwYXJlbnRSb3V0ZSA9IHJvdXRlTWF0Y2ggJiYgcm91dGVNYXRjaC5yb3V0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgLy8gWW91IHdvbid0IGdldCBhIHdhcm5pbmcgYWJvdXQgMiBkaWZmZXJlbnQgPFJvdXRlcz4gdW5kZXIgYSA8Um91dGU+XG4gICAgLy8gd2l0aG91dCBhIHRyYWlsaW5nICosIGJ1dCB0aGlzIGlzIGEgYmVzdC1lZmZvcnQgd2FybmluZyBhbnl3YXkgc2luY2Ugd2VcbiAgICAvLyBjYW5ub3QgZXZlbiBnaXZlIHRoZSB3YXJuaW5nIHVubGVzcyB0aGV5IGxhbmQgYXQgdGhlIHBhcmVudCByb3V0ZS5cbiAgICAvL1xuICAgIC8vIEV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyA8Um91dGVzPlxuICAgIC8vICAgey8qIFRoaXMgcm91dGUgcGF0aCBNVVNUIGVuZCB3aXRoIC8qIGJlY2F1c2Ugb3RoZXJ3aXNlXG4gICAgLy8gICAgICAgaXQgd2lsbCBuZXZlciBtYXRjaCAvYmxvZy9wb3N0LzEyMyAqL31cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZ1wiIGVsZW1lbnQ9ezxCbG9nIC8+fSAvPlxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nL2ZlZWRcIiBlbGVtZW50PXs8QmxvZ0ZlZWQgLz59IC8+XG4gICAgLy8gPC9Sb3V0ZXM+XG4gICAgLy9cbiAgICAvLyBmdW5jdGlvbiBCbG9nKCkge1xuICAgIC8vICAgcmV0dXJuIChcbiAgICAvLyAgICAgPFJvdXRlcz5cbiAgICAvLyAgICAgICA8Um91dGUgcGF0aD1cInBvc3QvOmlkXCIgZWxlbWVudD17PFBvc3QgLz59IC8+XG4gICAgLy8gICAgIDwvUm91dGVzPlxuICAgIC8vICAgKTtcbiAgICAvLyB9XG4gICAgbGV0IHBhcmVudFBhdGggPSBwYXJlbnRSb3V0ZSAmJiBwYXJlbnRSb3V0ZS5wYXRoIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UocGFyZW50UGF0aG5hbWUsICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSwgXCJZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIGB1c2VSb3V0ZXMoKWApIGF0IFwiICsgKFwiXFxcIlwiICsgcGFyZW50UGF0aG5hbWUgKyBcIlxcXCIgKHVuZGVyIDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+KSBidXQgdGhlIFwiKSArIFwicGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFxcXCIqXFxcIi4gVGhpcyBtZWFucyBpZiB5b3UgbmF2aWdhdGUgXCIgKyBcImRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIFwiICsgXCJyb3V0ZXMgd2lsbCBuZXZlciByZW5kZXIuXFxuXFxuXCIgKyAoXCJQbGVhc2UgY2hhbmdlIHRoZSBwYXJlbnQgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4gdG8gPFJvdXRlIFwiKSArIChcInBhdGg9XFxcIlwiICsgKHBhcmVudFBhdGggPT09IFwiL1wiID8gXCIqXCIgOiBwYXJlbnRQYXRoICsgXCIvKlwiKSArIFwiXFxcIj4uXCIpKTtcbiAgfVxuXG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuXG4gIGlmIChsb2NhdGlvbkFyZykge1xuICAgIHZhciBfcGFyc2VkTG9jYXRpb25BcmckcGE7XG5cbiAgICBsZXQgcGFyc2VkTG9jYXRpb25BcmcgPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gICAgIShwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiIHx8ICgoX3BhcnNlZExvY2F0aW9uQXJnJHBhID0gcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUpID09IG51bGwgPyB2b2lkIDAgOiBfcGFyc2VkTG9jYXRpb25BcmckcGEuc3RhcnRzV2l0aChwYXJlbnRQYXRobmFtZUJhc2UpKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxvY2F0aW9uID0gcGFyc2VkTG9jYXRpb25Bcmc7XG4gIH0gZWxzZSB7XG4gICAgbG9jYXRpb24gPSBsb2NhdGlvbkZyb21Db250ZXh0O1xuICB9XG5cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9IHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXRobmFtZSA6IHBhdGhuYW1lLnNsaWNlKHBhcmVudFBhdGhuYW1lQmFzZS5sZW5ndGgpIHx8IFwiL1wiO1xuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywge1xuICAgIHBhdGhuYW1lOiByZW1haW5pbmdQYXRobmFtZVxuICB9KTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsIFwiTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKG1hdGNoZXMgPT0gbnVsbCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkLCBcIk1hdGNoZWQgbGVhZiByb3V0ZSBhdCBsb2NhdGlvbiBcXFwiXCIgKyBsb2NhdGlvbi5wYXRobmFtZSArIGxvY2F0aW9uLnNlYXJjaCArIGxvY2F0aW9uLmhhc2ggKyBcIlxcXCIgZG9lcyBub3QgaGF2ZSBhbiBlbGVtZW50LiBcIiArIFwiVGhpcyBtZWFucyBpdCB3aWxsIHJlbmRlciBhbiA8T3V0bGV0IC8+IHdpdGggYSBudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyAmJiBtYXRjaGVzLm1hcChtYXRjaCA9PiBPYmplY3QuYXNzaWduKHt9LCBtYXRjaCwge1xuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zLCBtYXRjaC5wYXJhbXMpLFxuICAgIHBhdGhuYW1lOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzKTtcbn1cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMpIHtcbiAgaWYgKHBhcmVudE1hdGNoZXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudE1hdGNoZXMgPSBbXTtcbiAgfVxuXG4gIGlmIChtYXRjaGVzID09IG51bGwpIHJldHVybiBudWxsO1xuICByZXR1cm4gbWF0Y2hlcy5yZWR1Y2VSaWdodCgob3V0bGV0LCBtYXRjaCwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogbWF0Y2gucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkID8gbWF0Y2gucm91dGUuZWxlbWVudCA6IG91dGxldCxcbiAgICAgIHZhbHVlOiB7XG4gICAgICAgIG91dGxldCxcbiAgICAgICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlcy5jb25jYXQobWF0Y2hlcy5zbGljZSgwLCBpbmRleCArIDEpKVxuICAgICAgfVxuICAgIH0pO1xuICB9LCBudWxsKTtcbn1cblxuLyoqXG4gKiBBIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI21lbW9yeXJvdXRlclxuICovXG5mdW5jdGlvbiBNZW1vcnlSb3V0ZXIoX3JlZikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGluaXRpYWxFbnRyaWVzLFxuICAgIGluaXRpYWxJbmRleFxuICB9ID0gX3JlZjtcbiAgbGV0IGhpc3RvcnlSZWYgPSB1c2VSZWYoKTtcblxuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KHtcbiAgICAgIGluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4XG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuLyoqXG4gKiBDaGFuZ2VzIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICpcbiAqIE5vdGU6IFRoaXMgQVBJIGlzIG1vc3RseSB1c2VmdWwgaW4gUmVhY3QuQ29tcG9uZW50IHN1YmNsYXNzZXMgdGhhdCBhcmUgbm90XG4gKiBhYmxlIHRvIHVzZSBob29rcy4gSW4gZnVuY3Rpb25hbCBjb21wb25lbnRzLCB3ZSByZWNvbW1lbmQgeW91IHVzZSB0aGVcbiAqIGB1c2VOYXZpZ2F0ZWAgaG9vayBpbnN0ZWFkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vZG9jcy9lbi92Ni9hcGkjbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjIpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlXG4gIH0gPSBfcmVmMjtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZlxuICAvLyB0aGUgcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcIjxOYXZpZ2F0ZT4gbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF1c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KS5zdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbmF2aWdhdGUodG8sIHtcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNvdXRsZXRcbiAqL1xuZnVuY3Rpb24gT3V0bGV0KHByb3BzKSB7XG4gIHJldHVybiB1c2VPdXRsZXQocHJvcHMuY29udGV4dCk7XG59XG5cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNyb3V0ZVxuICovXG5mdW5jdGlvbiBSb3V0ZShfcHJvcHMpIHtcbiAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJBIDxSb3V0ZT4gaXMgb25seSBldmVyIHRvIGJlIHVzZWQgYXMgdGhlIGNoaWxkIG9mIDxSb3V0ZXM+IGVsZW1lbnQsIFwiICsgXCJuZXZlciByZW5kZXJlZCBkaXJlY3RseS4gUGxlYXNlIHdyYXAgeW91ciA8Um91dGU+IGluIGEgPFJvdXRlcz4uXCIpIDogaW52YXJpYW50KGZhbHNlKSA7XG59XG5cbi8qKlxuICogUHJvdmlkZXMgbG9jYXRpb24gY29udGV4dCBmb3IgdGhlIHJlc3Qgb2YgdGhlIGFwcC5cbiAqXG4gKiBOb3RlOiBZb3UgdXN1YWxseSB3b24ndCByZW5kZXIgYSA8Um91dGVyPiBkaXJlY3RseS4gSW5zdGVhZCwgeW91J2xsIHJlbmRlciBhXG4gKiByb3V0ZXIgdGhhdCBpcyBtb3JlIHNwZWNpZmljIHRvIHlvdXIgZW52aXJvbm1lbnQgc3VjaCBhcyBhIDxCcm93c2VyUm91dGVyPlxuICogaW4gd2ViIGJyb3dzZXJzIG9yIGEgPFN0YXRpY1JvdXRlcj4gZm9yIHNlcnZlciByZW5kZXJpbmcuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNyb3V0ZXJcbiAqL1xuZnVuY3Rpb24gUm91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lUHJvcCA9IFwiL1wiLFxuICAgIGNoaWxkcmVuID0gbnVsbCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb25Qcm9wLFxuICAgIG5hdmlnYXRpb25UeXBlID0gQWN0aW9uLlBvcCxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wID0gZmFsc2VcbiAgfSA9IF9yZWYzO1xuICAhIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgcmVuZGVyIGEgPFJvdXRlcj4gaW5zaWRlIGFub3RoZXIgPFJvdXRlcj4uXCIgKyBcIiBZb3Ugc2hvdWxkIG5ldmVyIGhhdmUgbW9yZSB0aGFuIG9uZSBpbiB5b3VyIGFwcC5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgYmFzZW5hbWUgPSBub3JtYWxpemVQYXRobmFtZShiYXNlbmFtZVByb3ApO1xuICBsZXQgbmF2aWdhdGlvbkNvbnRleHQgPSB1c2VNZW1vKCgpID0+ICh7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcFxuICB9KSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdKTtcblxuICBpZiAodHlwZW9mIGxvY2F0aW9uUHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGxvY2F0aW9uUHJvcCA9IHBhcnNlUGF0aChsb2NhdGlvblByb3ApO1xuICB9XG5cbiAgbGV0IHtcbiAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgIHNlYXJjaCA9IFwiXCIsXG4gICAgaGFzaCA9IFwiXCIsXG4gICAgc3RhdGUgPSBudWxsLFxuICAgIGtleSA9IFwiZGVmYXVsdFwiXG4gIH0gPSBsb2NhdGlvblByb3A7XG4gIGxldCBsb2NhdGlvbiA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpO1xuXG4gICAgaWYgKHRyYWlsaW5nUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhuYW1lOiB0cmFpbGluZ1BhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaCxcbiAgICAgIHN0YXRlLFxuICAgICAga2V5XG4gICAgfTtcbiAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5XSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcobG9jYXRpb24gIT0gbnVsbCwgXCI8Um91dGVyIGJhc2VuYW1lPVxcXCJcIiArIGJhc2VuYW1lICsgXCJcXFwiPiBpcyBub3QgYWJsZSB0byBtYXRjaCB0aGUgVVJMIFwiICsgKFwiXFxcIlwiICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoICsgXCJcXFwiIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3RhcnQgd2l0aCB0aGUgXCIpICsgXCJiYXNlbmFtZSwgc28gdGhlIDxSb3V0ZXI+IHdvbid0IHJlbmRlciBhbnl0aGluZy5cIikgOiB2b2lkIDA7XG5cbiAgaWYgKGxvY2F0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuYXZpZ2F0aW9uQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdmFsdWU6IHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgbmF2aWdhdGlvblR5cGVcbiAgICB9XG4gIH0pKTtcbn1cblxuLyoqXG4gKiBBIGNvbnRhaW5lciBmb3IgYSBuZXN0ZWQgdHJlZSBvZiA8Um91dGU+IGVsZW1lbnRzIHRoYXQgcmVuZGVycyB0aGUgYnJhbmNoXG4gKiB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2RvY3MvZW4vdjYvYXBpI3JvdXRlc1xuICovXG5mdW5jdGlvbiBSb3V0ZXMoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBsb2NhdGlvblxuICB9ID0gX3JlZjQ7XG4gIHJldHVybiB1c2VSb3V0ZXMoY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuKSwgbG9jYXRpb24pO1xufSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIENyZWF0ZXMgYSByb3V0ZSBjb25maWcgZnJvbSBhIFJlYWN0IFwiY2hpbGRyZW5cIiBvYmplY3QsIHdoaWNoIGlzIHVzdWFsbHlcbiAqIGVpdGhlciBhIGA8Um91dGU+YCBlbGVtZW50IG9yIGFuIGFycmF5IG9mIHRoZW0uIFVzZWQgaW50ZXJuYWxseSBieVxuICogYDxSb3V0ZXM+YCB0byBjcmVhdGUgYSByb3V0ZSBjb25maWcgZnJvbSBpdHMgY2hpbGRyZW4uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9kb2NzL2VuL3Y2L2FwaSNjcmVhdGVyb3V0ZXNmcm9tY2hpbGRyZW5cbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgbGV0IHJvdXRlcyA9IFtdO1xuICBDaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBlbGVtZW50ID0+IHtcbiAgICBpZiAoISAvKiNfX1BVUkVfXyovaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAgIC8vIElnbm9yZSBub24tZWxlbWVudHMuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBtb3JlIGVhc2lseSBpbmxpbmVcbiAgICAgIC8vIGNvbmRpdGlvbmFscyBpbiB0aGVpciByb3V0ZSBjb25maWcuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gRnJhZ21lbnQpIHtcbiAgICAgIC8vIFRyYW5zcGFyZW50bHkgc3VwcG9ydCBSZWFjdC5GcmFnbWVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAgcm91dGVzLnB1c2guYXBwbHkocm91dGVzLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbikpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICEoZWxlbWVudC50eXBlID09PSBSb3V0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiW1wiICsgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09IFwic3RyaW5nXCIgPyBlbGVtZW50LnR5cGUgOiBlbGVtZW50LnR5cGUubmFtZSkgKyBcIl0gaXMgbm90IGEgPFJvdXRlPiBjb21wb25lbnQuIEFsbCBjb21wb25lbnQgY2hpbGRyZW4gb2YgPFJvdXRlcz4gbXVzdCBiZSBhIDxSb3V0ZT4gb3IgPFJlYWN0LkZyYWdtZW50PlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgbGV0IHJvdXRlID0ge1xuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGhcbiAgICB9O1xuXG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pO1xuICAgIH1cblxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgfSk7XG4gIHJldHVybiByb3V0ZXM7XG59XG4vKipcbiAqIFJlbmRlcnMgdGhlIHJlc3VsdCBvZiBgbWF0Y2hSb3V0ZXMoKWAgaW50byBhIFJlYWN0IGVsZW1lbnQuXG4gKi9cblxuZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXMsIExvY2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBOYXZpZ2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFJvdXRlQ29udGV4dCBhcyBVTlNBRkVfUm91dGVDb250ZXh0LCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgcmVuZGVyTWF0Y2hlcywgcmVzb2x2ZVBhdGgsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJvdXRlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciBET00gdjYuMy4wXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmltcG9ydCB7IHVzZVJlZiwgdXNlU3RhdGUsIHVzZUxheW91dEVmZmVjdCwgY3JlYXRlRWxlbWVudCwgZm9yd2FyZFJlZiwgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnkgfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB7IFJvdXRlciwgdXNlSHJlZiwgY3JlYXRlUGF0aCwgdXNlTG9jYXRpb24sIHVzZVJlc29sdmVkUGF0aCwgdXNlTmF2aWdhdGUgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgTmF2aWdhdGlvblR5cGUsIE91dGxldCwgUm91dGUsIFJvdXRlciwgUm91dGVzLCBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIGNyZWF0ZVBhdGgsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlbmRlck1hdGNoZXMsIHJlc29sdmVQYXRoLCB1c2VIcmVmLCB1c2VJblJvdXRlckNvbnRleHQsIHVzZUxvY2F0aW9uLCB1c2VNYXRjaCwgdXNlTmF2aWdhdGUsIHVzZU5hdmlnYXRpb25UeXBlLCB1c2VPdXRsZXQsIHVzZU91dGxldENvbnRleHQsIHVzZVBhcmFtcywgdXNlUmVzb2x2ZWRQYXRoLCB1c2VSb3V0ZXMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuY29uc3QgX2V4Y2x1ZGVkID0gW1wib25DbGlja1wiLCBcInJlbG9hZERvY3VtZW50XCIsIFwicmVwbGFjZVwiLCBcInN0YXRlXCIsIFwidGFyZ2V0XCIsIFwidG9cIl0sXG4gICAgICBfZXhjbHVkZWQyID0gW1wiYXJpYS1jdXJyZW50XCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcImNsYXNzTmFtZVwiLCBcImVuZFwiLCBcInN0eWxlXCIsIFwidG9cIiwgXCJjaGlsZHJlblwiXTtcblxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgUm91dGVyIVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn0gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENPTVBPTkVOVFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBQcm92aWRlcyB0aGUgY2xlYW5lc3QgVVJMcy5cbiAqL1xuZnVuY3Rpb24gQnJvd3NlclJvdXRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgd2luZG93XG4gIH0gPSBfcmVmO1xuICBsZXQgaGlzdG9yeVJlZiA9IHVzZVJlZigpO1xuXG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvd1xuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBTdG9yZXMgdGhlIGxvY2F0aW9uIGluIHRoZSBoYXNoXG4gKiBwb3J0aW9uIG9mIHRoZSBVUkwgc28gaXQgaXMgbm90IHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqL1xuZnVuY3Rpb24gSGFzaFJvdXRlcihfcmVmMikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjI7XG4gIGxldCBoaXN0b3J5UmVmID0gdXNlUmVmKCk7XG5cbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlSGFzaEhpc3Rvcnkoe1xuICAgICAgd2luZG93XG4gICAgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gdXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIHVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeVxuICB9KTtcbn1cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBhY2NlcHRzIGEgcHJlLWluc3RhbnRpYXRlZCBoaXN0b3J5IG9iamVjdC4gSXQncyBpbXBvcnRhbnRcbiAqIHRvIG5vdGUgdGhhdCB1c2luZyB5b3VyIG93biBoaXN0b3J5IG9iamVjdCBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIG1heSBhZGRcbiAqIHR3byB2ZXJzaW9ucyBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRvIHlvdXIgYnVuZGxlcyB1bmxlc3MgeW91IHVzZSB0aGUgc2FtZVxuICogdmVyc2lvbiBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRoYXQgUmVhY3QgUm91dGVyIHVzZXMgaW50ZXJuYWxseS5cbiAqL1xuZnVuY3Rpb24gSGlzdG9yeVJvdXRlcihfcmVmMykge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGhpc3RvcnlcbiAgfSA9IF9yZWYzO1xuICBjb25zdCBbc3RhdGUsIHNldFN0YXRlXSA9IHVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICB1c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL2NyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnlcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGlzdG9yeVJvdXRlci5kaXNwbGF5TmFtZSA9IFwidW5zdGFibGVfSGlzdG9yeVJvdXRlclwiO1xufVxuXG5mdW5jdGlvbiBpc01vZGlmaWVkRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuY29uc3QgTGluayA9IC8qI19fUFVSRV9fKi9mb3J3YXJkUmVmKGZ1bmN0aW9uIExpbmtXaXRoUmVmKF9yZWY0LCByZWYpIHtcbiAgbGV0IHtcbiAgICBvbkNsaWNrLFxuICAgIHJlbG9hZERvY3VtZW50LFxuICAgIHJlcGxhY2UgPSBmYWxzZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXQsXG4gICAgdG9cbiAgfSA9IF9yZWY0LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY0LCBfZXhjbHVkZWQpO1xuXG4gIGxldCBocmVmID0gdXNlSHJlZih0byk7XG4gIGxldCBpbnRlcm5hbE9uQ2xpY2sgPSB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCB7XG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXRcbiAgfSk7XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG5cbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiYgIXJlbG9hZERvY3VtZW50KSB7XG4gICAgICBpbnRlcm5hbE9uQ2xpY2soZXZlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoXG4gICAgLyojX19QVVJFX18qL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnRcbiAgICBjcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG9uQ2xpY2s6IGhhbmRsZUNsaWNrLFxuICAgICAgcmVmOiByZWYsXG4gICAgICB0YXJnZXQ6IHRhcmdldFxuICAgIH0pKVxuICApO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xufVxuXG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG5jb25zdCBOYXZMaW5rID0gLyojX19QVVJFX18qL2ZvcndhcmRSZWYoZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoX3JlZjUsIHJlZikge1xuICBsZXQge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50UHJvcCA9IFwicGFnZVwiLFxuICAgIGNhc2VTZW5zaXRpdmUgPSBmYWxzZSxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgIGVuZCA9IGZhbHNlLFxuICAgIHN0eWxlOiBzdHlsZVByb3AsXG4gICAgdG8sXG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY1LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWY1LCBfZXhjbHVkZWQyKTtcblxuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0byk7XG4gIGxldCBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCB0b1BhdGhuYW1lID0gcGF0aC5wYXRobmFtZTtcblxuICBpZiAoIWNhc2VTZW5zaXRpdmUpIHtcbiAgICBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHRvUGF0aG5hbWUgPSB0b1BhdGhuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBsZXQgaXNBY3RpdmUgPSBsb2NhdGlvblBhdGhuYW1lID09PSB0b1BhdGhuYW1lIHx8ICFlbmQgJiYgbG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmIGxvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCI7XG4gIGxldCBhcmlhQ3VycmVudCA9IGlzQWN0aXZlID8gYXJpYUN1cnJlbnRQcm9wIDogdW5kZWZpbmVkO1xuICBsZXQgY2xhc3NOYW1lO1xuXG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lUHJvcCh7XG4gICAgICBpc0FjdGl2ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIElmIHRoZSBjbGFzc05hbWUgcHJvcCBpcyBub3QgYSBmdW5jdGlvbiwgd2UgdXNlIGEgZGVmYXVsdCBgYWN0aXZlYFxuICAgIC8vIGNsYXNzIGZvciA8TmF2TGluayAvPnMgdGhhdCBhcmUgYWN0aXZlLiBJbiB2NSBgYWN0aXZlYCB3YXMgdGhlIGRlZmF1bHRcbiAgICAvLyB2YWx1ZSBmb3IgYGFjdGl2ZUNsYXNzTmFtZWAsIGJ1dCB3ZSBhcmUgcmVtb3ZpbmcgdGhhdCBBUEkgYW5kIGNhbiBzdGlsbFxuICAgIC8vIHVzZSB0aGUgb2xkIGRlZmF1bHQgYmVoYXZpb3IgZm9yIGEgY2xlYW5lciB1cGdyYWRlIHBhdGggYW5kIGtlZXAgdGhlXG4gICAgLy8gc2ltcGxlIHN0eWxpbmcgcnVsZXMgd29ya2luZyBhcyB0aGV5IGN1cnJlbnRseSBkby5cbiAgICBjbGFzc05hbWUgPSBbY2xhc3NOYW1lUHJvcCwgaXNBY3RpdmUgPyBcImFjdGl2ZVwiIDogbnVsbF0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xuICB9XG5cbiAgbGV0IHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHtcbiAgICBpc0FjdGl2ZVxuICB9KSA6IHN0eWxlUHJvcDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHRvOiB0b1xuICB9KSwgdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbih7XG4gICAgaXNBY3RpdmVcbiAgfSkgOiBjaGlsZHJlbik7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG59IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBIT09LU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBjbGljayBiZWhhdmlvciBmb3Igcm91dGVyIGA8TGluaz5gIGNvbXBvbmVudHMuIFRoaXMgaXMgdXNlZnVsIGlmXG4gKiB5b3UgbmVlZCB0byBjcmVhdGUgY3VzdG9tIGA8TGluaz5gIGNvbXBvbmVudHMgd2l0aCB0aGUgc2FtZSBjbGljayBiZWhhdmlvciB3ZVxuICogdXNlIGluIG91ciBleHBvcnRlZCBgPExpbms+YC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdGFyZ2V0LFxuICAgIHJlcGxhY2U6IHJlcGxhY2VQcm9wLFxuICAgIHN0YXRlXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8pO1xuICByZXR1cm4gdXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChldmVudC5idXR0b24gPT09IDAgJiYgKCAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBMZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIElnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBJZiB0aGUgVVJMIGhhc24ndCBjaGFuZ2VkLCBhIHJlZ3VsYXIgPGE+IHdpbGwgZG8gYSByZXBsYWNlIGluc3RlYWQgb2ZcbiAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZS5cblxuICAgICAgbGV0IHJlcGxhY2UgPSAhIXJlcGxhY2VQcm9wIHx8IGNyZWF0ZVBhdGgobG9jYXRpb24pID09PSBjcmVhdGVQYXRoKHBhdGgpO1xuICAgICAgbmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZSxcbiAgICAgICAgc3RhdGVcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLCBuYXZpZ2F0ZSwgcGF0aCwgcmVwbGFjZVByb3AsIHN0YXRlLCB0YXJnZXQsIHRvXSk7XG59XG4vKipcbiAqIEEgY29udmVuaWVudCB3cmFwcGVyIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIHNlYXJjaCBwYXJhbWV0ZXJzIHZpYSB0aGVcbiAqIFVSTFNlYXJjaFBhcmFtcyBpbnRlcmZhY2UuXG4gKi9cblxuZnVuY3Rpb24gdXNlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSB1c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSB1c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uLnNlYXJjaCk7XG5cbiAgICBmb3IgKGxldCBrZXkgb2YgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50LmtleXMoKSkge1xuICAgICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50LmdldEFsbChrZXkpLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzZWFyY2hQYXJhbXM7XG4gIH0sIFtsb2NhdGlvbi5zZWFyY2hdKTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IHNldFNlYXJjaFBhcmFtcyA9IHVzZUNhbGxiYWNrKChuZXh0SW5pdCwgbmF2aWdhdGVPcHRpb25zKSA9PiB7XG4gICAgbmF2aWdhdGUoXCI/XCIgKyBjcmVhdGVTZWFyY2hQYXJhbXMobmV4dEluaXQpLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGVdKTtcbiAgcmV0dXJuIFtzZWFyY2hQYXJhbXMsIHNldFNlYXJjaFBhcmFtc107XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2VhcmNoUGFyYW1zKGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSBcIlwiO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXModHlwZW9mIGluaXQgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheShpbml0KSB8fCBpbml0IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zID8gaW5pdCA6IE9iamVjdC5rZXlzKGluaXQpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFtrZXldO1xuICAgIHJldHVybiBtZW1vLmNvbmNhdChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCh2ID0+IFtrZXksIHZdKSA6IFtba2V5LCB2YWx1ZV1dKTtcbiAgfSwgW10pKTtcbn1cblxuZXhwb3J0IHsgQnJvd3NlclJvdXRlciwgSGFzaFJvdXRlciwgTGluaywgTmF2TGluaywgY3JlYXRlU2VhcmNoUGFyYW1zLCBIaXN0b3J5Um91dGVyIGFzIHVuc3RhYmxlX0hpc3RvcnlSb3V0ZXIsIHVzZUxpbmtDbGlja0hhbmRsZXIsIHVzZVNlYXJjaFBhcmFtcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgU3R5bGVkQ2FyZCA9IHN0eWxlZCgoeyBjaGlsZHJlbiwgLi4ucmVzdCB9KSA9PiAoXHJcbiAgPGRpdiB7Li4ucmVzdH0+e2NoaWxkcmVufTwvZGl2PlxyXG4pKWBcclxuICBib3JkZXItcmFkaXVzOiA4cHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XHJcbiAgYm94LXNoYWRvdzogMCA4cHggMzJweCAwIHJnYmEoIDMxLCAzOCwgMTM1LCAwLjM3ICk7O1xyXG4gIG1pbi13aWR0aDogZml0LWNvbnRlbnQ7XHJcbiAgcGFkZGluZzogMjRweDtcclxuICBoZWlnaHQ6IGZpdC1jb250ZW50O1xyXG4gIG1heC1oZWlnaHQ6IDcwdmg7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIG92ZXJmbG93OiBhdXRvO1xyXG4gIG1hcmdpbi1ib3R0b206IDI0cHg7XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA4MCU7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSB7XHJcbiAgICB3aWR0aDogNDB2dztcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgfVxyXG5gO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgRkMsIFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBTdHlsZWRDYXJkIH0gZnJvbSBcIi4vQ2FyZC5zdHlsZWRcIjtcclxuXHJcbmludGVyZmFjZSBJQ2FyZFByb3BzIHtcclxuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQ2FyZCA9IChwcm9wczogSUNhcmRQcm9wcykgPT4ge1xyXG4gIHJldHVybiA8U3R5bGVkQ2FyZD57cHJvcHMuY2hpbGRyZW59PC9TdHlsZWRDYXJkPjtcclxufTtcclxuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTdHlsZWRCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICBvdXRsaW5lOiAwO1xyXG4gIGJvcmRlcjogMDtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgY29sb3I6ICNmZmY7XHJcbiAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgaGVpZ2h0OiAzMHB4O1xyXG4gIHBhZGRpbmc6IDBweCAxNXB4O1xyXG4gIHRleHQtc2hhZG93OiByZ2IoMCAwIDAgLyAyNSUpIDBweCAzcHggOHB4O1xyXG4gIHRyYW5zaXRpb246IGFsbCAwLjVzIGVhc2UgMHM7XHJcbiAgOmhvdmVyIHtcclxuICAgIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC40KSAwcHggM3B4IDhweDtcclxuICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UgMHM7XHJcbiAgfVxyXG5cclxuICBiYWNrZ3JvdW5kOiAjN2E1NzlmO1xyXG4gIGJvcmRlci1yYWRpdXM6IDEycHg7XHJcbiAgbGV0dGVyLXNwYWNpbmc6IDFweDtcclxuYDtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IEZDIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IFN0eWxlZEJ1dHRvbiB9IGZyb20gXCIuL0J1dHRvbi5zdHlsZWRcIjtcclxuXHJcbmludGVyZmFjZSBCdXR0b25Qcm9wcyBleHRlbmRzIFJlYWN0LkJ1dHRvbkhUTUxBdHRyaWJ1dGVzPEhUTUxCdXR0b25FbGVtZW50PiB7XHJcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XHJcbn1cclxuXHJcbmNvbnN0IEJ1dHRvbjogRkM8QnV0dG9uUHJvcHM+ID0gKHsgY2hpbGRyZW4sIC4uLnJlc3QgfSkgPT4ge1xyXG4gIHJldHVybiA8U3R5bGVkQnV0dG9uIHsuLi5yZXN0fT57Y2hpbGRyZW59PC9TdHlsZWRCdXR0b24+O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uO1xyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0eWxlZFZhbGlkYXRpb25FcnJvciA9IHN0eWxlZC5kaXZgXHJcbiAgY29sb3I6ICNhNDE1MzM7XHJcbiAgZm9udC1zaXplOiAwLjc1ZW07XHJcbiAgcGFkZGluZy10b3A6IDAuMjVlbTtcclxuYDtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBTdHlsZWRWYWxpZGF0aW9uRXJyb3IgfSBmcm9tIFwiLi9WYWxpZGF0aW9uRXJyb3Iuc3R5bGVkXCI7XHJcblxyXG5pbnRlcmZhY2UgVmFsaWRhdGlvbkVycm9yUHJvcHMge1xyXG4gIHRleHQ6IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgVmFsaWRhdGlvbkVycm9yID0gKHByb3BzOiBWYWxpZGF0aW9uRXJyb3JQcm9wcykgPT4ge1xyXG4gIGNvbnN0IHsgdGV4dCB9ID0gcHJvcHM7XHJcbiAgcmV0dXJuIDxTdHlsZWRWYWxpZGF0aW9uRXJyb3I+e3RleHR9PC9TdHlsZWRWYWxpZGF0aW9uRXJyb3I+O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVmFsaWRhdGlvbkVycm9yO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgU3R5bGVkSW5wdXQgPSBzdHlsZWQuaW5wdXQ8eyAkaGFzRXJyb3I/OiBib29sZWFuIH0+YFxyXG4gIGNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuODcpO1xyXG4gIGJvcmRlci1ib3R0b20tY29sb3I6ICR7KHsgJGhhc0Vycm9yIH0pID0+ICgkaGFzRXJyb3IgPyBcIiNjYzAwMDAgIWltcG9ydGFudFwiIDogXCJyZ2JhKDAsIDAsIDAsIDAuNDIpXCIpfTtcclxuICBmb250LXNpemU6IDFyZW07XHJcbiAgZm9udC13ZWlnaHQ6IDQwMDtcclxuICBsZXR0ZXItc3BhY2luZzogMC4wMDkzNzVlbTtcclxuICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQ7XHJcbiAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7XHJcbiAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICB3aWR0aDogMTAwJTtcclxuICBwYWRkaW5nOiA2cHggMTZweCA2cHg7XHJcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO1xyXG4gIGJvcmRlcjogbm9uZTtcclxuICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XHJcbiAgYm9yZGVyLXJhZGl1czogNHB4IDRweCAwIDA7XHJcbiAgOmhvdmVyIHtcclxuICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHJnYmEoMCwgMCwgMCwgMC44Nyk7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZWNlY2VjO1xyXG4gIH1cclxuICA6Zm9jdXMge1xyXG4gICAgYm9yZGVyLWNvbG9yOiAjN2E1NzlmO1xyXG4gICAgb3V0bGluZTogbm9uZTtcclxuICB9XHJcbmA7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgU3R5bGVkSW5wdXQgfSBmcm9tIFwiLi9JbnB1dC5zdHlsZWRcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5wdXRQcm9wcyB7XHJcbiAgdHlwZTogc3RyaW5nO1xyXG4gIHZhbHVlOiBzdHJpbmcgfCBudW1iZXI7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcbiAgJGhhc0Vycm9yPzogYm9vbGVhbjtcclxuICBvbkNoYW5nZTogKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB2b2lkO1xyXG59XHJcblxyXG5jb25zdCBJbnB1dCA9IChwcm9wczogSW5wdXRQcm9wcykgPT4ge1xyXG4gIHJldHVybiA8U3R5bGVkSW5wdXQgey4uLnByb3BzfSAvPjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IElucHV0O1xyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0eWxlZEZvcm1JbnB1dENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgbWFyZ2luOiAxOHB4IDBweDtcclxuICBoZWlnaHQ6IDQ1cHg7XHJcbmA7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFZhbGlkYXRpb25FcnJvciBmcm9tIFwiLi4vRXJyb3IvVmFsaWRhdGlvbkVycm9yXCI7XHJcbmltcG9ydCBJbnB1dCwgeyBJbnB1dFByb3BzIH0gZnJvbSBcIi4uL0lucHV0L0lucHV0XCI7XHJcbmltcG9ydCB7IFN0eWxlZEZvcm1JbnB1dENvbnRhaW5lciB9IGZyb20gXCIuL0Zvcm1JbnB1dC5zdHlsZWRcIjtcclxuXHJcbmludGVyZmFjZSBGb3JtSW5wdXRQcm9wcyBleHRlbmRzIElucHV0UHJvcHMge1xyXG4gIGVycm9yTWVzc2FnZTogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBGb3JtSW5wdXQgPSAocHJvcHM6IEZvcm1JbnB1dFByb3BzKSA9PiB7XHJcbiAgY29uc3QgeyBlcnJvck1lc3NhZ2UsIC4uLmlucHV0UHJvcHMgfSA9IHByb3BzO1xyXG4gIHJldHVybiAoXHJcbiAgICA8U3R5bGVkRm9ybUlucHV0Q29udGFpbmVyPlxyXG4gICAgICA8SW5wdXQgey4uLmlucHV0UHJvcHN9ICRoYXNFcnJvcj17ISFlcnJvck1lc3NhZ2V9Lz5cclxuICAgICAge2Vycm9yTWVzc2FnZSAmJiA8VmFsaWRhdGlvbkVycm9yIHRleHQ9e2Vycm9yTWVzc2FnZX0gLz59XHJcbiAgICA8L1N0eWxlZEZvcm1JbnB1dENvbnRhaW5lcj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRm9ybUlucHV0O1xyXG4iLCJpbXBvcnQgeyBjcmVhdGVDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcblxyXG5jb25zdCBBdXRoQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQodW5kZWZpbmVkKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEF1dGhDb250ZXh0O1xyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0eWxlZExvZ2luRXJyb3IgPSBzdHlsZWQuZGl2YFxyXG4gIGNvbG9yOiAjY2MwMDAwO1xyXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG5gO1xyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vQ29tbW9uL0J1dHRvbi9CdXR0b25cIjtcclxuaW1wb3J0IEZvcm1JbnB1dCBmcm9tIFwiLi4vLi4vQ29tbW9uL0Zvcm0vRm9ybUlucHV0XCI7XHJcbmltcG9ydCBBdXRoQ29udGV4dCBmcm9tIFwiLi4vLi4vc3RvcmUvYXV0aC9BdXRoQ29udGV4dFwiO1xyXG5pbXBvcnQgeyBTdHlsZWRMb2dpbkVycm9yIH0gZnJvbSBcIi4vTG9naW5Gb3JtLnN0eWxlZFwiO1xyXG5cclxuY29uc3QgY2hlY2tJZlZhbHVlRW1wdHkgPSAodmFsdWU6IHN0cmluZykgPT4ge1xyXG4gIHJldHVybiAhdmFsdWUgfHwgdmFsdWUudHJpbSgpLmxlbmd0aCA9PT0gMDtcclxufTtcclxuXHJcbmNvbnN0IExvZ2luRm9ybSA9ICgpID0+IHtcclxuICBjb25zdCBhdXRoQ3R4ID0gdXNlQ29udGV4dChBdXRoQ29udGV4dCk7XHJcbiAgY29uc3QgW3VzZXJuYW1lLCBzZXRVc2VybmFtZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KFwiXCIpO1xyXG4gIGNvbnN0IFtwYXNzd29yZCwgc2V0UGFzc3dvcmRdID0gdXNlU3RhdGU8c3RyaW5nPihcIlwiKTtcclxuICBjb25zdCBbdXNlcm5hbWVFcnJvciwgc2V0VXNlcm5hbWVFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmc+KFwiXCIpO1xyXG4gIGNvbnN0IFtwYXNzd29yZEVycm9yLCBzZXRQYXNzd29yZEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZz4oXCJcIik7XHJcbiAgY29uc3QgW2lzRm9ybVZhbGlkLCBzZXRJc0Zvcm1WYWxpZF0gPSB1c2VTdGF0ZShmYWxzZSk7XHJcblxyXG4gIGNvbnN0IHZhbGlkYXRlRm9ybSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGlzVXNlcm5hbWVFbXB0eSA9IGNoZWNrSWZWYWx1ZUVtcHR5KHVzZXJuYW1lKTtcclxuICAgIGNvbnN0IGlzUGFzc3dvcmRFbXB0eSA9IGNoZWNrSWZWYWx1ZUVtcHR5KHBhc3N3b3JkKTtcclxuXHJcbiAgICBpZiAoaXNVc2VybmFtZUVtcHR5IHx8IGlzUGFzc3dvcmRFbXB0eSkge1xyXG4gICAgICBzZXRJc0Zvcm1WYWxpZChmYWxzZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzZXRJc0Zvcm1WYWxpZCh0cnVlKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBzaG93RXJyb3JzID0gKCkgPT4ge1xyXG4gICAgaWYgKGNoZWNrSWZWYWx1ZUVtcHR5KHVzZXJuYW1lKSkge1xyXG4gICAgICBzZXRVc2VybmFtZUVycm9yKFwiVXNlcm5hbWUgaXMgcmVxdWlyZWRcIik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNoZWNrSWZWYWx1ZUVtcHR5KHBhc3N3b3JkKSkge1xyXG4gICAgICBzZXRQYXNzd29yZEVycm9yKFwiUGFzc3dvcmQgaXMgcmVxdWlyZWRcIik7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgb25TdWJtaXRIYW5kbGVyID0gKGU6IFJlYWN0LkZvcm1FdmVudCkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgaWYgKGlzRm9ybVZhbGlkKSB7XHJcbiAgICAgIGF1dGhDdHgubG9naW4odXNlcm5hbWUudHJpbSgpLCBwYXNzd29yZC50cmltKCkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2hvd0Vycm9ycygpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IG9uSW5wdXRDaGFuZ2VIYW5kbGVyID0gKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XHJcbiAgICBjb25zdCBpbnB1dHM6IHsgW2tleTogc3RyaW5nXTogKCkgPT4gdm9pZCB9ID0ge1xyXG4gICAgICB1c2VybmFtZTogKCkgPT4ge1xyXG4gICAgICAgIHNldFVzZXJuYW1lRXJyb3IoXCJcIik7XHJcbiAgICAgICAgc2V0VXNlcm5hbWUoZS50YXJnZXQudmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgICBwYXNzd29yZDogKCkgPT4ge1xyXG4gICAgICAgIHNldFBhc3N3b3JkRXJyb3IoXCJcIik7XHJcbiAgICAgICAgc2V0UGFzc3dvcmQoZS50YXJnZXQudmFsdWUpO1xyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICAgIGlucHV0c1tlLnRhcmdldC5uYW1lXSgpO1xyXG4gICAgdmFsaWRhdGVGb3JtKCk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDw+XHJcbiAgICAgIHthdXRoQ3R4LmxvZ2luRXJyb3IgJiYgKFxyXG4gICAgICAgIDxTdHlsZWRMb2dpbkVycm9yPkludmFsaWQgdXNlcm5hbWUgb3IgcGFzc3dvcmQ8L1N0eWxlZExvZ2luRXJyb3I+XHJcbiAgICAgICl9XHJcbiAgICAgIDxmb3JtIG9uU3VibWl0PXtvblN1Ym1pdEhhbmRsZXJ9IHN0eWxlPXt7IHdpZHRoOiBcIjkwJVwiIH19PlxyXG4gICAgICAgIDxGb3JtSW5wdXRcclxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgIGVycm9yTWVzc2FnZT17dXNlcm5hbWVFcnJvcn1cclxuICAgICAgICAgIHZhbHVlPXt1c2VybmFtZX1cclxuICAgICAgICAgIG5hbWU9e1widXNlcm5hbWVcIn1cclxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtcIlVzZXJuYW1lXCJ9XHJcbiAgICAgICAgICBvbkNoYW5nZT17b25JbnB1dENoYW5nZUhhbmRsZXJ9XHJcbiAgICAgICAgLz5cclxuICAgICAgICA8Rm9ybUlucHV0XHJcbiAgICAgICAgICB0eXBlPXtcInBhc3N3b3JkXCJ9XHJcbiAgICAgICAgICBlcnJvck1lc3NhZ2U9e3Bhc3N3b3JkRXJyb3J9XHJcbiAgICAgICAgICB2YWx1ZT17cGFzc3dvcmR9XHJcbiAgICAgICAgICBuYW1lPXtcInBhc3N3b3JkXCJ9XHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj17XCJQYXNzd29yZFwifVxyXG4gICAgICAgICAgb25DaGFuZ2U9e29uSW5wdXRDaGFuZ2VIYW5kbGVyfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPEJ1dHRvbiB0aXRsZT1cIkxvZ2luXCIgdHlwZT1cInN1Ym1pdFwiPlxyXG4gICAgICAgICAgTG9naW5cclxuICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgPC9mb3JtPlxyXG4gICAgPC8+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IExvZ2luRm9ybTtcclxuIiwiaW1wb3J0IHN0eWxlZCBmcm9tIFwic3R5bGVkLWNvbXBvbmVudHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTdHlsZWRMb2dpbkJhY2tncm91bmQgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgtNDVkZWcsICNlZTc3NTIsICNlNzNjN2UsICMyM2E2ZDUsICMyM2Q1YWIpO1xyXG4gIGJhY2tncm91bmQtc2l6ZTogNDAwJSA0MDAlO1xyXG4gIGFuaW1hdGlvbjogZ3JhZGllbnQgMTVzIGVhc2UgaW5maW5pdGU7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIG92ZXJmbG93OiBhdXRvO1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0eWxlZExvZ2luQ2FyZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHJcbiAgLyogQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfSAqL1xyXG5cclxuICAvKiBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSB7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIH0gKi9cclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTdHlsZWRMb2dpbkhlYWRlciA9IHN0eWxlZC5oMWBcclxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gIGZvbnQtZmFtaWx5OiBcIkNvdXJpZXJcIjtcclxuICBsZXR0ZXItc3BhY2luZzogM3B4O1xyXG4gIGZvbnQtc2l6ZTogM3JlbTtcclxuICBmb250LXdlaWdodDogNjAwO1xyXG4gIGNvbG9yOiAjNWU4N2I4O1xyXG4gIGJvcmRlci1yaWdodDogNHB4IHNvbGlkICMwMDA7IC8qVGhpcyB3aWxsIGJlIHRoZSBibGlua2luZyBjdXJzb3IqL1xyXG4gIGFuaW1hdGlvbjogY3Vyc29yIDFzIGluZmluaXRlIHN0ZXAtZW5kO1xyXG4gIHdpZHRoOiBmaXQtY29udGVudDtcclxuXHJcbiAgQGtleWZyYW1lcyBjdXJzb3Ige1xyXG4gICAgMCUsXHJcbiAgICAxMDAlIHtcclxuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgIH1cclxuICAgIDUwJSB7XHJcbiAgICAgIGJvcmRlci1jb2xvcjogIzAwMDtcclxuICAgIH1cclxuICB9XHJcbmA7XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IE5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IHsgQ2FyZCB9IGZyb20gXCIuLi8uLi9Db21tb24vQ2FyZC9DYXJkXCI7XHJcbmltcG9ydCBMb2dpbkZvcm0gZnJvbSBcIi4uLy4uL0xvZ2luL0xvZ2luRm9ybS9Mb2dpbkZvcm1cIjtcclxuaW1wb3J0IEF1dGhDb250ZXh0IGZyb20gXCIuLi8uLi9zdG9yZS9hdXRoL0F1dGhDb250ZXh0XCI7XHJcbmltcG9ydCB7XHJcbiAgU3R5bGVkTG9naW5CYWNrZ3JvdW5kLFxyXG4gIFN0eWxlZExvZ2luQ2FyZENvbnRhaW5lcixcclxuICBTdHlsZWRMb2dpbkhlYWRlcixcclxufSBmcm9tIFwiLi9Mb2dpblBhZ2Uuc3R5bGVkXCI7XHJcblxyXG5jb25zdCBMb2dpblBhZ2UgPSAoKSA9PiB7XHJcbiAgY29uc3QgYXV0aEN0eCA9IHVzZUNvbnRleHQoQXV0aENvbnRleHQpO1xyXG5cclxuICBpZiAoYXV0aEN0eC5pc0xvZ2dlZEluKSB7XHJcbiAgICByZXR1cm4gPE5hdmlnYXRlIHRvPVwiL3NlcnZlci1saXN0XCIgLz47XHJcbiAgfVxyXG4gIHJldHVybiAoXHJcbiAgICA8U3R5bGVkTG9naW5CYWNrZ3JvdW5kPlxyXG4gICAgICA8U3R5bGVkTG9naW5DYXJkQ29udGFpbmVyPlxyXG4gICAgICAgIDxDYXJkPlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxyXG4gICAgICAgICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxyXG4gICAgICAgICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXHJcbiAgICAgICAgICAgICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPFN0eWxlZExvZ2luSGVhZGVyPkxvZ2luPC9TdHlsZWRMb2dpbkhlYWRlcj5cclxuICAgICAgICAgICAgPExvZ2luRm9ybSAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9DYXJkPlxyXG4gICAgICA8L1N0eWxlZExvZ2luQ2FyZENvbnRhaW5lcj5cclxuICAgIDwvU3R5bGVkTG9naW5CYWNrZ3JvdW5kPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMb2dpblBhZ2U7XHJcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgU3R5bGVkTG9nb3V0QmFja2dyb3VuZCA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KC00NWRlZywgI2VlNzc1MiwgI2U3M2M3ZSwgIzIzYTZkNSwgIzIzZDVhYik7XHJcbiAgYmFja2dyb3VuZC1zaXplOiA0MDAlIDQwMCU7XHJcbiAgYW5pbWF0aW9uOiBncmFkaWVudCAxNXMgZWFzZSBpbmZpbml0ZTtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgb3ZlcmZsb3c6IGF1dG87XHJcbmA7XHJcblxyXG5leHBvcnQgY29uc3QgU3R5bGVkTG9nb3V0Q2FyZENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTdHlsZWRMb2dvdXRIZWFkZXIgPSBzdHlsZWQuaDFgXHJcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuICBmb250LWZhbWlseTogXCJDb3VyaWVyXCI7XHJcbiAgZm9udC1zaXplOiAzcmVtO1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgY29sb3I6ICM1ZTg3Yjg7XHJcbmA7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgTmF2aWdhdGUsIHVzZU5hdmlnYXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vQ29tbW9uL0J1dHRvbi9CdXR0b25cIjtcclxuaW1wb3J0IHsgQ2FyZCB9IGZyb20gXCIuLi8uLi9Db21tb24vQ2FyZC9DYXJkXCI7XHJcbmltcG9ydCB7XHJcbiAgU3R5bGVkTG9nb3V0QmFja2dyb3VuZCxcclxuICBTdHlsZWRMb2dvdXRDYXJkQ29udGFpbmVyLFxyXG4gIFN0eWxlZExvZ291dEhlYWRlcixcclxufSBmcm9tIFwiLi9Mb2dvdXQuc3R5bGVkXCI7XHJcblxyXG5jb25zdCBMb2dvdXQgPSAoKSA9PiB7XHJcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xyXG4gIHJldHVybiAoXHJcbiAgICA8U3R5bGVkTG9nb3V0QmFja2dyb3VuZD5cclxuICAgICAgPFN0eWxlZExvZ291dENhcmRDb250YWluZXI+XHJcbiAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgZGlzcGxheTogXCJmbGV4XCIsXHJcbiAgICAgICAgICAgICAganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsXHJcbiAgICAgICAgICAgICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcclxuICAgICAgICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8U3R5bGVkTG9nb3V0SGVhZGVyPllvdSd2ZSBiZWVuIGxvZ2dlZCBvdXQ8L1N0eWxlZExvZ291dEhlYWRlcj5cclxuICAgICAgICAgICAgPEJ1dHRvbiBvbkNsaWNrPXsoKSA9PiBuYXZpZ2F0ZShcIi9sb2dpblwiKX0+R28gdG8gbG9naW48L0J1dHRvbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvQ2FyZD5cclxuICAgICAgPC9TdHlsZWRMb2dvdXRDYXJkQ29udGFpbmVyPlxyXG4gICAgPC9TdHlsZWRMb2dvdXRCYWNrZ3JvdW5kPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMb2dvdXQ7XHJcbiIsImltcG9ydCB7IE5hdmlnYXRlLCBPdXRsZXQsIHVzZUxvY2F0aW9uIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IEF1dGhDb250ZXh0IGZyb20gXCIuLi9zdG9yZS9hdXRoL0F1dGhDb250ZXh0XCI7XHJcblxyXG5jb25zdCBQcml2YXRlUm91dGUgPSAoKSA9PiB7XHJcbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xyXG4gIGNvbnN0IGF1dGhDdHggPSB1c2VDb250ZXh0KEF1dGhDb250ZXh0KTtcclxuICBjb25zdCBpc0xvZ2dlZEluID0gYXV0aEN0eC5pc0xvZ2dlZEluO1xyXG5cclxuICBpZiAoaXNMb2dnZWRJbikge1xyXG4gICAgcmV0dXJuIDxPdXRsZXQgLz47XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiA8TmF2aWdhdGUgdG89e1wiL2xvZ2luXCJ9IHN0YXRlPXt7IGZyb206IGxvY2F0aW9uIH19IHJlcGxhY2UgLz47XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJpdmF0ZVJvdXRlO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5jb25zdCBNZW51SWNvbiA9ICgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPHN2Z1xyXG4gICAgICBkYXRhLXRlc3RpZD1cIm1lbnUtaWNvblwiXHJcbiAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgICBoZWlnaHQ9XCIyNFwiXHJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxyXG4gICAgICB3aWR0aD1cIjI0XCJcclxuICAgID5cclxuICAgICAgPHBhdGggZD1cIk0wIDBoMjR2MjRIMHpcIiBmaWxsPVwibm9uZVwiIC8+XHJcbiAgICAgIDxwYXRoIGQ9XCJNMyAxOGgxOHYtMkgzdjJ6bTAtNWgxOHYtMkgzdjJ6bTAtN3YyaDE4VjZIM3pcIiAvPlxyXG4gICAgPC9zdmc+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE1lbnVJY29uO1xyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkUGFnZUhlYWRlciA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRQb3BvdmVyID0gc3R5bGVkLmRpdmBcbiAgLnBvcG92ZXJfX3dyYXBwZXIge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgcGFkZGluZzogMS41cmVtO1xuICB9XG5cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgIC5wb3BvdmVyX190aXRsZSB7XG4gICAgICAmLS10ZXh0IHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSB7XG4gICAgLnBvcG92ZXJfX3RpdGxlIHtcbiAgICAgICYtLWljb24ge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5wb3BvdmVyX19jb250ZW50IHtcbiAgICB6LWluZGV4OiAxO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogMTJweDtcbiAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgcGFkZGluZzogMS41cmVtO1xuICAgIGJveC1zaGFkb3c6IDAgMnB4IDVweCAwIHJnYmEoMCwgMCwgMCwgMC4yNik7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA3NjhweCkge1xuICAgICAgICB3aWR0aDogNDB2dztcbiAgfVxuXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY5cHgpIHtcbiAgICB3aWR0aDogYXV0bztcbiAgfVxufVxuYDtcbiIsImNvbnN0IHVzZU91dHNpZGVDbGljayA9IChjYWxsYmFjazogKCkgPT4gdm9pZCkgPT4ge1xuICAgIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZjxhbnk+KCk7XG4gIFxuICAgIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICBjb25zdCBoYW5kbGVDbGljayA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBpZiAocmVmLmN1cnJlbnQgJiYgIXJlZi5jdXJyZW50LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9O1xuICBcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2ssIHRydWUpO1xuICBcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlQ2xpY2ssIHRydWUpO1xuICAgICAgfTtcbiAgICB9LCBbcmVmXSk7XG4gIFxuICAgIHJldHVybiByZWY7XG4gIH07XG5cbiAgZXhwb3J0IGRlZmF1bHQgdXNlT3V0c2lkZUNsaWNrOyIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VOYXZpZ2F0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgQXV0aENvbnRleHQgZnJvbSBcIi4uLy4uL3N0b3JlL2F1dGgvQXV0aENvbnRleHRcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uL0J1dHRvbi9CdXR0b25cIjtcbmltcG9ydCBNZW51SWNvbiBmcm9tIFwiLi4vSWNvbnMvTWVudUljb25cIjtcbmltcG9ydCB7IFN0eWxlZFBhZ2VIZWFkZXIsIFN0eWxlZFBvcG92ZXIgfSBmcm9tIFwiLi9QYWdlSGVhZGVyLnN0eWxlZFwiO1xuaW1wb3J0IHVzZU91dHNpZGVDbGljayBmcm9tICcuLi8uLi9ob29rcy91c2VPdXRzaWRlQ2xpY2snO1xuXG5cbmNvbnN0IFBhZ2VIZWFkZXIgPSAoKSA9PiB7ICAgICAgXG4gIGNvbnN0IHsgbG9nb3V0IH0gPSB1c2VDb250ZXh0KEF1dGhDb250ZXh0KTtcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBjb25zdCBbaXNNZW51T3Blbiwgc2V0SXNNZW51T3Blbl0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgbG9nb3V0QW5kUmVkaXJlY3QgPSAoKSA9PiB7XG4gICAgbG9nb3V0KCk7XG4gICAgcmV0dXJuIG5hdmlnYXRlKFwiL2xvZ291dFwiKTtcbiAgfTtcblxuICBjb25zdCBvcGVuTWVudUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgc2V0SXNNZW51T3Blbih0cnVlKTtcbiAgfVxuXG4gIGNvbnN0IGNsb3NlTWVudUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgc2V0SXNNZW51T3BlbihmYWxzZSk7XG4gIH1cblxuICBjb25zdCByZWYgPSB1c2VPdXRzaWRlQ2xpY2soY2xvc2VNZW51SGFuZGxlcik7XG5cbiAgcmV0dXJuIChcbiAgICA8U3R5bGVkUGFnZUhlYWRlcj5cbiAgICAgIDxTdHlsZWRQb3BvdmVyPlxuICAgICAgICA8ZGl2IHJlZj17cmVmfSBjbGFzc05hbWU9XCJwb3BvdmVyX193cmFwcGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3BvdmVyX190aXRsZVwiIG9uQ2xpY2s9e29wZW5NZW51SGFuZGxlcn0+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJwb3BvdmVyX190aXRsZS0tdGV4dFwiPk1lbnU8L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJwb3BvdmVyX190aXRsZS0taWNvblwiPlxuICAgICAgICAgICAgICA8TWVudUljb24gLz5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7aXNNZW51T3BlbiAmJiA8ZGl2IGNsYXNzTmFtZT1cInBvcG92ZXJfX2NvbnRlbnRcIj5cbiAgICAgICAgICAgIDxCdXR0b24gb25DbGljaz17bG9nb3V0QW5kUmVkaXJlY3R9PkxvZ291dDwvQnV0dG9uPlxuICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1N0eWxlZFBvcG92ZXI+XG4gICAgPC9TdHlsZWRQYWdlSGVhZGVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUGFnZUhlYWRlcjtcbiIsImZ1bmN0aW9uIG4obil7Zm9yKHZhciByPWFyZ3VtZW50cy5sZW5ndGgsdD1BcnJheShyPjE/ci0xOjApLGU9MTtlPHI7ZSsrKXRbZS0xXT1hcmd1bWVudHNbZV07aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOVil7dmFyIGk9WVtuXSxvPWk/XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KG51bGwsdCk6aTpcInVua25vd24gZXJyb3IgbnI6IFwiK247dGhyb3cgRXJyb3IoXCJbSW1tZXJdIFwiK28pfXRocm93IEVycm9yKFwiW0ltbWVyXSBtaW5pZmllZCBlcnJvciBucjogXCIrbisodC5sZW5ndGg/XCIgXCIrdC5tYXAoKGZ1bmN0aW9uKG4pe3JldHVyblwiJ1wiK24rXCInXCJ9KSkuam9pbihcIixcIik6XCJcIikrXCIuIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vYml0Lmx5LzNjWEVLV2ZcIil9ZnVuY3Rpb24gcihuKXtyZXR1cm4hIW4mJiEhbltRXX1mdW5jdGlvbiB0KG4pe3JldHVybiEhbiYmKGZ1bmN0aW9uKG4pe2lmKCFufHxcIm9iamVjdFwiIT10eXBlb2YgbilyZXR1cm4hMTt2YXIgcj1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7aWYobnVsbD09PXIpcmV0dXJuITA7dmFyIHQ9T2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocixcImNvbnN0cnVjdG9yXCIpJiZyLmNvbnN0cnVjdG9yO3JldHVybiB0PT09T2JqZWN0fHxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiZGdW5jdGlvbi50b1N0cmluZy5jYWxsKHQpPT09Wn0obil8fEFycmF5LmlzQXJyYXkobil8fCEhbltMXXx8ISFuLmNvbnN0cnVjdG9yW0xdfHxzKG4pfHx2KG4pKX1mdW5jdGlvbiBlKHQpe3JldHVybiByKHQpfHxuKDIzLHQpLHRbUV0udH1mdW5jdGlvbiBpKG4scix0KXt2b2lkIDA9PT10JiYodD0hMSksMD09PW8obik/KHQ/T2JqZWN0LmtleXM6bm4pKG4pLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QmJlwic3ltYm9sXCI9PXR5cGVvZiBlfHxyKGUsbltlXSxuKX0pKTpuLmZvckVhY2goKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHIoZSx0LG4pfSkpfWZ1bmN0aW9uIG8obil7dmFyIHI9bltRXTtyZXR1cm4gcj9yLmk+Mz9yLmktNDpyLmk6QXJyYXkuaXNBcnJheShuKT8xOnMobik/Mjp2KG4pPzM6MH1mdW5jdGlvbiB1KG4scil7cmV0dXJuIDI9PT1vKG4pP24uaGFzKHIpOk9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHIpfWZ1bmN0aW9uIGEobixyKXtyZXR1cm4gMj09PW8obik/bi5nZXQocik6bltyXX1mdW5jdGlvbiBmKG4scix0KXt2YXIgZT1vKG4pOzI9PT1lP24uc2V0KHIsdCk6Mz09PWU/KG4uZGVsZXRlKHIpLG4uYWRkKHQpKTpuW3JdPXR9ZnVuY3Rpb24gYyhuLHIpe3JldHVybiBuPT09cj8wIT09bnx8MS9uPT0xL3I6biE9biYmciE9cn1mdW5jdGlvbiBzKG4pe3JldHVybiBYJiZuIGluc3RhbmNlb2YgTWFwfWZ1bmN0aW9uIHYobil7cmV0dXJuIHEmJm4gaW5zdGFuY2VvZiBTZXR9ZnVuY3Rpb24gcChuKXtyZXR1cm4gbi5vfHxuLnR9ZnVuY3Rpb24gbChuKXtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChuKTt2YXIgcj1ybihuKTtkZWxldGUgcltRXTtmb3IodmFyIHQ9bm4ociksZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgaT10W2VdLG89cltpXTshMT09PW8ud3JpdGFibGUmJihvLndyaXRhYmxlPSEwLG8uY29uZmlndXJhYmxlPSEwKSwoby5nZXR8fG8uc2V0KSYmKHJbaV09e2NvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCxlbnVtZXJhYmxlOm8uZW51bWVyYWJsZSx2YWx1ZTpuW2ldfSl9cmV0dXJuIE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pLHIpfWZ1bmN0aW9uIGQobixlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLHkobil8fHIobil8fCF0KG4pP246KG8obik+MSYmKG4uc2V0PW4uYWRkPW4uY2xlYXI9bi5kZWxldGU9aCksT2JqZWN0LmZyZWV6ZShuKSxlJiZpKG4sKGZ1bmN0aW9uKG4scil7cmV0dXJuIGQociwhMCl9KSwhMCksbil9ZnVuY3Rpb24gaCgpe24oMil9ZnVuY3Rpb24geShuKXtyZXR1cm4gbnVsbD09bnx8XCJvYmplY3RcIiE9dHlwZW9mIG58fE9iamVjdC5pc0Zyb3plbihuKX1mdW5jdGlvbiBiKHIpe3ZhciB0PXRuW3JdO3JldHVybiB0fHxuKDE4LHIpLHR9ZnVuY3Rpb24gbShuLHIpe3RuW25dfHwodG5bbl09cil9ZnVuY3Rpb24gXygpe3JldHVyblwicHJvZHVjdGlvblwiPT09cHJvY2Vzcy5lbnYuTk9ERV9FTlZ8fFV8fG4oMCksVX1mdW5jdGlvbiBqKG4scil7ciYmKGIoXCJQYXRjaGVzXCIpLG4udT1bXSxuLnM9W10sbi52PXIpfWZ1bmN0aW9uIE8obil7ZyhuKSxuLnAuZm9yRWFjaChTKSxuLnA9bnVsbH1mdW5jdGlvbiBnKG4pe249PT1VJiYoVT1uLmwpfWZ1bmN0aW9uIHcobil7cmV0dXJuIFU9e3A6W10sbDpVLGg6bixtOiEwLF86MH19ZnVuY3Rpb24gUyhuKXt2YXIgcj1uW1FdOzA9PT1yLml8fDE9PT1yLmk/ci5qKCk6ci5PPSEwfWZ1bmN0aW9uIFAocixlKXtlLl89ZS5wLmxlbmd0aDt2YXIgaT1lLnBbMF0sbz12b2lkIDAhPT1yJiZyIT09aTtyZXR1cm4gZS5oLmd8fGIoXCJFUzVcIikuUyhlLHIsbyksbz8oaVtRXS5QJiYoTyhlKSxuKDQpKSx0KHIpJiYocj1NKGUsciksZS5sfHx4KGUscikpLGUudSYmYihcIlBhdGNoZXNcIikuTShpW1FdLnQscixlLnUsZS5zKSk6cj1NKGUsaSxbXSksTyhlKSxlLnUmJmUudihlLnUsZS5zKSxyIT09SD9yOnZvaWQgMH1mdW5jdGlvbiBNKG4scix0KXtpZih5KHIpKXJldHVybiByO3ZhciBlPXJbUV07aWYoIWUpcmV0dXJuIGkociwoZnVuY3Rpb24oaSxvKXtyZXR1cm4gQShuLGUscixpLG8sdCl9KSwhMCkscjtpZihlLkEhPT1uKXJldHVybiByO2lmKCFlLlApcmV0dXJuIHgobixlLnQsITApLGUudDtpZighZS5JKXtlLkk9ITAsZS5BLl8tLTt2YXIgbz00PT09ZS5pfHw1PT09ZS5pP2Uubz1sKGUuayk6ZS5vO2koMz09PWUuaT9uZXcgU2V0KG8pOm8sKGZ1bmN0aW9uKHIsaSl7cmV0dXJuIEEobixlLG8scixpLHQpfSkpLHgobixvLCExKSx0JiZuLnUmJmIoXCJQYXRjaGVzXCIpLlIoZSx0LG4udSxuLnMpfXJldHVybiBlLm99ZnVuY3Rpb24gQShlLGksbyxhLGMscyl7aWYoXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmYz09PW8mJm4oNSkscihjKSl7dmFyIHY9TShlLGMscyYmaSYmMyE9PWkuaSYmIXUoaS5ELGEpP3MuY29uY2F0KGEpOnZvaWQgMCk7aWYoZihvLGEsdiksIXIodikpcmV0dXJuO2UubT0hMX1pZih0KGMpJiYheShjKSl7aWYoIWUuaC5GJiZlLl88MSlyZXR1cm47TShlLGMpLGkmJmkuQS5sfHx4KGUsYyl9fWZ1bmN0aW9uIHgobixyLHQpe3ZvaWQgMD09PXQmJih0PSExKSxuLmguRiYmbi5tJiZkKHIsdCl9ZnVuY3Rpb24geihuLHIpe3ZhciB0PW5bUV07cmV0dXJuKHQ/cCh0KTpuKVtyXX1mdW5jdGlvbiBJKG4scil7aWYociBpbiBuKWZvcih2YXIgdD1PYmplY3QuZ2V0UHJvdG90eXBlT2Yobik7dDspe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxyKTtpZihlKXJldHVybiBlO3Q9T2JqZWN0LmdldFByb3RvdHlwZU9mKHQpfX1mdW5jdGlvbiBrKG4pe24uUHx8KG4uUD0hMCxuLmwmJmsobi5sKSl9ZnVuY3Rpb24gRShuKXtuLm98fChuLm89bChuLnQpKX1mdW5jdGlvbiBSKG4scix0KXt2YXIgZT1zKHIpP2IoXCJNYXBTZXRcIikuTihyLHQpOnYocik/YihcIk1hcFNldFwiKS5UKHIsdCk6bi5nP2Z1bmN0aW9uKG4scil7dmFyIHQ9QXJyYXkuaXNBcnJheShuKSxlPXtpOnQ/MTowLEE6cj9yLkE6XygpLFA6ITEsSTohMSxEOnt9LGw6cix0Om4sazpudWxsLG86bnVsbCxqOm51bGwsQzohMX0saT1lLG89ZW47dCYmKGk9W2VdLG89b24pO3ZhciB1PVByb3h5LnJldm9jYWJsZShpLG8pLGE9dS5yZXZva2UsZj11LnByb3h5O3JldHVybiBlLms9ZixlLmo9YSxmfShyLHQpOmIoXCJFUzVcIikuSihyLHQpO3JldHVybih0P3QuQTpfKCkpLnAucHVzaChlKSxlfWZ1bmN0aW9uIEQoZSl7cmV0dXJuIHIoZSl8fG4oMjIsZSksZnVuY3Rpb24gbihyKXtpZighdChyKSlyZXR1cm4gcjt2YXIgZSx1PXJbUV0sYz1vKHIpO2lmKHUpe2lmKCF1LlAmJih1Lmk8NHx8IWIoXCJFUzVcIikuSyh1KSkpcmV0dXJuIHUudDt1Lkk9ITAsZT1GKHIsYyksdS5JPSExfWVsc2UgZT1GKHIsYyk7cmV0dXJuIGkoZSwoZnVuY3Rpb24ocix0KXt1JiZhKHUudCxyKT09PXR8fGYoZSxyLG4odCkpfSkpLDM9PT1jP25ldyBTZXQoZSk6ZX0oZSl9ZnVuY3Rpb24gRihuLHIpe3N3aXRjaChyKXtjYXNlIDI6cmV0dXJuIG5ldyBNYXAobik7Y2FzZSAzOnJldHVybiBBcnJheS5mcm9tKG4pfXJldHVybiBsKG4pfWZ1bmN0aW9uIE4oKXtmdW5jdGlvbiB0KG4scil7dmFyIHQ9c1tuXTtyZXR1cm4gdD90LmVudW1lcmFibGU9cjpzW25dPXQ9e2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOnIsZ2V0OmZ1bmN0aW9uKCl7dmFyIHI9dGhpc1tRXTtyZXR1cm5cInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHIpLGVuLmdldChyLG4pfSxzZXQ6ZnVuY3Rpb24ocil7dmFyIHQ9dGhpc1tRXTtcInByb2R1Y3Rpb25cIiE9PXByb2Nlc3MuZW52Lk5PREVfRU5WJiZmKHQpLGVuLnNldCh0LG4scil9fSx0fWZ1bmN0aW9uIGUobil7Zm9yKHZhciByPW4ubGVuZ3RoLTE7cj49MDtyLS0pe3ZhciB0PW5bcl1bUV07aWYoIXQuUClzd2l0Y2godC5pKXtjYXNlIDU6YSh0KSYmayh0KTticmVhaztjYXNlIDQ6byh0KSYmayh0KX19fWZ1bmN0aW9uIG8obil7Zm9yKHZhciByPW4udCx0PW4uayxlPW5uKHQpLGk9ZS5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIG89ZVtpXTtpZihvIT09USl7dmFyIGE9cltvXTtpZih2b2lkIDA9PT1hJiYhdShyLG8pKXJldHVybiEwO3ZhciBmPXRbb10scz1mJiZmW1FdO2lmKHM/cy50IT09YTohYyhmLGEpKXJldHVybiEwfX12YXIgdj0hIXJbUV07cmV0dXJuIGUubGVuZ3RoIT09bm4ocikubGVuZ3RoKyh2PzA6MSl9ZnVuY3Rpb24gYShuKXt2YXIgcj1uLms7aWYoci5sZW5ndGghPT1uLnQubGVuZ3RoKXJldHVybiEwO3ZhciB0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixyLmxlbmd0aC0xKTtpZih0JiYhdC5nZXQpcmV0dXJuITA7Zm9yKHZhciBlPTA7ZTxyLmxlbmd0aDtlKyspaWYoIXIuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gZihyKXtyLk8mJm4oMyxKU09OLnN0cmluZ2lmeShwKHIpKSl9dmFyIHM9e307bShcIkVTNVwiLHtKOmZ1bmN0aW9uKG4scil7dmFyIGU9QXJyYXkuaXNBcnJheShuKSxpPWZ1bmN0aW9uKG4scil7aWYobil7Zm9yKHZhciBlPUFycmF5KHIubGVuZ3RoKSxpPTA7aTxyLmxlbmd0aDtpKyspT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJcIitpLHQoaSwhMCkpO3JldHVybiBlfXZhciBvPXJuKHIpO2RlbGV0ZSBvW1FdO2Zvcih2YXIgdT1ubihvKSxhPTA7YTx1Lmxlbmd0aDthKyspe3ZhciBmPXVbYV07b1tmXT10KGYsbnx8ISFvW2ZdLmVudW1lcmFibGUpfXJldHVybiBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihyKSxvKX0oZSxuKSxvPXtpOmU/NTo0LEE6cj9yLkE6XygpLFA6ITEsSTohMSxEOnt9LGw6cix0Om4sazppLG86bnVsbCxPOiExLEM6ITF9O3JldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoaSxRLHt2YWx1ZTpvLHdyaXRhYmxlOiEwfSksaX0sUzpmdW5jdGlvbihuLHQsbyl7bz9yKHQpJiZ0W1FdLkE9PT1uJiZlKG4ucCk6KG4udSYmZnVuY3Rpb24gbihyKXtpZihyJiZcIm9iamVjdFwiPT10eXBlb2Ygcil7dmFyIHQ9cltRXTtpZih0KXt2YXIgZT10LnQsbz10LmssZj10LkQsYz10Lmk7aWYoND09PWMpaShvLChmdW5jdGlvbihyKXtyIT09USYmKHZvaWQgMCE9PWVbcl18fHUoZSxyKT9mW3JdfHxuKG9bcl0pOihmW3JdPSEwLGsodCkpKX0pKSxpKGUsKGZ1bmN0aW9uKG4pe3ZvaWQgMCE9PW9bbl18fHUobyxuKXx8KGZbbl09ITEsayh0KSl9KSk7ZWxzZSBpZig1PT09Yyl7aWYoYSh0KSYmKGsodCksZi5sZW5ndGg9ITApLG8ubGVuZ3RoPGUubGVuZ3RoKWZvcih2YXIgcz1vLmxlbmd0aDtzPGUubGVuZ3RoO3MrKylmW3NdPSExO2Vsc2UgZm9yKHZhciB2PWUubGVuZ3RoO3Y8by5sZW5ndGg7disrKWZbdl09ITA7Zm9yKHZhciBwPU1hdGgubWluKG8ubGVuZ3RoLGUubGVuZ3RoKSxsPTA7bDxwO2wrKylvLmhhc093blByb3BlcnR5KGwpfHwoZltsXT0hMCksdm9pZCAwPT09ZltsXSYmbihvW2xdKX19fX0obi5wWzBdKSxlKG4ucCkpfSxLOmZ1bmN0aW9uKG4pe3JldHVybiA0PT09bi5pP28obik6YShuKX19KX1mdW5jdGlvbiBUKCl7ZnVuY3Rpb24gZShuKXtpZighdChuKSlyZXR1cm4gbjtpZihBcnJheS5pc0FycmF5KG4pKXJldHVybiBuLm1hcChlKTtpZihzKG4pKXJldHVybiBuZXcgTWFwKEFycmF5LmZyb20obi5lbnRyaWVzKCkpLm1hcCgoZnVuY3Rpb24obil7cmV0dXJuW25bMF0sZShuWzFdKV19KSkpO2lmKHYobikpcmV0dXJuIG5ldyBTZXQoQXJyYXkuZnJvbShuKS5tYXAoZSkpO3ZhciByPU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKG4pKTtmb3IodmFyIGkgaW4gbilyW2ldPWUobltpXSk7cmV0dXJuIHUobixMKSYmKHJbTF09bltMXSkscn1mdW5jdGlvbiBmKG4pe3JldHVybiByKG4pP2Uobik6bn12YXIgYz1cImFkZFwiO20oXCJQYXRjaGVzXCIseyQ6ZnVuY3Rpb24ocix0KXtyZXR1cm4gdC5mb3JFYWNoKChmdW5jdGlvbih0KXtmb3IodmFyIGk9dC5wYXRoLHU9dC5vcCxmPXIscz0wO3M8aS5sZW5ndGgtMTtzKyspe3ZhciB2PW8oZikscD1cIlwiK2lbc107MCE9PXYmJjEhPT12fHxcIl9fcHJvdG9fX1wiIT09cCYmXCJjb25zdHJ1Y3RvclwiIT09cHx8bigyNCksXCJmdW5jdGlvblwiPT10eXBlb2YgZiYmXCJwcm90b3R5cGVcIj09PXAmJm4oMjQpLFwib2JqZWN0XCIhPXR5cGVvZihmPWEoZixwKSkmJm4oMTUsaS5qb2luKFwiL1wiKSl9dmFyIGw9byhmKSxkPWUodC52YWx1ZSksaD1pW2kubGVuZ3RoLTFdO3N3aXRjaCh1KXtjYXNlXCJyZXBsYWNlXCI6c3dpdGNoKGwpe2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6bigxNik7ZGVmYXVsdDpyZXR1cm4gZltoXT1kfWNhc2UgYzpzd2l0Y2gobCl7Y2FzZSAxOnJldHVyblwiLVwiPT09aD9mLnB1c2goZCk6Zi5zcGxpY2UoaCwwLGQpO2Nhc2UgMjpyZXR1cm4gZi5zZXQoaCxkKTtjYXNlIDM6cmV0dXJuIGYuYWRkKGQpO2RlZmF1bHQ6cmV0dXJuIGZbaF09ZH1jYXNlXCJyZW1vdmVcIjpzd2l0Y2gobCl7Y2FzZSAxOnJldHVybiBmLnNwbGljZShoLDEpO2Nhc2UgMjpyZXR1cm4gZi5kZWxldGUoaCk7Y2FzZSAzOnJldHVybiBmLmRlbGV0ZSh0LnZhbHVlKTtkZWZhdWx0OnJldHVybiBkZWxldGUgZltoXX1kZWZhdWx0Om4oMTcsdSl9fSkpLHJ9LFI6ZnVuY3Rpb24obixyLHQsZSl7c3dpdGNoKG4uaSl7Y2FzZSAwOmNhc2UgNDpjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKG4scix0LGUpe3ZhciBvPW4udCxzPW4ubztpKG4uRCwoZnVuY3Rpb24obixpKXt2YXIgdj1hKG8sbikscD1hKHMsbiksbD1pP3UobyxuKT9cInJlcGxhY2VcIjpjOlwicmVtb3ZlXCI7aWYodiE9PXB8fFwicmVwbGFjZVwiIT09bCl7dmFyIGQ9ci5jb25jYXQobik7dC5wdXNoKFwicmVtb3ZlXCI9PT1sP3tvcDpsLHBhdGg6ZH06e29wOmwscGF0aDpkLHZhbHVlOnB9KSxlLnB1c2gobD09PWM/e29wOlwicmVtb3ZlXCIscGF0aDpkfTpcInJlbW92ZVwiPT09bD97b3A6YyxwYXRoOmQsdmFsdWU6Zih2KX06e29wOlwicmVwbGFjZVwiLHBhdGg6ZCx2YWx1ZTpmKHYpfSl9fSkpfShuLHIsdCxlKTtjYXNlIDU6Y2FzZSAxOnJldHVybiBmdW5jdGlvbihuLHIsdCxlKXt2YXIgaT1uLnQsbz1uLkQsdT1uLm87aWYodS5sZW5ndGg8aS5sZW5ndGgpe3ZhciBhPVt1LGldO2k9YVswXSx1PWFbMV07dmFyIHM9W2UsdF07dD1zWzBdLGU9c1sxXX1mb3IodmFyIHY9MDt2PGkubGVuZ3RoO3YrKylpZihvW3ZdJiZ1W3ZdIT09aVt2XSl7dmFyIHA9ci5jb25jYXQoW3ZdKTt0LnB1c2goe29wOlwicmVwbGFjZVwiLHBhdGg6cCx2YWx1ZTpmKHVbdl0pfSksZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnAsdmFsdWU6ZihpW3ZdKX0pfWZvcih2YXIgbD1pLmxlbmd0aDtsPHUubGVuZ3RoO2wrKyl7dmFyIGQ9ci5jb25jYXQoW2xdKTt0LnB1c2goe29wOmMscGF0aDpkLHZhbHVlOmYodVtsXSl9KX1pLmxlbmd0aDx1Lmxlbmd0aCYmZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOnIuY29uY2F0KFtcImxlbmd0aFwiXSksdmFsdWU6aS5sZW5ndGh9KX0obixyLHQsZSk7Y2FzZSAzOnJldHVybiBmdW5jdGlvbihuLHIsdCxlKXt2YXIgaT1uLnQsbz1uLm8sdT0wO2kuZm9yRWFjaCgoZnVuY3Rpb24obil7aWYoIW8uaGFzKG4pKXt2YXIgaT1yLmNvbmNhdChbdV0pO3QucHVzaCh7b3A6XCJyZW1vdmVcIixwYXRoOmksdmFsdWU6bn0pLGUudW5zaGlmdCh7b3A6YyxwYXRoOmksdmFsdWU6bn0pfXUrK30pKSx1PTAsby5mb3JFYWNoKChmdW5jdGlvbihuKXtpZighaS5oYXMobikpe3ZhciBvPXIuY29uY2F0KFt1XSk7dC5wdXNoKHtvcDpjLHBhdGg6byx2YWx1ZTpufSksZS51bnNoaWZ0KHtvcDpcInJlbW92ZVwiLHBhdGg6byx2YWx1ZTpufSl9dSsrfSkpfShuLHIsdCxlKX19LE06ZnVuY3Rpb24obixyLHQsZSl7dC5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOltdLHZhbHVlOnI9PT1IP3ZvaWQgMDpyfSksZS5wdXNoKHtvcDpcInJlcGxhY2VcIixwYXRoOltdLHZhbHVlOm59KX19KX1mdW5jdGlvbiBDKCl7ZnVuY3Rpb24gcihuLHIpe2Z1bmN0aW9uIHQoKXt0aGlzLmNvbnN0cnVjdG9yPW59YShuLHIpLG4ucHJvdG90eXBlPSh0LnByb3RvdHlwZT1yLnByb3RvdHlwZSxuZXcgdCl9ZnVuY3Rpb24gZShuKXtuLm98fChuLkQ9bmV3IE1hcCxuLm89bmV3IE1hcChuLnQpKX1mdW5jdGlvbiBvKG4pe24ub3x8KG4ubz1uZXcgU2V0LG4udC5mb3JFYWNoKChmdW5jdGlvbihyKXtpZih0KHIpKXt2YXIgZT1SKG4uQS5oLHIsbik7bi5wLnNldChyLGUpLG4uby5hZGQoZSl9ZWxzZSBuLm8uYWRkKHIpfSkpKX1mdW5jdGlvbiB1KHIpe3IuTyYmbigzLEpTT04uc3RyaW5naWZ5KHAocikpKX12YXIgYT1mdW5jdGlvbihuLHIpe3JldHVybihhPU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbihuLHIpe24uX19wcm90b19fPXJ9fHxmdW5jdGlvbihuLHIpe2Zvcih2YXIgdCBpbiByKXIuaGFzT3duUHJvcGVydHkodCkmJihuW3RdPXJbdF0pfSkobixyKX0sZj1mdW5jdGlvbigpe2Z1bmN0aW9uIG4obixyKXtyZXR1cm4gdGhpc1tRXT17aToyLGw6cixBOnI/ci5BOl8oKSxQOiExLEk6ITEsbzp2b2lkIDAsRDp2b2lkIDAsdDpuLGs6dGhpcyxDOiExLE86ITF9LHRoaXN9cihuLE1hcCk7dmFyIG89bi5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLG8uaGFzPWZ1bmN0aW9uKG4pe3JldHVybiBwKHRoaXNbUV0pLmhhcyhuKX0sby5zZXQ9ZnVuY3Rpb24obixyKXt2YXIgdD10aGlzW1FdO3JldHVybiB1KHQpLHAodCkuaGFzKG4pJiZwKHQpLmdldChuKT09PXJ8fChlKHQpLGsodCksdC5ELnNldChuLCEwKSx0Lm8uc2V0KG4sciksdC5ELnNldChuLCEwKSksdGhpc30sby5kZWxldGU9ZnVuY3Rpb24obil7aWYoIXRoaXMuaGFzKG4pKXJldHVybiExO3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksZShyKSxrKHIpLHIudC5oYXMobik/ci5ELnNldChuLCExKTpyLkQuZGVsZXRlKG4pLHIuby5kZWxldGUobiksITB9LG8uY2xlYXI9ZnVuY3Rpb24oKXt2YXIgbj10aGlzW1FdO3UobikscChuKS5zaXplJiYoZShuKSxrKG4pLG4uRD1uZXcgTWFwLGkobi50LChmdW5jdGlvbihyKXtuLkQuc2V0KHIsITEpfSkpLG4uby5jbGVhcigpKX0sby5mb3JFYWNoPWZ1bmN0aW9uKG4scil7dmFyIHQ9dGhpcztwKHRoaXNbUV0pLmZvckVhY2goKGZ1bmN0aW9uKGUsaSl7bi5jYWxsKHIsdC5nZXQoaSksaSx0KX0pKX0sby5nZXQ9ZnVuY3Rpb24obil7dmFyIHI9dGhpc1tRXTt1KHIpO3ZhciBpPXAocikuZ2V0KG4pO2lmKHIuSXx8IXQoaSkpcmV0dXJuIGk7aWYoaSE9PXIudC5nZXQobikpcmV0dXJuIGk7dmFyIG89UihyLkEuaCxpLHIpO3JldHVybiBlKHIpLHIuby5zZXQobixvKSxvfSxvLmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5rZXlzKCl9LG8udmFsdWVzPWZ1bmN0aW9uKCl7dmFyIG4scj10aGlzLHQ9dGhpcy5rZXlzKCk7cmV0dXJuKG49e30pW1ZdPWZ1bmN0aW9uKCl7cmV0dXJuIHIudmFsdWVzKCl9LG4ubmV4dD1mdW5jdGlvbigpe3ZhciBuPXQubmV4dCgpO3JldHVybiBuLmRvbmU/bjp7ZG9uZTohMSx2YWx1ZTpyLmdldChuLnZhbHVlKX19LG59LG8uZW50cmllcz1mdW5jdGlvbigpe3ZhciBuLHI9dGhpcyx0PXRoaXMua2V5cygpO3JldHVybihuPXt9KVtWXT1mdW5jdGlvbigpe3JldHVybiByLmVudHJpZXMoKX0sbi5uZXh0PWZ1bmN0aW9uKCl7dmFyIG49dC5uZXh0KCk7aWYobi5kb25lKXJldHVybiBuO3ZhciBlPXIuZ2V0KG4udmFsdWUpO3JldHVybntkb25lOiExLHZhbHVlOltuLnZhbHVlLGVdfX0sbn0sb1tWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVudHJpZXMoKX0sbn0oKSxjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHIpe3JldHVybiB0aGlzW1FdPXtpOjMsbDpyLEE6cj9yLkE6XygpLFA6ITEsSTohMSxvOnZvaWQgMCx0Om4sazp0aGlzLHA6bmV3IE1hcCxPOiExLEM6ITF9LHRoaXN9cihuLFNldCk7dmFyIHQ9bi5wcm90b3R5cGU7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwic2l6ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gcCh0aGlzW1FdKS5zaXplfX0pLHQuaGFzPWZ1bmN0aW9uKG4pe3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksci5vPyEhci5vLmhhcyhuKXx8ISghci5wLmhhcyhuKXx8IXIuby5oYXMoci5wLmdldChuKSkpOnIudC5oYXMobil9LHQuYWRkPWZ1bmN0aW9uKG4pe3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksdGhpcy5oYXMobil8fChvKHIpLGsociksci5vLmFkZChuKSksdGhpc30sdC5kZWxldGU9ZnVuY3Rpb24obil7aWYoIXRoaXMuaGFzKG4pKXJldHVybiExO3ZhciByPXRoaXNbUV07cmV0dXJuIHUociksbyhyKSxrKHIpLHIuby5kZWxldGUobil8fCEhci5wLmhhcyhuKSYmci5vLmRlbGV0ZShyLnAuZ2V0KG4pKX0sdC5jbGVhcj1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07dShuKSxwKG4pLnNpemUmJihvKG4pLGsobiksbi5vLmNsZWFyKCkpfSx0LnZhbHVlcz1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxuLm8udmFsdWVzKCl9LHQuZW50cmllcz1mdW5jdGlvbigpe3ZhciBuPXRoaXNbUV07cmV0dXJuIHUobiksbyhuKSxuLm8uZW50cmllcygpfSx0LmtleXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52YWx1ZXMoKX0sdFtWXT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnZhbHVlcygpfSx0LmZvckVhY2g9ZnVuY3Rpb24obixyKXtmb3IodmFyIHQ9dGhpcy52YWx1ZXMoKSxlPXQubmV4dCgpOyFlLmRvbmU7KW4uY2FsbChyLGUudmFsdWUsZS52YWx1ZSx0aGlzKSxlPXQubmV4dCgpfSxufSgpO20oXCJNYXBTZXRcIix7TjpmdW5jdGlvbihuLHIpe3JldHVybiBuZXcgZihuLHIpfSxUOmZ1bmN0aW9uKG4scil7cmV0dXJuIG5ldyBjKG4scil9fSl9ZnVuY3Rpb24gSigpe04oKSxDKCksVCgpfWZ1bmN0aW9uIEsobil7cmV0dXJuIG59ZnVuY3Rpb24gJChuKXtyZXR1cm4gbn12YXIgRyxVLFc9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbChcInhcIiksWD1cInVuZGVmaW5lZFwiIT10eXBlb2YgTWFwLHE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFNldCxCPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm94eSYmdm9pZCAwIT09UHJveHkucmV2b2NhYmxlJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCxIPVc/U3ltYm9sLmZvcihcImltbWVyLW5vdGhpbmdcIik6KChHPXt9KVtcImltbWVyLW5vdGhpbmdcIl09ITAsRyksTD1XP1N5bWJvbC5mb3IoXCJpbW1lci1kcmFmdGFibGVcIik6XCJfXyRpbW1lcl9kcmFmdGFibGVcIixRPVc/U3ltYm9sLmZvcihcImltbWVyLXN0YXRlXCIpOlwiX18kaW1tZXJfc3RhdGVcIixWPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcnx8XCJAQGl0ZXJhdG9yXCIsWT17MDpcIklsbGVnYWwgc3RhdGVcIiwxOlwiSW1tZXIgZHJhZnRzIGNhbm5vdCBoYXZlIGNvbXB1dGVkIHByb3BlcnRpZXNcIiwyOlwiVGhpcyBvYmplY3QgaGFzIGJlZW4gZnJvemVuIGFuZCBzaG91bGQgbm90IGJlIG11dGF0ZWRcIiwzOmZ1bmN0aW9uKG4pe3JldHVyblwiQ2Fubm90IHVzZSBhIHByb3h5IHRoYXQgaGFzIGJlZW4gcmV2b2tlZC4gRGlkIHlvdSBwYXNzIGFuIG9iamVjdCBmcm9tIGluc2lkZSBhbiBpbW1lciBmdW5jdGlvbiB0byBhbiBhc3luYyBwcm9jZXNzPyBcIitufSw0OlwiQW4gaW1tZXIgcHJvZHVjZXIgcmV0dXJuZWQgYSBuZXcgdmFsdWUgKmFuZCogbW9kaWZpZWQgaXRzIGRyYWZ0LiBFaXRoZXIgcmV0dXJuIGEgbmV3IHZhbHVlICpvciogbW9kaWZ5IHRoZSBkcmFmdC5cIiw1OlwiSW1tZXIgZm9yYmlkcyBjaXJjdWxhciByZWZlcmVuY2VzXCIsNjpcIlRoZSBmaXJzdCBvciBzZWNvbmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvblwiLDc6XCJUaGUgdGhpcmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvbiBvciB1bmRlZmluZWRcIiw4OlwiRmlyc3QgYXJndW1lbnQgdG8gYGNyZWF0ZURyYWZ0YCBtdXN0IGJlIGEgcGxhaW4gb2JqZWN0LCBhbiBhcnJheSwgb3IgYW4gaW1tZXJhYmxlIG9iamVjdFwiLDk6XCJGaXJzdCBhcmd1bWVudCB0byBgZmluaXNoRHJhZnRgIG11c3QgYmUgYSBkcmFmdCByZXR1cm5lZCBieSBgY3JlYXRlRHJhZnRgXCIsMTA6XCJUaGUgZ2l2ZW4gZHJhZnQgaXMgYWxyZWFkeSBmaW5hbGl6ZWRcIiwxMTpcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eSgpIGNhbm5vdCBiZSB1c2VkIG9uIGFuIEltbWVyIGRyYWZ0XCIsMTI6XCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLDEzOlwiSW1tZXIgb25seSBzdXBwb3J0cyBkZWxldGluZyBhcnJheSBpbmRpY2VzXCIsMTQ6XCJJbW1lciBvbmx5IHN1cHBvcnRzIHNldHRpbmcgYXJyYXkgaW5kaWNlcyBhbmQgdGhlICdsZW5ndGgnIHByb3BlcnR5XCIsMTU6ZnVuY3Rpb24obil7cmV0dXJuXCJDYW5ub3QgYXBwbHkgcGF0Y2gsIHBhdGggZG9lc24ndCByZXNvbHZlOiBcIitufSwxNjonU2V0cyBjYW5ub3QgaGF2ZSBcInJlcGxhY2VcIiBwYXRjaGVzLicsMTc6ZnVuY3Rpb24obil7cmV0dXJuXCJVbnN1cHBvcnRlZCBwYXRjaCBvcGVyYXRpb246IFwiK259LDE4OmZ1bmN0aW9uKG4pe3JldHVyblwiVGhlIHBsdWdpbiBmb3IgJ1wiK24rXCInIGhhcyBub3QgYmVlbiBsb2FkZWQgaW50byBJbW1lci4gVG8gZW5hYmxlIHRoZSBwbHVnaW4sIGltcG9ydCBhbmQgY2FsbCBgZW5hYmxlXCIrbitcIigpYCB3aGVuIGluaXRpYWxpemluZyB5b3VyIGFwcGxpY2F0aW9uLlwifSwyMDpcIkNhbm5vdCB1c2UgcHJveGllcyBpZiBQcm94eSwgUHJveHkucmV2b2NhYmxlIG9yIFJlZmxlY3QgYXJlIG5vdCBhdmFpbGFibGVcIiwyMTpmdW5jdGlvbihuKXtyZXR1cm5cInByb2R1Y2UgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIHRoaW5ncyB0aGF0IGFyZSBkcmFmdGFibGU6IHBsYWluIG9iamVjdHMsIGFycmF5cywgTWFwLCBTZXQgb3IgY2xhc3NlcyB0aGF0IGFyZSBtYXJrZWQgd2l0aCAnW2ltbWVyYWJsZV06IHRydWUnLiBHb3QgJ1wiK24rXCInXCJ9LDIyOmZ1bmN0aW9uKG4pe3JldHVyblwiJ2N1cnJlbnQnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiBcIitufSwyMzpmdW5jdGlvbihuKXtyZXR1cm5cIidvcmlnaW5hbCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6IFwiK259LDI0OlwiUGF0Y2hpbmcgcmVzZXJ2ZWQgYXR0cmlidXRlcyBsaWtlIF9fcHJvdG9fXywgcHJvdG90eXBlIGFuZCBjb25zdHJ1Y3RvciBpcyBub3QgYWxsb3dlZFwifSxaPVwiXCIrT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvcixubj1cInVuZGVmaW5lZFwiIT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5vd25LZXlzP1JlZmxlY3Qub3duS2V5czp2b2lkIDAhPT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzP2Z1bmN0aW9uKG4pe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhuKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhuKSl9Ok9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzLHJuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzfHxmdW5jdGlvbihuKXt2YXIgcj17fTtyZXR1cm4gbm4obikuZm9yRWFjaCgoZnVuY3Rpb24odCl7clt0XT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG4sdCl9KSkscn0sdG49e30sZW49e2dldDpmdW5jdGlvbihuLHIpe2lmKHI9PT1RKXJldHVybiBuO3ZhciBlPXAobik7aWYoIXUoZSxyKSlyZXR1cm4gZnVuY3Rpb24obixyLHQpe3ZhciBlLGk9SShyLHQpO3JldHVybiBpP1widmFsdWVcImluIGk/aS52YWx1ZTpudWxsPT09KGU9aS5nZXQpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLmNhbGwobi5rKTp2b2lkIDB9KG4sZSxyKTt2YXIgaT1lW3JdO3JldHVybiBuLkl8fCF0KGkpP2k6aT09PXoobi50LHIpPyhFKG4pLG4ub1tyXT1SKG4uQS5oLGksbikpOml9LGhhczpmdW5jdGlvbihuLHIpe3JldHVybiByIGluIHAobil9LG93bktleXM6ZnVuY3Rpb24obil7cmV0dXJuIFJlZmxlY3Qub3duS2V5cyhwKG4pKX0sc2V0OmZ1bmN0aW9uKG4scix0KXt2YXIgZT1JKHAobikscik7aWYobnVsbD09ZT92b2lkIDA6ZS5zZXQpcmV0dXJuIGUuc2V0LmNhbGwobi5rLHQpLCEwO2lmKCFuLlApe3ZhciBpPXoocChuKSxyKSxvPW51bGw9PWk/dm9pZCAwOmlbUV07aWYobyYmby50PT09dClyZXR1cm4gbi5vW3JdPXQsbi5EW3JdPSExLCEwO2lmKGModCxpKSYmKHZvaWQgMCE9PXR8fHUobi50LHIpKSlyZXR1cm4hMDtFKG4pLGsobil9cmV0dXJuIG4ub1tyXT09PXQmJlwibnVtYmVyXCIhPXR5cGVvZiB0JiYodm9pZCAwIT09dHx8ciBpbiBuLm8pfHwobi5vW3JdPXQsbi5EW3JdPSEwLCEwKX0sZGVsZXRlUHJvcGVydHk6ZnVuY3Rpb24obixyKXtyZXR1cm4gdm9pZCAwIT09eihuLnQscil8fHIgaW4gbi50PyhuLkRbcl09ITEsRShuKSxrKG4pKTpkZWxldGUgbi5EW3JdLG4ubyYmZGVsZXRlIG4ub1tyXSwhMH0sZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOmZ1bmN0aW9uKG4scil7dmFyIHQ9cChuKSxlPVJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQscik7cmV0dXJuIGU/e3dyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZToxIT09bi5pfHxcImxlbmd0aFwiIT09cixlbnVtZXJhYmxlOmUuZW51bWVyYWJsZSx2YWx1ZTp0W3JdfTplfSxkZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbigpe24oMTEpfSxnZXRQcm90b3R5cGVPZjpmdW5jdGlvbihuKXtyZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG4udCl9LHNldFByb3RvdHlwZU9mOmZ1bmN0aW9uKCl7bigxMil9fSxvbj17fTtpKGVuLChmdW5jdGlvbihuLHIpe29uW25dPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXT1hcmd1bWVudHNbMF1bMF0sci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSkpLG9uLmRlbGV0ZVByb3BlcnR5PWZ1bmN0aW9uKHIsdCl7cmV0dXJuXCJwcm9kdWN0aW9uXCIhPT1wcm9jZXNzLmVudi5OT0RFX0VOViYmaXNOYU4ocGFyc2VJbnQodCkpJiZuKDEzKSxvbi5zZXQuY2FsbCh0aGlzLHIsdCx2b2lkIDApfSxvbi5zZXQ9ZnVuY3Rpb24ocix0LGUpe3JldHVyblwicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJlwibGVuZ3RoXCIhPT10JiZpc05hTihwYXJzZUludCh0KSkmJm4oMTQpLGVuLnNldC5jYWxsKHRoaXMsclswXSx0LGUsclswXSl9O3ZhciB1bj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUocil7dmFyIGU9dGhpczt0aGlzLmc9Qix0aGlzLkY9ITAsdGhpcy5wcm9kdWNlPWZ1bmN0aW9uKHIsaSxvKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiByJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBpKXt2YXIgdT1pO2k9cjt2YXIgYT1lO3JldHVybiBmdW5jdGlvbihuKXt2YXIgcj10aGlzO3ZvaWQgMD09PW4mJihuPXUpO2Zvcih2YXIgdD1hcmd1bWVudHMubGVuZ3RoLGU9QXJyYXkodD4xP3QtMTowKSxvPTE7bzx0O28rKyllW28tMV09YXJndW1lbnRzW29dO3JldHVybiBhLnByb2R1Y2UobiwoZnVuY3Rpb24obil7dmFyIHQ7cmV0dXJuKHQ9aSkuY2FsbC5hcHBseSh0LFtyLG5dLmNvbmNhdChlKSl9KSl9fXZhciBmO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGkmJm4oNiksdm9pZCAwIT09byYmXCJmdW5jdGlvblwiIT10eXBlb2YgbyYmbig3KSx0KHIpKXt2YXIgYz13KGUpLHM9UihlLHIsdm9pZCAwKSx2PSEwO3RyeXtmPWkocyksdj0hMX1maW5hbGx5e3Y/TyhjKTpnKGMpfXJldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlJiZmIGluc3RhbmNlb2YgUHJvbWlzZT9mLnRoZW4oKGZ1bmN0aW9uKG4pe3JldHVybiBqKGMsbyksUChuLGMpfSksKGZ1bmN0aW9uKG4pe3Rocm93IE8oYyksbn0pKTooaihjLG8pLFAoZixjKSl9aWYoIXJ8fFwib2JqZWN0XCIhPXR5cGVvZiByKXtpZih2b2lkIDA9PT0oZj1pKHIpKSYmKGY9ciksZj09PUgmJihmPXZvaWQgMCksZS5GJiZkKGYsITApLG8pe3ZhciBwPVtdLGw9W107YihcIlBhdGNoZXNcIikuTShyLGYscCxsKSxvKHAsbCl9cmV0dXJuIGZ9bigyMSxyKX0sdGhpcy5wcm9kdWNlV2l0aFBhdGNoZXM9ZnVuY3Rpb24obixyKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKXJldHVybiBmdW5jdGlvbihyKXtmb3IodmFyIHQ9YXJndW1lbnRzLmxlbmd0aCxpPUFycmF5KHQ+MT90LTE6MCksbz0xO288dDtvKyspaVtvLTFdPWFyZ3VtZW50c1tvXTtyZXR1cm4gZS5wcm9kdWNlV2l0aFBhdGNoZXMociwoZnVuY3Rpb24ocil7cmV0dXJuIG4uYXBwbHkodm9pZCAwLFtyXS5jb25jYXQoaSkpfSkpfTt2YXIgdCxpLG89ZS5wcm9kdWNlKG4sciwoZnVuY3Rpb24obixyKXt0PW4saT1yfSkpO3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBQcm9taXNlJiZvIGluc3RhbmNlb2YgUHJvbWlzZT9vLnRoZW4oKGZ1bmN0aW9uKG4pe3JldHVybltuLHQsaV19KSk6W28sdCxpXX0sXCJib29sZWFuXCI9PXR5cGVvZihudWxsPT1yP3ZvaWQgMDpyLnVzZVByb3hpZXMpJiZ0aGlzLnNldFVzZVByb3hpZXMoci51c2VQcm94aWVzKSxcImJvb2xlYW5cIj09dHlwZW9mKG51bGw9PXI/dm9pZCAwOnIuYXV0b0ZyZWV6ZSkmJnRoaXMuc2V0QXV0b0ZyZWV6ZShyLmF1dG9GcmVlemUpfXZhciBpPWUucHJvdG90eXBlO3JldHVybiBpLmNyZWF0ZURyYWZ0PWZ1bmN0aW9uKGUpe3QoZSl8fG4oOCkscihlKSYmKGU9RChlKSk7dmFyIGk9dyh0aGlzKSxvPVIodGhpcyxlLHZvaWQgMCk7cmV0dXJuIG9bUV0uQz0hMCxnKGkpLG99LGkuZmluaXNoRHJhZnQ9ZnVuY3Rpb24ocix0KXt2YXIgZT1yJiZyW1FdO1wicHJvZHVjdGlvblwiIT09cHJvY2Vzcy5lbnYuTk9ERV9FTlYmJihlJiZlLkN8fG4oOSksZS5JJiZuKDEwKSk7dmFyIGk9ZS5BO3JldHVybiBqKGksdCksUCh2b2lkIDAsaSl9LGkuc2V0QXV0b0ZyZWV6ZT1mdW5jdGlvbihuKXt0aGlzLkY9bn0saS5zZXRVc2VQcm94aWVzPWZ1bmN0aW9uKHIpe3ImJiFCJiZuKDIwKSx0aGlzLmc9cn0saS5hcHBseVBhdGNoZXM9ZnVuY3Rpb24obix0KXt2YXIgZTtmb3IoZT10Lmxlbmd0aC0xO2U+PTA7ZS0tKXt2YXIgaT10W2VdO2lmKDA9PT1pLnBhdGgubGVuZ3RoJiZcInJlcGxhY2VcIj09PWkub3Ape249aS52YWx1ZTticmVha319ZT4tMSYmKHQ9dC5zbGljZShlKzEpKTt2YXIgbz1iKFwiUGF0Y2hlc1wiKS4kO3JldHVybiByKG4pP28obix0KTp0aGlzLnByb2R1Y2UobiwoZnVuY3Rpb24obil7cmV0dXJuIG8obix0KX0pKX0sZX0oKSxhbj1uZXcgdW4sZm49YW4ucHJvZHVjZSxjbj1hbi5wcm9kdWNlV2l0aFBhdGNoZXMuYmluZChhbiksc249YW4uc2V0QXV0b0ZyZWV6ZS5iaW5kKGFuKSx2bj1hbi5zZXRVc2VQcm94aWVzLmJpbmQoYW4pLHBuPWFuLmFwcGx5UGF0Y2hlcy5iaW5kKGFuKSxsbj1hbi5jcmVhdGVEcmFmdC5iaW5kKGFuKSxkbj1hbi5maW5pc2hEcmFmdC5iaW5kKGFuKTtleHBvcnQgZGVmYXVsdCBmbjtleHBvcnR7dW4gYXMgSW1tZXIscG4gYXMgYXBwbHlQYXRjaGVzLEsgYXMgY2FzdERyYWZ0LCQgYXMgY2FzdEltbXV0YWJsZSxsbiBhcyBjcmVhdGVEcmFmdCxEIGFzIGN1cnJlbnQsSiBhcyBlbmFibGVBbGxQbHVnaW5zLE4gYXMgZW5hYmxlRVM1LEMgYXMgZW5hYmxlTWFwU2V0LFQgYXMgZW5hYmxlUGF0Y2hlcyxkbiBhcyBmaW5pc2hEcmFmdCxkIGFzIGZyZWV6ZSxMIGFzIGltbWVyYWJsZSxyIGFzIGlzRHJhZnQsdCBhcyBpc0RyYWZ0YWJsZSxIIGFzIG5vdGhpbmcsZSBhcyBvcmlnaW5hbCxmbiBhcyBwcm9kdWNlLGNuIGFzIHByb2R1Y2VXaXRoUGF0Y2hlcyxzbiBhcyBzZXRBdXRvRnJlZXplLHZuIGFzIHNldFVzZVByb3hpZXN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1tZXIuZXNtLmpzLm1hcFxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gXCIuL2RlZmluZVByb3BlcnR5LmpzXCI7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDInO1xuXG4vKipcbiAqIEFkYXB0ZWQgZnJvbSBSZWFjdDogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3NoYXJlZC9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlLmpzXG4gKlxuICogRG8gbm90IHJlcXVpcmUgdGhpcyBtb2R1bGUgZGlyZWN0bHkhIFVzZSBub3JtYWwgdGhyb3cgZXJyb3IgY2FsbHMuIFRoZXNlIG1lc3NhZ2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBlcnJvciBjb2Rlc1xuICogZHVyaW5nIGJ1aWxkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHJldHVybiBcIk1pbmlmaWVkIFJlZHV4IGVycm9yICNcIiArIGNvZGUgKyBcIjsgdmlzaXQgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvRXJyb3JzP2NvZGU9XCIgKyBjb2RlICsgXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgXCIgKyAndXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycy4gJztcbn1cblxuLy8gSW5saW5lZCB2ZXJzaW9uIG9mIHRoZSBgc3ltYm9sLW9ic2VydmFibGVgIHBvbHlmaWxsXG52YXIgJCRvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgJ0BAb2JzZXJ2YWJsZSc7XG59KSgpO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLy8gSW5saW5lZCAvIHNob3J0ZW5lZCB2ZXJzaW9uIG9mIGBraW5kT2ZgIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQva2luZC1vZlxuZnVuY3Rpb24gbWluaUtpbmRPZih2YWwpIHtcbiAgaWYgKHZhbCA9PT0gdm9pZCAwKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIGlmICh2YWwgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuICdhcnJheSc7XG4gIGlmIChpc0RhdGUodmFsKSkgcmV0dXJuICdkYXRlJztcbiAgaWYgKGlzRXJyb3IodmFsKSkgcmV0dXJuICdlcnJvcic7XG4gIHZhciBjb25zdHJ1Y3Rvck5hbWUgPSBjdG9yTmFtZSh2YWwpO1xuXG4gIHN3aXRjaCAoY29uc3RydWN0b3JOYW1lKSB7XG4gICAgY2FzZSAnU3ltYm9sJzpcbiAgICBjYXNlICdQcm9taXNlJzpcbiAgICBjYXNlICdXZWFrTWFwJzpcbiAgICBjYXNlICdXZWFrU2V0JzpcbiAgICBjYXNlICdNYXAnOlxuICAgIGNhc2UgJ1NldCc6XG4gICAgICByZXR1cm4gY29uc3RydWN0b3JOYW1lO1xuICB9IC8vIG90aGVyXG5cblxuICByZXR1cm4gdHlwZS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpO1xufVxuXG5mdW5jdGlvbiBjdG9yTmFtZSh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgPyB2YWwuY29uc3RydWN0b3IubmFtZSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgdmFsLm1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIHZhbC5jb25zdHJ1Y3RvciAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB0cnVlO1xuICByZXR1cm4gdHlwZW9mIHZhbC50b0RhdGVTdHJpbmcgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5nZXREYXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuc2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24ga2luZE9mKHZhbCkge1xuICB2YXIgdHlwZU9mVmFsID0gdHlwZW9mIHZhbDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHR5cGVPZlZhbCA9IG1pbmlLaW5kT2YodmFsKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlT2ZWYWw7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiAqKldlIHJlY29tbWVuZCB1c2luZyB0aGUgYGNvbmZpZ3VyZVN0b3JlYCBtZXRob2RcbiAqIG9mIHRoZSBgQHJlZHV4anMvdG9vbGtpdGAgcGFja2FnZSoqLCB3aGljaCByZXBsYWNlcyBgY3JlYXRlU3RvcmVgLlxuICpcbiAqIFJlZHV4IFRvb2xraXQgaXMgb3VyIHJlY29tbWVuZGVkIGFwcHJvYWNoIGZvciB3cml0aW5nIFJlZHV4IGxvZ2ljIHRvZGF5LFxuICogaW5jbHVkaW5nIHN0b3JlIHNldHVwLCByZWR1Y2VycywgZGF0YSBmZXRjaGluZywgYW5kIG1vcmUuXG4gKlxuICogKipGb3IgbW9yZSBkZXRhaWxzLCBwbGVhc2UgcmVhZCB0aGlzIFJlZHV4IGRvY3MgcGFnZToqKlxuICogKipodHRwczovL3JlZHV4LmpzLm9yZy9pbnRyb2R1Y3Rpb24vd2h5LXJ0ay1pcy1yZWR1eC10b2RheSoqXG4gKlxuICogYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIFJlZHV4IFRvb2xraXQgaXMgYW4gaW1wcm92ZWQgdmVyc2lvbiBvZiBgY3JlYXRlU3RvcmVgIHRoYXRcbiAqIHNpbXBsaWZpZXMgc2V0dXAgYW5kIGhlbHBzIGF2b2lkIGNvbW1vbiBidWdzLlxuICpcbiAqIFlvdSBzaG91bGQgbm90IGJlIHVzaW5nIHRoZSBgcmVkdXhgIGNvcmUgcGFja2FnZSBieSBpdHNlbGYgdG9kYXksIGV4Y2VwdCBmb3IgbGVhcm5pbmcgcHVycG9zZXMuXG4gKiBUaGUgYGNyZWF0ZVN0b3JlYCBtZXRob2QgZnJvbSB0aGUgY29yZSBgcmVkdXhgIHBhY2thZ2Ugd2lsbCBub3QgYmUgcmVtb3ZlZCwgYnV0IHdlIGVuY291cmFnZVxuICogYWxsIHVzZXJzIHRvIG1pZ3JhdGUgdG8gdXNpbmcgUmVkdXggVG9vbGtpdCBmb3IgYWxsIFJlZHV4IGNvZGUuXG4gKlxuICogSWYgeW91IHdhbnQgdG8gdXNlIGBjcmVhdGVTdG9yZWAgd2l0aG91dCB0aGlzIHZpc3VhbCBkZXByZWNhdGlvbiB3YXJuaW5nLCB1c2VcbiAqIHRoZSBgbGVnYWN5X2NyZWF0ZVN0b3JlYCBpbXBvcnQgaW5zdGVhZDpcbiAqXG4gKiBgaW1wb3J0IHsgbGVnYWN5X2NyZWF0ZVN0b3JlIGFzIGNyZWF0ZVN0b3JlfSBmcm9tICdyZWR1eCdgXG4gKlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgwKSA6ICdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNjcmVhdGluZy1hLXN0b3JlLXdpdGgtZW5oYW5jZXJzIGZvciBhbiBleGFtcGxlLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBcIkV4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGVuaGFuY2VyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIpIDogXCJFeHBlY3RlZCB0aGUgcm9vdCByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YocmVkdWNlcikgKyBcIidcIik7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBcIkV4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGxpc3RlbmVyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiAnWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2KSA6ICdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IFwiQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICdcIiArIGtpbmRPZihhY3Rpb24pICsgXCInLiBZb3UgbWF5IG5lZWQgdG8gYWRkIG1pZGRsZXdhcmUgdG8geW91ciBzdG9yZSBzZXR1cCB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgb3RoZXIgdmFsdWVzLCBzdWNoIGFzICdyZWR1eC10aHVuaycgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIGZ1bmN0aW9ucy4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI21pZGRsZXdhcmUgYW5kIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC02LWFzeW5jLWxvZ2ljI3VzaW5nLXRoZS1yZWR1eC10aHVuay1taWRkbGV3YXJlIGZvciBleGFtcGxlcy5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDgpIDogJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYW4gYWN0aW9uIHR5cGUgc3RyaW5nIGNvbnN0YW50LicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5KSA6ICdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTApIDogXCJFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihuZXh0UmVkdWNlcikpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMSkgOiBcIkV4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2Yob2JzZXJ2ZXIpICsgXCInXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKlxuICogKipXZSByZWNvbW1lbmQgdXNpbmcgYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIHRoZVxuICogYEByZWR1eGpzL3Rvb2xraXRgIHBhY2thZ2UqKiwgd2hpY2ggcmVwbGFjZXMgYGNyZWF0ZVN0b3JlYDpcbiAqICoqaHR0cHM6Ly9yZWR1eC5qcy5vcmcvaW50cm9kdWN0aW9uL3doeS1ydGstaXMtcmVkdXgtdG9kYXkqKlxuICpcbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG52YXIgbGVnYWN5X2NyZWF0ZVN0b3JlID0gY3JlYXRlU3RvcmU7XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIGtpbmRPZihpbnB1dFN0YXRlKSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlICdcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIicgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlIFwiICsgKGFjdGlvblR5cGUgPyBcIlxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIDogJyh1bmtub3duIHR5cGUpJykgKyBcIiwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBfa2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJ1wiICsga2luZE9mKGFjdGlvbkNyZWF0b3JzKSArIFwiJy4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiAnRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpLCB7fSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKlxuICogVGhpcyBpcyBhIGR1bW15IGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBmdW5jdGlvbiBuYW1lIGhhcyBiZWVuIGFsdGVyZWQgYnkgbWluaWZpY2F0aW9uLlxuICogSWYgdGhlIGZ1bmN0aW9uIGhhcyBiZWVuIG1pbmlmaWVkIGFuZCBOT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLCB3YXJuIHRoZSB1c2VyLlxuICovXG5cbmZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBpc0NydXNoZWQubmFtZSA9PT0gJ3N0cmluZycgJiYgaXNDcnVzaGVkLm5hbWUgIT09ICdpc0NydXNoZWQnKSB7XG4gIHdhcm5pbmcoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIuICcgKyAnVGhpcyBtZWFucyB0aGF0IHlvdSBhcmUgcnVubmluZyBhIHNsb3dlciBkZXZlbG9wbWVudCBidWlsZCBvZiBSZWR1eC4gJyArICdZb3UgY2FuIHVzZSBsb29zZS1lbnZpZnkgKGh0dHBzOi8vZ2l0aHViLmNvbS96ZXJ0b3NoL2xvb3NlLWVudmlmeSkgZm9yIGJyb3dzZXJpZnkgJyArICdvciBzZXR0aW5nIG1vZGUgdG8gcHJvZHVjdGlvbiBpbiB3ZWJwYWNrIChodHRwczovL3dlYnBhY2suanMub3JnL2NvbmNlcHRzL21vZGUvKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG59XG5cbmV4cG9ydCB7IEFjdGlvblR5cGVzIGFzIF9fRE9fTk9UX1VTRV9fQWN0aW9uVHlwZXMsIGFwcGx5TWlkZGxld2FyZSwgYmluZEFjdGlvbkNyZWF0b3JzLCBjb21iaW5lUmVkdWNlcnMsIGNvbXBvc2UsIGNyZWF0ZVN0b3JlLCBsZWdhY3lfY3JlYXRlU3RvcmUgfTtcbiIsIi8qKiBBIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBhIHBvdGVudGlhbCBcImV4dHJhIGFyZ3VtZW50XCIgdmFsdWUgdG8gYmUgaW5qZWN0ZWQgbGF0ZXIsXHJcbiAqIGFuZCByZXR1cm5zIGFuIGluc3RhbmNlIG9mIHRoZSB0aHVuayBtaWRkbGV3YXJlIHRoYXQgdXNlcyB0aGF0IHZhbHVlXHJcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKGV4dHJhQXJndW1lbnQpIHtcbiAgLy8gU3RhbmRhcmQgUmVkdXggbWlkZGxld2FyZSBkZWZpbml0aW9uIHBhdHRlcm46XG4gIC8vIFNlZTogaHR0cHM6Ly9yZWR1eC5qcy5vcmcvdHV0b3JpYWxzL2Z1bmRhbWVudGFscy9wYXJ0LTQtc3RvcmUjd3JpdGluZy1jdXN0b20tbWlkZGxld2FyZVxuICB2YXIgbWlkZGxld2FyZSA9IGZ1bmN0aW9uIG1pZGRsZXdhcmUoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIC8vIFRoZSB0aHVuayBtaWRkbGV3YXJlIGxvb2tzIGZvciBhbnkgZnVuY3Rpb25zIHRoYXQgd2VyZSBwYXNzZWQgdG8gYHN0b3JlLmRpc3BhdGNoYC5cbiAgICAgICAgLy8gSWYgdGhpcyBcImFjdGlvblwiIGlzIHJlYWxseSBhIGZ1bmN0aW9uLCBjYWxsIGl0IGFuZCByZXR1cm4gdGhlIHJlc3VsdC5cbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBJbmplY3QgdGhlIHN0b3JlJ3MgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBtZXRob2RzLCBhcyB3ZWxsIGFzIGFueSBcImV4dHJhIGFyZ1wiXG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgcGFzcyB0aGUgYWN0aW9uIGRvd24gdGhlIG1pZGRsZXdhcmUgY2hhaW4gYXMgdXN1YWxcblxuXG4gICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIG1pZGRsZXdhcmU7XG59XG5cbnZhciB0aHVuayA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZSgpOyAvLyBBdHRhY2ggdGhlIGZhY3RvcnkgZnVuY3Rpb24gc28gdXNlcnMgY2FuIGNyZWF0ZSBhIGN1c3RvbWl6ZWQgdmVyc2lvblxuLy8gd2l0aCB3aGF0ZXZlciBcImV4dHJhIGFyZ1wiIHRoZXkgd2FudCB0byBpbmplY3QgaW50byB0aGVpciB0aHVua3NcblxudGh1bmsud2l0aEV4dHJhQXJndW1lbnQgPSBjcmVhdGVUaHVua01pZGRsZXdhcmU7XG5leHBvcnQgZGVmYXVsdCB0aHVuazsiLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG4gICAgfTtcclxufSkoKTtcclxudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59O1xyXG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcclxuICAgICAgICB0b1tqXSA9IGZyb21baV07XHJcbiAgICByZXR1cm4gdG87XHJcbn07XHJcbnZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XHJcbnZhciBfX2RlZlByb3BzID0gT2JqZWN0LmRlZmluZVByb3BlcnRpZXM7XHJcbnZhciBfX2dldE93blByb3BEZXNjcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzO1xyXG52YXIgX19nZXRPd25Qcm9wU3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XHJcbnZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xyXG52YXIgX19wcm9wSXNFbnVtID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcclxudmFyIF9fZGVmTm9ybWFsUHJvcCA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHsgcmV0dXJuIGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pIDogb2JqW2tleV0gPSB2YWx1ZTsgfTtcclxudmFyIF9fc3ByZWFkVmFsdWVzID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgIGZvciAodmFyIHByb3AgaW4gYiB8fCAoYiA9IHt9KSlcclxuICAgICAgICBpZiAoX19oYXNPd25Qcm9wLmNhbGwoYiwgcHJvcCkpXHJcbiAgICAgICAgICAgIF9fZGVmTm9ybWFsUHJvcChhLCBwcm9wLCBiW3Byb3BdKTtcclxuICAgIGlmIChfX2dldE93blByb3BTeW1ib2xzKVxyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2MgPSBfX2dldE93blByb3BTeW1ib2xzKGIpOyBfaSA8IF9jLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcHJvcCA9IF9jW19pXTtcclxuICAgICAgICAgICAgaWYgKF9fcHJvcElzRW51bS5jYWxsKGIsIHByb3ApKVxyXG4gICAgICAgICAgICAgICAgX19kZWZOb3JtYWxQcm9wKGEsIHByb3AsIGJbcHJvcF0pO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiBhO1xyXG59O1xyXG52YXIgX19zcHJlYWRQcm9wcyA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBfX2RlZlByb3BzKGEsIF9fZ2V0T3duUHJvcERlc2NzKGIpKTsgfTtcclxudmFyIF9fYXN5bmMgPSBmdW5jdGlvbiAoX190aGlzLCBfX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHZhciBmdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIHN0ZXAgPSBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5kb25lID8gcmVzb2x2ZSh4LnZhbHVlKSA6IFByb21pc2UucmVzb2x2ZSh4LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9O1xyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseShfX3RoaXMsIF9fYXJndW1lbnRzKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG4vLyBzcmMvaW5kZXgudHNcclxuaW1wb3J0IHsgZW5hYmxlRVM1IH0gZnJvbSBcImltbWVyXCI7XHJcbmV4cG9ydCAqIGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgeyBkZWZhdWx0IGFzIGRlZmF1bHQyLCBjdXJyZW50IGFzIGN1cnJlbnQyLCBmcmVlemUsIG9yaWdpbmFsLCBpc0RyYWZ0IGFzIGlzRHJhZnQ0IH0gZnJvbSBcImltbWVyXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIGFzIGNyZWF0ZVNlbGVjdG9yMiB9IGZyb20gXCJyZXNlbGVjdFwiO1xyXG4vLyBzcmMvY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IudHNcclxuaW1wb3J0IHsgY3VycmVudCwgaXNEcmFmdCB9IGZyb20gXCJpbW1lclwiO1xyXG5pbXBvcnQgeyBjcmVhdGVTZWxlY3RvciB9IGZyb20gXCJyZXNlbGVjdFwiO1xyXG52YXIgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICB2YXIgc2VsZWN0b3IgPSBjcmVhdGVTZWxlY3Rvci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xyXG4gICAgdmFyIHdyYXBwZWRTZWxlY3RvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHZhciByZXN0ID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgcmVzdFtfaSAtIDFdID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbaXNEcmFmdCh2YWx1ZSkgPyBjdXJyZW50KHZhbHVlKSA6IHZhbHVlXSwgcmVzdCkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiB3cmFwcGVkU2VsZWN0b3I7XHJcbn07XHJcbi8vIHNyYy9jb25maWd1cmVTdG9yZS50c1xyXG5pbXBvcnQgeyBjcmVhdGVTdG9yZSwgY29tcG9zZSBhcyBjb21wb3NlMiwgYXBwbHlNaWRkbGV3YXJlLCBjb21iaW5lUmVkdWNlcnMgfSBmcm9tIFwicmVkdXhcIjtcclxuLy8gc3JjL2RldnRvb2xzRXh0ZW5zaW9uLnRzXHJcbmltcG9ydCB7IGNvbXBvc2UgfSBmcm9tIFwicmVkdXhcIjtcclxudmFyIGNvbXBvc2VXaXRoRGV2VG9vbHMgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9DT01QT1NFX18gPyB3aW5kb3cuX19SRURVWF9ERVZUT09MU19FWFRFTlNJT05fQ09NUE9TRV9fIDogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcclxuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWzBdID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgIHJldHVybiBjb21wb3NlO1xyXG4gICAgcmV0dXJuIGNvbXBvc2UuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcclxufTtcclxudmFyIGRldlRvb2xzRW5oYW5jZXIgPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5fX1JFRFVYX0RFVlRPT0xTX0VYVEVOU0lPTl9fID8gd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vb3AyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5vb3AyO1xyXG4gICAgfTtcclxufTtcclxuLy8gc3JjL2lzUGxhaW5PYmplY3QudHNcclxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbClcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB2YXIgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xyXG4gICAgaWYgKHByb3RvID09PSBudWxsKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgdmFyIGJhc2VQcm90byA9IHByb3RvO1xyXG4gICAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihiYXNlUHJvdG8pICE9PSBudWxsKSB7XHJcbiAgICAgICAgYmFzZVByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGJhc2VQcm90byk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJvdG8gPT09IGJhc2VQcm90bztcclxufVxyXG4vLyBzcmMvZ2V0RGVmYXVsdE1pZGRsZXdhcmUudHNcclxuaW1wb3J0IHRodW5rTWlkZGxld2FyZSBmcm9tIFwicmVkdXgtdGh1bmtcIjtcclxuLy8gc3JjL3V0aWxzLnRzXHJcbmltcG9ydCBjcmVhdGVOZXh0U3RhdGUsIHsgaXNEcmFmdGFibGUgfSBmcm9tIFwiaW1tZXJcIjtcclxuZnVuY3Rpb24gZ2V0VGltZU1lYXN1cmVVdGlscyhtYXhEZWxheSwgZm5OYW1lKSB7XHJcbiAgICB2YXIgZWxhcHNlZCA9IDA7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG1lYXN1cmVUaW1lOiBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICAgICAgdmFyIHN0YXJ0ZWQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmluaXNoZWQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICAgICAgZWxhcHNlZCArPSBmaW5pc2hlZCAtIHN0YXJ0ZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHdhcm5JZkV4Y2VlZGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmIChlbGFwc2VkID4gbWF4RGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybihmbk5hbWUgKyBcIiB0b29rIFwiICsgZWxhcHNlZCArIFwibXMsIHdoaWNoIGlzIG1vcmUgdGhhbiB0aGUgd2FybmluZyB0aHJlc2hvbGQgb2YgXCIgKyBtYXhEZWxheSArIFwibXMuIFxcbklmIHlvdXIgc3RhdGUgb3IgYWN0aW9ucyBhcmUgdmVyeSBsYXJnZSwgeW91IG1heSB3YW50IHRvIGRpc2FibGUgdGhlIG1pZGRsZXdhcmUgYXMgaXQgbWlnaHQgY2F1c2UgdG9vIG11Y2ggb2YgYSBzbG93ZG93biBpbiBkZXZlbG9wbWVudCBtb2RlLiBTZWUgaHR0cHM6Ly9yZWR1eC10b29sa2l0LmpzLm9yZy9hcGkvZ2V0RGVmYXVsdE1pZGRsZXdhcmUgZm9yIGluc3RydWN0aW9ucy5cXG5JdCBpcyBkaXNhYmxlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcywgc28geW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhhdC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbnZhciBNaWRkbGV3YXJlQXJyYXkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICBfX2V4dGVuZHMoTWlkZGxld2FyZUFycmF5LCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gTWlkZGxld2FyZUFycmF5KCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuYXBwbHkodGhpcywgYXJncykgfHwgdGhpcztcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoX3RoaXMsIE1pZGRsZXdhcmVBcnJheS5wcm90b3R5cGUpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNaWRkbGV3YXJlQXJyYXksIFN5bWJvbC5zcGVjaWVzLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBNaWRkbGV3YXJlQXJyYXk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgTWlkZGxld2FyZUFycmF5LnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5jb25jYXQuYXBwbHkodGhpcywgYXJyKTtcclxuICAgIH07XHJcbiAgICBNaWRkbGV3YXJlQXJyYXkucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGFyciA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFycltfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSAmJiBBcnJheS5pc0FycmF5KGFyclswXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyAoTWlkZGxld2FyZUFycmF5LmJpbmQuYXBwbHkoTWlkZGxld2FyZUFycmF5LCBfX3NwcmVhZEFycmF5KFt2b2lkIDBdLCBhcnJbMF0uY29uY2F0KHRoaXMpKSkpKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgKE1pZGRsZXdhcmVBcnJheS5iaW5kLmFwcGx5KE1pZGRsZXdhcmVBcnJheSwgX19zcHJlYWRBcnJheShbdm9pZCAwXSwgYXJyLmNvbmNhdCh0aGlzKSkpKSgpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNaWRkbGV3YXJlQXJyYXk7XHJcbn0oQXJyYXkpKTtcclxuZnVuY3Rpb24gZnJlZXplRHJhZnRhYmxlKHZhbCkge1xyXG4gICAgcmV0dXJuIGlzRHJhZnRhYmxlKHZhbCkgPyBjcmVhdGVOZXh0U3RhdGUodmFsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB9KSA6IHZhbDtcclxufVxyXG4vLyBzcmMvaW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLnRzXHJcbnZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCI7XHJcbnZhciBwcmVmaXggPSBcIkludmFyaWFudCBmYWlsZWRcIjtcclxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKGNvbmRpdGlvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCBcIlwiKSk7XHJcbn1cclxuZnVuY3Rpb24gc3RyaW5naWZ5KG9iaiwgc2VyaWFsaXplciwgaW5kZW50LCBkZWN5Y2xlcikge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZ2V0U2VyaWFsaXplKHNlcmlhbGl6ZXIsIGRlY3ljbGVyKSwgaW5kZW50KTtcclxufVxyXG5mdW5jdGlvbiBnZXRTZXJpYWxpemUoc2VyaWFsaXplciwgZGVjeWNsZXIpIHtcclxuICAgIHZhciBzdGFjayA9IFtdLCBrZXlzID0gW107XHJcbiAgICBpZiAoIWRlY3ljbGVyKVxyXG4gICAgICAgIGRlY3ljbGVyID0gZnVuY3Rpb24gKF8sIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChzdGFja1swXSA9PT0gdmFsdWUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJbQ2lyY3VsYXIgfl1cIjtcclxuICAgICAgICAgICAgcmV0dXJuIFwiW0NpcmN1bGFyIH4uXCIgKyBrZXlzLnNsaWNlKDAsIHN0YWNrLmluZGV4T2YodmFsdWUpKS5qb2luKFwiLlwiKSArIFwiXVwiO1xyXG4gICAgICAgIH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICB2YXIgdGhpc1BvcyA9IHN0YWNrLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgIH50aGlzUG9zID8gc3RhY2suc3BsaWNlKHRoaXNQb3MgKyAxKSA6IHN0YWNrLnB1c2godGhpcyk7XHJcbiAgICAgICAgICAgIH50aGlzUG9zID8ga2V5cy5zcGxpY2UodGhpc1BvcywgSW5maW5pdHksIGtleSkgOiBrZXlzLnB1c2goa2V5KTtcclxuICAgICAgICAgICAgaWYgKH5zdGFjay5pbmRleE9mKHZhbHVlKSlcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gZGVjeWNsZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBzdGFjay5wdXNoKHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gc2VyaWFsaXplciA9PSBudWxsID8gdmFsdWUgOiBzZXJpYWxpemVyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzSW1tdXRhYmxlRGVmYXVsdCh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PSBudWxsIHx8IE9iamVjdC5pc0Zyb3plbih2YWx1ZSk7XHJcbn1cclxuZnVuY3Rpb24gdHJhY2tGb3JNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmopIHtcclxuICAgIHZhciB0cmFja2VkUHJvcGVydGllcyA9IHRyYWNrUHJvcGVydGllcyhpc0ltbXV0YWJsZSwgaWdub3JlUGF0aHMsIG9iaik7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRldGVjdE11dGF0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGV0ZWN0TXV0YXRpb25zKGlzSW1tdXRhYmxlLCBpZ25vcmVQYXRocywgdHJhY2tlZFByb3BlcnRpZXMsIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmosIHBhdGgpIHtcclxuICAgIGlmIChpZ25vcmVQYXRocyA9PT0gdm9pZCAwKSB7IGlnbm9yZVBhdGhzID0gW107IH1cclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIHZhciB0cmFja2VkID0geyB2YWx1ZTogb2JqIH07XHJcbiAgICBpZiAoIWlzSW1tdXRhYmxlKG9iaikpIHtcclxuICAgICAgICB0cmFja2VkLmNoaWxkcmVuID0ge307XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgICAgICB2YXIgY2hpbGRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICAgICAgaWYgKGlnbm9yZVBhdGhzLmxlbmd0aCAmJiBpZ25vcmVQYXRocy5pbmRleE9mKGNoaWxkUGF0aCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0cmFja2VkLmNoaWxkcmVuW2tleV0gPSB0cmFja1Byb3BlcnRpZXMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCBvYmpba2V5XSwgY2hpbGRQYXRoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJhY2tlZDtcclxufVxyXG5mdW5jdGlvbiBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydHksIG9iaiwgc2FtZVBhcmVudFJlZiwgcGF0aCkge1xyXG4gICAgaWYgKGlnbm9yZVBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlUGF0aHMgPSBbXTsgfVxyXG4gICAgaWYgKHNhbWVQYXJlbnRSZWYgPT09IHZvaWQgMCkgeyBzYW1lUGFyZW50UmVmID0gZmFsc2U7IH1cclxuICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IFwiXCI7IH1cclxuICAgIHZhciBwcmV2T2JqID0gdHJhY2tlZFByb3BlcnR5ID8gdHJhY2tlZFByb3BlcnR5LnZhbHVlIDogdm9pZCAwO1xyXG4gICAgdmFyIHNhbWVSZWYgPSBwcmV2T2JqID09PSBvYmo7XHJcbiAgICBpZiAoc2FtZVBhcmVudFJlZiAmJiAhc2FtZVJlZiAmJiAhTnVtYmVyLmlzTmFOKG9iaikpIHtcclxuICAgICAgICByZXR1cm4geyB3YXNNdXRhdGVkOiB0cnVlLCBwYXRoOiBwYXRoIH07XHJcbiAgICB9XHJcbiAgICBpZiAoaXNJbW11dGFibGUocHJldk9iaikgfHwgaXNJbW11dGFibGUob2JqKSkge1xyXG4gICAgICAgIHJldHVybiB7IHdhc011dGF0ZWQ6IGZhbHNlIH07XHJcbiAgICB9XHJcbiAgICB2YXIga2V5c1RvRGV0ZWN0ID0ge307XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gdHJhY2tlZFByb3BlcnR5LmNoaWxkcmVuKSB7XHJcbiAgICAgICAga2V5c1RvRGV0ZWN0W2tleV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xyXG4gICAgICAgIGtleXNUb0RldGVjdFtrZXldID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZvciAodmFyIGtleSBpbiBrZXlzVG9EZXRlY3QpIHtcclxuICAgICAgICB2YXIgY2hpbGRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICBpZiAoaWdub3JlUGF0aHMubGVuZ3RoICYmIGlnbm9yZVBhdGhzLmluZGV4T2YoY2hpbGRQYXRoKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSBkZXRlY3RNdXRhdGlvbnMoaXNJbW11dGFibGUsIGlnbm9yZVBhdGhzLCB0cmFja2VkUHJvcGVydHkuY2hpbGRyZW5ba2V5XSwgb2JqW2tleV0sIHNhbWVSZWYsIGNoaWxkUGF0aCk7XHJcbiAgICAgICAgaWYgKHJlc3VsdC53YXNNdXRhdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgd2FzTXV0YXRlZDogZmFsc2UgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbW11dGFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIG5leHQoYWN0aW9uKTsgfTsgfTsgfTtcclxuICAgIH1cclxuICAgIHZhciBfYyA9IG9wdGlvbnMuaXNJbW11dGFibGUsIGlzSW1tdXRhYmxlID0gX2MgPT09IHZvaWQgMCA/IGlzSW1tdXRhYmxlRGVmYXVsdCA6IF9jLCBpZ25vcmVkUGF0aHMgPSBvcHRpb25zLmlnbm9yZWRQYXRocywgX2QgPSBvcHRpb25zLndhcm5BZnRlciwgd2FybkFmdGVyID0gX2QgPT09IHZvaWQgMCA/IDMyIDogX2QsIGlnbm9yZSA9IG9wdGlvbnMuaWdub3JlO1xyXG4gICAgaWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzIHx8IGlnbm9yZTtcclxuICAgIHZhciB0cmFjayA9IHRyYWNrRm9yTXV0YXRpb25zLmJpbmQobnVsbCwgaXNJbW11dGFibGUsIGlnbm9yZWRQYXRocyk7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgdmFyIGdldFN0YXRlID0gX2MuZ2V0U3RhdGU7XHJcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICB2YXIgdHJhY2tlciA9IHRyYWNrKHN0YXRlKTtcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgbWVhc3VyZVV0aWxzID0gZ2V0VGltZU1lYXN1cmVVdGlscyh3YXJuQWZ0ZXIsIFwiSW1tdXRhYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlXCIpO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc3RhdGUgPSBnZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdHJhY2tlci5kZXRlY3RNdXRhdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRyYWNrZXIgPSB0cmFjayhzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICBpbnZhcmlhbnQoIXJlc3VsdC53YXNNdXRhdGVkLCBcIkEgc3RhdGUgbXV0YXRpb24gd2FzIGRldGVjdGVkIGJldHdlZW4gZGlzcGF0Y2hlcywgaW4gdGhlIHBhdGggJ1wiICsgKHJlc3VsdC5wYXRoIHx8IFwiXCIpICsgXCInLiAgVGhpcyBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgZGlzcGF0Y2hlZEFjdGlvbiA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICAgICAgbWVhc3VyZVV0aWxzLm1lYXN1cmVUaW1lKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlID0gZ2V0U3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRyYWNrZXIuZGV0ZWN0TXV0YXRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICB0cmFja2VyID0gdHJhY2soc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0Lndhc011dGF0ZWQgJiYgaW52YXJpYW50KCFyZXN1bHQud2FzTXV0YXRlZCwgXCJBIHN0YXRlIG11dGF0aW9uIHdhcyBkZXRlY3RlZCBpbnNpZGUgYSBkaXNwYXRjaCwgaW4gdGhlIHBhdGg6IFwiICsgKHJlc3VsdC5wYXRoIHx8IFwiXCIpICsgXCIuIFRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoZSBhY3Rpb24gXCIgKyBzdHJpbmdpZnkoYWN0aW9uKSArIFwiLiAoaHR0cHM6Ly9yZWR1eC5qcy5vcmcvc3R5bGUtZ3VpZGUvc3R5bGUtZ3VpZGUjZG8tbm90LW11dGF0ZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoZWRBY3Rpb247XHJcbiAgICAgICAgfTsgfTtcclxuICAgIH07XHJcbn1cclxuLy8gc3JjL3NlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZS50c1xyXG5mdW5jdGlvbiBpc1BsYWluKHZhbCkge1xyXG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xyXG4gICAgcmV0dXJuIHZhbCA9PSBudWxsIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgfHwgdHlwZSA9PT0gXCJudW1iZXJcIiB8fCBBcnJheS5pc0FycmF5KHZhbCkgfHwgaXNQbGFpbk9iamVjdCh2YWwpO1xyXG59XHJcbmZ1bmN0aW9uIGZpbmROb25TZXJpYWxpemFibGVWYWx1ZSh2YWx1ZSwgcGF0aCwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocykge1xyXG4gICAgaWYgKHBhdGggPT09IHZvaWQgMCkgeyBwYXRoID0gXCJcIjsgfVxyXG4gICAgaWYgKGlzU2VyaWFsaXphYmxlID09PSB2b2lkIDApIHsgaXNTZXJpYWxpemFibGUgPSBpc1BsYWluOyB9XHJcbiAgICBpZiAoaWdub3JlZFBhdGhzID09PSB2b2lkIDApIHsgaWdub3JlZFBhdGhzID0gW107IH1cclxuICAgIHZhciBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcclxuICAgIGlmICghaXNTZXJpYWxpemFibGUodmFsdWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAga2V5UGF0aDogcGF0aCB8fCBcIjxyb290PlwiLFxyXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiB8fCB2YWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHZhciBlbnRyaWVzID0gZ2V0RW50cmllcyAhPSBudWxsID8gZ2V0RW50cmllcyh2YWx1ZSkgOiBPYmplY3QuZW50cmllcyh2YWx1ZSk7XHJcbiAgICB2YXIgaGFzSWdub3JlZFBhdGhzID0gaWdub3JlZFBhdGhzLmxlbmd0aCA+IDA7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGVudHJpZXNfMSA9IGVudHJpZXM7IF9pIDwgZW50cmllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBfYyA9IGVudHJpZXNfMVtfaV0sIGtleSA9IF9jWzBdLCBuZXN0ZWRWYWx1ZSA9IF9jWzFdO1xyXG4gICAgICAgIHZhciBuZXN0ZWRQYXRoID0gcGF0aCA/IHBhdGggKyBcIi5cIiArIGtleSA6IGtleTtcclxuICAgICAgICBpZiAoaGFzSWdub3JlZFBhdGhzICYmIGlnbm9yZWRQYXRocy5pbmRleE9mKG5lc3RlZFBhdGgpID49IDApIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaXNTZXJpYWxpemFibGUobmVzdGVkVmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBrZXlQYXRoOiBuZXN0ZWRQYXRoLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IG5lc3RlZFZhbHVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgbmVzdGVkVmFsdWUgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgZm91bmROZXN0ZWRTZXJpYWxpemFibGUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUobmVzdGVkVmFsdWUsIG5lc3RlZFBhdGgsIGlzU2VyaWFsaXphYmxlLCBnZXRFbnRyaWVzLCBpZ25vcmVkUGF0aHMpO1xyXG4gICAgICAgICAgICBpZiAoZm91bmROZXN0ZWRTZXJpYWxpemFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmb3VuZE5lc3RlZFNlcmlhbGl6YWJsZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUob3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHsgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIG5leHQoYWN0aW9uKTsgfTsgfTsgfTtcclxuICAgIH1cclxuICAgIHZhciBfYyA9IG9wdGlvbnMuaXNTZXJpYWxpemFibGUsIGlzU2VyaWFsaXphYmxlID0gX2MgPT09IHZvaWQgMCA/IGlzUGxhaW4gOiBfYywgZ2V0RW50cmllcyA9IG9wdGlvbnMuZ2V0RW50cmllcywgX2QgPSBvcHRpb25zLmlnbm9yZWRBY3Rpb25zLCBpZ25vcmVkQWN0aW9ucyA9IF9kID09PSB2b2lkIDAgPyBbXSA6IF9kLCBfZSA9IG9wdGlvbnMuaWdub3JlZEFjdGlvblBhdGhzLCBpZ25vcmVkQWN0aW9uUGF0aHMgPSBfZSA9PT0gdm9pZCAwID8gW1wibWV0YS5hcmdcIiwgXCJtZXRhLmJhc2VRdWVyeU1ldGFcIl0gOiBfZSwgX2YgPSBvcHRpb25zLmlnbm9yZWRQYXRocywgaWdub3JlZFBhdGhzID0gX2YgPT09IHZvaWQgMCA/IFtdIDogX2YsIF9nID0gb3B0aW9ucy53YXJuQWZ0ZXIsIHdhcm5BZnRlciA9IF9nID09PSB2b2lkIDAgPyAzMiA6IF9nLCBfaCA9IG9wdGlvbnMuaWdub3JlU3RhdGUsIGlnbm9yZVN0YXRlID0gX2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX2gsIF9qID0gb3B0aW9ucy5pZ25vcmVBY3Rpb25zLCBpZ25vcmVBY3Rpb25zID0gX2ogPT09IHZvaWQgMCA/IGZhbHNlIDogX2o7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlQVBJKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBuZXh0KGFjdGlvbik7XHJcbiAgICAgICAgdmFyIG1lYXN1cmVVdGlscyA9IGdldFRpbWVNZWFzdXJlVXRpbHMod2FybkFmdGVyLCBcIlNlcmlhbGl6YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZVwiKTtcclxuICAgICAgICBpZiAoIWlnbm9yZUFjdGlvbnMgJiYgIShpZ25vcmVkQWN0aW9ucy5sZW5ndGggJiYgaWdub3JlZEFjdGlvbnMuaW5kZXhPZihhY3Rpb24udHlwZSkgIT09IC0xKSkge1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMubWVhc3VyZVRpbWUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kQWN0aW9uTm9uU2VyaWFsaXphYmxlVmFsdWUgPSBmaW5kTm9uU2VyaWFsaXphYmxlVmFsdWUoYWN0aW9uLCBcIlwiLCBpc1NlcmlhbGl6YWJsZSwgZ2V0RW50cmllcywgaWdub3JlZEFjdGlvblBhdGhzKTtcclxuICAgICAgICAgICAgICAgIGlmIChmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleVBhdGggPSBmb3VuZEFjdGlvbk5vblNlcmlhbGl6YWJsZVZhbHVlLmtleVBhdGgsIHZhbHVlID0gZm91bmRBY3Rpb25Ob25TZXJpYWxpemFibGVWYWx1ZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQSBub24tc2VyaWFsaXphYmxlIHZhbHVlIHdhcyBkZXRlY3RlZCBpbiBhbiBhY3Rpb24sIGluIHRoZSBwYXRoOiBgXCIgKyBrZXlQYXRoICsgXCJgLiBWYWx1ZTpcIiwgdmFsdWUsIFwiXFxuVGFrZSBhIGxvb2sgYXQgdGhlIGxvZ2ljIHRoYXQgZGlzcGF0Y2hlZCB0aGlzIGFjdGlvbjogXCIsIGFjdGlvbiwgXCJcXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9hY3Rpb25zI3doeS1zaG91bGQtdHlwZS1iZS1hLXN0cmluZy1vci1hdC1sZWFzdC1zZXJpYWxpemFibGUtd2h5LXNob3VsZC1teS1hY3Rpb24tdHlwZXMtYmUtY29uc3RhbnRzKVwiLCBcIlxcbihUbyBhbGxvdyBub24tc2VyaWFsaXphYmxlIHZhbHVlcyBzZWU6IGh0dHBzOi8vcmVkdXgtdG9vbGtpdC5qcy5vcmcvdXNhZ2UvdXNhZ2UtZ3VpZGUjd29ya2luZy13aXRoLW5vbi1zZXJpYWxpemFibGUtZGF0YSlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWlnbm9yZVN0YXRlKSB7XHJcbiAgICAgICAgICAgIG1lYXN1cmVVdGlscy5tZWFzdXJlVGltZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBzdG9yZUFQSS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvdW5kU3RhdGVOb25TZXJpYWxpemFibGVWYWx1ZSA9IGZpbmROb25TZXJpYWxpemFibGVWYWx1ZShzdGF0ZSwgXCJcIiwgaXNTZXJpYWxpemFibGUsIGdldEVudHJpZXMsIGlnbm9yZWRQYXRocyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRTdGF0ZU5vblNlcmlhbGl6YWJsZVZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleVBhdGggPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUua2V5UGF0aCwgdmFsdWUgPSBmb3VuZFN0YXRlTm9uU2VyaWFsaXphYmxlVmFsdWUudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkEgbm9uLXNlcmlhbGl6YWJsZSB2YWx1ZSB3YXMgZGV0ZWN0ZWQgaW4gdGhlIHN0YXRlLCBpbiB0aGUgcGF0aDogYFwiICsga2V5UGF0aCArIFwiYC4gVmFsdWU6XCIsIHZhbHVlLCBcIlxcblRha2UgYSBsb29rIGF0IHRoZSByZWR1Y2VyKHMpIGhhbmRsaW5nIHRoaXMgYWN0aW9uIHR5cGU6IFwiICsgYWN0aW9uLnR5cGUgKyBcIi5cXG4oU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2ZhcS9vcmdhbml6aW5nLXN0YXRlI2Nhbi1pLXB1dC1mdW5jdGlvbnMtcHJvbWlzZXMtb3Itb3RoZXItbm9uLXNlcmlhbGl6YWJsZS1pdGVtcy1pbi1teS1zdG9yZS1zdGF0ZSlcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtZWFzdXJlVXRpbHMud2FybklmRXhjZWVkZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07IH07IH07XHJcbn1cclxuLy8gc3JjL2dldERlZmF1bHRNaWRkbGV3YXJlLnRzXHJcbmZ1bmN0aW9uIGlzQm9vbGVhbih4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiYm9vbGVhblwiO1xyXG59XHJcbmZ1bmN0aW9uIGN1cnJ5R2V0RGVmYXVsdE1pZGRsZXdhcmUoKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gZ2V0RGVmYXVsdE1pZGRsZXdhcmUob3B0aW9ucyk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldERlZmF1bHRNaWRkbGV3YXJlKG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XHJcbiAgICB2YXIgX2MgPSBvcHRpb25zLnRodW5rLCB0aHVuayA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIF9kID0gb3B0aW9ucy5pbW11dGFibGVDaGVjaywgaW1tdXRhYmxlQ2hlY2sgPSBfZCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9kLCBfZSA9IG9wdGlvbnMuc2VyaWFsaXphYmxlQ2hlY2ssIHNlcmlhbGl6YWJsZUNoZWNrID0gX2UgPT09IHZvaWQgMCA/IHRydWUgOiBfZTtcclxuICAgIHZhciBtaWRkbGV3YXJlQXJyYXkgPSBuZXcgTWlkZGxld2FyZUFycmF5KCk7XHJcbiAgICBpZiAodGh1bmspIHtcclxuICAgICAgICBpZiAoaXNCb29sZWFuKHRodW5rKSkge1xyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaCh0aHVua01pZGRsZXdhcmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgbWlkZGxld2FyZUFycmF5LnB1c2godGh1bmtNaWRkbGV3YXJlLndpdGhFeHRyYUFyZ3VtZW50KHRodW5rLmV4dHJhQXJndW1lbnQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgaWYgKGltbXV0YWJsZUNoZWNrKSB7XHJcbiAgICAgICAgICAgIHZhciBpbW11dGFibGVPcHRpb25zID0ge307XHJcbiAgICAgICAgICAgIGlmICghaXNCb29sZWFuKGltbXV0YWJsZUNoZWNrKSkge1xyXG4gICAgICAgICAgICAgICAgaW1tdXRhYmxlT3B0aW9ucyA9IGltbXV0YWJsZUNoZWNrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1pZGRsZXdhcmVBcnJheS51bnNoaWZ0KGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZShpbW11dGFibGVPcHRpb25zKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzZXJpYWxpemFibGVDaGVjaykge1xyXG4gICAgICAgICAgICB2YXIgc2VyaWFsaXphYmxlT3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICBpZiAoIWlzQm9vbGVhbihzZXJpYWxpemFibGVDaGVjaykpIHtcclxuICAgICAgICAgICAgICAgIHNlcmlhbGl6YWJsZU9wdGlvbnMgPSBzZXJpYWxpemFibGVDaGVjaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtaWRkbGV3YXJlQXJyYXkucHVzaChjcmVhdGVTZXJpYWxpemFibGVTdGF0ZUludmFyaWFudE1pZGRsZXdhcmUoc2VyaWFsaXphYmxlT3B0aW9ucykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBtaWRkbGV3YXJlQXJyYXk7XHJcbn1cclxuLy8gc3JjL2NvbmZpZ3VyZVN0b3JlLnRzXHJcbnZhciBJU19QUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiO1xyXG5mdW5jdGlvbiBjb25maWd1cmVTdG9yZShvcHRpb25zKSB7XHJcbiAgICB2YXIgY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlID0gY3VycnlHZXREZWZhdWx0TWlkZGxld2FyZSgpO1xyXG4gICAgdmFyIF9jID0gb3B0aW9ucyB8fCB7fSwgX2QgPSBfYy5yZWR1Y2VyLCByZWR1Y2VyID0gX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLCBfZSA9IF9jLm1pZGRsZXdhcmUsIG1pZGRsZXdhcmUgPSBfZSA9PT0gdm9pZCAwID8gY3VycmllZEdldERlZmF1bHRNaWRkbGV3YXJlKCkgOiBfZSwgX2YgPSBfYy5kZXZUb29scywgZGV2VG9vbHMgPSBfZiA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9mLCBfZyA9IF9jLnByZWxvYWRlZFN0YXRlLCBwcmVsb2FkZWRTdGF0ZSA9IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZywgX2ggPSBfYy5lbmhhbmNlcnMsIGVuaGFuY2VycyA9IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaDtcclxuICAgIHZhciByb290UmVkdWNlcjtcclxuICAgIGlmICh0eXBlb2YgcmVkdWNlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgcm9vdFJlZHVjZXIgPSByZWR1Y2VyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNQbGFpbk9iamVjdChyZWR1Y2VyKSkge1xyXG4gICAgICAgIHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKHJlZHVjZXIpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcInJlZHVjZXJcIiBpcyBhIHJlcXVpcmVkIGFyZ3VtZW50LCBhbmQgbXVzdCBiZSBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdCBvZiBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGNvbWJpbmVSZWR1Y2VycycpO1xyXG4gICAgfVxyXG4gICAgdmFyIGZpbmFsTWlkZGxld2FyZSA9IG1pZGRsZXdhcmU7XHJcbiAgICBpZiAodHlwZW9mIGZpbmFsTWlkZGxld2FyZSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgZmluYWxNaWRkbGV3YXJlID0gZmluYWxNaWRkbGV3YXJlKGN1cnJpZWRHZXREZWZhdWx0TWlkZGxld2FyZSk7XHJcbiAgICAgICAgaWYgKCFJU19QUk9EVUNUSU9OICYmICFBcnJheS5pc0FycmF5KGZpbmFsTWlkZGxld2FyZSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwid2hlbiB1c2luZyBhIG1pZGRsZXdhcmUgYnVpbGRlciBmdW5jdGlvbiwgYW4gYXJyYXkgb2YgbWlkZGxld2FyZSBtdXN0IGJlIHJldHVybmVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghSVNfUFJPRFVDVElPTiAmJiBmaW5hbE1pZGRsZXdhcmUuc29tZShmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gdHlwZW9mIGl0ZW0gIT09IFwiZnVuY3Rpb25cIjsgfSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlYWNoIG1pZGRsZXdhcmUgcHJvdmlkZWQgdG8gY29uZmlndXJlU3RvcmUgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xyXG4gICAgfVxyXG4gICAgdmFyIG1pZGRsZXdhcmVFbmhhbmNlciA9IGFwcGx5TWlkZGxld2FyZS5hcHBseSh2b2lkIDAsIGZpbmFsTWlkZGxld2FyZSk7XHJcbiAgICB2YXIgZmluYWxDb21wb3NlID0gY29tcG9zZTI7XHJcbiAgICBpZiAoZGV2VG9vbHMpIHtcclxuICAgICAgICBmaW5hbENvbXBvc2UgPSBjb21wb3NlV2l0aERldlRvb2xzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICAgICAgdHJhY2U6ICFJU19QUk9EVUNUSU9OXHJcbiAgICAgICAgfSwgdHlwZW9mIGRldlRvb2xzID09PSBcIm9iamVjdFwiICYmIGRldlRvb2xzKSk7XHJcbiAgICB9XHJcbiAgICB2YXIgc3RvcmVFbmhhbmNlcnMgPSBbbWlkZGxld2FyZUVuaGFuY2VyXTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGVuaGFuY2VycykpIHtcclxuICAgICAgICBzdG9yZUVuaGFuY2VycyA9IF9fc3ByZWFkQXJyYXkoW21pZGRsZXdhcmVFbmhhbmNlcl0sIGVuaGFuY2Vycyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgZW5oYW5jZXJzID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICBzdG9yZUVuaGFuY2VycyA9IGVuaGFuY2VycyhzdG9yZUVuaGFuY2Vycyk7XHJcbiAgICB9XHJcbiAgICB2YXIgY29tcG9zZWRFbmhhbmNlciA9IGZpbmFsQ29tcG9zZS5hcHBseSh2b2lkIDAsIHN0b3JlRW5oYW5jZXJzKTtcclxuICAgIHJldHVybiBjcmVhdGVTdG9yZShyb290UmVkdWNlciwgcHJlbG9hZGVkU3RhdGUsIGNvbXBvc2VkRW5oYW5jZXIpO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVBY3Rpb24udHNcclxuZnVuY3Rpb24gY3JlYXRlQWN0aW9uKHR5cGUsIHByZXBhcmVBY3Rpb24pIHtcclxuICAgIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoKSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwcmVwYXJlQWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBwcmVwYXJlZCA9IHByZXBhcmVBY3Rpb24uYXBwbHkodm9pZCAwLCBhcmdzKTtcclxuICAgICAgICAgICAgaWYgKCFwcmVwYXJlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJlcGFyZUFjdGlvbiBkaWQgbm90IHJldHVybiBhbiBvYmplY3RcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBwcmVwYXJlZC5wYXlsb2FkXHJcbiAgICAgICAgICAgIH0sIFwibWV0YVwiIGluIHByZXBhcmVkICYmIHsgbWV0YTogcHJlcGFyZWQubWV0YSB9KSwgXCJlcnJvclwiIGluIHByZXBhcmVkICYmIHsgZXJyb3I6IHByZXBhcmVkLmVycm9yIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBhcmdzWzBdIH07XHJcbiAgICB9XHJcbiAgICBhY3Rpb25DcmVhdG9yLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gXCJcIiArIHR5cGU7IH07XHJcbiAgICBhY3Rpb25DcmVhdG9yLnR5cGUgPSB0eXBlO1xyXG4gICAgYWN0aW9uQ3JlYXRvci5tYXRjaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGFjdGlvbi50eXBlID09PSB0eXBlOyB9O1xyXG4gICAgcmV0dXJuIGFjdGlvbkNyZWF0b3I7XHJcbn1cclxuZnVuY3Rpb24gaXNGU0EoYWN0aW9uKSB7XHJcbiAgICByZXR1cm4gaXNQbGFpbk9iamVjdChhY3Rpb24pICYmIHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBPYmplY3Qua2V5cyhhY3Rpb24pLmV2ZXJ5KGlzVmFsaWRLZXkpO1xyXG59XHJcbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XHJcbiAgICByZXR1cm4gW1widHlwZVwiLCBcInBheWxvYWRcIiwgXCJlcnJvclwiLCBcIm1ldGFcIl0uaW5kZXhPZihrZXkpID4gLTE7XHJcbn1cclxuZnVuY3Rpb24gZ2V0VHlwZShhY3Rpb25DcmVhdG9yKSB7XHJcbiAgICByZXR1cm4gXCJcIiArIGFjdGlvbkNyZWF0b3I7XHJcbn1cclxuLy8gc3JjL2NyZWF0ZVJlZHVjZXIudHNcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZTIsIHsgaXNEcmFmdCBhcyBpc0RyYWZ0MiwgaXNEcmFmdGFibGUgYXMgaXNEcmFmdGFibGUyIH0gZnJvbSBcImltbWVyXCI7XHJcbi8vIHNyYy9tYXBCdWlsZGVycy50c1xyXG5mdW5jdGlvbiBleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayhidWlsZGVyQ2FsbGJhY2spIHtcclxuICAgIHZhciBhY3Rpb25zTWFwID0ge307XHJcbiAgICB2YXIgYWN0aW9uTWF0Y2hlcnMgPSBbXTtcclxuICAgIHZhciBkZWZhdWx0Q2FzZVJlZHVjZXI7XHJcbiAgICB2YXIgYnVpbGRlciA9IHtcclxuICAgICAgICBhZGRDYXNlOiBmdW5jdGlvbiAodHlwZU9yQWN0aW9uQ3JlYXRvciwgcmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uTWF0Y2hlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImBidWlsZGVyLmFkZENhc2VgIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgYnVpbGRlci5hZGRNYXRjaGVyYFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRDYXNlYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gdHlwZW9mIHR5cGVPckFjdGlvbkNyZWF0b3IgPT09IFwic3RyaW5nXCIgPyB0eXBlT3JBY3Rpb25DcmVhdG9yIDogdHlwZU9yQWN0aW9uQ3JlYXRvci50eXBlO1xyXG4gICAgICAgICAgICBpZiAodHlwZSBpbiBhY3Rpb25zTWFwKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhZGRDYXNlIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCB0d28gcmVkdWNlcnMgZm9yIHRoZSBzYW1lIGFjdGlvbiB0eXBlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbnNNYXBbdHlwZV0gPSByZWR1Y2VyO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZE1hdGNoZXI6IGZ1bmN0aW9uIChtYXRjaGVyLCByZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgYnVpbGRlci5hZGRNYXRjaGVyYCBzaG91bGQgb25seSBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGFjdGlvbk1hdGNoZXJzLnB1c2goeyBtYXRjaGVyOiBtYXRjaGVyLCByZWR1Y2VyOiByZWR1Y2VyIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVpbGRlcjtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZERlZmF1bHRDYXNlOiBmdW5jdGlvbiAocmVkdWNlcikge1xyXG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdENhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYGJ1aWxkZXIuYWRkRGVmYXVsdENhc2VgIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHRDYXNlUmVkdWNlciA9IHJlZHVjZXI7XHJcbiAgICAgICAgICAgIHJldHVybiBidWlsZGVyO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBidWlsZGVyQ2FsbGJhY2soYnVpbGRlcik7XHJcbiAgICByZXR1cm4gW2FjdGlvbnNNYXAsIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVSZWR1Y2VyLnRzXHJcbmZ1bmN0aW9uIGlzU3RhdGVGdW5jdGlvbih4KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVSZWR1Y2VyKGluaXRpYWxTdGF0ZSwgbWFwT3JCdWlsZGVyQ2FsbGJhY2ssIGFjdGlvbk1hdGNoZXJzLCBkZWZhdWx0Q2FzZVJlZHVjZXIpIHtcclxuICAgIGlmIChhY3Rpb25NYXRjaGVycyA9PT0gdm9pZCAwKSB7IGFjdGlvbk1hdGNoZXJzID0gW107IH1cclxuICAgIHZhciBfYyA9IHR5cGVvZiBtYXBPckJ1aWxkZXJDYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sobWFwT3JCdWlsZGVyQ2FsbGJhY2spIDogW21hcE9yQnVpbGRlckNhbGxiYWNrLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyXSwgYWN0aW9uc01hcCA9IF9jWzBdLCBmaW5hbEFjdGlvbk1hdGNoZXJzID0gX2NbMV0sIGZpbmFsRGVmYXVsdENhc2VSZWR1Y2VyID0gX2NbMl07XHJcbiAgICB2YXIgZ2V0SW5pdGlhbFN0YXRlO1xyXG4gICAgaWYgKGlzU3RhdGVGdW5jdGlvbihpbml0aWFsU3RhdGUpKSB7XHJcbiAgICAgICAgZ2V0SW5pdGlhbFN0YXRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZnJlZXplRHJhZnRhYmxlKGluaXRpYWxTdGF0ZSgpKTsgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHZhciBmcm96ZW5Jbml0aWFsU3RhdGVfMSA9IGZyZWV6ZURyYWZ0YWJsZShpbml0aWFsU3RhdGUpO1xyXG4gICAgICAgIGdldEluaXRpYWxTdGF0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZyb3plbkluaXRpYWxTdGF0ZV8xOyB9O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHsgc3RhdGUgPSBnZXRJbml0aWFsU3RhdGUoKTsgfVxyXG4gICAgICAgIHZhciBjYXNlUmVkdWNlcnMgPSBfX3NwcmVhZEFycmF5KFtcclxuICAgICAgICAgICAgYWN0aW9uc01hcFthY3Rpb24udHlwZV1cclxuICAgICAgICBdLCBmaW5hbEFjdGlvbk1hdGNoZXJzLmZpbHRlcihmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSBfYy5tYXRjaGVyO1xyXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgICAgIH0pLm1hcChmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgdmFyIHJlZHVjZXIyID0gX2MucmVkdWNlcjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZHVjZXIyO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBpZiAoY2FzZVJlZHVjZXJzLmZpbHRlcihmdW5jdGlvbiAoY3IpIHsgcmV0dXJuICEhY3I7IH0pLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlcnMgPSBbZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2FzZVJlZHVjZXJzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNTdGF0ZSwgY2FzZVJlZHVjZXIpIHtcclxuICAgICAgICAgICAgaWYgKGNhc2VSZWR1Y2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNEcmFmdDIocHJldmlvdXNTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHJhZnQgPSBwcmV2aW91c1N0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghaXNEcmFmdGFibGUyKHByZXZpb3VzU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhc2VSZWR1Y2VyKHByZXZpb3VzU3RhdGUsIGFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2aW91c1N0YXRlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIkEgY2FzZSByZWR1Y2VyIG9uIGEgbm9uLWRyYWZ0YWJsZSB2YWx1ZSBtdXN0IG5vdCByZXR1cm4gdW5kZWZpbmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5leHRTdGF0ZTIocHJldmlvdXNTdGF0ZSwgZnVuY3Rpb24gKGRyYWZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYXNlUmVkdWNlcihkcmFmdCwgYWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXNTdGF0ZTtcclxuICAgICAgICB9LCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICByZWR1Y2VyLmdldEluaXRpYWxTdGF0ZSA9IGdldEluaXRpYWxTdGF0ZTtcclxuICAgIHJldHVybiByZWR1Y2VyO1xyXG59XHJcbi8vIHNyYy9jcmVhdGVTbGljZS50c1xyXG5mdW5jdGlvbiBnZXRUeXBlMihzbGljZSwgYWN0aW9uS2V5KSB7XHJcbiAgICByZXR1cm4gc2xpY2UgKyBcIi9cIiArIGFjdGlvbktleTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVTbGljZShvcHRpb25zKSB7XHJcbiAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZTtcclxuICAgIGlmICghbmFtZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImBuYW1lYCBpcyBhIHJlcXVpcmVkIG9wdGlvbiBmb3IgY3JlYXRlU2xpY2VcIik7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwiZGV2ZWxvcG1lbnRcIikge1xyXG4gICAgICAgIGlmIChvcHRpb25zLmluaXRpYWxTdGF0ZSA9PT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJZb3UgbXVzdCBwcm92aWRlIGFuIGBpbml0aWFsU3RhdGVgIHZhbHVlIHRoYXQgaXMgbm90IGB1bmRlZmluZWRgLiBZb3UgbWF5IGhhdmUgbWlzc3BlbGxlZCBgaW5pdGlhbFN0YXRlYFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gdHlwZW9mIG9wdGlvbnMuaW5pdGlhbFN0YXRlID09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnMuaW5pdGlhbFN0YXRlIDogZnJlZXplRHJhZnRhYmxlKG9wdGlvbnMuaW5pdGlhbFN0YXRlKTtcclxuICAgIHZhciByZWR1Y2VycyA9IG9wdGlvbnMucmVkdWNlcnMgfHwge307XHJcbiAgICB2YXIgcmVkdWNlck5hbWVzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xyXG4gICAgdmFyIHNsaWNlQ2FzZVJlZHVjZXJzQnlOYW1lID0ge307XHJcbiAgICB2YXIgc2xpY2VDYXNlUmVkdWNlcnNCeVR5cGUgPSB7fTtcclxuICAgIHZhciBhY3Rpb25DcmVhdG9ycyA9IHt9O1xyXG4gICAgcmVkdWNlck5hbWVzLmZvckVhY2goZnVuY3Rpb24gKHJlZHVjZXJOYW1lKSB7XHJcbiAgICAgICAgdmFyIG1heWJlUmVkdWNlcldpdGhQcmVwYXJlID0gcmVkdWNlcnNbcmVkdWNlck5hbWVdO1xyXG4gICAgICAgIHZhciB0eXBlID0gZ2V0VHlwZTIobmFtZSwgcmVkdWNlck5hbWUpO1xyXG4gICAgICAgIHZhciBjYXNlUmVkdWNlcjtcclxuICAgICAgICB2YXIgcHJlcGFyZUNhbGxiYWNrO1xyXG4gICAgICAgIGlmIChcInJlZHVjZXJcIiBpbiBtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSkge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlciA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLnJlZHVjZXI7XHJcbiAgICAgICAgICAgIHByZXBhcmVDYWxsYmFjayA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlLnByZXBhcmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjYXNlUmVkdWNlciA9IG1heWJlUmVkdWNlcldpdGhQcmVwYXJlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZVtyZWR1Y2VyTmFtZV0gPSBjYXNlUmVkdWNlcjtcclxuICAgICAgICBzbGljZUNhc2VSZWR1Y2Vyc0J5VHlwZVt0eXBlXSA9IGNhc2VSZWR1Y2VyO1xyXG4gICAgICAgIGFjdGlvbkNyZWF0b3JzW3JlZHVjZXJOYW1lXSA9IHByZXBhcmVDYWxsYmFjayA/IGNyZWF0ZUFjdGlvbih0eXBlLCBwcmVwYXJlQ2FsbGJhY2spIDogY3JlYXRlQWN0aW9uKHR5cGUpO1xyXG4gICAgfSk7XHJcbiAgICBmdW5jdGlvbiBidWlsZFJlZHVjZXIoKSB7XHJcbiAgICAgICAgdmFyIF9jID0gdHlwZW9mIG9wdGlvbnMuZXh0cmFSZWR1Y2VycyA9PT0gXCJmdW5jdGlvblwiID8gZXhlY3V0ZVJlZHVjZXJCdWlsZGVyQ2FsbGJhY2sob3B0aW9ucy5leHRyYVJlZHVjZXJzKSA6IFtvcHRpb25zLmV4dHJhUmVkdWNlcnNdLCBfZCA9IF9jWzBdLCBleHRyYVJlZHVjZXJzID0gX2QgPT09IHZvaWQgMCA/IHt9IDogX2QsIF9lID0gX2NbMV0sIGFjdGlvbk1hdGNoZXJzID0gX2UgPT09IHZvaWQgMCA/IFtdIDogX2UsIF9mID0gX2NbMl0sIGRlZmF1bHRDYXNlUmVkdWNlciA9IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZjtcclxuICAgICAgICB2YXIgZmluYWxDYXNlUmVkdWNlcnMgPSBfX3NwcmVhZFZhbHVlcyhfX3NwcmVhZFZhbHVlcyh7fSwgZXh0cmFSZWR1Y2VycyksIHNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlKTtcclxuICAgICAgICByZXR1cm4gY3JlYXRlUmVkdWNlcihpbml0aWFsU3RhdGUsIGZpbmFsQ2FzZVJlZHVjZXJzLCBhY3Rpb25NYXRjaGVycywgZGVmYXVsdENhc2VSZWR1Y2VyKTtcclxuICAgIH1cclxuICAgIHZhciBfcmVkdWNlcjtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICByZWR1Y2VyOiBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoIV9yZWR1Y2VyKVxyXG4gICAgICAgICAgICAgICAgX3JlZHVjZXIgPSBidWlsZFJlZHVjZXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuIF9yZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWN0aW9uczogYWN0aW9uQ3JlYXRvcnMsXHJcbiAgICAgICAgY2FzZVJlZHVjZXJzOiBzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSxcclxuICAgICAgICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCFfcmVkdWNlcilcclxuICAgICAgICAgICAgICAgIF9yZWR1Y2VyID0gYnVpbGRSZWR1Y2VyKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfcmVkdWNlci5nZXRJbml0aWFsU3RhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy9lbnRpdHlfc3RhdGUudHNcclxuZnVuY3Rpb24gZ2V0SW5pdGlhbEVudGl0eVN0YXRlKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpZHM6IFtdLFxyXG4gICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBjcmVhdGVJbml0aWFsU3RhdGVGYWN0b3J5KCkge1xyXG4gICAgZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKGFkZGl0aW9uYWxTdGF0ZSkge1xyXG4gICAgICAgIGlmIChhZGRpdGlvbmFsU3RhdGUgPT09IHZvaWQgMCkgeyBhZGRpdGlvbmFsU3RhdGUgPSB7fTsgfVxyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGdldEluaXRpYWxFbnRpdHlTdGF0ZSgpLCBhZGRpdGlvbmFsU3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgZ2V0SW5pdGlhbFN0YXRlOiBnZXRJbml0aWFsU3RhdGUgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvc3RhdGVfc2VsZWN0b3JzLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVNlbGVjdG9yc0ZhY3RvcnkoKSB7XHJcbiAgICBmdW5jdGlvbiBnZXRTZWxlY3RvcnMoc2VsZWN0U3RhdGUpIHtcclxuICAgICAgICB2YXIgc2VsZWN0SWRzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5pZHM7IH07XHJcbiAgICAgICAgdmFyIHNlbGVjdEVudGl0aWVzID0gZnVuY3Rpb24gKHN0YXRlKSB7IHJldHVybiBzdGF0ZS5lbnRpdGllczsgfTtcclxuICAgICAgICB2YXIgc2VsZWN0QWxsID0gY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3Ioc2VsZWN0SWRzLCBzZWxlY3RFbnRpdGllcywgZnVuY3Rpb24gKGlkcywgZW50aXRpZXMpIHsgcmV0dXJuIGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiBlbnRpdGllc1tpZF07IH0pOyB9KTtcclxuICAgICAgICB2YXIgc2VsZWN0SWQgPSBmdW5jdGlvbiAoXywgaWQpIHsgcmV0dXJuIGlkOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RCeUlkID0gZnVuY3Rpb24gKGVudGl0aWVzLCBpZCkgeyByZXR1cm4gZW50aXRpZXNbaWRdOyB9O1xyXG4gICAgICAgIHZhciBzZWxlY3RUb3RhbCA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdElkcywgZnVuY3Rpb24gKGlkcykgeyByZXR1cm4gaWRzLmxlbmd0aDsgfSk7XHJcbiAgICAgICAgaWYgKCFzZWxlY3RTdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0SWRzOiBzZWxlY3RJZHMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RFbnRpdGllczogc2VsZWN0RW50aXRpZXMsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RBbGw6IHNlbGVjdEFsbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdFRvdGFsOiBzZWxlY3RUb3RhbCxcclxuICAgICAgICAgICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEVudGl0aWVzLCBzZWxlY3RJZCwgc2VsZWN0QnlJZClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyA9IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RFbnRpdGllcyk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2VsZWN0SWRzOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0SWRzKSxcclxuICAgICAgICAgICAgc2VsZWN0RW50aXRpZXM6IHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcyxcclxuICAgICAgICAgICAgc2VsZWN0QWxsOiBjcmVhdGVEcmFmdFNhZmVTZWxlY3RvcihzZWxlY3RTdGF0ZSwgc2VsZWN0QWxsKSxcclxuICAgICAgICAgICAgc2VsZWN0VG90YWw6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdFN0YXRlLCBzZWxlY3RUb3RhbCksXHJcbiAgICAgICAgICAgIHNlbGVjdEJ5SWQ6IGNyZWF0ZURyYWZ0U2FmZVNlbGVjdG9yKHNlbGVjdEdsb2JhbGl6ZWRFbnRpdGllcywgc2VsZWN0SWQsIHNlbGVjdEJ5SWQpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IGdldFNlbGVjdG9yczogZ2V0U2VsZWN0b3JzIH07XHJcbn1cclxuLy8gc3JjL2VudGl0aWVzL3N0YXRlX2FkYXB0ZXIudHNcclxuaW1wb3J0IGNyZWF0ZU5leHRTdGF0ZTMsIHsgaXNEcmFmdCBhcyBpc0RyYWZ0MyB9IGZyb20gXCJpbW1lclwiO1xyXG5mdW5jdGlvbiBjcmVhdGVTaW5nbGVBcmd1bWVudFN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgdmFyIG9wZXJhdG9yID0gY3JlYXRlU3RhdGVPcGVyYXRvcihmdW5jdGlvbiAoXywgc3RhdGUpIHsgcmV0dXJuIG11dGF0b3Ioc3RhdGUpOyB9KTtcclxuICAgIHJldHVybiBmdW5jdGlvbiBvcGVyYXRpb24oc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gb3BlcmF0b3Ioc3RhdGUsIHZvaWQgMCk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlT3BlcmF0b3IobXV0YXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9wZXJhdGlvbihzdGF0ZSwgYXJnKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gaXNQYXlsb2FkQWN0aW9uQXJndW1lbnQoYXJnMikge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNGU0EoYXJnMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBydW5NdXRhdG9yID0gZnVuY3Rpb24gKGRyYWZ0KSB7XHJcbiAgICAgICAgICAgIGlmIChpc1BheWxvYWRBY3Rpb25Bcmd1bWVudChhcmcpKSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZy5wYXlsb2FkLCBkcmFmdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdG9yKGFyZywgZHJhZnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoaXNEcmFmdDMoc3RhdGUpKSB7XHJcbiAgICAgICAgICAgIHJ1bk11dGF0b3Ioc3RhdGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlTmV4dFN0YXRlMyhzdGF0ZSwgcnVuTXV0YXRvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvdXRpbHMudHNcclxuZnVuY3Rpb24gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKSB7XHJcbiAgICB2YXIga2V5ID0gc2VsZWN0SWQoZW50aXR5KTtcclxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYga2V5ID09PSB2b2lkIDApIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgZW50aXR5IHBhc3NlZCB0byB0aGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbiByZXR1cm5lZCB1bmRlZmluZWQuXCIsIFwiWW91IHNob3VsZCBwcm9iYWJseSBwcm92aWRlIHlvdXIgb3duIGBzZWxlY3RJZGAgaW1wbGVtZW50YXRpb24uXCIsIFwiVGhlIGVudGl0eSB0aGF0IHdhcyBwYXNzZWQ6XCIsIGVudGl0eSwgXCJUaGUgYHNlbGVjdElkYCBpbXBsZW1lbnRhdGlvbjpcIiwgc2VsZWN0SWQudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4ga2V5O1xyXG59XHJcbmZ1bmN0aW9uIGVuc3VyZUVudGl0aWVzQXJyYXkoZW50aXRpZXMpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcclxuICAgICAgICBlbnRpdGllcyA9IE9iamVjdC52YWx1ZXMoZW50aXRpZXMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVudGl0aWVzO1xyXG59XHJcbmZ1bmN0aW9uIHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSkge1xyXG4gICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgIHZhciBhZGRlZCA9IFtdO1xyXG4gICAgdmFyIHVwZGF0ZWQgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgbmV3RW50aXRpZXNfMSA9IG5ld0VudGl0aWVzOyBfaSA8IG5ld0VudGl0aWVzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGVudGl0eSA9IG5ld0VudGl0aWVzXzFbX2ldO1xyXG4gICAgICAgIHZhciBpZCA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKGlkIGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZWQucHVzaCh7IGlkOiBpZCwgY2hhbmdlczogZW50aXR5IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWRkZWQucHVzaChlbnRpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBbYWRkZWQsIHVwZGF0ZWRdO1xyXG59XHJcbi8vIHNyYy9lbnRpdGllcy91bnNvcnRlZF9zdGF0ZV9hZGFwdGVyLnRzXHJcbmZ1bmN0aW9uIGNyZWF0ZVVuc29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkKSB7XHJcbiAgICBmdW5jdGlvbiBhZGRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICB2YXIga2V5ID0gc2VsZWN0SWRWYWx1ZShlbnRpdHksIHNlbGVjdElkKTtcclxuICAgICAgICBpZiAoa2V5IGluIHN0YXRlLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuaWRzLnB1c2goa2V5KTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzIgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18yLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfMltfaV07XHJcbiAgICAgICAgICAgIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0T25lTXV0YWJseShlbnRpdHksIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHNlbGVjdElkVmFsdWUoZW50aXR5LCBzZWxlY3RJZCk7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIHN0YXRlLmVudGl0aWVzKSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMucHVzaChrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdGF0ZS5lbnRpdGllc1trZXldID0gZW50aXR5O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIG5ld0VudGl0aWVzXzMgPSBuZXdFbnRpdGllczsgX2kgPCBuZXdFbnRpdGllc18zLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgZW50aXR5ID0gbmV3RW50aXRpZXNfM1tfaV07XHJcbiAgICAgICAgICAgIHNldE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gc2V0QWxsTXV0YWJseShuZXdFbnRpdGllcywgc3RhdGUpIHtcclxuICAgICAgICBuZXdFbnRpdGllcyA9IGVuc3VyZUVudGl0aWVzQXJyYXkobmV3RW50aXRpZXMpO1xyXG4gICAgICAgIHN0YXRlLmlkcyA9IFtdO1xyXG4gICAgICAgIHN0YXRlLmVudGl0aWVzID0ge307XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZU9uZU11dGFibHkoa2V5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiByZW1vdmVNYW55TXV0YWJseShba2V5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gcmVtb3ZlTWFueU11dGFibHkoa2V5cywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgZGlkTXV0YXRlID0gZmFsc2U7XHJcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKGtleSBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW2tleV07XHJcbiAgICAgICAgICAgICAgICBkaWRNdXRhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGRpZE11dGF0ZSkge1xyXG4gICAgICAgICAgICBzdGF0ZS5pZHMgPSBzdGF0ZS5pZHMuZmlsdGVyKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gaWQgaW4gc3RhdGUuZW50aXRpZXM7IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbE11dGFibHkoc3RhdGUpIHtcclxuICAgICAgICBPYmplY3QuYXNzaWduKHN0YXRlLCB7XHJcbiAgICAgICAgICAgIGlkczogW10sXHJcbiAgICAgICAgICAgIGVudGl0aWVzOiB7fVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdGFrZU5ld0tleShrZXlzLCB1cGRhdGUsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIG9yaWdpbmFsMiA9IHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgdmFyIHVwZGF0ZWQgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnaW5hbDIsIHVwZGF0ZS5jaGFuZ2VzKTtcclxuICAgICAgICB2YXIgbmV3S2V5ID0gc2VsZWN0SWRWYWx1ZSh1cGRhdGVkLCBzZWxlY3RJZCk7XHJcbiAgICAgICAgdmFyIGhhc05ld0tleSA9IG5ld0tleSAhPT0gdXBkYXRlLmlkO1xyXG4gICAgICAgIGlmIChoYXNOZXdLZXkpIHtcclxuICAgICAgICAgICAga2V5c1t1cGRhdGUuaWRdID0gbmV3S2V5O1xyXG4gICAgICAgICAgICBkZWxldGUgc3RhdGUuZW50aXRpZXNbdXBkYXRlLmlkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RhdGUuZW50aXRpZXNbbmV3S2V5XSA9IHVwZGF0ZWQ7XHJcbiAgICAgICAgcmV0dXJuIGhhc05ld0tleTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU9uZU11dGFibHkodXBkYXRlLCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVNYW55TXV0YWJseShbdXBkYXRlXSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBkYXRlTWFueU11dGFibHkodXBkYXRlcywgc3RhdGUpIHtcclxuICAgICAgICB2YXIgbmV3S2V5cyA9IHt9O1xyXG4gICAgICAgIHZhciB1cGRhdGVzUGVyRW50aXR5ID0ge307XHJcbiAgICAgICAgdXBkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uICh1cGRhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHVwZGF0ZS5pZCBpbiBzdGF0ZS5lbnRpdGllcykge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlc1BlckVudGl0eVt1cGRhdGUuaWRdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiB1cGRhdGUuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlczogX19zcHJlYWRWYWx1ZXMoX19zcHJlYWRWYWx1ZXMoe30sIHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXSA/IHVwZGF0ZXNQZXJFbnRpdHlbdXBkYXRlLmlkXS5jaGFuZ2VzIDogbnVsbCksIHVwZGF0ZS5jaGFuZ2VzKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHVwZGF0ZXMgPSBPYmplY3QudmFsdWVzKHVwZGF0ZXNQZXJFbnRpdHkpO1xyXG4gICAgICAgIHZhciBkaWRNdXRhdGVFbnRpdGllcyA9IHVwZGF0ZXMubGVuZ3RoID4gMDtcclxuICAgICAgICBpZiAoZGlkTXV0YXRlRW50aXRpZXMpIHtcclxuICAgICAgICAgICAgdmFyIGRpZE11dGF0ZUlkcyA9IHVwZGF0ZXMuZmlsdGVyKGZ1bmN0aW9uICh1cGRhdGUpIHsgcmV0dXJuIHRha2VOZXdLZXkobmV3S2V5cywgdXBkYXRlLCBzdGF0ZSk7IH0pLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIGlmIChkaWRNdXRhdGVJZHMpIHtcclxuICAgICAgICAgICAgICAgIHN0YXRlLmlkcyA9IE9iamVjdC5rZXlzKHN0YXRlLmVudGl0aWVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiB1cHNlcnRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gdXBzZXJ0TWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIF9jID0gc3BsaXRBZGRlZFVwZGF0ZWRFbnRpdGllcyhuZXdFbnRpdGllcywgc2VsZWN0SWQsIHN0YXRlKSwgYWRkZWQgPSBfY1swXSwgdXBkYXRlZCA9IF9jWzFdO1xyXG4gICAgICAgIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZWQsIHN0YXRlKTtcclxuICAgICAgICBhZGRNYW55TXV0YWJseShhZGRlZCwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZW1vdmVBbGw6IGNyZWF0ZVNpbmdsZUFyZ3VtZW50U3RhdGVPcGVyYXRvcihyZW1vdmVBbGxNdXRhYmx5KSxcclxuICAgICAgICBhZGRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IoYWRkT25lTXV0YWJseSksXHJcbiAgICAgICAgYWRkTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcihhZGRNYW55TXV0YWJseSksXHJcbiAgICAgICAgc2V0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0TWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldEFsbDogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRBbGxNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBkYXRlT25lTXV0YWJseSksXHJcbiAgICAgICAgdXBkYXRlTWFueTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVNYW55TXV0YWJseSksXHJcbiAgICAgICAgdXBzZXJ0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwc2VydE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0TWFueU11dGFibHkpLFxyXG4gICAgICAgIHJlbW92ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcihyZW1vdmVPbmVNdXRhYmx5KSxcclxuICAgICAgICByZW1vdmVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHJlbW92ZU1hbnlNdXRhYmx5KVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvc29ydGVkX3N0YXRlX2FkYXB0ZXIudHNcclxuZnVuY3Rpb24gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0KSB7XHJcbiAgICB2YXIgX2MgPSBjcmVhdGVVbnNvcnRlZFN0YXRlQWRhcHRlcihzZWxlY3RJZCksIHJlbW92ZU9uZSA9IF9jLnJlbW92ZU9uZSwgcmVtb3ZlTWFueSA9IF9jLnJlbW92ZU1hbnksIHJlbW92ZUFsbCA9IF9jLnJlbW92ZUFsbDtcclxuICAgIGZ1bmN0aW9uIGFkZE9uZU11dGFibHkoZW50aXR5LCBzdGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBhZGRNYW55TXV0YWJseShbZW50aXR5XSwgc3RhdGUpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gYWRkTWFueU11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICB2YXIgbW9kZWxzID0gbmV3RW50aXRpZXMuZmlsdGVyKGZ1bmN0aW9uIChtb2RlbCkgeyByZXR1cm4gIShzZWxlY3RJZFZhbHVlKG1vZGVsLCBzZWxlY3RJZCkgaW4gc3RhdGUuZW50aXRpZXMpOyB9KTtcclxuICAgICAgICBpZiAobW9kZWxzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBtZXJnZShtb2RlbHMsIHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBzZXRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gc2V0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIG5ld0VudGl0aWVzID0gZW5zdXJlRW50aXRpZXNBcnJheShuZXdFbnRpdGllcyk7XHJcbiAgICAgICAgaWYgKG5ld0VudGl0aWVzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgICBtZXJnZShuZXdFbnRpdGllcywgc3RhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHNldEFsbE11dGFibHkobmV3RW50aXRpZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgbmV3RW50aXRpZXMgPSBlbnN1cmVFbnRpdGllc0FycmF5KG5ld0VudGl0aWVzKTtcclxuICAgICAgICBzdGF0ZS5lbnRpdGllcyA9IHt9O1xyXG4gICAgICAgIHN0YXRlLmlkcyA9IFtdO1xyXG4gICAgICAgIGFkZE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cGRhdGVPbmVNdXRhYmx5KHVwZGF0ZSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBkYXRlTWFueU11dGFibHkoW3VwZGF0ZV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1hbnlNdXRhYmx5KHVwZGF0ZXMsIHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGFwcGxpZWRVcGRhdGVzID0gZmFsc2U7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB1cGRhdGVzXzEgPSB1cGRhdGVzOyBfaSA8IHVwZGF0ZXNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IHVwZGF0ZXNfMVtfaV07XHJcbiAgICAgICAgICAgIHZhciBlbnRpdHkgPSBzdGF0ZS5lbnRpdGllc1t1cGRhdGUuaWRdO1xyXG4gICAgICAgICAgICBpZiAoIWVudGl0eSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXBwbGllZFVwZGF0ZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGVudGl0eSwgdXBkYXRlLmNoYW5nZXMpO1xyXG4gICAgICAgICAgICB2YXIgbmV3SWQgPSBzZWxlY3RJZChlbnRpdHkpO1xyXG4gICAgICAgICAgICBpZiAodXBkYXRlLmlkICE9PSBuZXdJZCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmVudGl0aWVzW3VwZGF0ZS5pZF07XHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5lbnRpdGllc1tuZXdJZF0gPSBlbnRpdHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGFwcGxpZWRVcGRhdGVzKSB7XHJcbiAgICAgICAgICAgIHJlc29ydEVudGl0aWVzKHN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB1cHNlcnRPbmVNdXRhYmx5KGVudGl0eSwgc3RhdGUpIHtcclxuICAgICAgICByZXR1cm4gdXBzZXJ0TWFueU11dGFibHkoW2VudGl0eV0sIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHVwc2VydE1hbnlNdXRhYmx5KG5ld0VudGl0aWVzLCBzdGF0ZSkge1xyXG4gICAgICAgIHZhciBfYyA9IHNwbGl0QWRkZWRVcGRhdGVkRW50aXRpZXMobmV3RW50aXRpZXMsIHNlbGVjdElkLCBzdGF0ZSksIGFkZGVkID0gX2NbMF0sIHVwZGF0ZWQgPSBfY1sxXTtcclxuICAgICAgICB1cGRhdGVNYW55TXV0YWJseSh1cGRhdGVkLCBzdGF0ZSk7XHJcbiAgICAgICAgYWRkTWFueU11dGFibHkoYWRkZWQsIHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGFyZUFycmF5c0VxdWFsKGEsIGIpIHtcclxuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aCAmJiBpIDwgYi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYVtpXSA9PT0gYltpXSkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG1lcmdlKG1vZGVscywgc3RhdGUpIHtcclxuICAgICAgICBtb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAobW9kZWwpIHtcclxuICAgICAgICAgICAgc3RhdGUuZW50aXRpZXNbc2VsZWN0SWQobW9kZWwpXSA9IG1vZGVsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJlc29ydEVudGl0aWVzKHN0YXRlKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlc29ydEVudGl0aWVzKHN0YXRlKSB7XHJcbiAgICAgICAgdmFyIGFsbEVudGl0aWVzID0gT2JqZWN0LnZhbHVlcyhzdGF0ZS5lbnRpdGllcyk7XHJcbiAgICAgICAgYWxsRW50aXRpZXMuc29ydChzb3J0KTtcclxuICAgICAgICB2YXIgbmV3U29ydGVkSWRzID0gYWxsRW50aXRpZXMubWFwKHNlbGVjdElkKTtcclxuICAgICAgICB2YXIgaWRzID0gc3RhdGUuaWRzO1xyXG4gICAgICAgIGlmICghYXJlQXJyYXlzRXF1YWwoaWRzLCBuZXdTb3J0ZWRJZHMpKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLmlkcyA9IG5ld1NvcnRlZElkcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHJlbW92ZU9uZTogcmVtb3ZlT25lLFxyXG4gICAgICAgIHJlbW92ZU1hbnk6IHJlbW92ZU1hbnksXHJcbiAgICAgICAgcmVtb3ZlQWxsOiByZW1vdmVBbGwsXHJcbiAgICAgICAgYWRkT25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE9uZU11dGFibHkpLFxyXG4gICAgICAgIHVwZGF0ZU9uZTogY3JlYXRlU3RhdGVPcGVyYXRvcih1cGRhdGVPbmVNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRPbmU6IGNyZWF0ZVN0YXRlT3BlcmF0b3IodXBzZXJ0T25lTXV0YWJseSksXHJcbiAgICAgICAgc2V0T25lOiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHNldE9uZU11dGFibHkpLFxyXG4gICAgICAgIHNldE1hbnk6IGNyZWF0ZVN0YXRlT3BlcmF0b3Ioc2V0TWFueU11dGFibHkpLFxyXG4gICAgICAgIHNldEFsbDogY3JlYXRlU3RhdGVPcGVyYXRvcihzZXRBbGxNdXRhYmx5KSxcclxuICAgICAgICBhZGRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKGFkZE1hbnlNdXRhYmx5KSxcclxuICAgICAgICB1cGRhdGVNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwZGF0ZU1hbnlNdXRhYmx5KSxcclxuICAgICAgICB1cHNlcnRNYW55OiBjcmVhdGVTdGF0ZU9wZXJhdG9yKHVwc2VydE1hbnlNdXRhYmx5KVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvZW50aXRpZXMvY3JlYXRlX2FkYXB0ZXIudHNcclxuZnVuY3Rpb24gY3JlYXRlRW50aXR5QWRhcHRlcihvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxyXG4gICAgdmFyIF9jID0gX19zcHJlYWRWYWx1ZXMoe1xyXG4gICAgICAgIHNvcnRDb21wYXJlcjogZmFsc2UsXHJcbiAgICAgICAgc2VsZWN0SWQ6IGZ1bmN0aW9uIChpbnN0YW5jZSkgeyByZXR1cm4gaW5zdGFuY2UuaWQ7IH1cclxuICAgIH0sIG9wdGlvbnMpLCBzZWxlY3RJZCA9IF9jLnNlbGVjdElkLCBzb3J0Q29tcGFyZXIgPSBfYy5zb3J0Q29tcGFyZXI7XHJcbiAgICB2YXIgc3RhdGVGYWN0b3J5ID0gY3JlYXRlSW5pdGlhbFN0YXRlRmFjdG9yeSgpO1xyXG4gICAgdmFyIHNlbGVjdG9yc0ZhY3RvcnkgPSBjcmVhdGVTZWxlY3RvcnNGYWN0b3J5KCk7XHJcbiAgICB2YXIgc3RhdGVBZGFwdGVyID0gc29ydENvbXBhcmVyID8gY3JlYXRlU29ydGVkU3RhdGVBZGFwdGVyKHNlbGVjdElkLCBzb3J0Q29tcGFyZXIpIDogY3JlYXRlVW5zb3J0ZWRTdGF0ZUFkYXB0ZXIoc2VsZWN0SWQpO1xyXG4gICAgcmV0dXJuIF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKF9fc3ByZWFkVmFsdWVzKHtcclxuICAgICAgICBzZWxlY3RJZDogc2VsZWN0SWQsXHJcbiAgICAgICAgc29ydENvbXBhcmVyOiBzb3J0Q29tcGFyZXJcclxuICAgIH0sIHN0YXRlRmFjdG9yeSksIHNlbGVjdG9yc0ZhY3RvcnkpLCBzdGF0ZUFkYXB0ZXIpO1xyXG59XHJcbi8vIHNyYy9uYW5vaWQudHNcclxudmFyIHVybEFscGhhYmV0ID0gXCJNb2R1bGVTeW1iaGFzT3duUHItMDEyMzQ1Njc4OUFCQ0RFRkdITlJWZmdjdGlVdnpfS3FZVEprTHhwWlhJalFXXCI7XHJcbnZhciBuYW5vaWQgPSBmdW5jdGlvbiAoc2l6ZSkge1xyXG4gICAgaWYgKHNpemUgPT09IHZvaWQgMCkgeyBzaXplID0gMjE7IH1cclxuICAgIHZhciBpZCA9IFwiXCI7XHJcbiAgICB2YXIgaSA9IHNpemU7XHJcbiAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgaWQgKz0gdXJsQWxwaGFiZXRbTWF0aC5yYW5kb20oKSAqIDY0IHwgMF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaWQ7XHJcbn07XHJcbi8vIHNyYy9jcmVhdGVBc3luY1RodW5rLnRzXHJcbnZhciBjb21tb25Qcm9wZXJ0aWVzID0gW1xyXG4gICAgXCJuYW1lXCIsXHJcbiAgICBcIm1lc3NhZ2VcIixcclxuICAgIFwic3RhY2tcIixcclxuICAgIFwiY29kZVwiXHJcbl07XHJcbnZhciBSZWplY3RXaXRoVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZWplY3RXaXRoVmFsdWUocGF5bG9hZCwgbWV0YSkge1xyXG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuICAgIH1cclxuICAgIHJldHVybiBSZWplY3RXaXRoVmFsdWU7XHJcbn0oKSk7XHJcbnZhciBGdWxmaWxsV2l0aE1ldGEgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGdWxmaWxsV2l0aE1ldGEocGF5bG9hZCwgbWV0YSkge1xyXG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XHJcbiAgICAgICAgdGhpcy5tZXRhID0gbWV0YTtcclxuICAgIH1cclxuICAgIHJldHVybiBGdWxmaWxsV2l0aE1ldGE7XHJcbn0oKSk7XHJcbnZhciBtaW5pU2VyaWFsaXplRXJyb3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICB2YXIgc2ltcGxlRXJyb3IgPSB7fTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGNvbW1vblByb3BlcnRpZXNfMSA9IGNvbW1vblByb3BlcnRpZXM7IF9pIDwgY29tbW9uUHJvcGVydGllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcHJvcGVydHkgPSBjb21tb25Qcm9wZXJ0aWVzXzFbX2ldO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlW3Byb3BlcnR5XSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgc2ltcGxlRXJyb3JbcHJvcGVydHldID0gdmFsdWVbcHJvcGVydHldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzaW1wbGVFcnJvcjtcclxuICAgIH1cclxuICAgIHJldHVybiB7IG1lc3NhZ2U6IFN0cmluZyh2YWx1ZSkgfTtcclxufTtcclxuZnVuY3Rpb24gY3JlYXRlQXN5bmNUaHVuayh0eXBlUHJlZml4LCBwYXlsb2FkQ3JlYXRvciwgb3B0aW9ucykge1xyXG4gICAgdmFyIGZ1bGZpbGxlZCA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvZnVsZmlsbGVkXCIsIGZ1bmN0aW9uIChwYXlsb2FkLCByZXF1ZXN0SWQsIGFyZywgbWV0YSkgeyByZXR1cm4gKHtcclxuICAgICAgICBwYXlsb2FkOiBwYXlsb2FkLFxyXG4gICAgICAgIG1ldGE6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1ldGEgfHwge30pLCB7XHJcbiAgICAgICAgICAgIGFyZzogYXJnLFxyXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgcmVxdWVzdFN0YXR1czogXCJmdWxmaWxsZWRcIlxyXG4gICAgICAgIH0pXHJcbiAgICB9KTsgfSk7XHJcbiAgICB2YXIgcGVuZGluZyA9IGNyZWF0ZUFjdGlvbih0eXBlUHJlZml4ICsgXCIvcGVuZGluZ1wiLCBmdW5jdGlvbiAocmVxdWVzdElkLCBhcmcsIG1ldGEpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgcGF5bG9hZDogdm9pZCAwLFxyXG4gICAgICAgIG1ldGE6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1ldGEgfHwge30pLCB7XHJcbiAgICAgICAgICAgIGFyZzogYXJnLFxyXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgcmVxdWVzdFN0YXR1czogXCJwZW5kaW5nXCJcclxuICAgICAgICB9KVxyXG4gICAgfSk7IH0pO1xyXG4gICAgdmFyIHJlamVjdGVkID0gY3JlYXRlQWN0aW9uKHR5cGVQcmVmaXggKyBcIi9yZWplY3RlZFwiLCBmdW5jdGlvbiAoZXJyb3IsIHJlcXVlc3RJZCwgYXJnLCBwYXlsb2FkLCBtZXRhKSB7IHJldHVybiAoe1xyXG4gICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXHJcbiAgICAgICAgZXJyb3I6IChvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplRXJyb3IgfHwgbWluaVNlcmlhbGl6ZUVycm9yKShlcnJvciB8fCBcIlJlamVjdGVkXCIpLFxyXG4gICAgICAgIG1ldGE6IF9fc3ByZWFkUHJvcHMoX19zcHJlYWRWYWx1ZXMoe30sIG1ldGEgfHwge30pLCB7XHJcbiAgICAgICAgICAgIGFyZzogYXJnLFxyXG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgcmVqZWN0ZWRXaXRoVmFsdWU6ICEhcGF5bG9hZCxcclxuICAgICAgICAgICAgcmVxdWVzdFN0YXR1czogXCJyZWplY3RlZFwiLFxyXG4gICAgICAgICAgICBhYm9ydGVkOiAoZXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yLm5hbWUpID09PSBcIkFib3J0RXJyb3JcIixcclxuICAgICAgICAgICAgY29uZGl0aW9uOiAoZXJyb3IgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yLm5hbWUpID09PSBcIkNvbmRpdGlvbkVycm9yXCJcclxuICAgICAgICB9KVxyXG4gICAgfSk7IH0pO1xyXG4gICAgdmFyIGRpc3BsYXllZFdhcm5pbmcgPSBmYWxzZTtcclxuICAgIHZhciBBQyA9IHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgIT09IFwidW5kZWZpbmVkXCIgPyBBYm9ydENvbnRyb2xsZXIgOiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gY2xhc3NfMSgpIHtcclxuICAgICAgICAgICAgdGhpcy5zaWduYWwgPSB7XHJcbiAgICAgICAgICAgICAgICBhYm9ydGVkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkaXNwYXRjaEV2ZW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uYWJvcnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVhc29uOiB2b2lkIDAsXHJcbiAgICAgICAgICAgICAgICB0aHJvd0lmQWJvcnRlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFkaXNwbGF5ZWRXYXJuaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheWVkV2FybmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKFwiVGhpcyBwbGF0Zm9ybSBkb2VzIG5vdCBpbXBsZW1lbnQgQWJvcnRDb250cm9sbGVyLiBcXG5JZiB5b3Ugd2FudCB0byB1c2UgdGhlIEFib3J0Q29udHJvbGxlciB0byByZWFjdCB0byBgYWJvcnRgIGV2ZW50cywgcGxlYXNlIGNvbnNpZGVyIGltcG9ydGluZyBhIHBvbHlmaWxsIGxpa2UgJ2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC9kaXN0L2Fib3J0Y29udHJvbGxlci1wb2x5ZmlsbC1vbmx5Jy5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBjbGFzc18xO1xyXG4gICAgfSgpKTtcclxuICAgIGZ1bmN0aW9uIGFjdGlvbkNyZWF0b3IoYXJnKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhKSB7XHJcbiAgICAgICAgICAgIHZhciByZXF1ZXN0SWQgPSAob3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5pZEdlbmVyYXRvcikgPyBvcHRpb25zLmlkR2VuZXJhdG9yKGFyZykgOiBuYW5vaWQoKTtcclxuICAgICAgICAgICAgdmFyIGFib3J0Q29udHJvbGxlciA9IG5ldyBBQygpO1xyXG4gICAgICAgICAgICB2YXIgYWJvcnRSZWFzb247XHJcbiAgICAgICAgICAgIHZhciBhYm9ydGVkUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChfLCByZWplY3QpIHsgcmV0dXJuIGFib3J0Q29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlamVjdCh7IG5hbWU6IFwiQWJvcnRFcnJvclwiLCBtZXNzYWdlOiBhYm9ydFJlYXNvbiB8fCBcIkFib3J0ZWRcIiB9KTsgfSk7IH0pO1xyXG4gICAgICAgICAgICB2YXIgc3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBhYm9ydChyZWFzb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGFydGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRSZWFzb24gPSByZWFzb247XHJcbiAgICAgICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyLmFib3J0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHByb21pc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3luYyh0aGlzLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYiwgZmluYWxBY3Rpb24sIGNvbmRpdGlvblJlc3VsdCwgZXJyXzEsIHNraXBEaXNwYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzAsIDQsICwgNV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvblJlc3VsdCA9IChfYSA9IG9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdGlvbnMuY29uZGl0aW9uKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChvcHRpb25zLCBhcmcsIHsgZ2V0U3RhdGU6IGdldFN0YXRlLCBleHRyYTogZXh0cmEgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1RoZW5hYmxlKGNvbmRpdGlvblJlc3VsdCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNvbmRpdGlvblJlc3VsdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZGl0aW9uUmVzdWx0ID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uUmVzdWx0ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbmRpdGlvbkVycm9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkFib3J0ZWQgZHVlIHRvIGNvbmRpdGlvbiBjYWxsYmFjayByZXR1cm5pbmcgZmFsc2UuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gocGVuZGluZyhyZXF1ZXN0SWQsIGFyZywgKF9iID0gb3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogb3B0aW9ucy5nZXRQZW5kaW5nTWV0YSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwob3B0aW9ucywgeyByZXF1ZXN0SWQ6IHJlcXVlc3RJZCwgYXJnOiBhcmcgfSwgeyBnZXRTdGF0ZTogZ2V0U3RhdGUsIGV4dHJhOiBleHRyYSB9KSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmFjZShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydGVkUHJvbWlzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShwYXlsb2FkQ3JlYXRvcihhcmcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaDogZGlzcGF0Y2gsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U3RhdGU6IGdldFN0YXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGFib3J0Q29udHJvbGxlci5zaWduYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0V2l0aFZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIG1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWplY3RXaXRoVmFsdWUodmFsdWUsIG1ldGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsZmlsbFdpdGhWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBtZXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRnVsZmlsbFdpdGhNZXRhKHZhbHVlLCBtZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFJlamVjdFdpdGhWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBGdWxmaWxsV2l0aE1ldGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQucGF5bG9hZCwgcmVxdWVzdElkLCBhcmcsIHJlc3VsdC5tZXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bGZpbGxlZChyZXN1bHQsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJfMSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEFjdGlvbiA9IGVycl8xIGluc3RhbmNlb2YgUmVqZWN0V2l0aFZhbHVlID8gcmVqZWN0ZWQobnVsbCwgcmVxdWVzdElkLCBhcmcsIGVycl8xLnBheWxvYWQsIGVycl8xLm1ldGEpIDogcmVqZWN0ZWQoZXJyXzEsIHJlcXVlc3RJZCwgYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwRGlzcGF0Y2ggPSBvcHRpb25zICYmICFvcHRpb25zLmRpc3BhdGNoQ29uZGl0aW9uUmVqZWN0aW9uICYmIHJlamVjdGVkLm1hdGNoKGZpbmFsQWN0aW9uKSAmJiBmaW5hbEFjdGlvbi5tZXRhLmNvbmRpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXNraXBEaXNwYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChmaW5hbEFjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBmaW5hbEFjdGlvbl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHByb21pc2UsIHtcclxuICAgICAgICAgICAgICAgIGFib3J0OiBhYm9ydCxcclxuICAgICAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkLFxyXG4gICAgICAgICAgICAgICAgYXJnOiBhcmcsXHJcbiAgICAgICAgICAgICAgICB1bndyYXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHVud3JhcFJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihhY3Rpb25DcmVhdG9yLCB7XHJcbiAgICAgICAgcGVuZGluZzogcGVuZGluZyxcclxuICAgICAgICByZWplY3RlZDogcmVqZWN0ZWQsXHJcbiAgICAgICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXHJcbiAgICAgICAgdHlwZVByZWZpeDogdHlwZVByZWZpeFxyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gdW53cmFwUmVzdWx0KGFjdGlvbikge1xyXG4gICAgaWYgKGFjdGlvbi5tZXRhICYmIGFjdGlvbi5tZXRhLnJlamVjdGVkV2l0aFZhbHVlKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLnBheWxvYWQ7XHJcbiAgICB9XHJcbiAgICBpZiAoYWN0aW9uLmVycm9yKSB7XHJcbiAgICAgICAgdGhyb3cgYWN0aW9uLmVycm9yO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkO1xyXG59XHJcbmZ1bmN0aW9uIGlzVGhlbmFibGUodmFsdWUpIHtcclxuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG4vLyBzcmMvdHNIZWxwZXJzLnRzXHJcbnZhciBoYXNNYXRjaEZ1bmN0aW9uID0gZnVuY3Rpb24gKHYpIHtcclxuICAgIHJldHVybiB2ICYmIHR5cGVvZiB2Lm1hdGNoID09PSBcImZ1bmN0aW9uXCI7XHJcbn07XHJcbi8vIHNyYy9tYXRjaGVycy50c1xyXG52YXIgbWF0Y2hlcyA9IGZ1bmN0aW9uIChtYXRjaGVyLCBhY3Rpb24pIHtcclxuICAgIGlmIChoYXNNYXRjaEZ1bmN0aW9uKG1hdGNoZXIpKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXIubWF0Y2goYWN0aW9uKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBtYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIGlzQW55T2YoKSB7XHJcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbWF0Y2hlcnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzLnNvbWUoZnVuY3Rpb24gKG1hdGNoZXIpIHsgcmV0dXJuIG1hdGNoZXMobWF0Y2hlciwgYWN0aW9uKTsgfSk7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzQWxsT2YoKSB7XHJcbiAgICB2YXIgbWF0Y2hlcnMgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgbWF0Y2hlcnNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIG1hdGNoZXJzLmV2ZXJ5KGZ1bmN0aW9uIChtYXRjaGVyKSB7IHJldHVybiBtYXRjaGVzKG1hdGNoZXIsIGFjdGlvbik7IH0pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIHZhbGlkU3RhdHVzKSB7XHJcbiAgICBpZiAoIWFjdGlvbiB8fCAhYWN0aW9uLm1ldGEpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgdmFyIGhhc1ZhbGlkUmVxdWVzdElkID0gdHlwZW9mIGFjdGlvbi5tZXRhLnJlcXVlc3RJZCA9PT0gXCJzdHJpbmdcIjtcclxuICAgIHZhciBoYXNWYWxpZFJlcXVlc3RTdGF0dXMgPSB2YWxpZFN0YXR1cy5pbmRleE9mKGFjdGlvbi5tZXRhLnJlcXVlc3RTdGF0dXMpID4gLTE7XHJcbiAgICByZXR1cm4gaGFzVmFsaWRSZXF1ZXN0SWQgJiYgaGFzVmFsaWRSZXF1ZXN0U3RhdHVzO1xyXG59XHJcbmZ1bmN0aW9uIGlzQXN5bmNUaHVua0FycmF5KGEpIHtcclxuICAgIHJldHVybiB0eXBlb2YgYVswXSA9PT0gXCJmdW5jdGlvblwiICYmIFwicGVuZGluZ1wiIGluIGFbMF0gJiYgXCJmdWxmaWxsZWRcIiBpbiBhWzBdICYmIFwicmVqZWN0ZWRcIiBpbiBhWzBdO1xyXG59XHJcbmZ1bmN0aW9uIGlzUGVuZGluZygpIHtcclxuICAgIHZhciBhc3luY1RodW5rcyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBhc3luY1RodW5rc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBoYXNFeHBlY3RlZFJlcXVlc3RNZXRhZGF0YShhY3Rpb24sIFtcInBlbmRpbmdcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNQZW5kaW5nKCkoYXN5bmNUaHVua3NbMF0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcclxuICAgICAgICB2YXIgbWF0Y2hlcnMgPSBhc3luY1RodW5rcy5tYXAoZnVuY3Rpb24gKGFzeW5jVGh1bmspIHsgcmV0dXJuIGFzeW5jVGh1bmsucGVuZGluZzsgfSk7XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBpc1JlamVjdGVkKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicmVqZWN0ZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNSZWplY3RlZCgpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gYXN5bmNUaHVua3MubWFwKGZ1bmN0aW9uIChhc3luY1RodW5rKSB7IHJldHVybiBhc3luY1RodW5rLnJlamVjdGVkOyB9KTtcclxuICAgICAgICB2YXIgY29tYmluZWRNYXRjaGVyID0gaXNBbnlPZi5hcHBseSh2b2lkIDAsIG1hdGNoZXJzKTtcclxuICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIHZhciBoYXNGbGFnID0gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHJldHVybiBhY3Rpb24gJiYgYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEucmVqZWN0ZWRXaXRoVmFsdWU7XHJcbiAgICB9O1xyXG4gICAgaWYgKGFzeW5jVGh1bmtzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xyXG4gICAgICAgICAgICByZXR1cm4gY29tYmluZWRNYXRjaGVyKGFjdGlvbik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzUmVqZWN0ZWRXaXRoVmFsdWUoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FsbE9mKGlzUmVqZWN0ZWQuYXBwbHkodm9pZCAwLCBhc3luY1RodW5rcyksIGhhc0ZsYWcpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNGdWxmaWxsZWQoKSB7XHJcbiAgICB2YXIgYXN5bmNUaHVua3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXN5bmNUaHVua3NbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgIH1cclxuICAgIGlmIChhc3luY1RodW5rcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikgeyByZXR1cm4gaGFzRXhwZWN0ZWRSZXF1ZXN0TWV0YWRhdGEoYWN0aW9uLCBbXCJmdWxmaWxsZWRcIl0pOyB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFpc0FzeW5jVGh1bmtBcnJheShhc3luY1RodW5rcykpIHtcclxuICAgICAgICByZXR1cm4gaXNGdWxmaWxsZWQoKShhc3luY1RodW5rc1swXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIHZhciBtYXRjaGVycyA9IGFzeW5jVGh1bmtzLm1hcChmdW5jdGlvbiAoYXN5bmNUaHVuaykgeyByZXR1cm4gYXN5bmNUaHVuay5mdWxmaWxsZWQ7IH0pO1xyXG4gICAgICAgIHZhciBjb21iaW5lZE1hdGNoZXIgPSBpc0FueU9mLmFwcGx5KHZvaWQgMCwgbWF0Y2hlcnMpO1xyXG4gICAgICAgIHJldHVybiBjb21iaW5lZE1hdGNoZXIoYWN0aW9uKTtcclxuICAgIH07XHJcbn1cclxuZnVuY3Rpb24gaXNBc3luY1RodW5rQWN0aW9uKCkge1xyXG4gICAgdmFyIGFzeW5jVGh1bmtzID0gW107XHJcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIGFzeW5jVGh1bmtzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICBpZiAoYXN5bmNUaHVua3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHsgcmV0dXJuIGhhc0V4cGVjdGVkUmVxdWVzdE1ldGFkYXRhKGFjdGlvbiwgW1wicGVuZGluZ1wiLCBcImZ1bGZpbGxlZFwiLCBcInJlamVjdGVkXCJdKTsgfTtcclxuICAgIH1cclxuICAgIGlmICghaXNBc3luY1RodW5rQXJyYXkoYXN5bmNUaHVua3MpKSB7XHJcbiAgICAgICAgcmV0dXJuIGlzQXN5bmNUaHVua0FjdGlvbigpKGFzeW5jVGh1bmtzWzBdKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoZXJzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBhc3luY1RodW5rc18xID0gYXN5bmNUaHVua3M7IF9pIDwgYXN5bmNUaHVua3NfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGFzeW5jVGh1bmsgPSBhc3luY1RodW5rc18xW19pXTtcclxuICAgICAgICAgICAgbWF0Y2hlcnMucHVzaChhc3luY1RodW5rLnBlbmRpbmcsIGFzeW5jVGh1bmsucmVqZWN0ZWQsIGFzeW5jVGh1bmsuZnVsZmlsbGVkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbWJpbmVkTWF0Y2hlciA9IGlzQW55T2YuYXBwbHkodm9pZCAwLCBtYXRjaGVycyk7XHJcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkTWF0Y2hlcihhY3Rpb24pO1xyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL3V0aWxzLnRzXHJcbnZhciBhc3NlcnRGdW5jdGlvbiA9IGZ1bmN0aW9uIChmdW5jLCBleHBlY3RlZCkge1xyXG4gICAgaWYgKHR5cGVvZiBmdW5jICE9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGV4cGVjdGVkICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XHJcbiAgICB9XHJcbn07XHJcbnZhciBub29wID0gZnVuY3Rpb24gKCkge1xyXG59O1xyXG52YXIgY2F0Y2hSZWplY3Rpb24gPSBmdW5jdGlvbiAocHJvbWlzZSwgb25FcnJvcikge1xyXG4gICAgaWYgKG9uRXJyb3IgPT09IHZvaWQgMCkgeyBvbkVycm9yID0gbm9vcDsgfVxyXG4gICAgcHJvbWlzZS5jYXRjaChvbkVycm9yKTtcclxuICAgIHJldHVybiBwcm9taXNlO1xyXG59O1xyXG52YXIgYWRkQWJvcnRTaWduYWxMaXN0ZW5lciA9IGZ1bmN0aW9uIChhYm9ydFNpZ25hbCwgY2FsbGJhY2spIHtcclxuICAgIGFib3J0U2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBjYWxsYmFjaywgeyBvbmNlOiB0cnVlIH0pO1xyXG59O1xyXG52YXIgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbiA9IGZ1bmN0aW9uIChhYm9ydENvbnRyb2xsZXIsIHJlYXNvbikge1xyXG4gICAgdmFyIHNpZ25hbCA9IGFib3J0Q29udHJvbGxlci5zaWduYWw7XHJcbiAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIShcInJlYXNvblwiIGluIHNpZ25hbCkpIHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc2lnbmFsLCBcInJlYXNvblwiLCB7XHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIHZhbHVlOiByZWFzb24sXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIDtcclxuICAgIGFib3J0Q29udHJvbGxlci5hYm9ydChyZWFzb24pO1xyXG59O1xyXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL2V4Y2VwdGlvbnMudHNcclxudmFyIHRhc2sgPSBcInRhc2tcIjtcclxudmFyIGxpc3RlbmVyID0gXCJsaXN0ZW5lclwiO1xyXG52YXIgY29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcclxudmFyIGNhbmNlbGxlZCA9IFwiY2FuY2VsbGVkXCI7XHJcbnZhciB0YXNrQ2FuY2VsbGVkID0gXCJ0YXNrLVwiICsgY2FuY2VsbGVkO1xyXG52YXIgdGFza0NvbXBsZXRlZCA9IFwidGFzay1cIiArIGNvbXBsZXRlZDtcclxudmFyIGxpc3RlbmVyQ2FuY2VsbGVkID0gbGlzdGVuZXIgKyBcIi1cIiArIGNhbmNlbGxlZDtcclxudmFyIGxpc3RlbmVyQ29tcGxldGVkID0gbGlzdGVuZXIgKyBcIi1cIiArIGNvbXBsZXRlZDtcclxudmFyIFRhc2tBYm9ydEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gVGFza0Fib3J0RXJyb3IoY29kZSkge1xyXG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gXCJUYXNrQWJvcnRFcnJvclwiO1xyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IHRhc2sgKyBcIiBcIiArIGNhbmNlbGxlZCArIFwiIChyZWFzb246IFwiICsgY29kZSArIFwiKVwiO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFRhc2tBYm9ydEVycm9yO1xyXG59KCkpO1xyXG4vLyBzcmMvbGlzdGVuZXJNaWRkbGV3YXJlL3Rhc2sudHNcclxudmFyIHZhbGlkYXRlQWN0aXZlID0gZnVuY3Rpb24gKHNpZ25hbCkge1xyXG4gICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFRhc2tBYm9ydEVycm9yKHNpZ25hbC5yZWFzb24pO1xyXG4gICAgfVxyXG59O1xyXG52YXIgcHJvbWlzaWZ5QWJvcnRTaWduYWwgPSBmdW5jdGlvbiAoc2lnbmFsKSB7XHJcbiAgICByZXR1cm4gY2F0Y2hSZWplY3Rpb24obmV3IFByb21pc2UoZnVuY3Rpb24gKF8sIHJlamVjdCkge1xyXG4gICAgICAgIHZhciBub3RpZnlSZWplY3Rpb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZWplY3QobmV3IFRhc2tBYm9ydEVycm9yKHNpZ25hbC5yZWFzb24pKTsgfTtcclxuICAgICAgICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcclxuICAgICAgICAgICAgbm90aWZ5UmVqZWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBhZGRBYm9ydFNpZ25hbExpc3RlbmVyKHNpZ25hbCwgbm90aWZ5UmVqZWN0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9KSk7XHJcbn07XHJcbnZhciBydW5UYXNrID0gZnVuY3Rpb24gKHRhc2syLCBjbGVhblVwKSB7IHJldHVybiBfX2FzeW5jKHZvaWQgMCwgbnVsbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHZhbHVlLCBlcnJvcl8xO1xyXG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFswLCAzLCA0LCA1XSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLnJlc29sdmUoKV07XHJcbiAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRhc2syKCldO1xyXG4gICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogXCJva1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgZXJyb3JfMSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogZXJyb3JfMSBpbnN0YW5jZW9mIFRhc2tBYm9ydEVycm9yID8gXCJjYW5jZWxsZWRcIiA6IFwicmVqZWN0ZWRcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yXzFcclxuICAgICAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgY2xlYW5VcCA9PSBudWxsID8gdm9pZCAwIDogY2xlYW5VcCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcclxuICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0pOyB9O1xyXG52YXIgY3JlYXRlUGF1c2UgPSBmdW5jdGlvbiAoc2lnbmFsKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHByb21pc2UpIHtcclxuICAgICAgICByZXR1cm4gY2F0Y2hSZWplY3Rpb24oUHJvbWlzZS5yYWNlKFtwcm9taXNpZnlBYm9ydFNpZ25hbChzaWduYWwpLCBwcm9taXNlXSkudGhlbihmdW5jdGlvbiAob3V0cHV0KSB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XHJcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfTtcclxufTtcclxudmFyIGNyZWF0ZURlbGF5ID0gZnVuY3Rpb24gKHNpZ25hbCkge1xyXG4gICAgdmFyIHBhdXNlID0gY3JlYXRlUGF1c2Uoc2lnbmFsKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGltZW91dE1zKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhdXNlKG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWVvdXRNcyk7IH0pKTtcclxuICAgIH07XHJcbn07XHJcbi8vIHNyYy9saXN0ZW5lck1pZGRsZXdhcmUvaW5kZXgudHNcclxudmFyIGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XHJcbnZhciBJTlRFUk5BTF9OSUxfVE9LRU4gPSB7fTtcclxudmFyIGFsbSA9IFwibGlzdGVuZXJNaWRkbGV3YXJlXCI7XHJcbnZhciBjcmVhdGVGb3JrID0gZnVuY3Rpb24gKHBhcmVudEFib3J0U2lnbmFsKSB7XHJcbiAgICB2YXIgbGlua0NvbnRyb2xsZXJzID0gZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHsgcmV0dXJuIGFkZEFib3J0U2lnbmFsTGlzdGVuZXIocGFyZW50QWJvcnRTaWduYWwsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgcGFyZW50QWJvcnRTaWduYWwucmVhc29uKTsgfSk7IH07XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhc2tFeGVjdXRvcikge1xyXG4gICAgICAgIGFzc2VydEZ1bmN0aW9uKHRhc2tFeGVjdXRvciwgXCJ0YXNrRXhlY3V0b3JcIik7XHJcbiAgICAgICAgdmFyIGNoaWxkQWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgIGxpbmtDb250cm9sbGVycyhjaGlsZEFib3J0Q29udHJvbGxlcik7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJ1blRhc2soZnVuY3Rpb24gKCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdDI7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHBhcmVudEFib3J0U2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGFza0V4ZWN1dG9yKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2UoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogY3JlYXRlRGVsYXkoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWw6IGNoaWxkQWJvcnRDb250cm9sbGVyLnNpZ25hbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0MiA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVBY3RpdmUoY2hpbGRBYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc3VsdDJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NvbXBsZXRlZCk7IH0pO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3VsdDogY3JlYXRlUGF1c2UocGFyZW50QWJvcnRTaWduYWwpKHJlc3VsdCksXHJcbiAgICAgICAgICAgIGNhbmNlbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgYWJvcnRDb250cm9sbGVyV2l0aFJlYXNvbihjaGlsZEFib3J0Q29udHJvbGxlciwgdGFza0NhbmNlbGxlZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufTtcclxudmFyIGNyZWF0ZVRha2VQYXR0ZXJuID0gZnVuY3Rpb24gKHN0YXJ0TGlzdGVuaW5nLCBzaWduYWwpIHtcclxuICAgIHZhciB0YWtlID0gZnVuY3Rpb24gKHByZWRpY2F0ZSwgdGltZW91dCkgeyByZXR1cm4gX19hc3luYyh2b2lkIDAsIG51bGwsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdW5zdWJzY3JpYmUsIHR1cGxlUHJvbWlzZSwgcHJvbWlzZXMsIG91dHB1dDtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZUFjdGl2ZShzaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdHVwbGVQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUgPSBzdGFydExpc3RlbmluZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVkaWNhdGU6IHByZWRpY2F0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVmZmVjdDogZnVuY3Rpb24gKGFjdGlvbiwgbGlzdGVuZXJBcGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lckFwaS51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyQXBpLmdldFN0YXRlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyQXBpLmdldE9yaWdpbmFsU3RhdGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlcyA9IFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzaWZ5QWJvcnRTaWduYWwoc2lnbmFsKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHVwbGVQcm9taXNlXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZW91dCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmV0dXJuIHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZW91dCwgbnVsbCk7IH0pKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMSwgLCAzLCA0XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5yYWNlKHByb21pc2VzKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRlQWN0aXZlKHNpZ25hbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG91dHB1dF07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcmVkaWNhdGUsIHRpbWVvdXQpIHsgcmV0dXJuIGNhdGNoUmVqZWN0aW9uKHRha2UocHJlZGljYXRlLCB0aW1lb3V0KSk7IH07XHJcbn07XHJcbnZhciBnZXRMaXN0ZW5lckVudHJ5UHJvcHNGcm9tID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgIHZhciB0eXBlID0gb3B0aW9ucy50eXBlLCBhY3Rpb25DcmVhdG9yID0gb3B0aW9ucy5hY3Rpb25DcmVhdG9yLCBtYXRjaGVyID0gb3B0aW9ucy5tYXRjaGVyLCBwcmVkaWNhdGUgPSBvcHRpb25zLnByZWRpY2F0ZSwgZWZmZWN0ID0gb3B0aW9ucy5lZmZlY3Q7XHJcbiAgICBpZiAodHlwZSkge1xyXG4gICAgICAgIHByZWRpY2F0ZSA9IGNyZWF0ZUFjdGlvbih0eXBlKS5tYXRjaDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGFjdGlvbkNyZWF0b3IpIHtcclxuICAgICAgICB0eXBlID0gYWN0aW9uQ3JlYXRvci50eXBlO1xyXG4gICAgICAgIHByZWRpY2F0ZSA9IGFjdGlvbkNyZWF0b3IubWF0Y2g7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChtYXRjaGVyKSB7XHJcbiAgICAgICAgcHJlZGljYXRlID0gbWF0Y2hlcjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHByZWRpY2F0ZSkge1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ3JlYXRpbmcgb3IgcmVtb3ZpbmcgYSBsaXN0ZW5lciByZXF1aXJlcyBvbmUgb2YgdGhlIGtub3duIGZpZWxkcyBmb3IgbWF0Y2hpbmcgYW4gYWN0aW9uXCIpO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0RnVuY3Rpb24oZWZmZWN0LCBcIm9wdGlvbnMubGlzdGVuZXJcIik7XHJcbiAgICByZXR1cm4geyBwcmVkaWNhdGU6IHByZWRpY2F0ZSwgdHlwZTogdHlwZSwgZWZmZWN0OiBlZmZlY3QgfTtcclxufTtcclxudmFyIGNyZWF0ZUxpc3RlbmVyRW50cnkgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgdmFyIF9jID0gZ2V0TGlzdGVuZXJFbnRyeVByb3BzRnJvbShvcHRpb25zKSwgdHlwZSA9IF9jLnR5cGUsIHByZWRpY2F0ZSA9IF9jLnByZWRpY2F0ZSwgZWZmZWN0ID0gX2MuZWZmZWN0O1xyXG4gICAgdmFyIGlkID0gbmFub2lkKCk7XHJcbiAgICB2YXIgZW50cnkgPSB7XHJcbiAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgIGVmZmVjdDogZWZmZWN0LFxyXG4gICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgcHJlZGljYXRlOiBwcmVkaWNhdGUsXHJcbiAgICAgICAgcGVuZGluZzogbmV3IFNldCgpLFxyXG4gICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3Vic2NyaWJlIG5vdCBpbml0aWFsaXplZFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGVudHJ5O1xyXG59O1xyXG52YXIgY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUgPSBmdW5jdGlvbiAobGlzdGVuZXJNYXApIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgbGlzdGVuZXJNYXAuZm9yRWFjaChjYW5jZWxBY3RpdmVMaXN0ZW5lcnMpO1xyXG4gICAgICAgIGxpc3RlbmVyTWFwLmNsZWFyKCk7XHJcbiAgICB9O1xyXG59O1xyXG52YXIgc2FmZWx5Tm90aWZ5RXJyb3IgPSBmdW5jdGlvbiAoZXJyb3JIYW5kbGVyLCBlcnJvclRvTm90aWZ5LCBlcnJvckluZm8pIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgZXJyb3JIYW5kbGVyKGVycm9yVG9Ob3RpZnksIGVycm9ySW5mbyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3JIYW5kbGVyRXJyb3IpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhyb3cgZXJyb3JIYW5kbGVyRXJyb3I7XHJcbiAgICAgICAgfSwgMCk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBhZGRMaXN0ZW5lciA9IGNyZWF0ZUFjdGlvbihhbG0gKyBcIi9hZGRcIik7XHJcbnZhciBjbGVhckFsbExpc3RlbmVycyA9IGNyZWF0ZUFjdGlvbihhbG0gKyBcIi9yZW1vdmVBbGxcIik7XHJcbnZhciByZW1vdmVMaXN0ZW5lciA9IGNyZWF0ZUFjdGlvbihhbG0gKyBcIi9yZW1vdmVcIik7XHJcbnZhciBkZWZhdWx0RXJyb3JIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgfVxyXG4gICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBfX3NwcmVhZEFycmF5KFthbG0gKyBcIi9lcnJvclwiXSwgYXJncykpO1xyXG59O1xyXG52YXIgY2FuY2VsQWN0aXZlTGlzdGVuZXJzID0gZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICBlbnRyeS5wZW5kaW5nLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xsZXIpIHtcclxuICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGNvbnRyb2xsZXIsIGxpc3RlbmVyQ2FuY2VsbGVkKTtcclxuICAgIH0pO1xyXG59O1xyXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lck1pZGRsZXdhcmUobWlkZGxld2FyZU9wdGlvbnMpIHtcclxuICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICBpZiAobWlkZGxld2FyZU9wdGlvbnMgPT09IHZvaWQgMCkgeyBtaWRkbGV3YXJlT3B0aW9ucyA9IHt9OyB9XHJcbiAgICB2YXIgbGlzdGVuZXJNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICB2YXIgZXh0cmEgPSBtaWRkbGV3YXJlT3B0aW9ucy5leHRyYSwgX2MgPSBtaWRkbGV3YXJlT3B0aW9ucy5vbkVycm9yLCBvbkVycm9yID0gX2MgPT09IHZvaWQgMCA/IGRlZmF1bHRFcnJvckhhbmRsZXIgOiBfYztcclxuICAgIGFzc2VydEZ1bmN0aW9uKG9uRXJyb3IsIFwib25FcnJvclwiKTtcclxuICAgIHZhciBpbnNlcnRFbnRyeSA9IGZ1bmN0aW9uIChlbnRyeSkge1xyXG4gICAgICAgIGVudHJ5LnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbGlzdGVuZXJNYXAuZGVsZXRlKGVudHJ5LmlkKTsgfTtcclxuICAgICAgICBsaXN0ZW5lck1hcC5zZXQoZW50cnkuaWQsIGVudHJ5KTtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNhbmNlbE9wdGlvbnMpIHtcclxuICAgICAgICAgICAgZW50cnkudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgaWYgKGNhbmNlbE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IGNhbmNlbE9wdGlvbnMuY2FuY2VsQWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBjYW5jZWxBY3RpdmVMaXN0ZW5lcnMoZW50cnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICB2YXIgZmluZExpc3RlbmVyRW50cnkgPSBmdW5jdGlvbiAoY29tcGFyYXRvcikge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2MgPSBBcnJheS5mcm9tKGxpc3RlbmVyTWFwLnZhbHVlcygpKTsgX2kgPCBfYy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIGVudHJ5ID0gX2NbX2ldO1xyXG4gICAgICAgICAgICBpZiAoY29tcGFyYXRvcihlbnRyeSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbnRyeTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdm9pZCAwO1xyXG4gICAgfTtcclxuICAgIHZhciBzdGFydExpc3RlbmluZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGVudHJ5ID0gZmluZExpc3RlbmVyRW50cnkoZnVuY3Rpb24gKGV4aXN0aW5nRW50cnkpIHsgcmV0dXJuIGV4aXN0aW5nRW50cnkuZWZmZWN0ID09PSBvcHRpb25zLmVmZmVjdDsgfSk7XHJcbiAgICAgICAgaWYgKCFlbnRyeSkge1xyXG4gICAgICAgICAgICBlbnRyeSA9IGNyZWF0ZUxpc3RlbmVyRW50cnkob3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpbnNlcnRFbnRyeShlbnRyeSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIHN0b3BMaXN0ZW5pbmcgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfYyA9IGdldExpc3RlbmVyRW50cnlQcm9wc0Zyb20ob3B0aW9ucyksIHR5cGUgPSBfYy50eXBlLCBlZmZlY3QgPSBfYy5lZmZlY3QsIHByZWRpY2F0ZSA9IF9jLnByZWRpY2F0ZTtcclxuICAgICAgICB2YXIgZW50cnkgPSBmaW5kTGlzdGVuZXJFbnRyeShmdW5jdGlvbiAoZW50cnkyKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRjaFByZWRpY2F0ZU9yVHlwZSA9IHR5cGVvZiB0eXBlID09PSBcInN0cmluZ1wiID8gZW50cnkyLnR5cGUgPT09IHR5cGUgOiBlbnRyeTIucHJlZGljYXRlID09PSBwcmVkaWNhdGU7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaFByZWRpY2F0ZU9yVHlwZSAmJiBlbnRyeTIuZWZmZWN0ID09PSBlZmZlY3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGVudHJ5KSB7XHJcbiAgICAgICAgICAgIGVudHJ5LnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNhbmNlbEFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzKGVudHJ5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gISFlbnRyeTtcclxuICAgIH07XHJcbiAgICB2YXIgbm90aWZ5TGlzdGVuZXIgPSBmdW5jdGlvbiAoZW50cnksIGFjdGlvbiwgYXBpLCBnZXRPcmlnaW5hbFN0YXRlKSB7IHJldHVybiBfX2FzeW5jKF90aGlzLCBudWxsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGludGVybmFsVGFza0NvbnRyb2xsZXIsIHRha2UsIGxpc3RlbmVyRXJyb3JfMTtcclxuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBpbnRlcm5hbFRhc2tDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRha2UgPSBjcmVhdGVUYWtlUGF0dGVybihzdGFydExpc3RlbmluZywgaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzEsIDMsIDQsIDVdKTtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wZW5kaW5nLmFkZChpbnRlcm5hbFRhc2tDb250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLnJlc29sdmUoZW50cnkuZWZmZWN0KGFjdGlvbiwgYXNzaWduKHt9LCBhcGksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldE9yaWdpbmFsU3RhdGU6IGdldE9yaWdpbmFsU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb246IGZ1bmN0aW9uIChwcmVkaWNhdGUsIHRpbWVvdXQpIHsgcmV0dXJuIHRha2UocHJlZGljYXRlLCB0aW1lb3V0KS50aGVuKEJvb2xlYW4pOyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFrZTogdGFrZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiBjcmVhdGVEZWxheShpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZTogY3JlYXRlUGF1c2UoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsOiBpbnRlcm5hbFRhc2tDb250cm9sbGVyLnNpZ25hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcms6IGNyZWF0ZUZvcmsoaW50ZXJuYWxUYXNrQ29udHJvbGxlci5zaWduYWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGVudHJ5LnVuc3Vic2NyaWJlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJNYXAuc2V0KGVudHJ5LmlkLCBlbnRyeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsQWN0aXZlTGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50cnkucGVuZGluZy5mb3JFYWNoKGZ1bmN0aW9uIChjb250cm9sbGVyLCBfLCBzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIgIT09IGludGVybmFsVGFza0NvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0Q29udHJvbGxlcldpdGhSZWFzb24oY29udHJvbGxlciwgbGlzdGVuZXJDYW5jZWxsZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0LmRlbGV0ZShjb250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSkpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJFcnJvcl8xID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGxpc3RlbmVyRXJyb3JfMSBpbnN0YW5jZW9mIFRhc2tBYm9ydEVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWZlbHlOb3RpZnlFcnJvcihvbkVycm9yLCBsaXN0ZW5lckVycm9yXzEsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlZEJ5OiBcImVmZmVjdFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICBhYm9ydENvbnRyb2xsZXJXaXRoUmVhc29uKGludGVybmFsVGFza0NvbnRyb2xsZXIsIGxpc3RlbmVyQ29tcGxldGVkKTtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wZW5kaW5nLmRlbGV0ZShpbnRlcm5hbFRhc2tDb250cm9sbGVyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pOyB9O1xyXG4gICAgdmFyIGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlID0gY3JlYXRlQ2xlYXJMaXN0ZW5lck1pZGRsZXdhcmUobGlzdGVuZXJNYXApO1xyXG4gICAgdmFyIG1pZGRsZXdhcmUgPSBmdW5jdGlvbiAoYXBpKSB7IHJldHVybiBmdW5jdGlvbiAobmV4dCkgeyByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xyXG4gICAgICAgIGlmIChhZGRMaXN0ZW5lci5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdGFydExpc3RlbmluZyhhY3Rpb24ucGF5bG9hZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGVhckFsbExpc3RlbmVycy5tYXRjaChhY3Rpb24pKSB7XHJcbiAgICAgICAgICAgIGNsZWFyTGlzdGVuZXJNaWRkbGV3YXJlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlbW92ZUxpc3RlbmVyLm1hdGNoKGFjdGlvbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0b3BMaXN0ZW5pbmcoYWN0aW9uLnBheWxvYWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3JpZ2luYWxTdGF0ZSA9IGFwaS5nZXRTdGF0ZSgpO1xyXG4gICAgICAgIHZhciBnZXRPcmlnaW5hbFN0YXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAob3JpZ2luYWxTdGF0ZSA9PT0gSU5URVJOQUxfTklMX1RPS0VOKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYWxtICsgXCI6IGdldE9yaWdpbmFsU3RhdGUgY2FuIG9ubHkgYmUgY2FsbGVkIHN5bmNocm9ub3VzbHlcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsU3RhdGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IG5leHQoYWN0aW9uKTtcclxuICAgICAgICAgICAgaWYgKGxpc3RlbmVyTWFwLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFN0YXRlID0gYXBpLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJFbnRyaWVzID0gQXJyYXkuZnJvbShsaXN0ZW5lck1hcC52YWx1ZXMoKSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIGxpc3RlbmVyRW50cmllc18xID0gbGlzdGVuZXJFbnRyaWVzOyBfaSA8IGxpc3RlbmVyRW50cmllc18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGxpc3RlbmVyRW50cmllc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcnVuTGlzdGVuZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGVudHJ5LnByZWRpY2F0ZShhY3Rpb24sIGN1cnJlbnRTdGF0ZSwgb3JpZ2luYWxTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChwcmVkaWNhdGVFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5MaXN0ZW5lciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYWZlbHlOb3RpZnlFcnJvcihvbkVycm9yLCBwcmVkaWNhdGVFcnJvciwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpc2VkQnk6IFwicHJlZGljYXRlXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcnVuTGlzdGVuZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVyKGVudHJ5LCBhY3Rpb24sIGFwaSwgZ2V0T3JpZ2luYWxTdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7XHJcbiAgICAgICAgICAgIG9yaWdpbmFsU3RhdGUgPSBJTlRFUk5BTF9OSUxfVE9LRU47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9OyB9OyB9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBtaWRkbGV3YXJlOiBtaWRkbGV3YXJlLFxyXG4gICAgICAgIHN0YXJ0TGlzdGVuaW5nOiBzdGFydExpc3RlbmluZyxcclxuICAgICAgICBzdG9wTGlzdGVuaW5nOiBzdG9wTGlzdGVuaW5nLFxyXG4gICAgICAgIGNsZWFyTGlzdGVuZXJzOiBjbGVhckxpc3RlbmVyTWlkZGxld2FyZVxyXG4gICAgfTtcclxufVxyXG4vLyBzcmMvaW5kZXgudHNcclxuZW5hYmxlRVM1KCk7XHJcbmV4cG9ydCB7IE1pZGRsZXdhcmVBcnJheSwgVGFza0Fib3J0RXJyb3IsIGFkZExpc3RlbmVyLCBjbGVhckFsbExpc3RlbmVycywgY29uZmlndXJlU3RvcmUsIGNyZWF0ZUFjdGlvbiwgY3JlYXRlQXN5bmNUaHVuaywgY3JlYXRlRHJhZnRTYWZlU2VsZWN0b3IsIGNyZWF0ZUVudGl0eUFkYXB0ZXIsIGNyZWF0ZUltbXV0YWJsZVN0YXRlSW52YXJpYW50TWlkZGxld2FyZSwgY3JlYXRlTGlzdGVuZXJNaWRkbGV3YXJlLCBkZWZhdWx0MiBhcyBjcmVhdGVOZXh0U3RhdGUsIGNyZWF0ZVJlZHVjZXIsIGNyZWF0ZVNlbGVjdG9yMiBhcyBjcmVhdGVTZWxlY3RvciwgY3JlYXRlU2VyaWFsaXphYmxlU3RhdGVJbnZhcmlhbnRNaWRkbGV3YXJlLCBjcmVhdGVTbGljZSwgY3VycmVudDIgYXMgY3VycmVudCwgZmluZE5vblNlcmlhbGl6YWJsZVZhbHVlLCBmcmVlemUsIGdldERlZmF1bHRNaWRkbGV3YXJlLCBnZXRUeXBlLCBpc0FsbE9mLCBpc0FueU9mLCBpc0FzeW5jVGh1bmtBY3Rpb24sIGlzRHJhZnQ0IGFzIGlzRHJhZnQsIGlzRnVsZmlsbGVkLCBpc0ltbXV0YWJsZURlZmF1bHQsIGlzUGVuZGluZywgaXNQbGFpbiwgaXNQbGFpbk9iamVjdCwgaXNSZWplY3RlZCwgaXNSZWplY3RlZFdpdGhWYWx1ZSwgbWluaVNlcmlhbGl6ZUVycm9yLCBuYW5vaWQsIG9yaWdpbmFsLCByZW1vdmVMaXN0ZW5lciwgdW53cmFwUmVzdWx0IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZHV4LXRvb2xraXQuZXNtLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZVNsaWNlIH0gZnJvbSBcIkByZWR1eGpzL3Rvb2xraXRcIjtcclxuXHJcbmNvbnN0IGluaXRpYWxTb3J0U3RhdGUgPSB7XHJcbiAgc29ydFBhcmFtczogeyBvcmRlcjogXCJcIiwgb3JkZXJCeTogXCJcIiB9LFxyXG59O1xyXG5cclxuY29uc3Qgc29ydFNsaWNlID0gY3JlYXRlU2xpY2Uoe1xyXG4gIG5hbWU6IFwic29ydFwiLFxyXG4gIGluaXRpYWxTdGF0ZTogaW5pdGlhbFNvcnRTdGF0ZSxcclxuICByZWR1Y2Vyczoge1xyXG4gICAgc29ydChzdGF0ZSwgYWN0aW9uKSB7XHJcbiAgICAgIGNvbnN0IHsgY29sdW1uIH0gPSBhY3Rpb24ucGF5bG9hZDtcclxuICAgICAgY29uc3QgeyBzb3J0UGFyYW1zIH0gPSBzdGF0ZTtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIChzb3J0UGFyYW1zLm9yZGVyQnkgPT09IFwiXCIgJiYgc29ydFBhcmFtcy5vcmRlciA9PT0gXCJcIikgfHxcclxuICAgICAgICBjb2x1bW4gIT09IHNvcnRQYXJhbXMub3JkZXJCeVxyXG4gICAgICApIHtcclxuICAgICAgICBzdGF0ZS5zb3J0UGFyYW1zID0geyBvcmRlckJ5OiBjb2x1bW4sIG9yZGVyOiBcImFzY1wiIH07XHJcbiAgICAgIH0gZWxzZSBpZiAoc29ydFBhcmFtcy5vcmRlckJ5ID09PSBjb2x1bW4gJiYgc29ydFBhcmFtcy5vcmRlciA9PT0gXCJhc2NcIikge1xyXG4gICAgICAgIHN0YXRlLnNvcnRQYXJhbXMgPSB7IG9yZGVyQnk6IGNvbHVtbiwgb3JkZXI6IFwiZGVzY1wiIH07XHJcbiAgICAgIH0gZWxzZSBpZiAoc29ydFBhcmFtcy5vcmRlckJ5ID09PSBjb2x1bW4gJiYgc29ydFBhcmFtcy5vcmRlciA9PT0gXCJkZXNjXCIpIHtcclxuICAgICAgICBzdGF0ZS5zb3J0UGFyYW1zID0geyBvcmRlckJ5OiBcIlwiLCBvcmRlcjogXCJcIiB9O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNvcnRBY3Rpb25zID0gc29ydFNsaWNlLmFjdGlvbnM7XHJcbmV4cG9ydCBkZWZhdWx0IHNvcnRTbGljZS5yZWR1Y2VyO1xyXG4iLCJpbXBvcnQgc3R5bGVkIGZyb20gXCJzdHlsZWQtY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgQXJyb3dVcEljb24gZnJvbSBcIi4uL0NvbW1vbi9JY29ucy9BcnJvd1VwSWNvblwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0eWxlZFRhYmxlSGVhZGVyID0gc3R5bGVkLnRoYGA7XHJcblxyXG5leHBvcnQgY29uc3QgU3R5bGVkQXJyb3dDb250YWluZXIgPSBzdHlsZWQuZGl2PHtcclxuICAkaXNBc2NlbmRpbmc/OiBib29sZWFuO1xyXG4gICRpc1Zpc2libGU/OiBib29sZWFuO1xyXG59PmBcclxuICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC4ycyBlYXNlLWluO1xyXG4gIHRyYW5zZm9ybTogJHsoeyAkaXNBc2NlbmRpbmcgfSkgPT4gKCRpc0FzY2VuZGluZyA/IFwiXCIgOiBcInJvdGF0ZSgxODBkZWcpXCIpfTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgdmlzaWJpbGl0eTogJHsoeyAkaXNWaXNpYmxlIH0pID0+ICgkaXNWaXNpYmxlID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwiKX07IDtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTdHlsZWRBcnJvd1VwID0gc3R5bGVkKEFycm93VXBJY29uKTx7ICRpc0FzY2VuZGluZz86IGJvb2xlYW4gfT5gXHJcbiAgZm9udC1zaXplOiAxZW07XHJcbiAgaGVpZ2h0OiAxZW07XHJcbiAgd2lkdGg6IDFlbTtcclxuYDtcclxuXHJcbmV4cG9ydCBjb25zdCBTdHlsZWRUYWJsZSA9IHN0eWxlZC50YWJsZWBcclxubWFyZ2luLXRvcDogMjRweDtcclxuICBkaXNwbGF5OiBibG9jaztcclxuICBvdmVyZmxvdy15OiBhdXRvO1xyXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcclxuICBib3JkZXItc3BhY2luZzogMDtcclxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gIG1pbi1oZWlnaHQ6IDIwMHB4O1xyXG4gIG9wYWNpdHk6IDAuODtcclxuICBoZWlnaHQ6IDgwdmg7XHJcblxyXG4gIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcclxuICAgIHdpZHRoOiA4MCU7XHJcbiAgfVxyXG5cclxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OXB4KSB7XHJcbiAgICB3aWR0aDogNDB2dztcclxuICAgIG1heC13aWR0aDogNTAwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIHRib2R5IHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgZGlzcGxheTogdGFibGU7XHJcbiAgfVxyXG5cclxuICB0cjpsYXN0LWNoaWxkIHRkOmZpcnN0LWNoaWxkIHtcclxuICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDhweDtcclxuICB9XHJcbiAgdHI6bGFzdC1jaGlsZCB0ZDpsYXN0LWNoaWxkIHtcclxuICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA4cHg7XHJcbiAgfVxyXG5cclxuICB0cjpmaXJzdC1jaGlsZCB0aDpmaXJzdC1jaGlsZCB7XHJcbiAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA4cHg7XHJcbiAgfVxyXG4gIHRyOmZpcnN0LWNoaWxkIHRoOmxhc3QtY2hpbGQge1xyXG4gICAgYm9yZGVyLXRvcC1yaWdodC1yYWRpdXM6IDhweDtcclxuICB9XHJcbiAgdGgge1xyXG4gICAgcG9zaXRpb246IHN0aWNreTtcclxuICAgIHRvcDogMDtcclxuICAgIHBhZGRpbmc6IDAuNWVtO1xyXG4gICAgYmFja2dyb3VuZDogI2FhYWFhYTtcclxuICAgIGxpbmUtaGVpZ2h0OiAxLjVlbTtcclxuICAgIGRpdiB7XHJcbiAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHRyIHtcclxuICAgIGJhY2tncm91bmQ6ICNkYmRiZGI7XHJcbiAgICAmOmhvdmVyIHtcclxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Q3ZjBmZDtcclxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgfVxyXG4gICAgJjpub3QoOmZpcnN0LWNoaWxkKTpub3QoOmxhc3QtY2hpbGQpIHtcclxuICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNjY2NjY2M7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0ZCB7XHJcbiAgICBwYWRkaW5nOiAwLjI1ZW07XHJcbiAgfVxyXG5gO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcblxyXG5jb25zdCBBcnJvd1VwSWNvbiA9ICgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPHN2Z1xyXG4gICAgZGF0YS10ZXN0aWQ9J2Fycm93LWljb24nXHJcbiAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgICBoZWlnaHQ9XCIyNFwiXHJcbiAgICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxyXG4gICAgICB3aWR0aD1cIjI0XCJcclxuICAgICAgc3R5bGU9e3tcclxuICAgICAgICBmb250U2l6ZTogXCIxZW1cIixcclxuICAgICAgICB3aWR0aDogXCIxZW1cIixcclxuICAgICAgICBoZWlnaHQ6IFwiMWVtXCJcclxuICAgICAgfX1cclxuICAgID5cclxuICAgICAgPHBhdGggZD1cIk0wIDBoMjR2MjRIMFYwelwiIGZpbGw9XCJub25lXCIgLz5cclxuICAgICAgPHBhdGggZD1cIk00IDEybDEuNDEgMS40MUwxMSA3LjgzVjIwaDJWNy44M2w1LjU4IDUuNTlMMjAgMTJsLTgtOC04IDh6XCIgLz5cclxuICAgIDwvc3ZnPlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBBcnJvd1VwSWNvbjtcclxuIiwiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5cclxuY29uc3QgY2xpZW50ID0gYXhpb3MuY3JlYXRlKHsgYmFzZVVSTDogXCJodHRwczovL3BsYXlncm91bmQudGVzb25ldC5sdC92MVwiIH0pO1xyXG5cclxuY29uc3QgcmVxdWVzdCA9IGFzeW5jICh7IC4uLm9wdGlvbnMgfSkgPT4ge1xyXG4gIGNsaWVudC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gYEJlYXJlciAke3Nlc3Npb25TdG9yYWdlLmdldEl0ZW0oXHJcbiAgICBcInRva2VuXCJcclxuICApfWA7XHJcblxyXG4gIGNvbnN0IG9uU3VjY2VzcyA9IChyZXNwb25zZTogYW55KSA9PiByZXNwb25zZTtcclxuXHJcbiAgcmV0dXJuIGF3YWl0IGNsaWVudChvcHRpb25zKS50aGVuKG9uU3VjY2Vzcyk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCByZXF1ZXN0O1xyXG4iLCJpbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCI7XHJcbmltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSBcInJlYWN0LXF1ZXJ5XCI7XHJcbmltcG9ydCByZXF1ZXN0IGZyb20gXCIuLi91dGlscy9heGlvcy51dGlsc1wiO1xyXG5cclxuY29uc3QgZ2V0U2VydmVyTGlzdCA9IGFzeW5jICgpID0+IHtcclxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoeyBtZXRob2Q6IFwiR0VUXCIsIHVybDogXCIvc2VydmVyc1wiIH0pO1xyXG4gIHJldHVybiByZXNwb25zZS5kYXRhO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZUdldFNlcnZlckxpc3QgPSAoKSA9PiB7XHJcbiAgcmV0dXJuIHVzZVF1ZXJ5KFtcInNlcnZlci1saXN0XCJdLCAoKSA9PiBnZXRTZXJ2ZXJMaXN0KCkpO1xyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IHVzZURpc3BhdGNoLCB1c2VTZWxlY3RvciB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xyXG5pbXBvcnQgeyBJUm9vdFN0YXRlLCBJU29ydFBhcmFtcyB9IGZyb20gXCIuLi9zdG9yZS9yZWR1eFwiO1xyXG5pbXBvcnQgeyBzb3J0QWN0aW9ucyB9IGZyb20gXCIuLi9zdG9yZS9yZWR1eC9zb3J0XCI7XHJcbmltcG9ydCB7XHJcbiAgU3R5bGVkQXJyb3dDb250YWluZXIsXHJcbiAgU3R5bGVkQXJyb3dVcCxcclxuICBTdHlsZWRUYWJsZSxcclxuICBTdHlsZWRUYWJsZUhlYWRlcixcclxufSBmcm9tIFwiLi9TZXJ2ZXJMaXN0LnN0eWxlZFwiO1xyXG5pbXBvcnQgeyB1c2VHZXRTZXJ2ZXJMaXN0IH0gZnJvbSBcIi4vU2VydmVyTGlzdFNlcnZpY2VcIjtcclxuXHJcbmNvbnN0IHNvcnQgPSAob3JkZXI6IElTb3J0UGFyYW1zLCBkYXRhOiBhbnkpID0+IHtcclxuICBpZiAob3JkZXIub3JkZXJCeSA9PT0gXCJuYW1lXCIpIHtcclxuICAgIHJldHVybiBbLi4uZGF0YV0uc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICBpZiAob3JkZXIub3JkZXIgPT09IFwiYXNjXCIpIHtcclxuICAgICAgICByZXR1cm4gYS5uYW1lID4gYi5uYW1lID8gMSA6IC0xO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBhLm5hbWUgPiBiLm5hbWUgPyAtMSA6IDE7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaWYgKG9yZGVyLm9yZGVyQnkgPT09IFwiZGlzdGFuY2VcIikge1xyXG4gICAgcmV0dXJuIFsuLi5kYXRhXS5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgIGlmIChvcmRlci5vcmRlciA9PT0gXCJhc2NcIikge1xyXG4gICAgICAgIHJldHVybiBhLmRpc3RhbmNlIC0gYi5kaXN0YW5jZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYi5kaXN0YW5jZSAtIGEuZGlzdGFuY2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICByZXR1cm4gZGF0YTtcclxufTtcclxuXHJcbmNvbnN0IFNlcnZlckxpc3QgPSAoKSA9PiB7XHJcbiAgY29uc3QgeyBpc0xvYWRpbmcsIGRhdGEsIGlzRXJyb3IgfSA9IHVzZUdldFNlcnZlckxpc3QoKTtcclxuICBjb25zdCBzb3J0T3JkZXIgPSB1c2VTZWxlY3Rvcigoc3RhdGU6IElSb290U3RhdGUpID0+IHN0YXRlLnNvcnQuc29ydFBhcmFtcyk7XHJcbiAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpO1xyXG5cclxuICBpZiAoaXNMb2FkaW5nKSB7XHJcbiAgICByZXR1cm4gPGRpdj5Mb2FkaW5nPC9kaXY+O1xyXG4gIH1cclxuXHJcbiAgaWYgKGlzRXJyb3IpIHtcclxuICAgIHJldHVybiA8ZGl2PkVycm9yIG9jY3VycmVkPC9kaXY+O1xyXG4gIH1cclxuXHJcbiAgY29uc3QgdG9nZ2xlU29ydEhhbmRsZXIgPSAoY29sdW1uOiBzdHJpbmcpID0+IHtcclxuICAgIGRpc3BhdGNoKHNvcnRBY3Rpb25zLnNvcnQoeyBjb2x1bW4gfSkpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNvcnRlZERhdGEgPSBzb3J0KHNvcnRPcmRlciwgZGF0YSk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8U3R5bGVkVGFibGU+XHJcbiAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICA8U3R5bGVkVGFibGVIZWFkZXIgb25DbGljaz17KCkgPT4gdG9nZ2xlU29ydEhhbmRsZXIoXCJuYW1lXCIpfT5cclxuICAgICAgICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwibmFtZS1oZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuPk5hbWU8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8U3R5bGVkQXJyb3dDb250YWluZXJcclxuICAgICAgICAgICAgICAgICAgJGlzQXNjZW5kaW5nPXtzb3J0T3JkZXIub3JkZXIgPT09IFwiYXNjXCIgPyB0cnVlIDogZmFsc2V9XHJcbiAgICAgICAgICAgICAgICAgICRpc1Zpc2libGU9e3NvcnRPcmRlci5vcmRlckJ5ID09PSBcIm5hbWVcIn1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgPFN0eWxlZEFycm93VXAgLz5cclxuICAgICAgICAgICAgICAgIDwvU3R5bGVkQXJyb3dDb250YWluZXI+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvU3R5bGVkVGFibGVIZWFkZXI+XHJcbiAgICAgICAgICAgIDxTdHlsZWRUYWJsZUhlYWRlciBvbkNsaWNrPXsoKSA9PiB0b2dnbGVTb3J0SGFuZGxlcihcImRpc3RhbmNlXCIpfT5cclxuICAgICAgICAgICAgICA8ZGl2IGRhdGEtdGVzdGlkPVwiZGlzdGFuY2UtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj5EaXN0YW5jZTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxTdHlsZWRBcnJvd0NvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgICAkaXNBc2NlbmRpbmc9e3NvcnRPcmRlci5vcmRlciA9PT0gXCJhc2NcIiA/IHRydWUgOiBmYWxzZX1cclxuICAgICAgICAgICAgICAgICAgJGlzVmlzaWJsZT17c29ydE9yZGVyLm9yZGVyQnkgPT09IFwiZGlzdGFuY2VcIn1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgPFN0eWxlZEFycm93VXAgLz5cclxuICAgICAgICAgICAgICAgIDwvU3R5bGVkQXJyb3dDb250YWluZXI+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvU3R5bGVkVGFibGVIZWFkZXI+XHJcbiAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAge3NvcnRlZERhdGEubWFwKChzZXJ2ZXI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgIDx0ciBkYXRhLXRlc3RpZD17J2RhdGEtcm93J30ga2V5PXtzZXJ2ZXIubmFtZSArIHNlcnZlci5kaXN0YW5jZX0+XHJcbiAgICAgICAgICAgICAgICA8dGQ+e3NlcnZlci5uYW1lfTwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8dGQ+e3NlcnZlci5kaXN0YW5jZX08L3RkPlxyXG4gICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9KX1cclxuICAgICAgICA8L3Rib2R5PlxyXG4gICAgICA8L1N0eWxlZFRhYmxlPlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlcnZlckxpc3Q7XHJcbiIsImltcG9ydCBzdHlsZWQgZnJvbSBcInN0eWxlZC1jb21wb25lbnRzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgU3R5bGVkQmFja2dyb3VuZCA9IHN0eWxlZC5kaXZgXHJcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KC00NWRlZywgI2VlNzc1MiwgI2U3M2M3ZSwgIzIzYTZkNSwgIzIzZDVhYik7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIG92ZXJmbG93OiBhdXRvO1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0eWxlZFNlcnZlckxpc3RIZWFkZXIgPSBzdHlsZWQuaDFgXHJcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuICBmb250LWZhbWlseTogXCJDb3VyaWVyXCI7XHJcbiAgZm9udC1zaXplOiAycmVtO1xyXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgY29sb3I6ICM1ZTg3Yjg7XHJcbiAgd2lkdGg6IGZpdC1jb250ZW50O1xyXG5gO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0eWxlZFNlcnZlckxpc3RDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAvL2p1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG5gO1xyXG5cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBDYXJkIH0gZnJvbSBcIi4uLy4uL0NvbW1vbi9DYXJkL0NhcmRcIjtcclxuaW1wb3J0IFBhZ2VIZWFkZXIgZnJvbSBcIi4uLy4uL0NvbW1vbi9QYWdlSGVhZGVyL1BhZ2VIZWFkZXJcIjtcclxuaW1wb3J0IFNlcnZlckxpc3QgZnJvbSBcIi4uLy4uL1NlcnZlckxpc3QvU2VydmVyTGlzdFwiO1xyXG5pbXBvcnQge1xyXG4gIFN0eWxlZEJhY2tncm91bmQsIFN0eWxlZFNlcnZlckxpc3RDb250YWluZXIsXHJcbiAgU3R5bGVkU2VydmVyTGlzdEhlYWRlclxyXG59IGZyb20gXCIuL1NlcnZlckxpc3RQYWdlLnN0eWxlZFwiO1xyXG5cclxuY29uc3QgU2VydmVyTGlzdFBhZ2UgPSAoKSA9PiB7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8U3R5bGVkQmFja2dyb3VuZD5cclxuICAgICAgPFBhZ2VIZWFkZXIvPlxyXG4gICAgICA8U3R5bGVkU2VydmVyTGlzdENvbnRhaW5lcj5cclxuICAgICAgICB7LyogPENhcmQ+XHJcbiAgICAgICAgICA8U3R5bGVkU2VydmVyTGlzdEhlYWRlcj5TZXJ2ZXIgbGlzdDwvU3R5bGVkU2VydmVyTGlzdEhlYWRlcj5cclxuICAgICAgICA8L0NhcmQ+ICovfVxyXG4gICAgICAgIDxTZXJ2ZXJMaXN0IC8+XHJcblxyXG4gICAgICA8L1N0eWxlZFNlcnZlckxpc3RDb250YWluZXI+XHJcbiAgICA8L1N0eWxlZEJhY2tncm91bmQ+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlcnZlckxpc3RQYWdlO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7XHJcbiAgUm91dGUsXHJcbiAgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsXHJcbiAgUm91dGVzLFxyXG4gIE5hdmlnYXRlLFxyXG59IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcbmltcG9ydCBMb2dpblBhZ2UgZnJvbSBcIi4uL1BhZ2VzL0xvZ2luL0xvZ2luUGFnZVwiO1xyXG5pbXBvcnQgTG9nb3V0IGZyb20gXCIuLi9QYWdlcy9Mb2dvdXQvTG9nb3V0XCI7XHJcbmltcG9ydCBQcml2YXRlUm91dGUgZnJvbSBcIi4vUHJpdmF0ZVJvdXRlXCI7XHJcbmltcG9ydCBTZXJ2ZXJMaXN0UGFnZSBmcm9tIFwiLi4vUGFnZXMvU2VydmVyTGlzdC9TZXJ2ZXJMaXN0UGFnZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFwcFJvdXRlciA9ICgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPFJvdXRlciBiYXNlbmFtZT1cIi9cIj5cclxuICAgICAgPFJvdXRlcz5cclxuICAgICAgICA8Um91dGUgcGF0aD1cIi9cIiBlbGVtZW50PXs8TmF2aWdhdGUgdG89XCIvc2VydmVyLWxpc3RcIiByZXBsYWNlIC8+fSAvPlxyXG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL2xvZ2luXCIgZWxlbWVudD17PExvZ2luUGFnZSAvPn0gLz5cclxuICAgICAgICA8Um91dGUgZWxlbWVudD17PFByaXZhdGVSb3V0ZSAvPn0+XHJcbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9zZXJ2ZXItbGlzdFwiIGVsZW1lbnQ9ezxTZXJ2ZXJMaXN0UGFnZSAvPn0gLz5cclxuICAgICAgICA8L1JvdXRlPlxyXG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL2xvZ291dFwiIGVsZW1lbnQ9ezxMb2dvdXQgLz59IC8+XHJcbiAgICAgICAgPFJvdXRlIHBhdGg9XCIqXCIgZWxlbWVudD17PE5hdmlnYXRlIHRvPVwiL1wiIHJlcGxhY2UgLz59IC8+XHJcbiAgICAgIDwvUm91dGVzPlxyXG4gICAgPC9Sb3V0ZXI+XHJcbiAgKTtcclxufTtcclxuIiwiaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiO1xyXG5pbXBvcnQgUmVhY3QsIHsgUmVhY3ROb2RlLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgQXV0aENvbnRleHQgZnJvbSBcIi4vQXV0aENvbnRleHRcIjtcclxuXHJcbmludGVyZmFjZSBJQXV0aENvbnRleHRQcm92aWRlclByb3BzIHtcclxuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQXV0aENvbnRleHRQcm92aWRlciA9IChwcm9wczogSUF1dGhDb250ZXh0UHJvdmlkZXJQcm9wcykgPT4ge1xyXG4gIGNvbnN0IFt0b2tlbiwgc2V0VG9rZW5dID0gdXNlU3RhdGU8c3RyaW5nPihzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwidG9rZW5cIikpO1xyXG4gIGNvbnN0IFtsb2dpbkVycm9yLCBzZXRMb2dpbkVycm9yXSA9IHVzZVN0YXRlKCk7XHJcbiAgY29uc3QgaXNMb2dnZWRJbiA9ICEhdG9rZW47XHJcblxyXG4gIGNvbnN0IGxvZ2luID0gYXN5bmMgKHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IHtcclxuICAgIHNldExvZ2luRXJyb3IodW5kZWZpbmVkKTtcclxuICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgIHVzZXJuYW1lLFxyXG4gICAgICBwYXNzd29yZCxcclxuICAgIH07XHJcbiAgICBjb25zdCBjb25maWcgPSB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOFwiLFxyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICAgIGF3YWl0IGF4aW9zXHJcbiAgICAgIC5wb3N0KFwiaHR0cHM6Ly9wbGF5Z3JvdW5kLnRlc29uZXQubHQvdjEvdG9rZW5zXCIsIGRhdGEsIGNvbmZpZylcclxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJ0b2tlblwiLCByZXMuZGF0YS50b2tlbik7XHJcbiAgICAgICAgc2V0VG9rZW4ocmVzLmRhdGEudG9rZW4pO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgc2V0TG9naW5FcnJvcihlcnJvcik7XHJcbiAgICAgIH0pO1xyXG5cclxuICB9O1xyXG5cclxuICBjb25zdCBsb2dvdXQgPSAoKSA9PiB7XHJcbiAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFwidG9rZW5cIik7XHJcbiAgICBzZXRUb2tlbih1bmRlZmluZWQpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8QXV0aENvbnRleHQuUHJvdmlkZXJcclxuICAgICAgdmFsdWU9e3sgaXNMb2dnZWRJbiwgbG9naW4sIGxvZ291dCwgbG9naW5FcnJvciB9fVxyXG4gICAgPlxyXG4gICAgICB7cHJvcHMuY2hpbGRyZW59XHJcbiAgICA8L0F1dGhDb250ZXh0LlByb3ZpZGVyPlxyXG4gICk7XHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgUXVlcnlDbGllbnQsIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcXVlcnlcIjtcclxuaW1wb3J0IHsgR2xvYmFsU3R5bGUgfSBmcm9tIFwiLi9BcHAuc3R5bGVkXCI7XHJcbmltcG9ydCB7IEFwcFJvdXRlciB9IGZyb20gXCIuL1JvdXRpbmcvQXBwUm91dGVyXCI7XHJcbmltcG9ydCB7IEF1dGhDb250ZXh0UHJvdmlkZXIgfSBmcm9tIFwiLi9zdG9yZS9hdXRoL0F1dGhDb250ZXh0UHJvdmlkZXJcIjtcclxuXHJcbmNvbnN0IHF1ZXJ5Q2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KHtcclxuICBkZWZhdWx0T3B0aW9uczoge1xyXG4gICAgcXVlcmllczoge1xyXG4gICAgICByZWZldGNoT25XaW5kb3dGb2N1czogdHJ1ZSxcclxuICAgICAgcmVmZXRjaE9uTW91bnQ6IGZhbHNlLFxyXG4gICAgICByZWZldGNoT25SZWNvbm5lY3Q6IHRydWUsXHJcbiAgICAgIHJldHJ5OiAxLFxyXG4gICAgICBzdGFsZVRpbWU6IDMwMDAwLFxyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuXHJcbmNvbnN0IEFwcCA9ICgpID0+IHtcclxuICByZXR1cm4gKFxyXG4gICAgPEF1dGhDb250ZXh0UHJvdmlkZXI+XHJcbiAgICAgIDxRdWVyeUNsaWVudFByb3ZpZGVyIGNsaWVudD17cXVlcnlDbGllbnR9PlxyXG4gICAgICAgIDxHbG9iYWxTdHlsZSAvPlxyXG4gICAgICAgIDxBcHBSb3V0ZXIgLz5cclxuICAgICAgPC9RdWVyeUNsaWVudFByb3ZpZGVyPlxyXG4gICAgPC9BdXRoQ29udGV4dFByb3ZpZGVyPlxyXG4gICk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IEFwcDtcclxuIiwiaW1wb3J0IHsgY29uZmlndXJlU3RvcmUgfSBmcm9tIFwiQHJlZHV4anMvdG9vbGtpdFwiO1xyXG5pbXBvcnQgc29ydFJlZHVjZXIgZnJvbSBcIi4vc29ydFwiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJU29ydFBhcmFtcyB7XHJcbiAgb3JkZXJCeTogc3RyaW5nO1xyXG4gIG9yZGVyOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJvb3RTdGF0ZSB7XHJcbiAgc29ydDoge1xyXG4gICAgc29ydFBhcmFtczogSVNvcnRQYXJhbXM7XHJcbiAgfTtcclxufVxyXG5cclxuY29uc3Qgc29ydFN0b3JlID0gY29uZmlndXJlU3RvcmUoeyByZWR1Y2VyOiB7IHNvcnQ6IHNvcnRSZWR1Y2VyIH0gfSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzb3J0U3RvcmU7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XHJcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XHJcbmltcG9ydCBBcHAgZnJvbSBcIi4vQXBwXCI7XHJcbmltcG9ydCBzb3J0U3RvcmUgZnJvbSBcIi4vc3RvcmUvcmVkdXhcIjtcclxuXHJcbmNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSEpO1xyXG5yb290LnJlbmRlcihcclxuICA8UmVhY3QuU3RyaWN0TW9kZT5cclxuICAgIDxQcm92aWRlciBzdG9yZT17c29ydFN0b3JlfT5cclxuICAgICAgPEFwcCAvPlxyXG4gICAgPC9Qcm92aWRlcj5cclxuICA8L1JlYWN0LlN0cmljdE1vZGU+XHJcbik7XHJcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnO1xuaW1wb3J0IHsgY3JlYXRlU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcblxuZnVuY3Rpb24gUHJvdmlkZXIoe1xuICBzdG9yZSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHNlcnZlclN0YXRlXG59KSB7XG4gIGNvbnN0IGNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uLFxuICAgICAgZ2V0U2VydmVyU3RhdGU6IHNlcnZlclN0YXRlID8gKCkgPT4gc2VydmVyU3RhdGUgOiB1bmRlZmluZWRcbiAgICB9O1xuICB9LCBbc3RvcmUsIHNlcnZlclN0YXRlXSk7XG4gIGNvbnN0IHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKCgpID0+IHN0b3JlLmdldFN0YXRlKCksIFtzdG9yZV0pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzdWJzY3JpcHRpb25cbiAgICB9ID0gY29udGV4dFZhbHVlO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICBjb25zdCBDb250ZXh0ID0gY29udGV4dCB8fCBSZWFjdFJlZHV4Q29udGV4dDsgLy8gQHRzLWlnbm9yZSAnQW55QWN0aW9uJyBpcyBhc3NpZ25hYmxlIHRvIHRoZSBjb25zdHJhaW50IG9mIHR5cGUgJ0EnLCBidXQgJ0EnIGNvdWxkIGJlIGluc3RhbnRpYXRlZCB3aXRoIGEgZGlmZmVyZW50IHN1YnR5cGVcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm92aWRlcjsiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInV0aWxzIiwic2V0dGxlIiwiY29va2llcyIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsInRyYW5zaXRpb25hbERlZmF1bHRzIiwiQXhpb3NFcnJvciIsIkNhbmNlbGVkRXJyb3IiLCJwYXJzZVByb3RvY29sIiwiY29uZmlnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbkNhbmNlbGVkIiwicmVxdWVzdERhdGEiLCJkYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwicmVzcG9uc2VUeXBlIiwiZG9uZSIsImNhbmNlbFRva2VuIiwidW5zdWJzY3JpYmUiLCJzaWduYWwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNGb3JtRGF0YSIsImlzU3RhbmRhcmRCcm93c2VyRW52IiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiYXV0aCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwiZnVsbFBhdGgiLCJiYXNlVVJMIiwidXJsIiwib25sb2FkZW5kIiwicmVzcG9uc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2UiLCJyZXNwb25zZVRleHQiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwidmFsdWUiLCJlcnIiLCJvcGVuIiwibWV0aG9kIiwidG9VcHBlckNhc2UiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwidGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZXNwb25zZVVSTCIsImluZGV4T2YiLCJzZXRUaW1lb3V0Iiwib25hYm9ydCIsIkVDT05OQUJPUlRFRCIsIm9uZXJyb3IiLCJFUlJfTkVUV09SSyIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ0cmFuc2l0aW9uYWwiLCJjbGFyaWZ5VGltZW91dEVycm9yIiwiRVRJTUVET1VUIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwieHNyZkNvb2tpZU5hbWUiLCJyZWFkIiwidW5kZWZpbmVkIiwieHNyZkhlYWRlck5hbWUiLCJmb3JFYWNoIiwidmFsIiwia2V5IiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiaXNVbmRlZmluZWQiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJhZGRFdmVudExpc3RlbmVyIiwib25VcGxvYWRQcm9ncmVzcyIsInVwbG9hZCIsImNhbmNlbCIsInR5cGUiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJwcm90b2NvbCIsIkVSUl9CQURfUkVRVUVTVCIsInNlbmQiLCJiaW5kIiwiQXhpb3MiLCJtZXJnZUNvbmZpZyIsImF4aW9zIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsImluc3RhbmNlIiwicHJvdG90eXBlIiwiZXh0ZW5kIiwiY3JlYXRlIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiVkVSU0lPTiIsInRvRm9ybURhdGEiLCJDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJ0aGlzIiwicHJvbWlzZSIsInRva2VuIiwidGhlbiIsIl9saXN0ZW5lcnMiLCJpIiwibCIsImxlbmd0aCIsIm9uZnVsZmlsbGVkIiwiX3Jlc29sdmUiLCJtZXNzYWdlIiwicmVhc29uIiwidGhyb3dJZlJlcXVlc3RlZCIsImxpc3RlbmVyIiwicHVzaCIsImluZGV4Iiwic3BsaWNlIiwic291cmNlIiwiYyIsImNhbGwiLCJFUlJfQ0FOQ0VMRUQiLCJuYW1lIiwiaW5oZXJpdHMiLCJfX0NBTkNFTF9fIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwidmFsaWRhdG9yIiwidmFsaWRhdG9ycyIsImRlZmF1bHRzIiwiaW50ZXJjZXB0b3JzIiwiY29uZmlnT3JVcmwiLCJhc3NlcnRPcHRpb25zIiwic2lsZW50SlNPTlBhcnNpbmciLCJib29sZWFuIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiIsInN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyIsImludGVyY2VwdG9yIiwicnVuV2hlbiIsInN5bmNocm9ub3VzIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicmVzcG9uc2VJbnRlcmNlcHRvckNoYWluIiwiY2hhaW4iLCJBcnJheSIsImFwcGx5IiwiY29uY2F0Iiwic2hpZnQiLCJuZXdDb25maWciLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJlcnJvciIsImdldFVyaSIsImdlbmVyYXRlSFRUUE1ldGhvZCIsImlzRm9ybSIsImNvZGUiLCJFcnJvciIsInRvSlNPTiIsImRlc2NyaXB0aW9uIiwibnVtYmVyIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwic3RhY2siLCJkZXNjcmlwdG9ycyIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsImZyb20iLCJjdXN0b21Qcm9wcyIsImF4aW9zRXJyb3IiLCJ0b0ZsYXRPYmplY3QiLCJvYmoiLCJhc3NpZ24iLCJoYW5kbGVycyIsInVzZSIsIm9wdGlvbnMiLCJlamVjdCIsImlkIiwiZm4iLCJoIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwibWVyZ2UiLCJjb21tb24iLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwidGFyZ2V0IiwiaXNQbGFpbk9iamVjdCIsImlzQXJyYXkiLCJzbGljZSIsIm1lcmdlRGVlcFByb3BlcnRpZXMiLCJwcm9wIiwidmFsdWVGcm9tQ29uZmlnMiIsImRlZmF1bHRUb0NvbmZpZzIiLCJtZXJnZURpcmVjdEtleXMiLCJtZXJnZU1hcCIsImtleXMiLCJjb25maWdWYWx1ZSIsInZhbGlkYXRlU3RhdHVzIiwiRVJSX0JBRF9SRVNQT05TRSIsIk1hdGgiLCJmbG9vciIsImZucyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsInByb2Nlc3MiLCJ0b1N0cmluZyIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImlzU3RyZWFtIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJidWZmZXIiLCJpc1VSTFNlYXJjaFBhcmFtcyIsImlzRmlsZUxpc3QiLCJpc09iamVjdFBheWxvYWQiLCJpc09iamVjdCIsImNvbnRlbnRUeXBlIiwiX0Zvcm1EYXRhIiwiZW52IiwiRm9ybURhdGEiLCJyYXdWYWx1ZSIsInBhcnNlciIsImVuY29kZXIiLCJpc1N0cmluZyIsIkpTT04iLCJwYXJzZSIsInRyaW0iLCJlIiwic3RyaW5naWZ5Iiwic3RyaW5naWZ5U2FmZWx5Iiwic3RyaWN0SlNPTlBhcnNpbmciLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInRoaXNBcmciLCJhcmdzIiwiYXJndW1lbnRzIiwiZW5jb2RlIiwicmVwbGFjZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImpvaW4iLCJoYXNobWFya0luZGV4IiwicmVsYXRpdmVVUkwiLCJ3cml0ZSIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiaXNOdW1iZXIiLCJEYXRlIiwidG9HTVRTdHJpbmciLCJkb2N1bWVudCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93IiwidGVzdCIsInBheWxvYWQiLCJvcmlnaW5VUkwiLCJtc2llIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJjcmVhdGVFbGVtZW50IiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0Iiwid2luZG93IiwibG9jYXRpb24iLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwibm9ybWFsaXplZE5hbWUiLCJpZ25vcmVEdXBsaWNhdGVPZiIsInNwbGl0IiwibGluZSIsInN1YnN0ciIsImV4ZWMiLCJjYWxsYmFjayIsImFyciIsImZvcm1EYXRhIiwiY29udmVydFZhbHVlIiwiaXNUeXBlZEFycmF5IiwiQmxvYiIsIkJ1ZmZlciIsImJ1aWxkIiwicGFyZW50S2V5IiwiZnVsbEtleSIsImVuZHNXaXRoIiwidG9BcnJheSIsImVsIiwiYXBwZW5kIiwicG9wIiwidGhpbmciLCJkZXByZWNhdGVkV2FybmluZ3MiLCJ2ZXJzaW9uIiwiZm9ybWF0TWVzc2FnZSIsIm9wdCIsImRlc2MiLCJvcHRzIiwiRVJSX0RFUFJFQ0FURUQiLCJjb25zb2xlIiwid2FybiIsInNjaGVtYSIsImFsbG93VW5rbm93biIsIkVSUl9CQURfT1BUSU9OX1ZBTFVFIiwicmVzdWx0IiwiRVJSX0JBRF9PUFRJT04iLCJjYWNoZSIsImtpbmRPZiIsInN0ciIsImtpbmRPZlRlc3QiLCJnZXRQcm90b3R5cGVPZiIsImlzRnVuY3Rpb24iLCJoYXNPd25Qcm9wZXJ0eSIsIlR5cGVkQXJyYXkiLCJVaW50OEFycmF5IiwiY29uc3RydWN0b3IiLCJwYXR0ZXJuIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJwaXBlIiwicHJvZHVjdCIsImFzc2lnblZhbHVlIiwiYSIsImIiLCJzdHJpcEJPTSIsImNvbnRlbnQiLCJjaGFyQ29kZUF0Iiwic3VwZXJDb25zdHJ1Y3RvciIsInByb3BzIiwic291cmNlT2JqIiwiZGVzdE9iaiIsImZpbHRlciIsIm1lcmdlZCIsImdldE93blByb3BlcnR5TmFtZXMiLCJzZWFyY2hTdHJpbmciLCJwb3NpdGlvbiIsIlN0cmluZyIsImxhc3RJbmRleCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwiU3ltYm9sIiwiZm9yIiwiZCIsImYiLCJnIiwiayIsIm0iLCJuIiwicCIsInEiLCJyIiwidCIsInciLCJ4IiwieSIsInoiLCJ1IiwiJCR0eXBlb2YiLCJBIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRnJhZ21lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJhYSIsImNhIiwiZGEiLCJTZXQiLCJlYSIsImZhIiwiaGEiLCJhZGQiLCJpYSIsImphIiwia2EiLCJsYSIsIm1hIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJyYSIsInNhIiwidGEiLCJwYSIsImlzTmFOIiwicWEiLCJvYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwidWEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInZhIiwid2EiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJpdGVyYXRvciIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJwcmVwYXJlU3RhY2tUcmFjZSIsInNldCIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJpbmNsdWRlcyIsIlBhIiwidGFnIiwiUWEiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJSYSIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsImFiIiwiYmIiLCJjYiIsImRiIiwib3duZXJEb2N1bWVudCIsImViIiwiZmIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiZ2IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsImNoaWxkcmVuIiwiaGIiLCJpYiIsImpiIiwidGV4dENvbnRlbnQiLCJrYiIsImxiIiwibWIiLCJuYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJvYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicGIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicWIiLCJyYiIsInNiIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInN1YnN0cmluZyIsInRiIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidWIiLCJ2YiIsImlzIiwid2IiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJOYiIsIm9uRXJyb3IiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIlNiIiwiVGIiLCJWYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiV2IiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsIlhiIiwiWmIiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiWWIiLCIkYiIsImFjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImJjIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJjYyIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiZGMiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJCIiwidW5zdGFibGVfbm93IiwiZWMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImZjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJnYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiaGMiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImljIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJqYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImtjIiwibGMiLCJvYyIsImNsejMyIiwicGMiLCJxYyIsImxvZyIsIkxOMiIsInJjIiwic2MiLCJ0YyIsInVjIiwicGVuZGluZ0xhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInZjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJldmVudFRpbWVzIiwiQ2MiLCJDIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiTWFwIiwiUGMiLCJRYyIsIlJjIiwiU2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJUYyIsIm5hdGl2ZUV2ZW50IiwiYmxvY2tlZE9uIiwiZG9tRXZlbnROYW1lIiwiZXZlbnRTeXN0ZW1GbGFncyIsInRhcmdldENvbnRhaW5lcnMiLCJWYyIsIldjIiwicHJpb3JpdHkiLCJpc0RlaHlkcmF0ZWQiLCJjb250YWluZXJJbmZvIiwiWGMiLCJZYyIsImRpc3BhdGNoRXZlbnQiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJkZCIsImVkIiwidHJhbnNpdGlvbiIsImZkIiwiZ2QiLCJoZCIsIlVjIiwic3RvcFByb3BhZ2F0aW9uIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJRZCIsImZyb21DaGFyQ29kZSIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiUmQiLCJUZCIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlZkIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlhkIiwiWWQiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIlpkIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInJhbmdlIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIm5vZGUiLCJvZmZzZXQiLCJuZXh0U2libGluZyIsIkxlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk1lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiTmUiLCJjb250ZW50RWRpdGFibGUiLCJPZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJEIiwib2YiLCJoYXMiLCJwZiIsInFmIiwicmYiLCJyYW5kb20iLCJzZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwiSiIsIkYiLCJ0ZiIsInVmIiwicGFyZW50V2luZG93IiwidmYiLCJ3ZiIsIm5hIiwieGEiLCIkYSIsImJhIiwiamUiLCJjaGFyIiwia2UiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiX19odG1sIiwiRmYiLCJHZiIsImNsZWFyVGltZW91dCIsIkhmIiwiSmYiLCJxdWV1ZU1pY3JvdGFzayIsImNhdGNoIiwiSWYiLCJLZiIsIkxmIiwiTWYiLCJwcmV2aW91c1NpYmxpbmciLCJOZiIsIk9mIiwiUGYiLCJRZiIsIlJmIiwiU2YiLCJUZiIsIlVmIiwiRSIsIkciLCJWZiIsIkgiLCJXZiIsIlhmIiwiWWYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJaZiIsIiRmIiwiYWciLCJiZyIsImdldENoaWxkQ29udGV4dCIsImNnIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJJIiwiemciLCJBZyIsIkJnIiwiZWxlbWVudFR5cGUiLCJkZWxldGlvbnMiLCJDZyIsInBlbmRpbmdQcm9wcyIsIm92ZXJmbG93IiwidHJlZUNvbnRleHQiLCJyZXRyeUxhbmUiLCJEZyIsIm1vZGUiLCJFZyIsIkZnIiwiR2ciLCJtZW1vaXplZFByb3BzIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIl9jdXJyZW50VmFsdWUiLCJTZyIsImNoaWxkTGFuZXMiLCJUZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwiVWciLCJWZyIsIm1lbW9pemVkVmFsdWUiLCJuZXh0IiwiV2ciLCJYZyIsIllnIiwiaW50ZXJsZWF2ZWQiLCJaZyIsIiRnIiwiYWgiLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJiaCIsImNoIiwiZXZlbnRUaW1lIiwibGFuZSIsImRoIiwiSyIsImVoIiwiZmgiLCJnaCIsImhoIiwiaWgiLCJqaCIsIkNvbXBvbmVudCIsInJlZnMiLCJraCIsIm5oIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiTCIsImxoIiwibWgiLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwib2giLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInBoIiwic3RhdGUiLCJ1cGRhdGVyIiwicWgiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJyaCIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudERpZE1vdW50Iiwic2giLCJyZWYiLCJfb3duZXIiLCJfc3RyaW5nUmVmIiwidGgiLCJ1aCIsInZoIiwid2giLCJ4aCIsInloIiwiaW1wbGVtZW50YXRpb24iLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsInRhZ05hbWUiLCJKaCIsIktoIiwiTGgiLCJNIiwiTWgiLCJyZXZlYWxPcmRlciIsIk5oIiwiT2giLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsIlBoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlFoIiwiUmgiLCJOIiwiTyIsIlAiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIlEiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiYmFzZVF1ZXVlIiwicXVldWUiLCJkaSIsImVpIiwiZmkiLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiaGFzRWFnZXJTdGF0ZSIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImdldFNuYXBzaG90IiwibGkiLCJtaSIsIlIiLCJuaSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJvaSIsInBpIiwicWkiLCJyaSIsImRlc3Ryb3kiLCJkZXBzIiwic2kiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwiQmkiLCJDaSIsIkRpIiwiRWkiLCJGaSIsIkdpIiwiSGkiLCJJaSIsIkppIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlSW5zZXJ0aW9uRWZmZWN0IiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsInVzZURlYnVnVmFsdWUiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsInVzZU11dGFibGVTb3VyY2UiLCJ1c2VTeW5jRXh0ZXJuYWxTdG9yZSIsInVzZUlkIiwidW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyIiwiaWRlbnRpZmllclByZWZpeCIsIktpIiwiZGlnZXN0IiwiTGkiLCJNaSIsIk5pIiwiV2Vha01hcCIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJTaSIsImNvbXBvbmVudFN0YWNrIiwiVGkiLCJwaW5nQ2FjaGUiLCJVaSIsIlZpIiwiV2kiLCJYaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJiaiIsImNqIiwiZGoiLCJlaiIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsInRyYW5zaXRpb25zIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJqaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImtqIiwibGoiLCJwZW5kaW5nQ29udGV4dCIsIm1qIiwiQWoiLCJDaiIsIkRqIiwibmoiLCJvaiIsInBqIiwiZmFsbGJhY2siLCJxaiIsInJqIiwidGoiLCJkYXRhc2V0IiwiZGdzdCIsInVqIiwidmoiLCJfcmVhY3RSZXRyeSIsInNqIiwic3VidHJlZUZsYWdzIiwid2oiLCJ4aiIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsTW9kZSIsInlqIiwiRWoiLCJTIiwiRmoiLCJHaiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmciLCJvbkNsaWNrIiwib25jbGljayIsInNpemUiLCJjcmVhdGVFbGVtZW50TlMiLCJhdXRvRm9jdXMiLCJjcmVhdGVUZXh0Tm9kZSIsIlQiLCJIaiIsIklqIiwiSmoiLCJLaiIsIlUiLCJMaiIsIldlYWtTZXQiLCJWIiwiTWoiLCJXIiwiTmoiLCJPaiIsIlFqIiwiUmoiLCJTaiIsIlRqIiwiVWoiLCJWaiIsIldqIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlhqIiwiWCIsIllqIiwiWmoiLCJhayIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiaXNIaWRkZW4iLCJnayIsImhrIiwiZGlzcGxheSIsImlrIiwiamsiLCJrayIsImxrIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJzcmMiLCJXayIsIm1rIiwiY2VpbCIsIm5rIiwib2siLCJwayIsIlkiLCJaIiwicWsiLCJyayIsInNrIiwidGsiLCJ1ayIsIkluZmluaXR5IiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwiRWsiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJ3YyIsImNhbGxiYWNrUHJpb3JpdHkiLCJpZyIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsIk9rIiwiUGsiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiUWsiLCJ0aW1lb3V0SGFuZGxlIiwiUmsiLCJTayIsIlRrIiwiVWsiLCJWayIsIm11dGFibGVSZWFkTGFuZXMiLCJCYyIsIlBqIiwib25Db21taXRGaWJlclJvb3QiLCJtYyIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIlhrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiWWsiLCJaayIsImFsIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImJsIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImNsIiwicGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyIsImRsIiwiZmwiLCJnbCIsImhsIiwiaWwiLCJqbCIsInpqIiwiJGsiLCJsbCIsInJlcG9ydEVycm9yIiwibWwiLCJfaW50ZXJuYWxSb290IiwibmwiLCJvbCIsInBsIiwicWwiLCJzbCIsInJsIiwidW5tb3VudCIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsImZvcm0iLCJ0bCIsInVzaW5nQ2xpZW50RW50cnlQb2ludCIsIkV2ZW50cyIsInVsIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIndsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJjcmVhdGVSb290IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwiaHlkcmF0ZSIsImh5ZHJhdGVSb290IiwiaHlkcmF0ZWRTb3VyY2VzIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsImdldE1vZHVsZUlkIiwiZm9jdXNNYW5hZ2VyIiwiX1N1YnNjcmliYWJsZSIsIkZvY3VzTWFuYWdlciIsIl90aGlzIiwic2V0dXAiLCJvbkZvY3VzIiwiX3dpbmRvdyIsIl9wcm90byIsIm9uU3Vic2NyaWJlIiwiY2xlYW51cCIsInNldEV2ZW50TGlzdGVuZXIiLCJvblVuc3Vic2NyaWJlIiwiX3RoaXMkY2xlYW51cCIsImhhc0xpc3RlbmVycyIsIl90aGlzJGNsZWFudXAyIiwiX3RoaXMyIiwiZm9jdXNlZCIsInNldEZvY3VzZWQiLCJpc0ZvY3VzZWQiLCJ2aXNpYmlsaXR5U3RhdGUiLCJsb2dnZXIiLCJnZXRMb2dnZXIiLCJzZXRMb2dnZXIiLCJuZXdMb2dnZXIiLCJub3RpZnlNYW5hZ2VyIiwiTm90aWZ5TWFuYWdlciIsInRyYW5zYWN0aW9ucyIsIm5vdGlmeUZuIiwiYmF0Y2hOb3RpZnlGbiIsImJhdGNoIiwiZmx1c2giLCJzY2hlZHVsZSIsImJhdGNoQ2FsbHMiLCJfbGVuIiwiX2tleSIsIl90aGlzMyIsInNldE5vdGlmeUZ1bmN0aW9uIiwic2V0QmF0Y2hOb3RpZnlGdW5jdGlvbiIsIm9ubGluZU1hbmFnZXIiLCJPbmxpbmVNYW5hZ2VyIiwib25PbmxpbmUiLCJvbmxpbmUiLCJzZXRPbmxpbmUiLCJpc09ubGluZSIsIm9uTGluZSIsIlF1ZXJ5IiwiYWJvcnRTaWduYWxDb25zdW1lZCIsImhhZE9ic2VydmVycyIsImRlZmF1bHRPcHRpb25zIiwic2V0T3B0aW9ucyIsIm9ic2VydmVycyIsInF1ZXJ5S2V5IiwicXVlcnlIYXNoIiwiaW5pdGlhbFN0YXRlIiwiZ2V0RGVmYXVsdFN0YXRlIiwic2NoZWR1bGVHYyIsIl90aGlzJG9wdGlvbnMkY2FjaGVUaSIsImNhY2hlVGltZSIsIm1heCIsInNldERlZmF1bHRPcHRpb25zIiwiY2xlYXJHY1RpbWVvdXQiLCJnY1RpbWVvdXQiLCJvcHRpb25hbFJlbW92ZSIsImlzRmV0Y2hpbmciLCJzZXREYXRhIiwiX3RoaXMkb3B0aW9ucyRpc0RhdGFFIiwiX3RoaXMkb3B0aW9ucyIsInByZXZEYXRhIiwiaXNEYXRhRXF1YWwiLCJzdHJ1Y3R1cmFsU2hhcmluZyIsImRhdGFVcGRhdGVkQXQiLCJ1cGRhdGVkQXQiLCJzZXRTdGF0ZSIsInNldFN0YXRlT3B0aW9ucyIsIl90aGlzJHJldHJ5ZXIiLCJyZXRyeWVyIiwic2lsZW50IiwicmVzZXQiLCJpc0FjdGl2ZSIsInNvbWUiLCJvYnNlcnZlciIsImVuYWJsZWQiLCJpc1N0YWxlIiwiaXNJbnZhbGlkYXRlZCIsImdldEN1cnJlbnRSZXN1bHQiLCJpc1N0YWxlQnlUaW1lIiwic3RhbGVUaW1lIiwiX3RoaXMkcmV0cnllcjIiLCJmaW5kIiwic2hvdWxkRmV0Y2hPbldpbmRvd0ZvY3VzIiwicmVmZXRjaCIsImNvbnRpbnVlIiwiX3RoaXMkcmV0cnllcjMiLCJzaG91bGRGZXRjaE9uUmVjb25uZWN0IiwiYWRkT2JzZXJ2ZXIiLCJub3RpZnkiLCJxdWVyeSIsInJlbW92ZU9ic2VydmVyIiwiaXNUcmFuc3BvcnRDYW5jZWxhYmxlIiwicmV2ZXJ0IiwiY2FuY2VsUmV0cnkiLCJnZXRPYnNlcnZlcnNDb3VudCIsImludmFsaWRhdGUiLCJmZXRjaCIsImZldGNoT3B0aW9ucyIsIl90aGlzJG9wdGlvbnMkYmVoYXZpbyIsIl9jb250ZXh0JGZldGNoT3B0aW9ucyIsIl9hYm9ydENvbnRyb2xsZXIkYWJvciIsImNhbmNlbFJlZmV0Y2giLCJfdGhpcyRyZXRyeWVyNCIsImNvbnRpbnVlUmV0cnkiLCJxdWVyeUZuIiwiYWJvcnRDb250cm9sbGVyIiwicXVlcnlGbkNvbnRleHQiLCJwYWdlUGFyYW0iLCJfdGhpcyRvcHRpb25zJGJlaGF2aW8yIiwiX2NvbnRleHQkZmV0Y2hPcHRpb25zMiIsImZldGNoRm4iLCJiZWhhdmlvciIsIm9uRmV0Y2giLCJyZXZlcnRTdGF0ZSIsImZldGNoTWV0YSIsIm9uU3VjY2VzcyIsIm9uRmFpbCIsIm9uUGF1c2UiLCJvbkNvbnRpbnVlIiwicmV0cnkiLCJyZXRyeURlbGF5IiwicmVkdWNlciIsIm9uUXVlcnlVcGRhdGUiLCJpbml0aWFsRGF0YSIsImluaXRpYWxEYXRhVXBkYXRlZEF0IiwiaGFzRGF0YSIsImRhdGFVcGRhdGVDb3VudCIsImVycm9yVXBkYXRlQ291bnQiLCJlcnJvclVwZGF0ZWRBdCIsImZldGNoRmFpbHVyZUNvdW50IiwiaXNQYXVzZWQiLCJfYWN0aW9uJG1ldGEiLCJfYWN0aW9uJGRhdGFVcGRhdGVkQXQiLCJRdWVyeUNhY2hlIiwicXVlcmllcyIsInF1ZXJpZXNNYXAiLCJjbGllbnQiLCJfb3B0aW9ucyRxdWVyeUhhc2giLCJkZWZhdWx0UXVlcnlPcHRpb25zIiwiZ2V0UXVlcnlEZWZhdWx0cyIsInF1ZXJ5SW5NYXAiLCJjbGVhciIsImdldEFsbCIsImFyZzEiLCJhcmcyIiwiZmlsdGVycyIsImV4YWN0IiwiZmluZEFsbCIsIl90aGlzNCIsIl90aGlzNSIsIk11dGF0aW9uIiwibXV0YXRpb25JZCIsIm11dGF0aW9uQ2FjaGUiLCJmYWlsdXJlQ291bnQiLCJ2YXJpYWJsZXMiLCJleGVjdXRlIiwicmVzdG9yZWQiLCJvbk11dGF0ZSIsImV4ZWN1dGVNdXRhdGlvbiIsIm9uU2V0dGxlZCIsIl90aGlzJG9wdGlvbnMkcmV0cnkiLCJtdXRhdGlvbkZuIiwib25NdXRhdGlvblVwZGF0ZSIsIk11dGF0aW9uQ2FjaGUiLCJtdXRhdGlvbnMiLCJtdXRhdGlvbiIsImRlZmF1bHRNdXRhdGlvbk9wdGlvbnMiLCJtdXRhdGlvbktleSIsImdldE11dGF0aW9uRGVmYXVsdHMiLCJyZXN1bWVQYXVzZWRNdXRhdGlvbnMiLCJwYXVzZWRNdXRhdGlvbnMiLCJyZWR1Y2UiLCJnZXROZXh0UGFnZVBhcmFtIiwicGFnZXMiLCJRdWVyeUNsaWVudCIsInF1ZXJ5Q2FjaGUiLCJxdWVyeURlZmF1bHRzIiwibXV0YXRpb25EZWZhdWx0cyIsIm1vdW50IiwidW5zdWJzY3JpYmVGb2N1cyIsInVuc3Vic2NyaWJlT25saW5lIiwiX3RoaXMkdW5zdWJzY3JpYmVGb2N1IiwiX3RoaXMkdW5zdWJzY3JpYmVPbmxpIiwiZmV0Y2hpbmciLCJpc011dGF0aW5nIiwiZ2V0UXVlcnlEYXRhIiwiX3RoaXMkcXVlcnlDYWNoZSRmaW5kIiwiZ2V0UXVlcmllc0RhdGEiLCJxdWVyeUtleU9yRmlsdGVycyIsImdldFF1ZXJ5Q2FjaGUiLCJtYXAiLCJfcmVmIiwic2V0UXVlcnlEYXRhIiwicGFyc2VkT3B0aW9ucyIsImRlZmF1bHRlZE9wdGlvbnMiLCJzZXRRdWVyaWVzRGF0YSIsIl9yZWYyIiwiZ2V0UXVlcnlTdGF0ZSIsIl90aGlzJHF1ZXJ5Q2FjaGUkZmluZDIiLCJyZW1vdmVRdWVyaWVzIiwicmVzZXRRdWVyaWVzIiwiYXJnMyIsIl9wYXJzZUZpbHRlckFyZ3MzIiwicmVmZXRjaEZpbHRlcnMiLCJhY3RpdmUiLCJyZWZldGNoUXVlcmllcyIsImNhbmNlbFF1ZXJpZXMiLCJfcGFyc2VGaWx0ZXJBcmdzNCIsIl9wYXJzZUZpbHRlckFyZ3M0JCIsImNhbmNlbE9wdGlvbnMiLCJpbnZhbGlkYXRlUXVlcmllcyIsIl9yZWYzIiwiX2ZpbHRlcnMkcmVmZXRjaEFjdGl2IiwiX2ZpbHRlcnMkcmVmZXRjaEluYWN0IiwiX3BhcnNlRmlsdGVyQXJnczUiLCJyZWZldGNoQWN0aXZlIiwiaW5hY3RpdmUiLCJyZWZldGNoSW5hY3RpdmUiLCJfdGhpczYiLCJfcGFyc2VGaWx0ZXJBcmdzNiIsInJlZmV0Y2hQYWdlIiwidGhyb3dPbkVycm9yIiwiZmV0Y2hRdWVyeSIsInByZWZldGNoUXVlcnkiLCJmZXRjaEluZmluaXRlUXVlcnkiLCJfY29udGV4dCRmZXRjaE9wdGlvbnMzIiwiX2NvbnRleHQkZmV0Y2hPcHRpb25zNCIsIl9jb250ZXh0JHN0YXRlJGRhdGEiLCJfY29udGV4dCRzdGF0ZSRkYXRhMiIsImZldGNoTW9yZSIsImlzRmV0Y2hpbmdOZXh0UGFnZSIsImRpcmVjdGlvbiIsImlzRmV0Y2hpbmdQcmV2aW91c1BhZ2UiLCJvbGRQYWdlcyIsIm9sZFBhZ2VQYXJhbXMiLCJwYWdlUGFyYW1zIiwiYWJvcnRTaWduYWwiLCJuZXdQYWdlUGFyYW1zIiwiY2FuY2VsbGVkIiwiYnVpbGROZXdQYWdlcyIsInBhZ2UiLCJwcmV2aW91cyIsImZldGNoUGFnZSIsIm1hbnVhbCIsInF1ZXJ5Rm5SZXN1bHQiLCJfbWFudWFsIiwiX3BhcmFtIiwiZ2V0UHJldmlvdXNQYWdlUGFyYW0iLCJzaG91bGRGZXRjaEZpcnN0UGFnZSIsIl9sb29wIiwiX3BhcmFtMiIsImZpbmFsUHJvbWlzZSIsInByZWZldGNoSW5maW5pdGVRdWVyeSIsImNhbmNlbE11dGF0aW9ucyIsIl90aGlzNyIsImdldE11dGF0aW9uQ2FjaGUiLCJnZXREZWZhdWx0T3B0aW9ucyIsInNldFF1ZXJ5RGVmYXVsdHMiLCJfdGhpcyRxdWVyeURlZmF1bHRzJGYiLCJzZXRNdXRhdGlvbkRlZmF1bHRzIiwiX3RoaXMkbXV0YXRpb25EZWZhdWx0IiwiX2RlZmF1bHRlZCIsImRlZmF1bHRRdWVyeU9ic2VydmVyT3B0aW9ucyIsImRlZmF1bHRSZXRyeURlbGF5IiwicG93IiwiaXNDYW5jZWxhYmxlIiwiQ2FuY2VsbGVkRXJyb3IiLCJpc0NhbmNlbGxlZEVycm9yIiwiUmV0cnllciIsImNhbmNlbEZuIiwiY29udGludWVGbiIsInByb21pc2VSZXNvbHZlIiwicHJvbWlzZVJlamVjdCIsImlzUmVzb2x2ZWQiLCJvdXRlclJlc29sdmUiLCJvdXRlclJlamVjdCIsInJ1biIsInByb21pc2VPclZhbHVlIiwiX3VudXNlZCIsIl9jb25maWckcmV0cnkiLCJfY29uZmlnJHJldHJ5RGVsYXkiLCJkZWxheSIsInNob3VsZFJldHJ5IiwiY29udGludWVSZXNvbHZlIiwiU3Vic2NyaWJhYmxlIiwiaXNTZXJ2ZXIiLCJub29wIiwiZnVuY3Rpb25hbFVwZGF0ZSIsImlzVmFsaWRUaW1lb3V0IiwiZW5zdXJlUXVlcnlLZXlBcnJheSIsInRpbWVVbnRpbFN0YWxlIiwicGFyc2VRdWVyeUFyZ3MiLCJpc1F1ZXJ5S2V5IiwicGFyc2VGaWx0ZXJBcmdzIiwibWF0Y2hRdWVyeSIsInByZWRpY2F0ZSIsInN0YWxlIiwiaGFzaFF1ZXJ5S2V5QnlPcHRpb25zIiwicGFydGlhbE1hdGNoS2V5IiwicXVlcnlTdGF0dXNGaWx0ZXIiLCJtYXBRdWVyeVN0YXR1c0ZpbHRlciIsIm1hdGNoTXV0YXRpb24iLCJoYXNoUXVlcnlLZXkiLCJxdWVyeUtleUhhc2hGbiIsIl8iLCJzb3J0IiwicGFydGlhbERlZXBFcXVhbCIsInJlcGxhY2VFcXVhbERlZXAiLCJhcnJheSIsImFTaXplIiwiYkl0ZW1zIiwiYlNpemUiLCJjb3B5IiwiZXF1YWxJdGVtcyIsInNoYWxsb3dFcXVhbE9iamVjdHMiLCJvIiwiaGFzT2JqZWN0UHJvdG90eXBlIiwiY3RvciIsInByb3QiLCJzbGVlcCIsInNjaGVkdWxlTWljcm90YXNrIiwiZ2V0QWJvcnRDb250cm9sbGVyIiwiQWJvcnRDb250cm9sbGVyIiwiZGVmYXVsdENvbnRleHQiLCJRdWVyeUNsaWVudFNoYXJpbmdDb250ZXh0IiwiZ2V0UXVlcnlDbGllbnRDb250ZXh0IiwiY29udGV4dFNoYXJpbmciLCJSZWFjdFF1ZXJ5Q2xpZW50Q29udGV4dCIsIlF1ZXJ5Q2xpZW50UHJvdmlkZXIiLCJfcmVmJGNvbnRleHRTaGFyaW5nIiwiQ29udGV4dCIsIlByb3ZpZGVyIiwiUXVlcnlPYnNlcnZlciIsInRyYWNrZWRQcm9wcyIsInNlbGVjdEVycm9yIiwiYmluZE1ldGhvZHMiLCJjdXJyZW50UXVlcnkiLCJzaG91bGRGZXRjaE9uTW91bnQiLCJleGVjdXRlRmV0Y2giLCJ1cGRhdGVUaW1lcnMiLCJzaG91bGRGZXRjaE9uIiwicmVmZXRjaE9uUmVjb25uZWN0IiwicmVmZXRjaE9uV2luZG93Rm9jdXMiLCJjbGVhclRpbWVycyIsIm5vdGlmeU9wdGlvbnMiLCJwcmV2T3B0aW9ucyIsInByZXZRdWVyeSIsInVwZGF0ZVF1ZXJ5IiwibW91bnRlZCIsInNob3VsZEZldGNoT3B0aW9uYWxseSIsInVwZGF0ZVJlc3VsdCIsInVwZGF0ZVN0YWxlVGltZW91dCIsIm5leHRSZWZldGNoSW50ZXJ2YWwiLCJjb21wdXRlUmVmZXRjaEludGVydmFsIiwiY3VycmVudFJlZmV0Y2hJbnRlcnZhbCIsInVwZGF0ZVJlZmV0Y2hJbnRlcnZhbCIsImdldE9wdGltaXN0aWNSZXN1bHQiLCJjcmVhdGVSZXN1bHQiLCJjdXJyZW50UmVzdWx0IiwidHJhY2tSZXN1bHQiLCJ0cmFja2VkUmVzdWx0IiwidHJhY2tQcm9wIiwidXNlRXJyb3JCb3VuZGFyeSIsInN1c3BlbnNlIiwiZ2V0TmV4dFJlc3VsdCIsImlzRXJyb3IiLCJnZXRDdXJyZW50UXVlcnkiLCJmZXRjaE9wdGltaXN0aWMiLCJjbGVhclN0YWxlVGltZW91dCIsInN0YWxlVGltZW91dElkIiwiX3RoaXMkb3B0aW9ucyRyZWZldGNoIiwicmVmZXRjaEludGVydmFsIiwibmV4dEludGVydmFsIiwiY2xlYXJSZWZldGNoSW50ZXJ2YWwiLCJyZWZldGNoSW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwicmVmZXRjaEludGVydmFsSW5CYWNrZ3JvdW5kIiwiY2xlYXJJbnRlcnZhbCIsInByZXZSZXN1bHQiLCJwcmV2UmVzdWx0U3RhdGUiLCJjdXJyZW50UmVzdWx0U3RhdGUiLCJwcmV2UmVzdWx0T3B0aW9ucyIsImN1cnJlbnRSZXN1bHRPcHRpb25zIiwicXVlcnlDaGFuZ2UiLCJxdWVyeUluaXRpYWxTdGF0ZSIsImN1cnJlbnRRdWVyeUluaXRpYWxTdGF0ZSIsInByZXZRdWVyeVJlc3VsdCIsInByZXZpb3VzUXVlcnlSZXN1bHQiLCJpc1ByZXZpb3VzRGF0YSIsImlzUGxhY2Vob2xkZXJEYXRhIiwib3B0aW1pc3RpY1Jlc3VsdHMiLCJmZXRjaE9uTW91bnQiLCJmZXRjaE9wdGlvbmFsbHkiLCJrZWVwUHJldmlvdXNEYXRhIiwiaXNTdWNjZXNzIiwic2VsZWN0Iiwic2VsZWN0Rm4iLCJzZWxlY3RSZXN1bHQiLCJwbGFjZWhvbGRlckRhdGEiLCJpc0xvYWRpbmciLCJpc0lkbGUiLCJpc0ZldGNoZWQiLCJpc0ZldGNoZWRBZnRlck1vdW50IiwiaXNSZWZldGNoaW5nIiwiaXNMb2FkaW5nRXJyb3IiLCJpc1JlZmV0Y2hFcnJvciIsInNob3VsZE5vdGlmeUxpc3RlbmVycyIsIm5vdGlmeU9uQ2hhbmdlUHJvcHMiLCJub3RpZnlPbkNoYW5nZVByb3BzRXhjbHVzaW9ucyIsImluY2x1ZGVkUHJvcHMiLCJ0eXBlZEtleSIsImNoYW5nZWQiLCJpc0luY2x1ZGVkIiwiaXNFeGNsdWRlZCIsImRlZmF1bHROb3RpZnlPcHRpb25zIiwiX3RoaXM4IiwicmV0cnlPbk1vdW50Iiwic2hvdWxkTG9hZE9uTW91bnQiLCJyZWZldGNoT25Nb3VudCIsImZpZWxkIiwiX2lzUmVzZXQiLCJRdWVyeUVycm9yUmVzZXRCb3VuZGFyeUNvbnRleHQiLCJjbGVhclJlc2V0IiwiaXNSZXNldCIsInVzZVF1ZXJ5IiwiT2JzZXJ2ZXIiLCJtb3VudGVkUmVmIiwiZm9yY2VVcGRhdGUiLCJxdWVyeUNsaWVudCIsInVzZVF1ZXJ5Q2xpZW50IiwiZXJyb3JSZXNldEJvdW5kYXJ5IiwiX3VzZUVycm9yQm91bmRhcnkiLCJ1c2VCYXNlUXVlcnkiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiZGVmYXVsdCIsIkNoaWxkcmVuIiwiY291bnQiLCJvbmx5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0Iiwic29ydEluZGV4IiwicGVyZm9ybWFuY2UiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIm9iakEiLCJvYmpCIiwiY29tcGFyZUNvbnRleHQiLCJyZXQiLCJrZXlzQSIsImtleXNCIiwiYkhhc093blByb3BlcnR5IiwiaWR4IiwidmFsdWVBIiwidmFsdWVCIiwiaW5zdCIsInVzZVN5bmNFeHRlcm5hbFN0b3JlV2l0aFNlbGVjdG9yIiwiaGFzVmFsdWUiLCJfZXh0ZW5kcyIsIl9zZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJnZXRCYXRjaCIsInJlZkVxdWFsaXR5IiwiY3JlYXRlU2VsZWN0b3JIb29rIiwidXNlUmVkdXhDb250ZXh0Iiwic2VsZWN0b3IiLCJlcXVhbGl0eUZuIiwic3RvcmUiLCJzdWJzY3JpcHRpb24iLCJnZXRTZXJ2ZXJTdGF0ZSIsInNlbGVjdGVkU3RhdGUiLCJhZGROZXN0ZWRTdWIiLCJnZXRTdGF0ZSIsInVzZVNlbGVjdG9yIiwibnVsbExpc3RlbmVycyIsImNyZWF0ZVN0b3JlSG9vayIsImNyZWF0ZURpc3BhdGNoSG9vayIsInVzZVN0b3JlIiwidXNlRGlzcGF0Y2giLCJuZXdCYXRjaCIsImluaXRpYWxpemVVc2VTZWxlY3RvciIsImluaXRpYWxpemVDb25uZWN0IiwicHJlZml4IiwibXNHcmlkUm93IiwibXNHcmlkUm93U3BhbiIsIm1zR3JpZENvbHVtbiIsIm1zR3JpZENvbHVtblNwYW4iLCJXZWJraXRMaW5lQ2xhbXAiLCJhcmciLCJyZWFjdFByb3BzUmVnZXgiLCJmcmVlemUiLCJzdHlsZWRDb21wb25lbnRJZCIsIlJFQUNUX0FQUF9TQ19BVFRSIiwiU0NfQVRUUiIsIkJvb2xlYW4iLCJTQ19ESVNBQkxFX1NQRUVEWSIsIlJFQUNUX0FQUF9TQ19ESVNBQkxFX1NQRUVEWSIsImoiLCJncm91cFNpemVzIiwiVWludDMyQXJyYXkiLCJpbmRleE9mR3JvdXAiLCJpbnNlcnRSdWxlcyIsInMiLCJpbnNlcnRSdWxlIiwiY2xlYXJHcm91cCIsImRlbGV0ZVJ1bGUiLCJnZXRHcm91cCIsImdldFJ1bGUiLCJyZWdpc3Rlck5hbWUiLCJwYXJzZUludCIsImdldFRhZyIsIl9fd2VicGFja19ub25jZV9fIiwiaGVhZCIsImNoaWxkTm9kZXMiLCJoYXNBdHRyaWJ1dGUiLCIkIiwic2hlZXQiLCJzdHlsZVNoZWV0cyIsIm93bmVyTm9kZSIsImNzc1J1bGVzIiwiY3NzVGV4dCIsIm5vZGVzIiwicnVsZXMiLCJ1c2VDU1NPTUluamVjdGlvbiIsImdzIiwibmFtZXMiLCJzZXJ2ZXIiLCJnZXRBdHRyaWJ1dGUiLCJyZWdpc3RlcklkIiwicmVjb25zdHJ1Y3RXaXRoT3B0aW9ucyIsImFsbG9jYXRlR1NJbnN0YW5jZSIsImhhc05hbWVGb3JJZCIsImNsZWFyTmFtZXMiLCJjbGVhclJ1bGVzIiwiY2xlYXJUYWciLCJhYnMiLCJzdGF0aWNSdWxlc0lkIiwiaXNTdGF0aWMiLCJjb21wb25lbnRJZCIsImJhc2VIYXNoIiwiYmFzZVN0eWxlIiwiZ2VuZXJhdGVBbmRJbmplY3RTdHlsZXMiLCJwbHVnaW5zIiwibGFzdEluZGV4T2YiLCJzdHlsaXNQbHVnaW5zIiwiZGlzYWJsZUNTU09NSW5qZWN0aW9uIiwiZGlzYWJsZVZlbmRvclByZWZpeGVzIiwiZ2V0TmFtZSIsIl9lIiwiaXNDc3MiLCJ0aGVtZSIsIkdlIiwiYXR0cnMiLCJwYXJlbnRDb21wb25lbnRJZCIsInNob3VsZEZvcndhcmRQcm9wIiwiY29tcG9uZW50U3R5bGUiLCJmb2xkZWRDb21wb25lbnRJZHMiLCIkYXMiLCJhcyIsImNsYXNzTmFtZSIsIndpdGhDb21wb25lbnQiLCJfZm9sZGVkRGVmYXVsdFByb3BzIiwid2l0aENvbmZpZyIsImNyZWF0ZVN0eWxlcyIsInJlbW92ZVN0eWxlcyIsInJlbmRlclN0eWxlcyIsIl9lbWl0U2hlZXRDU1MiLCJnZXRTdHlsZVRhZ3MiLCJzZWFsZWQiLCJnZXRTdHlsZUVsZW1lbnQiLCJub25jZSIsInNlYWwiLCJjb2xsZWN0U3R5bGVzIiwiaW50ZXJsZWF2ZVdpdGhOb2RlU3RyZWFtIiwiR2xvYmFsU3R5bGUiLCJBY3Rpb24iLCJCZWZvcmVVbmxvYWRFdmVudFR5cGUiLCJwcm9tcHRCZWZvcmVVbmxvYWQiLCJjcmVhdGVFdmVudHMiLCJoYW5kbGVyIiwicGFyc2VkUGF0aCIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwiTmF2aWdhdGlvbkNvbnRleHQiLCJMb2NhdGlvbkNvbnRleHQiLCJSb3V0ZUNvbnRleHQiLCJvdXRsZXQiLCJtYXRjaGVzIiwiaW52YXJpYW50IiwiY29uZCIsIm1hdGNoUm91dGVzIiwicm91dGVzIiwibG9jYXRpb25BcmciLCJiYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzY29yZSIsInNpYmxpbmdzIiwiZXZlcnkiLCJjb21wYXJlSW5kZXhlcyIsInJvdXRlc01ldGEiLCJjaGlsZHJlbkluZGV4IiwicmFua1JvdXRlQnJhbmNoZXMiLCJtYXRjaFJvdXRlQnJhbmNoIiwicGFyZW50c01ldGEiLCJwYXJlbnRQYXRoIiwicm91dGUiLCJyZWxhdGl2ZVBhdGgiLCJjYXNlU2Vuc2l0aXZlIiwic3RhcnRzV2l0aCIsImpvaW5QYXRocyIsImNvbXB1dGVTY29yZSIsInBhcmFtUmUiLCJpc1NwbGF0Iiwic2VnbWVudHMiLCJpbml0aWFsU2NvcmUiLCJzZWdtZW50IiwiYnJhbmNoIiwibWF0Y2hlZFBhcmFtcyIsIm1hdGNoZWRQYXRobmFtZSIsInJlbWFpbmluZ1BhdGhuYW1lIiwibWF0Y2hQYXRoIiwicGF0aG5hbWVCYXNlIiwibm9ybWFsaXplUGF0aG5hbWUiLCJtYXRjaGVyIiwicGFyYW1OYW1lcyIsInJlZ2V4cFNvdXJjZSIsInBhcmFtTmFtZSIsImNvbXBpbGVQYXRoIiwiY2FwdHVyZUdyb3VwcyIsInNwbGF0VmFsdWUiLCJzYWZlbHlEZWNvZGVVUklDb21wb25lbnQiLCJuZXh0Q2hhciIsInBhdGhzIiwibm9ybWFsaXplU2VhcmNoIiwibm9ybWFsaXplSGFzaCIsInVzZUluUm91dGVyQ29udGV4dCIsImxvY2F0aW9uUGF0aG5hbWUiLCJyb3V0ZVBhdGhuYW1lc0pzb24iLCJhY3RpdmVSZWYiLCJ0byIsImdvIiwidG9BcmciLCJyb3V0ZVBhdGhuYW1lcyIsInRvUGF0aG5hbWUiLCJyb3V0ZVBhdGhuYW1lSW5kZXgiLCJ0b1NlZ21lbnRzIiwiZnJvbVBhdGhuYW1lIiwicmVzb2x2ZVBhdGhuYW1lIiwicmVzb2x2ZVBhdGgiLCJyZXNvbHZlVG8iLCJPdXRsZXRDb250ZXh0IiwiTmF2aWdhdGUiLCJuYXZpZ2F0ZSIsIk91dGxldCIsInVzZU91dGxldCIsIlJvdXRlIiwiX3Byb3BzIiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwibmF2aWdhdGlvblR5cGUiLCJQb3AiLCJzdGF0aWMiLCJzdGF0aWNQcm9wIiwibmF2aWdhdGlvbkNvbnRleHQiLCJ0cmFpbGluZ1BhdGhuYW1lIiwiUm91dGVzIiwiX3JlZjQiLCJwYXJlbnRNYXRjaGVzIiwicm91dGVNYXRjaCIsInBhcmVudFBhcmFtcyIsInBhcmVudFBhdGhuYW1lQmFzZSIsImxvY2F0aW9uRnJvbUNvbnRleHQiLCJfcGFyc2VkTG9jYXRpb25BcmckcGEiLCJwYXJzZWRMb2NhdGlvbkFyZyIsInJlZHVjZVJpZ2h0IiwiX3JlbmRlck1hdGNoZXMiLCJ1c2VSb3V0ZXMiLCJjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4iLCJCcm93c2VyUm91dGVyIiwiaGlzdG9yeVJlZiIsIl9vcHRpb25zJHdpbmRvdyIsImdsb2JhbEhpc3RvcnkiLCJoaXN0b3J5IiwiZ2V0SW5kZXhBbmRMb2NhdGlvbiIsIl93aW5kb3ckbG9jYXRpb24iLCJ1c3IiLCJibG9ja2VkUG9wVHgiLCJibG9ja2VycyIsIm5leHRBY3Rpb24iLCJfZ2V0SW5kZXhBbmRMb2NhdGlvbiIsIm5leHRJbmRleCIsIm5leHRMb2NhdGlvbiIsImRlbHRhIiwiYXBwbHlUeCIsIl9nZXRJbmRleEFuZExvY2F0aW9uMiIsImNyZWF0ZUhyZWYiLCJfcmVmJHBhdGhuYW1lIiwiX3JlZiRzZWFyY2giLCJfcmVmJGhhc2giLCJnZXROZXh0TG9jYXRpb24iLCJnZXRIaXN0b3J5U3RhdGVBbmRVcmwiLCJhbGxvd1R4IiwiX2dldEluZGV4QW5kTG9jYXRpb24zIiwicmVwbGFjZVN0YXRlIiwiUHVzaCIsIl9nZXRIaXN0b3J5U3RhdGVBbmRVciIsImhpc3RvcnlTdGF0ZSIsInB1c2hTdGF0ZSIsIlJlcGxhY2UiLCJfZ2V0SGlzdG9yeVN0YXRlQW5kVXIyIiwiYmFjayIsImZvcndhcmQiLCJsaXN0ZW4iLCJibG9jayIsImJsb2NrZXIiLCJ1bmJsb2NrIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJTdHlsZWRDYXJkIiwicmVzdCIsIkNhcmQiLCJTdHlsZWRCdXR0b24iLCJTdHlsZWRWYWxpZGF0aW9uRXJyb3IiLCJTdHlsZWRJbnB1dCIsIiRoYXNFcnJvciIsIlN0eWxlZEZvcm1JbnB1dENvbnRhaW5lciIsImVycm9yTWVzc2FnZSIsImlucHV0UHJvcHMiLCJTdHlsZWRMb2dpbkVycm9yIiwiY2hlY2tJZlZhbHVlRW1wdHkiLCJhdXRoQ3R4Iiwic2V0VXNlcm5hbWUiLCJzZXRQYXNzd29yZCIsInVzZXJuYW1lRXJyb3IiLCJzZXRVc2VybmFtZUVycm9yIiwicGFzc3dvcmRFcnJvciIsInNldFBhc3N3b3JkRXJyb3IiLCJpc0Zvcm1WYWxpZCIsInNldElzRm9ybVZhbGlkIiwib25JbnB1dENoYW5nZUhhbmRsZXIiLCJpc1VzZXJuYW1lRW1wdHkiLCJpc1Bhc3N3b3JkRW1wdHkiLCJ2YWxpZGF0ZUZvcm0iLCJsb2dpbkVycm9yIiwib25TdWJtaXQiLCJsb2dpbiIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJ0aXRsZSIsIlN0eWxlZExvZ2luQmFja2dyb3VuZCIsIlN0eWxlZExvZ2luQ2FyZENvbnRhaW5lciIsIlN0eWxlZExvZ2luSGVhZGVyIiwiaXNMb2dnZWRJbiIsImp1c3RpZnlDb250ZW50IiwiZmxleERpcmVjdGlvbiIsImFsaWduSXRlbXMiLCJTdHlsZWRMb2dvdXRCYWNrZ3JvdW5kIiwiU3R5bGVkTG9nb3V0Q2FyZENvbnRhaW5lciIsIlN0eWxlZExvZ291dEhlYWRlciIsInhtbG5zIiwidmlld0JveCIsImZpbGwiLCJTdHlsZWRQYWdlSGVhZGVyIiwiU3R5bGVkUG9wb3ZlciIsImxvZ291dCIsImlzTWVudU9wZW4iLCJzZXRJc01lbnVPcGVuIiwiaGFuZGxlQ2xpY2siLCJGdW5jdGlvbiIsIm5uIiwicm4iLCJ3cml0YWJsZSIsImlzRnJvemVuIiwidG4iLCJlbiIsIm9uIiwiUHJveHkiLCJyZXZvY2FibGUiLCJyZXZva2UiLCJwcm94eSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVsZXRlUHJvcGVydHkiLCJ1biIsInByb2R1Y2UiLCJwcm9kdWNlV2l0aFBhdGNoZXMiLCJ1c2VQcm94aWVzIiwic2V0VXNlUHJveGllcyIsImF1dG9GcmVlemUiLCJzZXRBdXRvRnJlZXplIiwiY3JlYXRlRHJhZnQiLCJmaW5pc2hEcmFmdCIsImFwcGx5UGF0Y2hlcyIsIm9wIiwiYW4iLCJfZGVmaW5lUHJvcGVydHkiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCIkJG9ic2VydmFibGUiLCJvYnNlcnZhYmxlIiwicmFuZG9tU3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwicHJvdG8iLCJjcmVhdGVTdG9yZSIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJpc1N1YnNjcmliZWQiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlU3RhdGUiLCJjb21wb3NlIiwiZnVuY3MiLCJhcHBseU1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlcyIsIl9kaXNwYXRjaCIsIm1pZGRsZXdhcmVBUEkiLCJtaWRkbGV3YXJlIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwiX18iLCJfX3NwcmVhZEFycmF5IiwiX19kZWZQcm9wIiwiX19nZXRPd25Qcm9wU3ltYm9scyIsIl9faGFzT3duUHJvcCIsIl9fcHJvcElzRW51bSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19kZWZOb3JtYWxQcm9wIiwiX19zcHJlYWRWYWx1ZXMiLCJfaSIsIl9jIiwiY29tcG9zZVdpdGhEZXZUb29scyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX0NPTVBPU0VfXyIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18iLCJNaWRkbGV3YXJlQXJyYXkiLCJfc3VwZXIiLCJzcGVjaWVzIiwicHJlcGVuZCIsImZyZWV6ZURyYWZ0YWJsZSIsImNyZWF0ZUFjdGlvbiIsInByZXBhcmVBY3Rpb24iLCJhY3Rpb25DcmVhdG9yIiwicHJlcGFyZWQiLCJleGVjdXRlUmVkdWNlckJ1aWxkZXJDYWxsYmFjayIsImJ1aWxkZXJDYWxsYmFjayIsImRlZmF1bHRDYXNlUmVkdWNlciIsImFjdGlvbnNNYXAiLCJhY3Rpb25NYXRjaGVycyIsImJ1aWxkZXIiLCJhZGRDYXNlIiwidHlwZU9yQWN0aW9uQ3JlYXRvciIsImFkZE1hdGNoZXIiLCJhZGREZWZhdWx0Q2FzZSIsImFsbSIsInNvcnRTbGljZSIsIl9yZWR1Y2VyIiwicmVkdWNlcnMiLCJyZWR1Y2VyTmFtZXMiLCJzbGljZUNhc2VSZWR1Y2Vyc0J5TmFtZSIsInNsaWNlQ2FzZVJlZHVjZXJzQnlUeXBlIiwiYWN0aW9uQ3JlYXRvcnMiLCJidWlsZFJlZHVjZXIiLCJleHRyYVJlZHVjZXJzIiwiX2QiLCJfZiIsImZpbmFsQ2FzZVJlZHVjZXJzIiwibWFwT3JCdWlsZGVyQ2FsbGJhY2siLCJnZXRJbml0aWFsU3RhdGUiLCJmaW5hbEFjdGlvbk1hdGNoZXJzIiwiZmluYWxEZWZhdWx0Q2FzZVJlZHVjZXIiLCJpc1N0YXRlRnVuY3Rpb24iLCJmcm96ZW5Jbml0aWFsU3RhdGVfMSIsImNhc2VSZWR1Y2VycyIsImNyIiwicHJldmlvdXNTdGF0ZSIsImNhc2VSZWR1Y2VyIiwiZHJhZnQiLCJjcmVhdGVSZWR1Y2VyIiwicmVkdWNlck5hbWUiLCJwcmVwYXJlQ2FsbGJhY2siLCJtYXliZVJlZHVjZXJXaXRoUHJlcGFyZSIsInByZXBhcmUiLCJhY3Rpb25zIiwiY3JlYXRlU2xpY2UiLCJzb3J0UGFyYW1zIiwib3JkZXJCeSIsImNvbHVtbiIsInNvcnRBY3Rpb25zIiwiU3R5bGVkVGFibGVIZWFkZXIiLCJTdHlsZWRBcnJvd0NvbnRhaW5lciIsIiRpc0FzY2VuZGluZyIsIiRpc1Zpc2libGUiLCJTdHlsZWRBcnJvd1VwIiwiZm9udFNpemUiLCJTdHlsZWRUYWJsZSIsInVzZUdldFNlcnZlckxpc3QiLCJhc3luYyIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsImdldFNlcnZlckxpc3QiLCJzb3J0T3JkZXIiLCJ0b2dnbGVTb3J0SGFuZGxlciIsInNvcnRlZERhdGEiLCJkaXN0YW5jZSIsIlN0eWxlZEJhY2tncm91bmQiLCJTdHlsZWRTZXJ2ZXJMaXN0Q29udGFpbmVyIiwiQXBwUm91dGVyIiwiQXV0aENvbnRleHRQcm92aWRlciIsInNldFRva2VuIiwic2V0TG9naW5FcnJvciIsInJlcyIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwic29ydFN0b3JlIiwicm9vdFJlZHVjZXIiLCJjdXJyaWVkR2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJtaWRkbGV3YXJlQXJyYXkiLCJpbW11dGFibGVDaGVjayIsInNlcmlhbGl6YWJsZUNoZWNrIiwiaXNCb29sZWFuIiwiZ2V0RGVmYXVsdE1pZGRsZXdhcmUiLCJkZXZUb29scyIsIl9nIiwiX2giLCJlbmhhbmNlcnMiLCJiYXNlUHJvdG8iLCJyZWR1Y2VyS2V5cyIsImZpbmFsUmVkdWNlcnMiLCJzaGFwZUFzc2VydGlvbkVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImFzc2VydFJlZHVjZXJTaGFwZSIsImhhc0NoYW5nZWQiLCJuZXh0U3RhdGUiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiY29tYmluZVJlZHVjZXJzIiwiZmluYWxNaWRkbGV3YXJlIiwibWlkZGxld2FyZUVuaGFuY2VyIiwiZmluYWxDb21wb3NlIiwidHJhY2UiLCJzdG9yZUVuaGFuY2VycyIsImNvbmZpZ3VyZVN0b3JlIiwiZ2V0RWxlbWVudEJ5SWQiLCJzZXJ2ZXJTdGF0ZSIsImNvbnRleHRWYWx1ZSIsInBhcmVudFN1YiIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJvblN0YXRlQ2hhbmdlIiwidHJ5U3Vic2NyaWJlIiwiZmlyc3QiLCJwcmV2IiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwibm90aWZ5TmVzdGVkU3VicyIsInRyeVVuc3Vic2NyaWJlIiwiZ2V0TGlzdGVuZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==